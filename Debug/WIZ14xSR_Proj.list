
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e64  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004168  08004168  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004168  08004168  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000070  080041e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080041e0  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c07d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccf  00000000  00000000  0002c116  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  0002dde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a83d  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a06d  00000000  00000000  00049e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099874  00000000  00000000  00053efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  000ed7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004030 	.word	0x08004030

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004030 	.word	0x08004030

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	230a      	movs	r3, #10
 8000246:	68b9      	ldr	r1, [r7, #8]
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <_write+0x24>)
 800024a:	f002 fa6e 	bl	800272a <HAL_UART_Transmit>
	return len;
 800024e:	687b      	ldr	r3, [r7, #4]
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000024c 	.word	0x2000024c

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fdc4 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f89e 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 fa00 	bl	800066c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800026c:	f000 f9aa 	bl	80005c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000270:	f000 f8de 	bl	8000430 <MX_TIM2_Init>
  MX_UART4_Init();
 8000274:	f000 f928 	bl	80004c8 <MX_UART4_Init>
  MX_UART5_Init();
 8000278:	f000 f950 	bl	800051c <MX_UART5_Init>
  MX_USART1_UART_Init();
 800027c:	f000 f978 	bl	8000570 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000280:	f000 f9ca 	bl	8000618 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000284:	4839      	ldr	r0, [pc, #228]	; (800036c <main+0x110>)
 8000286:	f001 fe31 	bl	8001eec <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 800028a:	4b39      	ldr	r3, [pc, #228]	; (8000370 <main+0x114>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0fb      	beq.n	800028a <main+0x2e>
	  {
		  onesecondElapsed = 0;
 8000292:	4b37      	ldr	r3, [pc, #220]	; (8000370 <main+0x114>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 8000298:	4b36      	ldr	r3, [pc, #216]	; (8000374 <main+0x118>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3301      	adds	r3, #1
 800029e:	b2da      	uxtb	r2, r3
 80002a0:	4b34      	ldr	r3, [pc, #208]	; (8000374 <main+0x118>)
 80002a2:	701a      	strb	r2, [r3, #0]
		  printf("count: %d\r\n", count);	// print count
 80002a4:	4b33      	ldr	r3, [pc, #204]	; (8000374 <main+0x118>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4833      	ldr	r0, [pc, #204]	; (8000378 <main+0x11c>)
 80002ac:	f002 fe0e 	bl	8002ecc <iprintf>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	4832      	ldr	r0, [pc, #200]	; (800037c <main+0x120>)
 80002b4:	f001 f994 	bl	80015e0 <HAL_GPIO_TogglePin>
		  memset(msg, 0, 100);
 80002b8:	2264      	movs	r2, #100	; 0x64
 80002ba:	2100      	movs	r1, #0
 80002bc:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x124>)
 80002be:	f002 fdfd 	bl	8002ebc <memset>
		  sprintf((char *)msg, "UART1, count: %d\r\n", count);
 80002c2:	4b2c      	ldr	r3, [pc, #176]	; (8000374 <main+0x118>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	461a      	mov	r2, r3
 80002c8:	492e      	ldr	r1, [pc, #184]	; (8000384 <main+0x128>)
 80002ca:	482d      	ldr	r0, [pc, #180]	; (8000380 <main+0x124>)
 80002cc:	f002 fe16 	bl	8002efc <siprintf>
		  HAL_UART_Transmit(&huart1, msg, strlen((const char*)msg), 10);
 80002d0:	482b      	ldr	r0, [pc, #172]	; (8000380 <main+0x124>)
 80002d2:	f7ff ffa7 	bl	8000224 <strlen>
 80002d6:	4603      	mov	r3, r0
 80002d8:	b29a      	uxth	r2, r3
 80002da:	230a      	movs	r3, #10
 80002dc:	4928      	ldr	r1, [pc, #160]	; (8000380 <main+0x124>)
 80002de:	482a      	ldr	r0, [pc, #168]	; (8000388 <main+0x12c>)
 80002e0:	f002 fa23 	bl	800272a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 80002e4:	2264      	movs	r2, #100	; 0x64
 80002e6:	2100      	movs	r1, #0
 80002e8:	4825      	ldr	r0, [pc, #148]	; (8000380 <main+0x124>)
 80002ea:	f002 fde7 	bl	8002ebc <memset>
		  sprintf((char *)msg, "UART3, count: %d\r\n", count);
 80002ee:	4b21      	ldr	r3, [pc, #132]	; (8000374 <main+0x118>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	461a      	mov	r2, r3
 80002f4:	4925      	ldr	r1, [pc, #148]	; (800038c <main+0x130>)
 80002f6:	4822      	ldr	r0, [pc, #136]	; (8000380 <main+0x124>)
 80002f8:	f002 fe00 	bl	8002efc <siprintf>
		  HAL_UART_Transmit(&huart3, msg, strlen((const char*)msg), 10);
 80002fc:	4820      	ldr	r0, [pc, #128]	; (8000380 <main+0x124>)
 80002fe:	f7ff ff91 	bl	8000224 <strlen>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	230a      	movs	r3, #10
 8000308:	491d      	ldr	r1, [pc, #116]	; (8000380 <main+0x124>)
 800030a:	4821      	ldr	r0, [pc, #132]	; (8000390 <main+0x134>)
 800030c:	f002 fa0d 	bl	800272a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	2100      	movs	r1, #0
 8000314:	481a      	ldr	r0, [pc, #104]	; (8000380 <main+0x124>)
 8000316:	f002 fdd1 	bl	8002ebc <memset>
		  sprintf((char *)msg, "UART4, count: %d\r\n", count);
 800031a:	4b16      	ldr	r3, [pc, #88]	; (8000374 <main+0x118>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	491c      	ldr	r1, [pc, #112]	; (8000394 <main+0x138>)
 8000322:	4817      	ldr	r0, [pc, #92]	; (8000380 <main+0x124>)
 8000324:	f002 fdea 	bl	8002efc <siprintf>
		  HAL_UART_Transmit(&huart4, msg, strlen((const char*)msg), 10);
 8000328:	4815      	ldr	r0, [pc, #84]	; (8000380 <main+0x124>)
 800032a:	f7ff ff7b 	bl	8000224 <strlen>
 800032e:	4603      	mov	r3, r0
 8000330:	b29a      	uxth	r2, r3
 8000332:	230a      	movs	r3, #10
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <main+0x124>)
 8000336:	4818      	ldr	r0, [pc, #96]	; (8000398 <main+0x13c>)
 8000338:	f002 f9f7 	bl	800272a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 800033c:	2264      	movs	r2, #100	; 0x64
 800033e:	2100      	movs	r1, #0
 8000340:	480f      	ldr	r0, [pc, #60]	; (8000380 <main+0x124>)
 8000342:	f002 fdbb 	bl	8002ebc <memset>
		  sprintf((char *)msg, "UART5, count: %d\r\n", count);
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <main+0x118>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	461a      	mov	r2, r3
 800034c:	4913      	ldr	r1, [pc, #76]	; (800039c <main+0x140>)
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <main+0x124>)
 8000350:	f002 fdd4 	bl	8002efc <siprintf>
		  HAL_UART_Transmit(&huart5, msg, strlen((const char*)msg), 10);
 8000354:	480a      	ldr	r0, [pc, #40]	; (8000380 <main+0x124>)
 8000356:	f7ff ff65 	bl	8000224 <strlen>
 800035a:	4603      	mov	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	230a      	movs	r3, #10
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <main+0x124>)
 8000362:	480f      	ldr	r0, [pc, #60]	; (80003a0 <main+0x144>)
 8000364:	f002 f9e1 	bl	800272a <HAL_UART_Transmit>
	  if(onesecondElapsed)
 8000368:	e78f      	b.n	800028a <main+0x2e>
 800036a:	bf00      	nop
 800036c:	20000204 	.word	0x20000204
 8000370:	20000090 	.word	0x20000090
 8000374:	2000008c 	.word	0x2000008c
 8000378:	08004048 	.word	0x08004048
 800037c:	40011c00 	.word	0x40011c00
 8000380:	200000e0 	.word	0x200000e0
 8000384:	08004054 	.word	0x08004054
 8000388:	20000184 	.word	0x20000184
 800038c:	08004068 	.word	0x08004068
 8000390:	200000a0 	.word	0x200000a0
 8000394:	0800407c 	.word	0x0800407c
 8000398:	200001c4 	.word	0x200001c4
 800039c:	08004090 	.word	0x08004090
 80003a0:	20000144 	.word	0x20000144

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	; 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	; 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 fd82 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	2302      	movs	r3, #2
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 f911 	bl	8001614 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f8:	f000 fa2c 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2302      	movs	r3, #2
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fb7c 	bl	8001b14 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000422:	f000 fa17 	bl	8000854 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3740      	adds	r7, #64	; 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_TIM2_Init+0x94>)
 800044e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_TIM2_Init+0x94>)
 8000456:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800045a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_TIM2_Init+0x94>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_TIM2_Init+0x94>)
 8000464:	2248      	movs	r2, #72	; 0x48
 8000466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_TIM2_Init+0x94>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_TIM2_Init+0x94>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000474:	4813      	ldr	r0, [pc, #76]	; (80004c4 <MX_TIM2_Init+0x94>)
 8000476:	f001 fce9 	bl	8001e4c <HAL_TIM_Base_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000480:	f000 f9e8 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	4619      	mov	r1, r3
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <MX_TIM2_Init+0x94>)
 8000492:	f001 fe93 	bl	80021bc <HAL_TIM_ConfigClockSource>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800049c:	f000 f9da 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a0:	2300      	movs	r3, #0
 80004a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_TIM2_Init+0x94>)
 80004ae:	f002 f871 	bl	8002594 <HAL_TIMEx_MasterConfigSynchronization>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004b8:	f000 f9cc 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000204 	.word	0x20000204

080004c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <MX_UART4_Init+0x4c>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <MX_UART4_Init+0x50>)
 80004d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <MX_UART4_Init+0x4c>)
 80004d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <MX_UART4_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_UART4_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <MX_UART4_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_UART4_Init+0x4c>)
 80004ee:	220c      	movs	r2, #12
 80004f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_UART4_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_UART4_Init+0x4c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_UART4_Init+0x4c>)
 8000500:	f002 f8c6 	bl	8002690 <HAL_UART_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800050a:	f000 f9a3 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200001c4 	.word	0x200001c4
 8000518:	40004c00 	.word	0x40004c00

0800051c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_UART5_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_UART5_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_UART5_Init+0x4c>)
 8000528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800052c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_UART5_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_UART5_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_UART5_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_UART5_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_UART5_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_UART5_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_UART5_Init+0x4c>)
 8000554:	f002 f89c 	bl	8002690 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 f979 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000144 	.word	0x20000144
 800056c:	40005000 	.word	0x40005000

08000570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_USART1_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a8:	f002 f872 	bl	8002690 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f94f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000184 	.word	0x20000184
 80005c0:	40013800 	.word	0x40013800

080005c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <MX_USART2_UART_Init+0x50>)
 80005cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005ea:	220c      	movs	r2, #12
 80005ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_USART2_UART_Init+0x4c>)
 80005fc:	f002 f848 	bl	8002690 <HAL_UART_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000606:	f000 f925 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	2000024c 	.word	0x2000024c
 8000614:	40004400 	.word	0x40004400

08000618 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART3_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART3_UART_Init+0x4c>)
 8000650:	f002 f81e 	bl	8002690 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f8fb 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000a0 	.word	0x200000a0
 8000668:	40004800 	.word	0x40004800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	; 0x28
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	f107 0318 	add.w	r3, r7, #24
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b5c      	ldr	r3, [pc, #368]	; (80007f4 <MX_GPIO_Init+0x188>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a5b      	ldr	r2, [pc, #364]	; (80007f4 <MX_GPIO_Init+0x188>)
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b59      	ldr	r3, [pc, #356]	; (80007f4 <MX_GPIO_Init+0x188>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0310 	and.w	r3, r3, #16
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000698:	4b56      	ldr	r3, [pc, #344]	; (80007f4 <MX_GPIO_Init+0x188>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a55      	ldr	r2, [pc, #340]	; (80007f4 <MX_GPIO_Init+0x188>)
 800069e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a4f      	ldr	r2, [pc, #316]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b4a      	ldr	r3, [pc, #296]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a49      	ldr	r2, [pc, #292]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006ce:	f043 0308 	orr.w	r3, r3, #8
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a43      	ldr	r2, [pc, #268]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x188>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	21c0      	movs	r1, #192	; 0xc0
 80006fc:	483e      	ldr	r0, [pc, #248]	; (80007f8 <MX_GPIO_Init+0x18c>)
 80006fe:	f000 ff57 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000708:	483c      	ldr	r0, [pc, #240]	; (80007fc <MX_GPIO_Init+0x190>)
 800070a:	f000 ff51 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800070e:	2200      	movs	r2, #0
 8000710:	f244 11e0 	movw	r1, #16864	; 0x41e0
 8000714:	483a      	ldr	r0, [pc, #232]	; (8000800 <MX_GPIO_Init+0x194>)
 8000716:	f000 ff4b 	bl	80015b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	4838      	ldr	r0, [pc, #224]	; (8000804 <MX_GPIO_Init+0x198>)
 8000722:	f000 ff45 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000726:	f242 130f 	movw	r3, #8463	; 0x210f
 800072a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	4619      	mov	r1, r3
 800073a:	4830      	ldr	r0, [pc, #192]	; (80007fc <MX_GPIO_Init+0x190>)
 800073c:	f000 fdce 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000740:	23c0      	movs	r3, #192	; 0xc0
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4619      	mov	r1, r3
 8000756:	4828      	ldr	r0, [pc, #160]	; (80007f8 <MX_GPIO_Init+0x18c>)
 8000758:	f000 fdc0 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 800075c:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2302      	movs	r3, #2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4619      	mov	r1, r3
 8000774:	4821      	ldr	r0, [pc, #132]	; (80007fc <MX_GPIO_Init+0x190>)
 8000776:	f000 fdb1 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 800077a:	f242 0301 	movw	r3, #8193	; 0x2001
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	481c      	ldr	r0, [pc, #112]	; (8000800 <MX_GPIO_Init+0x194>)
 8000790:	f000 fda4 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000794:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000798:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4814      	ldr	r0, [pc, #80]	; (8000800 <MX_GPIO_Init+0x194>)
 80007ae:	f000 fd95 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	4619      	mov	r1, r3
 80007c6:	480f      	ldr	r0, [pc, #60]	; (8000804 <MX_GPIO_Init+0x198>)
 80007c8:	f000 fd88 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	; (8000804 <MX_GPIO_Init+0x198>)
 80007e6:	f000 fd79 	bl	80012dc <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40011c00 	.word	0x40011c00
 80007fc:	40011000 	.word	0x40011000
 8000800:	40010c00 	.word	0x40010c00
 8000804:	40010800 	.word	0x40010800

08000808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d110      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		ms_count++;
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000826:	801a      	strh	r2, [r3, #0]

		if(ms_count >= 1000)
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000830:	d305      	bcc.n	800083e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			onesecondElapsed = 1;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
		}
		/* Toggle LEDs */
	}
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000204 	.word	0x20000204
 800084c:	2000008e 	.word	0x2000008e
 8000850:	20000090 	.word	0x20000090

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_MspInit+0x5c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_MspInit+0x5c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6193      	str	r3, [r2, #24]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x5c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x5c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	61d3      	str	r3, [r2, #28]
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_MspInit+0x60>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_MspInit+0x60>)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010000 	.word	0x40010000

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d4:	d113      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_TIM_Base_MspInit+0x44>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_TIM_Base_MspInit+0x44>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_TIM_Base_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	201c      	movs	r0, #28
 80008f4:	f000 fbb3 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f8:	201c      	movs	r0, #28
 80008fa:	f000 fbcc 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b092      	sub	sp, #72	; 0x48
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4aa1      	ldr	r2, [pc, #644]	; (8000bac <HAL_UART_MspInit+0x2a0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d13a      	bne.n	80009a2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800092c:	4ba0      	ldr	r3, [pc, #640]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a9f      	ldr	r2, [pc, #636]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000936:	61d3      	str	r3, [r2, #28]
 8000938:	4b9d      	ldr	r3, [pc, #628]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
 8000942:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	4b9a      	ldr	r3, [pc, #616]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a99      	ldr	r2, [pc, #612]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b97      	ldr	r3, [pc, #604]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
 800095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096e:	4619      	mov	r1, r3
 8000970:	4890      	ldr	r0, [pc, #576]	; (8000bb4 <HAL_UART_MspInit+0x2a8>)
 8000972:	f000 fcb3 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000976:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000988:	4619      	mov	r1, r3
 800098a:	488a      	ldr	r0, [pc, #552]	; (8000bb4 <HAL_UART_MspInit+0x2a8>)
 800098c:	f000 fca6 	bl	80012dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2034      	movs	r0, #52	; 0x34
 8000996:	f000 fb62 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800099a:	2034      	movs	r0, #52	; 0x34
 800099c:	f000 fb7b 	bl	8001096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a0:	e0ff      	b.n	8000ba2 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a84      	ldr	r2, [pc, #528]	; (8000bb8 <HAL_UART_MspInit+0x2ac>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d145      	bne.n	8000a38 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80009ac:	4b80      	ldr	r3, [pc, #512]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	4a7f      	ldr	r2, [pc, #508]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009b6:	61d3      	str	r3, [r2, #28]
 80009b8:	4b7d      	ldr	r3, [pc, #500]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	4b7a      	ldr	r3, [pc, #488]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a79      	ldr	r2, [pc, #484]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b77      	ldr	r3, [pc, #476]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b74      	ldr	r3, [pc, #464]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a73      	ldr	r2, [pc, #460]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a06:	4619      	mov	r1, r3
 8000a08:	486a      	ldr	r0, [pc, #424]	; (8000bb4 <HAL_UART_MspInit+0x2a8>)
 8000a0a:	f000 fc67 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4866      	ldr	r0, [pc, #408]	; (8000bbc <HAL_UART_MspInit+0x2b0>)
 8000a22:	f000 fc5b 	bl	80012dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2035      	movs	r0, #53	; 0x35
 8000a2c:	f000 fb17 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000a30:	2035      	movs	r0, #53	; 0x35
 8000a32:	f000 fb30 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000a36:	e0b4      	b.n	8000ba2 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a60      	ldr	r2, [pc, #384]	; (8000bc0 <HAL_UART_MspInit+0x2b4>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d13a      	bne.n	8000ab8 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a5a      	ldr	r2, [pc, #360]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	623b      	str	r3, [r7, #32]
 8000a58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b55      	ldr	r3, [pc, #340]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a54      	ldr	r2, [pc, #336]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b52      	ldr	r3, [pc, #328]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	61fb      	str	r3, [r7, #28]
 8000a70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a84:	4619      	mov	r1, r3
 8000a86:	484f      	ldr	r0, [pc, #316]	; (8000bc4 <HAL_UART_MspInit+0x2b8>)
 8000a88:	f000 fc28 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4848      	ldr	r0, [pc, #288]	; (8000bc4 <HAL_UART_MspInit+0x2b8>)
 8000aa2:	f000 fc1b 	bl	80012dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2025      	movs	r0, #37	; 0x25
 8000aac:	f000 fad7 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ab0:	2025      	movs	r0, #37	; 0x25
 8000ab2:	f000 faf0 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000ab6:	e074      	b.n	8000ba2 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a42      	ldr	r2, [pc, #264]	; (8000bc8 <HAL_UART_MspInit+0x2bc>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d130      	bne.n	8000b24 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a3a      	ldr	r2, [pc, #232]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b38      	ldr	r3, [pc, #224]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af2:	2304      	movs	r3, #4
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b02:	4619      	mov	r1, r3
 8000b04:	482f      	ldr	r0, [pc, #188]	; (8000bc4 <HAL_UART_MspInit+0x2b8>)
 8000b06:	f000 fbe9 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4829      	ldr	r0, [pc, #164]	; (8000bc4 <HAL_UART_MspInit+0x2b8>)
 8000b1e:	f000 fbdd 	bl	80012dc <HAL_GPIO_Init>
}
 8000b22:	e03e      	b.n	8000ba2 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <HAL_UART_MspInit+0x2c0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d139      	bne.n	8000ba2 <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a19      	ldr	r2, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x2a4>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b70:	4619      	mov	r1, r3
 8000b72:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0x2c4>)
 8000b74:	f000 fbb2 	bl	80012dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0x2c4>)
 8000b8e:	f000 fba5 	bl	80012dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2027      	movs	r0, #39	; 0x27
 8000b98:	f000 fa61 	bl	800105e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b9c:	2027      	movs	r0, #39	; 0x27
 8000b9e:	f000 fa7a 	bl	8001096 <HAL_NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3748      	adds	r7, #72	; 0x48
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004c00 	.word	0x40004c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	40005000 	.word	0x40005000
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40010800 	.word	0x40010800
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40004800 	.word	0x40004800
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <HardFault_Handler+0x4>

08000be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f92a 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM2_IRQHandler+0x10>)
 8000c2e:	f001 f9bd 	bl	8001fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000204 	.word	0x20000204

08000c3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <USART1_IRQHandler+0x10>)
 8000c42:	f001 fe05 	bl	8002850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000184 	.word	0x20000184

08000c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <USART3_IRQHandler+0x10>)
 8000c56:	f001 fdfb 	bl	8002850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000a0 	.word	0x200000a0

08000c64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <UART4_IRQHandler+0x10>)
 8000c6a:	f001 fdf1 	bl	8002850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001c4 	.word	0x200001c4

08000c78 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <UART5_IRQHandler+0x10>)
 8000c7e:	f001 fde7 	bl	8002850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000144 	.word	0x20000144

08000c8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
	}

return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cec:	605a      	str	r2, [r3, #4]
	return 0;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
	return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 f886 	bl	8002e68 <__errno>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	230c      	movs	r3, #12
 8000d60:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20010000 	.word	0x20010000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000094 	.word	0x20000094
 8000d90:	20000298 	.word	0x20000298

08000d94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000da0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
  ldr r2, =_sbss
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dc6:	f7ff ffe5 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f002 f853 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dce:	f7ff fa45 	bl	800025c <main>
  bx lr
 8000dd2:	4770      	bx	lr
  ldr r3, =_sidata
 8000dd4:	08004170 	.word	0x08004170
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ddc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000de0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000de4:	20000294 	.word	0x20000294

08000de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_2_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_Init+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_Init+0x28>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f000 f923 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f808 	bl	8000e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e08:	f7ff fd2a 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40022000 	.word	0x40022000

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x54>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x58>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f93b 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00e      	b.n	8000e64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d80a      	bhi.n	8000e62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	f000 f903 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <HAL_InitTick+0x5c>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e000      	b.n	8000e64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_IncTick+0x1c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_IncTick+0x20>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a03      	ldr	r2, [pc, #12]	; (8000e98 <HAL_IncTick+0x20>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000008 	.word	0x20000008
 8000e98:	2000028c 	.word	0x2000028c

08000e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <HAL_GetTick+0x10>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	2000028c 	.word	0x2000028c

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4906      	ldr	r1, [pc, #24]	; (8000f48 <__NVIC_EnableIRQ+0x34>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100

08000f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	6039      	str	r1, [r7, #0]
 8000f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	db0a      	blt.n	8000f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <__NVIC_SetPriority+0x4c>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	0112      	lsls	r2, r2, #4
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f74:	e00a      	b.n	8000f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <__NVIC_SetPriority+0x50>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	3b04      	subs	r3, #4
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	b2d2      	uxtb	r2, r2
 8000f88:	440b      	add	r3, r1
 8000f8a:	761a      	strb	r2, [r3, #24]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f1c3 0307 	rsb	r3, r3, #7
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf28      	it	cs
 8000fbe:	2304      	movcs	r3, #4
 8000fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	d902      	bls.n	8000fd0 <NVIC_EncodePriority+0x30>
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3b03      	subs	r3, #3
 8000fce:	e000      	b.n	8000fd2 <NVIC_EncodePriority+0x32>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	4313      	orrs	r3, r2
         );
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f7ff ff90 	bl	8000f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff2d 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff42 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff90 	bl	8000fa0 <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5f 	bl	8000f4c <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff35 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffa2 	bl	8001004 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d005      	beq.n	80010ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e0d6      	b.n	800129c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 020e 	bic.w	r2, r2, #14
 80010fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0201 	bic.w	r2, r2, #1
 800110c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <HAL_DMA_Abort_IT+0x1dc>)
 8001116:	429a      	cmp	r2, r3
 8001118:	d958      	bls.n	80011cc <HAL_DMA_Abort_IT+0x100>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_DMA_Abort_IT+0x1e0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d04f      	beq.n	80011c4 <HAL_DMA_Abort_IT+0xf8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a61      	ldr	r2, [pc, #388]	; (80012b0 <HAL_DMA_Abort_IT+0x1e4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d048      	beq.n	80011c0 <HAL_DMA_Abort_IT+0xf4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a60      	ldr	r2, [pc, #384]	; (80012b4 <HAL_DMA_Abort_IT+0x1e8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d040      	beq.n	80011ba <HAL_DMA_Abort_IT+0xee>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a5e      	ldr	r2, [pc, #376]	; (80012b8 <HAL_DMA_Abort_IT+0x1ec>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d038      	beq.n	80011b4 <HAL_DMA_Abort_IT+0xe8>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a5d      	ldr	r2, [pc, #372]	; (80012bc <HAL_DMA_Abort_IT+0x1f0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d030      	beq.n	80011ae <HAL_DMA_Abort_IT+0xe2>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a5b      	ldr	r2, [pc, #364]	; (80012c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d028      	beq.n	80011a8 <HAL_DMA_Abort_IT+0xdc>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a53      	ldr	r2, [pc, #332]	; (80012a8 <HAL_DMA_Abort_IT+0x1dc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d020      	beq.n	80011a2 <HAL_DMA_Abort_IT+0xd6>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a57      	ldr	r2, [pc, #348]	; (80012c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_DMA_Abort_IT+0xd2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a56      	ldr	r2, [pc, #344]	; (80012c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d012      	beq.n	800119a <HAL_DMA_Abort_IT+0xce>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a54      	ldr	r2, [pc, #336]	; (80012cc <HAL_DMA_Abort_IT+0x200>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00a      	beq.n	8001194 <HAL_DMA_Abort_IT+0xc8>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <HAL_DMA_Abort_IT+0x204>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <HAL_DMA_Abort_IT+0xc2>
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	e01b      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 800118e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001192:	e018      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	e015      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 800119a:	2310      	movs	r3, #16
 800119c:	e013      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 800119e:	2301      	movs	r3, #1
 80011a0:	e011      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a6:	e00e      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ac:	e00b      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b2:	e008      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	e005      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	e002      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011c0:	2310      	movs	r3, #16
 80011c2:	e000      	b.n	80011c6 <HAL_DMA_Abort_IT+0xfa>
 80011c4:	2301      	movs	r3, #1
 80011c6:	4a43      	ldr	r2, [pc, #268]	; (80012d4 <HAL_DMA_Abort_IT+0x208>)
 80011c8:	6053      	str	r3, [r2, #4]
 80011ca:	e057      	b.n	800127c <HAL_DMA_Abort_IT+0x1b0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a36      	ldr	r2, [pc, #216]	; (80012ac <HAL_DMA_Abort_IT+0x1e0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d04f      	beq.n	8001276 <HAL_DMA_Abort_IT+0x1aa>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <HAL_DMA_Abort_IT+0x1e4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d048      	beq.n	8001272 <HAL_DMA_Abort_IT+0x1a6>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a33      	ldr	r2, [pc, #204]	; (80012b4 <HAL_DMA_Abort_IT+0x1e8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d040      	beq.n	800126c <HAL_DMA_Abort_IT+0x1a0>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <HAL_DMA_Abort_IT+0x1ec>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d038      	beq.n	8001266 <HAL_DMA_Abort_IT+0x19a>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_DMA_Abort_IT+0x1f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d030      	beq.n	8001260 <HAL_DMA_Abort_IT+0x194>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a2f      	ldr	r2, [pc, #188]	; (80012c0 <HAL_DMA_Abort_IT+0x1f4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d028      	beq.n	800125a <HAL_DMA_Abort_IT+0x18e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_DMA_Abort_IT+0x1dc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d020      	beq.n	8001254 <HAL_DMA_Abort_IT+0x188>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_DMA_Abort_IT+0x1f8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d019      	beq.n	8001250 <HAL_DMA_Abort_IT+0x184>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <HAL_DMA_Abort_IT+0x1fc>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d012      	beq.n	800124c <HAL_DMA_Abort_IT+0x180>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a28      	ldr	r2, [pc, #160]	; (80012cc <HAL_DMA_Abort_IT+0x200>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00a      	beq.n	8001246 <HAL_DMA_Abort_IT+0x17a>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a26      	ldr	r2, [pc, #152]	; (80012d0 <HAL_DMA_Abort_IT+0x204>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d102      	bne.n	8001240 <HAL_DMA_Abort_IT+0x174>
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	e01b      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	e018      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124a:	e015      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 800124c:	2310      	movs	r3, #16
 800124e:	e013      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001250:	2301      	movs	r3, #1
 8001252:	e011      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001258:	e00e      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 800125a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800125e:	e00b      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001264:	e008      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	e005      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	e002      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001272:	2310      	movs	r3, #16
 8001274:	e000      	b.n	8001278 <HAL_DMA_Abort_IT+0x1ac>
 8001276:	2301      	movs	r3, #1
 8001278:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_DMA_Abort_IT+0x20c>)
 800127a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
    } 
  }
  return status;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020080 	.word	0x40020080
 80012ac:	40020008 	.word	0x40020008
 80012b0:	4002001c 	.word	0x4002001c
 80012b4:	40020030 	.word	0x40020030
 80012b8:	40020044 	.word	0x40020044
 80012bc:	40020058 	.word	0x40020058
 80012c0:	4002006c 	.word	0x4002006c
 80012c4:	40020408 	.word	0x40020408
 80012c8:	4002041c 	.word	0x4002041c
 80012cc:	40020430 	.word	0x40020430
 80012d0:	40020444 	.word	0x40020444
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020000 	.word	0x40020000

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b08b      	sub	sp, #44	; 0x2c
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ee:	e133      	b.n	8001558 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012f0:	2201      	movs	r2, #1
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8122 	bne.w	8001552 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b12      	cmp	r3, #18
 8001314:	d034      	beq.n	8001380 <HAL_GPIO_Init+0xa4>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d80d      	bhi.n	8001336 <HAL_GPIO_Init+0x5a>
 800131a:	2b02      	cmp	r3, #2
 800131c:	d02b      	beq.n	8001376 <HAL_GPIO_Init+0x9a>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d804      	bhi.n	800132c <HAL_GPIO_Init+0x50>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d031      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d01c      	beq.n	8001364 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132a:	e048      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800132c:	2b03      	cmp	r3, #3
 800132e:	d043      	beq.n	80013b8 <HAL_GPIO_Init+0xdc>
 8001330:	2b11      	cmp	r3, #17
 8001332:	d01b      	beq.n	800136c <HAL_GPIO_Init+0x90>
          break;
 8001334:	e043      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001336:	4a8f      	ldr	r2, [pc, #572]	; (8001574 <HAL_GPIO_Init+0x298>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d026      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800133c:	4a8d      	ldr	r2, [pc, #564]	; (8001574 <HAL_GPIO_Init+0x298>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d806      	bhi.n	8001350 <HAL_GPIO_Init+0x74>
 8001342:	4a8d      	ldr	r2, [pc, #564]	; (8001578 <HAL_GPIO_Init+0x29c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d020      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001348:	4a8c      	ldr	r2, [pc, #560]	; (800157c <HAL_GPIO_Init+0x2a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d01d      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 800134e:	e036      	b.n	80013be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001350:	4a8b      	ldr	r2, [pc, #556]	; (8001580 <HAL_GPIO_Init+0x2a4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_GPIO_Init+0xae>
 8001356:	4a8b      	ldr	r2, [pc, #556]	; (8001584 <HAL_GPIO_Init+0x2a8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d016      	beq.n	800138a <HAL_GPIO_Init+0xae>
 800135c:	4a8a      	ldr	r2, [pc, #552]	; (8001588 <HAL_GPIO_Init+0x2ac>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0xae>
          break;
 8001362:	e02c      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e028      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3304      	adds	r3, #4
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e023      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	3308      	adds	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e01e      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	330c      	adds	r3, #12
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e019      	b.n	80013be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001392:	2304      	movs	r3, #4
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e012      	b.n	80013be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d105      	bne.n	80013ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a0:	2308      	movs	r3, #8
 80013a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	611a      	str	r2, [r3, #16]
          break;
 80013aa:	e008      	b.n	80013be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	615a      	str	r2, [r3, #20]
          break;
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
          break;
 80013bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2bff      	cmp	r3, #255	; 0xff
 80013c2:	d801      	bhi.n	80013c8 <HAL_GPIO_Init+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	e001      	b.n	80013cc <HAL_GPIO_Init+0xf0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3304      	adds	r3, #4
 80013cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2bff      	cmp	r3, #255	; 0xff
 80013d2:	d802      	bhi.n	80013da <HAL_GPIO_Init+0xfe>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x104>
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	3b08      	subs	r3, #8
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	210f      	movs	r1, #15
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	401a      	ands	r2, r3
 80013f2:	6a39      	ldr	r1, [r7, #32]
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a2 	beq.w	8001552 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_GPIO_Init+0x2b0>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_GPIO_Init+0x2b0>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001426:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_GPIO_Init+0x2b4>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a51      	ldr	r2, [pc, #324]	; (8001594 <HAL_GPIO_Init+0x2b8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d01f      	beq.n	8001492 <HAL_GPIO_Init+0x1b6>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <HAL_GPIO_Init+0x2bc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x1b2>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4f      	ldr	r2, [pc, #316]	; (800159c <HAL_GPIO_Init+0x2c0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x1ae>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4e      	ldr	r2, [pc, #312]	; (80015a0 <HAL_GPIO_Init+0x2c4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x1aa>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4d      	ldr	r2, [pc, #308]	; (80015a4 <HAL_GPIO_Init+0x2c8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x1a6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4c      	ldr	r2, [pc, #304]	; (80015a8 <HAL_GPIO_Init+0x2cc>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x1a2>
 800147a:	2305      	movs	r3, #5
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 800147e:	2306      	movs	r3, #6
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x1b8>
 8001492:	2300      	movs	r3, #0
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014a4:	493a      	ldr	r1, [pc, #232]	; (8001590 <HAL_GPIO_Init+0x2b4>)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	493a      	ldr	r1, [pc, #232]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
 80014ca:	e006      	b.n	80014da <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4935      	ldr	r1, [pc, #212]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e6:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4930      	ldr	r1, [pc, #192]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e006      	b.n	8001502 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	492b      	ldr	r1, [pc, #172]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 80014fe:	4013      	ands	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	4926      	ldr	r1, [pc, #152]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
 800151a:	e006      	b.n	800152a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	43db      	mvns	r3, r3
 8001524:	4921      	ldr	r1, [pc, #132]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 8001526:	4013      	ands	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d006      	beq.n	8001544 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	491c      	ldr	r1, [pc, #112]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	60cb      	str	r3, [r1, #12]
 8001542:	e006      	b.n	8001552 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	43db      	mvns	r3, r3
 800154c:	4917      	ldr	r1, [pc, #92]	; (80015ac <HAL_GPIO_Init+0x2d0>)
 800154e:	4013      	ands	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f aec4 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 8001568:	bf00      	nop
 800156a:	372c      	adds	r7, #44	; 0x2c
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	10210000 	.word	0x10210000
 8001578:	10110000 	.word	0x10110000
 800157c:	10120000 	.word	0x10120000
 8001580:	10310000 	.word	0x10310000
 8001584:	10320000 	.word	0x10320000
 8001588:	10220000 	.word	0x10220000
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	40011000 	.word	0x40011000
 80015a0:	40011400 	.word	0x40011400
 80015a4:	40011800 	.word	0x40011800
 80015a8:	40011c00 	.word	0x40011c00
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	611a      	str	r2, [r3, #16]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43d9      	mvns	r1, r3
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	400b      	ands	r3, r1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	611a      	str	r2, [r3, #16]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
	...

08001614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e26c      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8087 	beq.w	8001742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b04      	cmp	r3, #4
 800163e:	d00c      	beq.n	800165a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001640:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d112      	bne.n	8001672 <HAL_RCC_OscConfig+0x5e>
 800164c:	4b8c      	ldr	r3, [pc, #560]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d10b      	bne.n	8001672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165a:	4b89      	ldr	r3, [pc, #548]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d06c      	beq.n	8001740 <HAL_RCC_OscConfig+0x12c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d168      	bne.n	8001740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e246      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x76>
 800167c:	4b80      	ldr	r3, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7f      	ldr	r2, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e02e      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7a      	ldr	r2, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0xbc>
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 80016d0:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fbd4 	bl	8000e9c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fbd0 	bl	8000e9c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1fa      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe4>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fbc0 	bl	8000e9c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fbbc 	bl	8000e9c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1e6      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x10c>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d063      	beq.n	8001816 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x18c>
 8001766:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d116      	bne.n	80017a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x176>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e1ba      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4939      	ldr	r1, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	e03a      	b.n	8001816 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x270>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb75 	bl	8000e9c <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff fb71 	bl	8000e9c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e19b      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x270>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb54 	bl	8000e9c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb50 	bl	8000e9c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e17a      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03a      	beq.n	8001898 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d019      	beq.n	800185e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff fb34 	bl	8000e9c <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fb30 	bl	8000e9c <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e15a      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001856:	2001      	movs	r0, #1
 8001858:	f000 fada 	bl	8001e10 <RCC_Delay>
 800185c:	e01c      	b.n	8001898 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fb1a 	bl	8000e9c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186a:	e00f      	b.n	800188c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fb16 	bl	8000e9c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d908      	bls.n	800188c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e140      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	42420000 	.word	0x42420000
 8001888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b9e      	ldr	r3, [pc, #632]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e9      	bne.n	800186c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a6 	beq.w	80019f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b94      	ldr	r3, [pc, #592]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a93      	ldr	r2, [pc, #588]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b91      	ldr	r3, [pc, #580]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d118      	bne.n	8001910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a8a      	ldr	r2, [pc, #552]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fad7 	bl	8000e9c <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7ff fad3 	bl	8000e9c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0fd      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x312>
 8001918:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a7a      	ldr	r2, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e02d      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x334>
 800192e:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a75      	ldr	r2, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a72      	ldr	r2, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	e01c      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x356>
 8001950:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a6c      	ldr	r2, [pc, #432]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff fa87 	bl	8000e9c <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff fa83 	bl	8000e9c <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0ab      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ee      	beq.n	8001992 <HAL_RCC_OscConfig+0x37e>
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa71 	bl	8000e9c <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fa6d 	bl	8000e9c <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e095      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ee      	bne.n	80019be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8081 	beq.w	8001afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d061      	beq.n	8001acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d146      	bne.n	8001a9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fa41 	bl	8000e9c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff fa3d 	bl	8000e9c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e067      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d108      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	492d      	ldr	r1, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a19      	ldr	r1, [r3, #32]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fa11 	bl	8000e9c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fa0d 	bl	8000e9c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e037      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x46a>
 8001a9c:	e02f      	b.n	8001afe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f9fa 	bl	8000e9c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f9f6 	bl	8000e9c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e020      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x498>
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e013      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42420060 	.word	0x42420060

08001b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d0      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4965      	ldr	r1, [pc, #404]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e073      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4936      	ldr	r1, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff f94a 	bl	8000e9c <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f946 	bl	8000e9c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e053      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d210      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4922      	ldr	r1, [pc, #136]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f8a8 	bl	8000e18 <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	080040b8 	.word	0x080040b8
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b490      	push	{r4, r7}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cf0:	1d3c      	adds	r4, r7, #4
 8001cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x40>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x46>
 8001d26:	e02d      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d2a:	623b      	str	r3, [r7, #32]
      break;
 8001d2c:	e02d      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c5b      	lsrs	r3, r3, #17
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4a0f      	ldr	r2, [pc, #60]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d66:	fb02 f203 	mul.w	r2, r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	e004      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	623b      	str	r3, [r7, #32]
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d86:	623b      	str	r3, [r7, #32]
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc90      	pop	{r4, r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	080040a4 	.word	0x080040a4
 8001d9c:	080040b4 	.word	0x080040b4
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	003d0900 	.word	0x003d0900

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000000 	.word	0x20000000

08001dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dc4:	f7ff fff2 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dc8:	4601      	mov	r1, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4a03      	ldr	r2, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	080040c8 	.word	0x080040c8

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dec:	f7ff ffde 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df0:	4601      	mov	r1, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	080040c8 	.word	0x080040c8

08001e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <RCC_Delay+0x34>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <RCC_Delay+0x38>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e2c:	bf00      	nop
  }
  while (Delay --);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1e5a      	subs	r2, r3, #1
 8001e32:	60fa      	str	r2, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <RCC_Delay+0x1c>
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000000 	.word	0x20000000
 8001e48:	10624dd3 	.word	0x10624dd3

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e041      	b.n	8001ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fd26 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 fa72 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e044      	b.n	8001f8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_TIM_Base_Start_IT+0xac>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d018      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x6c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_TIM_Base_Start_IT+0xb0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d013      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x6c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	d00e      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x6c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d009      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x6c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x6c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a15      	ldr	r2, [pc, #84]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d010      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0201 	orr.w	r2, r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7a:	e007      	b.n	8001f8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40012c00 	.word	0x40012c00
 8001f9c:	40013400 	.word	0x40013400
 8001fa0:	40000400 	.word	0x40000400
 8001fa4:	40000800 	.word	0x40000800
 8001fa8:	40000c00 	.word	0x40000c00

08001fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d122      	bne.n	8002008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d11b      	bne.n	8002008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0202 	mvn.w	r2, #2
 8001fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f9a4 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f997 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f9a6 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b04      	cmp	r3, #4
 8002014:	d122      	bne.n	800205c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b04      	cmp	r3, #4
 8002022:	d11b      	bne.n	800205c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0204 	mvn.w	r2, #4
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f97a 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f96d 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f97c 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b08      	cmp	r3, #8
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b08      	cmp	r3, #8
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0208 	mvn.w	r2, #8
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f950 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f943 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f952 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b10      	cmp	r3, #16
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b10      	cmp	r3, #16
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0210 	mvn.w	r2, #16
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2208      	movs	r2, #8
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f926 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f919 	bl	800232a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f928 	bl	800234e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0201 	mvn.w	r2, #1
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fb6c 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa91 	bl	800267e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f8ec 	bl	8002360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b20      	cmp	r3, #32
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0220 	mvn.w	r2, #32
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa5c 	bl	800266c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_TIM_ConfigClockSource+0x18>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e0a6      	b.n	8002322 <HAL_TIM_ConfigClockSource+0x166>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d067      	beq.n	80022dc <HAL_TIM_ConfigClockSource+0x120>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d80b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0x6c>
 8002210:	2b10      	cmp	r3, #16
 8002212:	d073      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x140>
 8002214:	2b10      	cmp	r3, #16
 8002216:	d802      	bhi.n	800221e <HAL_TIM_ConfigClockSource+0x62>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d06f      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800221c:	e078      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800221e:	2b20      	cmp	r3, #32
 8002220:	d06c      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x140>
 8002222:	2b30      	cmp	r3, #48	; 0x30
 8002224:	d06a      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002226:	e073      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002228:	2b70      	cmp	r3, #112	; 0x70
 800222a:	d00d      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0x8c>
 800222c:	2b70      	cmp	r3, #112	; 0x70
 800222e:	d804      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x7e>
 8002230:	2b50      	cmp	r3, #80	; 0x50
 8002232:	d033      	beq.n	800229c <HAL_TIM_ConfigClockSource+0xe0>
 8002234:	2b60      	cmp	r3, #96	; 0x60
 8002236:	d041      	beq.n	80022bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002238:	e06a      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800223a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223e:	d066      	beq.n	800230e <HAL_TIM_ConfigClockSource+0x152>
 8002240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002244:	d017      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002246:	e063      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 f97d 	bl	8002556 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800226a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e04c      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f000 f966 	bl	8002556 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002298:	609a      	str	r2, [r3, #8]
      break;
 800229a:	e039      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f000 f8dd 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2150      	movs	r1, #80	; 0x50
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f934 	bl	8002522 <TIM_ITRx_SetConfig>
      break;
 80022ba:	e029      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f000 f8fb 	bl	80024c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2160      	movs	r1, #96	; 0x60
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f924 	bl	8002522 <TIM_ITRx_SetConfig>
      break;
 80022da:	e019      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f000 f8bd 	bl	8002468 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f914 	bl	8002522 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e009      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 f90b 	bl	8002522 <TIM_ITRx_SetConfig>
        break;
 800230c:	e000      	b.n	8002310 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800230e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr
	...

08002374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a33      	ldr	r2, [pc, #204]	; (8002454 <TIM_Base_SetConfig+0xe0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a32      	ldr	r2, [pc, #200]	; (8002458 <TIM_Base_SetConfig+0xe4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d00f      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d00b      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a2f      	ldr	r2, [pc, #188]	; (800245c <TIM_Base_SetConfig+0xe8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <TIM_Base_SetConfig+0xec>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <TIM_Base_SetConfig+0xf0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a22      	ldr	r2, [pc, #136]	; (8002454 <TIM_Base_SetConfig+0xe0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <TIM_Base_SetConfig+0x82>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a21      	ldr	r2, [pc, #132]	; (8002458 <TIM_Base_SetConfig+0xe4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00f      	beq.n	80023f6 <TIM_Base_SetConfig+0x82>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d00b      	beq.n	80023f6 <TIM_Base_SetConfig+0x82>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1e      	ldr	r2, [pc, #120]	; (800245c <TIM_Base_SetConfig+0xe8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d007      	beq.n	80023f6 <TIM_Base_SetConfig+0x82>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <TIM_Base_SetConfig+0xec>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d003      	beq.n	80023f6 <TIM_Base_SetConfig+0x82>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <TIM_Base_SetConfig+0xf0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <TIM_Base_SetConfig+0xe0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d003      	beq.n	800243c <TIM_Base_SetConfig+0xc8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <TIM_Base_SetConfig+0xe4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d103      	bne.n	8002444 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	615a      	str	r2, [r3, #20]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40013400 	.word	0x40013400
 800245c:	40000400 	.word	0x40000400
 8002460:	40000800 	.word	0x40000800
 8002464:	40000c00 	.word	0x40000c00

08002468 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f023 0201 	bic.w	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f023 030a 	bic.w	r3, r3, #10
 80024a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	bf00      	nop
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f023 0210 	bic.w	r2, r3, #16
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002500:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	621a      	str	r2, [r3, #32]
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	f043 0307 	orr.w	r3, r3, #7
 8002544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002556:	b480      	push	{r7}
 8002558:	b087      	sub	sp, #28
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002570:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	431a      	orrs	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4313      	orrs	r3, r2
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	609a      	str	r2, [r3, #8]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e050      	b.n	800264e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d018      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d013      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d00e      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d009      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d004      	beq.n	8002622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10c      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40013400 	.word	0x40013400
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800
 8002668:	40000c00 	.word	0x40000c00

0800266c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e03f      	b.n	8002722 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f928 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fb39 	bl	8002d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b08a      	sub	sp, #40	; 0x28
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	d17c      	bne.n	8002844 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_UART_Transmit+0x2c>
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e075      	b.n	8002846 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x3e>
 8002764:	2302      	movs	r3, #2
 8002766:	e06e      	b.n	8002846 <HAL_UART_Transmit+0x11c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2221      	movs	r2, #33	; 0x21
 800277a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800277e:	f7fe fb8d 	bl	8000e9c <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	88fa      	ldrh	r2, [r7, #6]
 8002788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d108      	bne.n	80027ac <HAL_UART_Transmit+0x82>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e003      	b.n	80027b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80027bc:	e02a      	b.n	8002814 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f95c 	bl	8002a86 <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e036      	b.n	8002846 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	3302      	adds	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e007      	b.n	8002806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	781a      	ldrb	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3301      	adds	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1cf      	bne.n	80027be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f92c 	bl	8002a86 <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_UART_IRQHandler+0x52>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9d5 	bl	8002c4a <UART_Receive_IT>
      return;
 80028a0:	e0d1      	b.n	8002a46 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80b0 	beq.w	8002a0a <HAL_UART_IRQHandler+0x1ba>
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_UART_IRQHandler+0x70>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a5 	beq.w	8002a0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_UART_IRQHandler+0x90>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_UART_IRQHandler+0xb0>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_UART_IRQHandler+0xd0>
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00f      	beq.n	800294a <HAL_UART_IRQHandler+0xfa>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_UART_IRQHandler+0xee>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	f043 0208 	orr.w	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d078      	beq.n	8002a44 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_UART_IRQHandler+0x11c>
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f96f 	bl	8002c4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <HAL_UART_IRQHandler+0x144>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d031      	beq.n	80029f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8c0 	bl	8002b1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d023      	beq.n	80029f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695a      	ldr	r2, [r3, #20]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_UART_IRQHandler+0x1fc>)
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fb7d 	bl	80010cc <HAL_DMA_Abort_IT>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e2:	4610      	mov	r0, r2
 80029e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e6:	e00e      	b.n	8002a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f843 	bl	8002a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ee:	e00a      	b.n	8002a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f83f 	bl	8002a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f6:	e006      	b.n	8002a06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f83b 	bl	8002a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002a04:	e01e      	b.n	8002a44 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a06:	bf00      	nop
    return;
 8002a08:	e01c      	b.n	8002a44 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_UART_IRQHandler+0x1d6>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8ac 	bl	8002b7c <UART_Transmit_IT>
    return;
 8002a24:	e00f      	b.n	8002a46 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_UART_IRQHandler+0x1f6>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8ed 	bl	8002c1a <UART_EndTransmit_IT>
    return;
 8002a40:	bf00      	nop
 8002a42:	e000      	b.n	8002a46 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a44:	bf00      	nop
  }
}
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	08002b55 	.word	0x08002b55

08002a50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a96:	e02c      	b.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9e:	d028      	beq.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa6:	f7fe f9f9 	bl	8000e9c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d21d      	bcs.n	8002af2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ac4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e00f      	b.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d0c3      	beq.n	8002a98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr

08002b54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff80 	bl	8002a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b21      	cmp	r3, #33	; 0x21
 8002b8e:	d13e      	bne.n	8002c0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d114      	bne.n	8002bc4 <UART_Transmit_IT+0x48>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d110      	bne.n	8002bc4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	621a      	str	r2, [r3, #32]
 8002bc2:	e008      	b.n	8002bd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	1c59      	adds	r1, r3, #1
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6211      	str	r1, [r2, #32]
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4619      	mov	r1, r3
 8002be4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
  }
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff08 	bl	8002a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b22      	cmp	r3, #34	; 0x22
 8002c5c:	d170      	bne.n	8002d40 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d117      	bne.n	8002c98 <UART_Receive_IT+0x4e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d113      	bne.n	8002c98 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
 8002c96:	e026      	b.n	8002ce6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d007      	beq.n	8002cbc <UART_Receive_IT+0x72>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <UART_Receive_IT+0x80>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e008      	b.n	8002cdc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d120      	bne.n	8002d3c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0220 	bic.w	r2, r2, #32
 8002d08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff fe95 	bl	8002a62 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e002      	b.n	8002d42 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d86:	f023 030c 	bic.w	r3, r3, #12
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <UART_SetConfig+0x114>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7ff f818 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	e002      	b.n	8002dc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f7ff f800 	bl	8001dc0 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009a      	lsls	r2, r3, #2
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd8:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <UART_SetConfig+0x118>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	0119      	lsls	r1, r3, #4
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <UART_SetConfig+0x118>)
 8002dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2064      	movs	r0, #100	; 0x64
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	3332      	adds	r3, #50	; 0x32
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <UART_SetConfig+0x118>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e18:	4419      	add	r1, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009a      	lsls	r2, r3, #2
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <UART_SetConfig+0x118>)
 8002e32:	fba3 0302 	umull	r0, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	fb00 f303 	mul.w	r3, r0, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	3332      	adds	r3, #50	; 0x32
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <UART_SetConfig+0x118>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	440a      	add	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40013800 	.word	0x40013800
 8002e64:	51eb851f 	.word	0x51eb851f

08002e68 <__errno>:
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <__errno+0x8>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	2500      	movs	r5, #0
 8002e78:	4e0c      	ldr	r6, [pc, #48]	; (8002eac <__libc_init_array+0x38>)
 8002e7a:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7c:	1ba4      	subs	r4, r4, r6
 8002e7e:	10a4      	asrs	r4, r4, #2
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	f001 f8d4 	bl	8004030 <_init>
 8002e88:	2500      	movs	r5, #0
 8002e8a:	4e0a      	ldr	r6, [pc, #40]	; (8002eb4 <__libc_init_array+0x40>)
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	; (8002eb8 <__libc_init_array+0x44>)
 8002e8e:	1ba4      	subs	r4, r4, r6
 8002e90:	10a4      	asrs	r4, r4, #2
 8002e92:	42a5      	cmp	r5, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9c:	4798      	blx	r3
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea6:	4798      	blx	r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08004168 	.word	0x08004168
 8002eb0:	08004168 	.word	0x08004168
 8002eb4:	08004168 	.word	0x08004168
 8002eb8:	0800416c 	.word	0x0800416c

08002ebc <memset>:
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4402      	add	r2, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <iprintf>:
 8002ecc:	b40f      	push	{r0, r1, r2, r3}
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <iprintf+0x2c>)
 8002ed0:	b513      	push	{r0, r1, r4, lr}
 8002ed2:	681c      	ldr	r4, [r3, #0]
 8002ed4:	b124      	cbz	r4, 8002ee0 <iprintf+0x14>
 8002ed6:	69a3      	ldr	r3, [r4, #24]
 8002ed8:	b913      	cbnz	r3, 8002ee0 <iprintf+0x14>
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 f86e 	bl	8002fbc <__sinit>
 8002ee0:	ab05      	add	r3, sp, #20
 8002ee2:	9a04      	ldr	r2, [sp, #16]
 8002ee4:	68a1      	ldr	r1, [r4, #8]
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	f000 fac5 	bl	8003478 <_vfiprintf_r>
 8002eee:	b002      	add	sp, #8
 8002ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <siprintf>:
 8002efc:	b40e      	push	{r1, r2, r3}
 8002efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f02:	b500      	push	{lr}
 8002f04:	b09c      	sub	sp, #112	; 0x70
 8002f06:	ab1d      	add	r3, sp, #116	; 0x74
 8002f08:	9002      	str	r0, [sp, #8]
 8002f0a:	9006      	str	r0, [sp, #24]
 8002f0c:	9107      	str	r1, [sp, #28]
 8002f0e:	9104      	str	r1, [sp, #16]
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <siprintf+0x38>)
 8002f12:	4909      	ldr	r1, [pc, #36]	; (8002f38 <siprintf+0x3c>)
 8002f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f18:	9105      	str	r1, [sp, #20]
 8002f1a:	6800      	ldr	r0, [r0, #0]
 8002f1c:	a902      	add	r1, sp, #8
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	f000 f98a 	bl	8003238 <_svfiprintf_r>
 8002f24:	2200      	movs	r2, #0
 8002f26:	9b02      	ldr	r3, [sp, #8]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	b01c      	add	sp, #112	; 0x70
 8002f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f30:	b003      	add	sp, #12
 8002f32:	4770      	bx	lr
 8002f34:	2000000c 	.word	0x2000000c
 8002f38:	ffff0208 	.word	0xffff0208

08002f3c <std>:
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	e9c0 3300 	strd	r3, r3, [r0]
 8002f46:	6083      	str	r3, [r0, #8]
 8002f48:	8181      	strh	r1, [r0, #12]
 8002f4a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f4c:	81c2      	strh	r2, [r0, #14]
 8002f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f52:	6183      	str	r3, [r0, #24]
 8002f54:	4619      	mov	r1, r3
 8002f56:	2208      	movs	r2, #8
 8002f58:	305c      	adds	r0, #92	; 0x5c
 8002f5a:	f7ff ffaf 	bl	8002ebc <memset>
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <std+0x38>)
 8002f60:	6224      	str	r4, [r4, #32]
 8002f62:	6263      	str	r3, [r4, #36]	; 0x24
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <std+0x3c>)
 8002f66:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <std+0x40>)
 8002f6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <std+0x44>)
 8002f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	080039d5 	.word	0x080039d5
 8002f78:	080039f7 	.word	0x080039f7
 8002f7c:	08003a2f 	.word	0x08003a2f
 8002f80:	08003a53 	.word	0x08003a53

08002f84 <_cleanup_r>:
 8002f84:	4901      	ldr	r1, [pc, #4]	; (8002f8c <_cleanup_r+0x8>)
 8002f86:	f000 b885 	b.w	8003094 <_fwalk_reent>
 8002f8a:	bf00      	nop
 8002f8c:	08003d2d 	.word	0x08003d2d

08002f90 <__sfmoreglue>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	2568      	movs	r5, #104	; 0x68
 8002f94:	1e4a      	subs	r2, r1, #1
 8002f96:	4355      	muls	r5, r2
 8002f98:	460e      	mov	r6, r1
 8002f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f9e:	f000 f897 	bl	80030d0 <_malloc_r>
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	b140      	cbz	r0, 8002fb8 <__sfmoreglue+0x28>
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8002fac:	300c      	adds	r0, #12
 8002fae:	60a0      	str	r0, [r4, #8]
 8002fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fb4:	f7ff ff82 	bl	8002ebc <memset>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd70      	pop	{r4, r5, r6, pc}

08002fbc <__sinit>:
 8002fbc:	6983      	ldr	r3, [r0, #24]
 8002fbe:	b510      	push	{r4, lr}
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	bb33      	cbnz	r3, 8003012 <__sinit+0x56>
 8002fc4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002fc8:	6503      	str	r3, [r0, #80]	; 0x50
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <__sinit+0x58>)
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <__sinit+0x5c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6282      	str	r2, [r0, #40]	; 0x28
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	bf04      	itt	eq
 8002fd6:	2301      	moveq	r3, #1
 8002fd8:	6183      	streq	r3, [r0, #24]
 8002fda:	f000 f81f 	bl	800301c <__sfp>
 8002fde:	6060      	str	r0, [r4, #4]
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 f81b 	bl	800301c <__sfp>
 8002fe6:	60a0      	str	r0, [r4, #8]
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f000 f817 	bl	800301c <__sfp>
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60e0      	str	r0, [r4, #12]
 8002ff2:	2104      	movs	r1, #4
 8002ff4:	6860      	ldr	r0, [r4, #4]
 8002ff6:	f7ff ffa1 	bl	8002f3c <std>
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2109      	movs	r1, #9
 8002ffe:	68a0      	ldr	r0, [r4, #8]
 8003000:	f7ff ff9c 	bl	8002f3c <std>
 8003004:	2202      	movs	r2, #2
 8003006:	2112      	movs	r1, #18
 8003008:	68e0      	ldr	r0, [r4, #12]
 800300a:	f7ff ff97 	bl	8002f3c <std>
 800300e:	2301      	movs	r3, #1
 8003010:	61a3      	str	r3, [r4, #24]
 8003012:	bd10      	pop	{r4, pc}
 8003014:	080040d0 	.word	0x080040d0
 8003018:	08002f85 	.word	0x08002f85

0800301c <__sfp>:
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <__sfp+0x70>)
 8003020:	4607      	mov	r7, r0
 8003022:	681e      	ldr	r6, [r3, #0]
 8003024:	69b3      	ldr	r3, [r6, #24]
 8003026:	b913      	cbnz	r3, 800302e <__sfp+0x12>
 8003028:	4630      	mov	r0, r6
 800302a:	f7ff ffc7 	bl	8002fbc <__sinit>
 800302e:	3648      	adds	r6, #72	; 0x48
 8003030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003034:	3b01      	subs	r3, #1
 8003036:	d503      	bpl.n	8003040 <__sfp+0x24>
 8003038:	6833      	ldr	r3, [r6, #0]
 800303a:	b133      	cbz	r3, 800304a <__sfp+0x2e>
 800303c:	6836      	ldr	r6, [r6, #0]
 800303e:	e7f7      	b.n	8003030 <__sfp+0x14>
 8003040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003044:	b16d      	cbz	r5, 8003062 <__sfp+0x46>
 8003046:	3468      	adds	r4, #104	; 0x68
 8003048:	e7f4      	b.n	8003034 <__sfp+0x18>
 800304a:	2104      	movs	r1, #4
 800304c:	4638      	mov	r0, r7
 800304e:	f7ff ff9f 	bl	8002f90 <__sfmoreglue>
 8003052:	6030      	str	r0, [r6, #0]
 8003054:	2800      	cmp	r0, #0
 8003056:	d1f1      	bne.n	800303c <__sfp+0x20>
 8003058:	230c      	movs	r3, #12
 800305a:	4604      	mov	r4, r0
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4620      	mov	r0, r4
 8003060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <__sfp+0x74>)
 8003064:	6665      	str	r5, [r4, #100]	; 0x64
 8003066:	e9c4 5500 	strd	r5, r5, [r4]
 800306a:	60a5      	str	r5, [r4, #8]
 800306c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003070:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003074:	2208      	movs	r2, #8
 8003076:	4629      	mov	r1, r5
 8003078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800307c:	f7ff ff1e 	bl	8002ebc <memset>
 8003080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003088:	e7e9      	b.n	800305e <__sfp+0x42>
 800308a:	bf00      	nop
 800308c:	080040d0 	.word	0x080040d0
 8003090:	ffff0001 	.word	0xffff0001

08003094 <_fwalk_reent>:
 8003094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003098:	4680      	mov	r8, r0
 800309a:	4689      	mov	r9, r1
 800309c:	2600      	movs	r6, #0
 800309e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030a2:	b914      	cbnz	r4, 80030aa <_fwalk_reent+0x16>
 80030a4:	4630      	mov	r0, r6
 80030a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80030ae:	3f01      	subs	r7, #1
 80030b0:	d501      	bpl.n	80030b6 <_fwalk_reent+0x22>
 80030b2:	6824      	ldr	r4, [r4, #0]
 80030b4:	e7f5      	b.n	80030a2 <_fwalk_reent+0xe>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d907      	bls.n	80030cc <_fwalk_reent+0x38>
 80030bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030c0:	3301      	adds	r3, #1
 80030c2:	d003      	beq.n	80030cc <_fwalk_reent+0x38>
 80030c4:	4629      	mov	r1, r5
 80030c6:	4640      	mov	r0, r8
 80030c8:	47c8      	blx	r9
 80030ca:	4306      	orrs	r6, r0
 80030cc:	3568      	adds	r5, #104	; 0x68
 80030ce:	e7ee      	b.n	80030ae <_fwalk_reent+0x1a>

080030d0 <_malloc_r>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	1ccd      	adds	r5, r1, #3
 80030d4:	f025 0503 	bic.w	r5, r5, #3
 80030d8:	3508      	adds	r5, #8
 80030da:	2d0c      	cmp	r5, #12
 80030dc:	bf38      	it	cc
 80030de:	250c      	movcc	r5, #12
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	4606      	mov	r6, r0
 80030e4:	db01      	blt.n	80030ea <_malloc_r+0x1a>
 80030e6:	42a9      	cmp	r1, r5
 80030e8:	d903      	bls.n	80030f2 <_malloc_r+0x22>
 80030ea:	230c      	movs	r3, #12
 80030ec:	6033      	str	r3, [r6, #0]
 80030ee:	2000      	movs	r0, #0
 80030f0:	bd70      	pop	{r4, r5, r6, pc}
 80030f2:	f000 feed 	bl	8003ed0 <__malloc_lock>
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <_malloc_r+0xac>)
 80030f8:	6814      	ldr	r4, [r2, #0]
 80030fa:	4621      	mov	r1, r4
 80030fc:	b991      	cbnz	r1, 8003124 <_malloc_r+0x54>
 80030fe:	4c20      	ldr	r4, [pc, #128]	; (8003180 <_malloc_r+0xb0>)
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	b91b      	cbnz	r3, 800310c <_malloc_r+0x3c>
 8003104:	4630      	mov	r0, r6
 8003106:	f000 fc55 	bl	80039b4 <_sbrk_r>
 800310a:	6020      	str	r0, [r4, #0]
 800310c:	4629      	mov	r1, r5
 800310e:	4630      	mov	r0, r6
 8003110:	f000 fc50 	bl	80039b4 <_sbrk_r>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d124      	bne.n	8003162 <_malloc_r+0x92>
 8003118:	230c      	movs	r3, #12
 800311a:	4630      	mov	r0, r6
 800311c:	6033      	str	r3, [r6, #0]
 800311e:	f000 fed8 	bl	8003ed2 <__malloc_unlock>
 8003122:	e7e4      	b.n	80030ee <_malloc_r+0x1e>
 8003124:	680b      	ldr	r3, [r1, #0]
 8003126:	1b5b      	subs	r3, r3, r5
 8003128:	d418      	bmi.n	800315c <_malloc_r+0x8c>
 800312a:	2b0b      	cmp	r3, #11
 800312c:	d90f      	bls.n	800314e <_malloc_r+0x7e>
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	18cc      	adds	r4, r1, r3
 8003132:	50cd      	str	r5, [r1, r3]
 8003134:	4630      	mov	r0, r6
 8003136:	f000 fecc 	bl	8003ed2 <__malloc_unlock>
 800313a:	f104 000b 	add.w	r0, r4, #11
 800313e:	1d23      	adds	r3, r4, #4
 8003140:	f020 0007 	bic.w	r0, r0, #7
 8003144:	1ac3      	subs	r3, r0, r3
 8003146:	d0d3      	beq.n	80030f0 <_malloc_r+0x20>
 8003148:	425a      	negs	r2, r3
 800314a:	50e2      	str	r2, [r4, r3]
 800314c:	e7d0      	b.n	80030f0 <_malloc_r+0x20>
 800314e:	684b      	ldr	r3, [r1, #4]
 8003150:	428c      	cmp	r4, r1
 8003152:	bf16      	itet	ne
 8003154:	6063      	strne	r3, [r4, #4]
 8003156:	6013      	streq	r3, [r2, #0]
 8003158:	460c      	movne	r4, r1
 800315a:	e7eb      	b.n	8003134 <_malloc_r+0x64>
 800315c:	460c      	mov	r4, r1
 800315e:	6849      	ldr	r1, [r1, #4]
 8003160:	e7cc      	b.n	80030fc <_malloc_r+0x2c>
 8003162:	1cc4      	adds	r4, r0, #3
 8003164:	f024 0403 	bic.w	r4, r4, #3
 8003168:	42a0      	cmp	r0, r4
 800316a:	d005      	beq.n	8003178 <_malloc_r+0xa8>
 800316c:	1a21      	subs	r1, r4, r0
 800316e:	4630      	mov	r0, r6
 8003170:	f000 fc20 	bl	80039b4 <_sbrk_r>
 8003174:	3001      	adds	r0, #1
 8003176:	d0cf      	beq.n	8003118 <_malloc_r+0x48>
 8003178:	6025      	str	r5, [r4, #0]
 800317a:	e7db      	b.n	8003134 <_malloc_r+0x64>
 800317c:	20000098 	.word	0x20000098
 8003180:	2000009c 	.word	0x2000009c

08003184 <__ssputs_r>:
 8003184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003188:	688e      	ldr	r6, [r1, #8]
 800318a:	4682      	mov	sl, r0
 800318c:	429e      	cmp	r6, r3
 800318e:	460c      	mov	r4, r1
 8003190:	4690      	mov	r8, r2
 8003192:	4699      	mov	r9, r3
 8003194:	d837      	bhi.n	8003206 <__ssputs_r+0x82>
 8003196:	898a      	ldrh	r2, [r1, #12]
 8003198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800319c:	d031      	beq.n	8003202 <__ssputs_r+0x7e>
 800319e:	2302      	movs	r3, #2
 80031a0:	6825      	ldr	r5, [r4, #0]
 80031a2:	6909      	ldr	r1, [r1, #16]
 80031a4:	1a6f      	subs	r7, r5, r1
 80031a6:	6965      	ldr	r5, [r4, #20]
 80031a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80031b0:	f109 0301 	add.w	r3, r9, #1
 80031b4:	443b      	add	r3, r7
 80031b6:	429d      	cmp	r5, r3
 80031b8:	bf38      	it	cc
 80031ba:	461d      	movcc	r5, r3
 80031bc:	0553      	lsls	r3, r2, #21
 80031be:	d530      	bpl.n	8003222 <__ssputs_r+0x9e>
 80031c0:	4629      	mov	r1, r5
 80031c2:	f7ff ff85 	bl	80030d0 <_malloc_r>
 80031c6:	4606      	mov	r6, r0
 80031c8:	b950      	cbnz	r0, 80031e0 <__ssputs_r+0x5c>
 80031ca:	230c      	movs	r3, #12
 80031cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031d0:	f8ca 3000 	str.w	r3, [sl]
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031da:	81a3      	strh	r3, [r4, #12]
 80031dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e0:	463a      	mov	r2, r7
 80031e2:	6921      	ldr	r1, [r4, #16]
 80031e4:	f000 fe50 	bl	8003e88 <memcpy>
 80031e8:	89a3      	ldrh	r3, [r4, #12]
 80031ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80031ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f2:	81a3      	strh	r3, [r4, #12]
 80031f4:	6126      	str	r6, [r4, #16]
 80031f6:	443e      	add	r6, r7
 80031f8:	6026      	str	r6, [r4, #0]
 80031fa:	464e      	mov	r6, r9
 80031fc:	6165      	str	r5, [r4, #20]
 80031fe:	1bed      	subs	r5, r5, r7
 8003200:	60a5      	str	r5, [r4, #8]
 8003202:	454e      	cmp	r6, r9
 8003204:	d900      	bls.n	8003208 <__ssputs_r+0x84>
 8003206:	464e      	mov	r6, r9
 8003208:	4632      	mov	r2, r6
 800320a:	4641      	mov	r1, r8
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f000 fe46 	bl	8003e9e <memmove>
 8003212:	68a3      	ldr	r3, [r4, #8]
 8003214:	2000      	movs	r0, #0
 8003216:	1b9b      	subs	r3, r3, r6
 8003218:	60a3      	str	r3, [r4, #8]
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	441e      	add	r6, r3
 800321e:	6026      	str	r6, [r4, #0]
 8003220:	e7dc      	b.n	80031dc <__ssputs_r+0x58>
 8003222:	462a      	mov	r2, r5
 8003224:	f000 fea2 	bl	8003f6c <_realloc_r>
 8003228:	4606      	mov	r6, r0
 800322a:	2800      	cmp	r0, #0
 800322c:	d1e2      	bne.n	80031f4 <__ssputs_r+0x70>
 800322e:	6921      	ldr	r1, [r4, #16]
 8003230:	4650      	mov	r0, sl
 8003232:	f000 fe4f 	bl	8003ed4 <_free_r>
 8003236:	e7c8      	b.n	80031ca <__ssputs_r+0x46>

08003238 <_svfiprintf_r>:
 8003238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800323c:	461d      	mov	r5, r3
 800323e:	898b      	ldrh	r3, [r1, #12]
 8003240:	b09d      	sub	sp, #116	; 0x74
 8003242:	061f      	lsls	r7, r3, #24
 8003244:	4680      	mov	r8, r0
 8003246:	460c      	mov	r4, r1
 8003248:	4616      	mov	r6, r2
 800324a:	d50f      	bpl.n	800326c <_svfiprintf_r+0x34>
 800324c:	690b      	ldr	r3, [r1, #16]
 800324e:	b96b      	cbnz	r3, 800326c <_svfiprintf_r+0x34>
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	f7ff ff3d 	bl	80030d0 <_malloc_r>
 8003256:	6020      	str	r0, [r4, #0]
 8003258:	6120      	str	r0, [r4, #16]
 800325a:	b928      	cbnz	r0, 8003268 <_svfiprintf_r+0x30>
 800325c:	230c      	movs	r3, #12
 800325e:	f8c8 3000 	str.w	r3, [r8]
 8003262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003266:	e0c8      	b.n	80033fa <_svfiprintf_r+0x1c2>
 8003268:	2340      	movs	r3, #64	; 0x40
 800326a:	6163      	str	r3, [r4, #20]
 800326c:	2300      	movs	r3, #0
 800326e:	9309      	str	r3, [sp, #36]	; 0x24
 8003270:	2320      	movs	r3, #32
 8003272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003276:	2330      	movs	r3, #48	; 0x30
 8003278:	f04f 0b01 	mov.w	fp, #1
 800327c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003280:	9503      	str	r5, [sp, #12]
 8003282:	4637      	mov	r7, r6
 8003284:	463d      	mov	r5, r7
 8003286:	f815 3b01 	ldrb.w	r3, [r5], #1
 800328a:	b10b      	cbz	r3, 8003290 <_svfiprintf_r+0x58>
 800328c:	2b25      	cmp	r3, #37	; 0x25
 800328e:	d13e      	bne.n	800330e <_svfiprintf_r+0xd6>
 8003290:	ebb7 0a06 	subs.w	sl, r7, r6
 8003294:	d00b      	beq.n	80032ae <_svfiprintf_r+0x76>
 8003296:	4653      	mov	r3, sl
 8003298:	4632      	mov	r2, r6
 800329a:	4621      	mov	r1, r4
 800329c:	4640      	mov	r0, r8
 800329e:	f7ff ff71 	bl	8003184 <__ssputs_r>
 80032a2:	3001      	adds	r0, #1
 80032a4:	f000 80a4 	beq.w	80033f0 <_svfiprintf_r+0x1b8>
 80032a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032aa:	4453      	add	r3, sl
 80032ac:	9309      	str	r3, [sp, #36]	; 0x24
 80032ae:	783b      	ldrb	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 809d 	beq.w	80033f0 <_svfiprintf_r+0x1b8>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c0:	9304      	str	r3, [sp, #16]
 80032c2:	9307      	str	r3, [sp, #28]
 80032c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032c8:	931a      	str	r3, [sp, #104]	; 0x68
 80032ca:	462f      	mov	r7, r5
 80032cc:	2205      	movs	r2, #5
 80032ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80032d2:	4850      	ldr	r0, [pc, #320]	; (8003414 <_svfiprintf_r+0x1dc>)
 80032d4:	f000 fdca 	bl	8003e6c <memchr>
 80032d8:	9b04      	ldr	r3, [sp, #16]
 80032da:	b9d0      	cbnz	r0, 8003312 <_svfiprintf_r+0xda>
 80032dc:	06d9      	lsls	r1, r3, #27
 80032de:	bf44      	itt	mi
 80032e0:	2220      	movmi	r2, #32
 80032e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032e6:	071a      	lsls	r2, r3, #28
 80032e8:	bf44      	itt	mi
 80032ea:	222b      	movmi	r2, #43	; 0x2b
 80032ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032f0:	782a      	ldrb	r2, [r5, #0]
 80032f2:	2a2a      	cmp	r2, #42	; 0x2a
 80032f4:	d015      	beq.n	8003322 <_svfiprintf_r+0xea>
 80032f6:	462f      	mov	r7, r5
 80032f8:	2000      	movs	r0, #0
 80032fa:	250a      	movs	r5, #10
 80032fc:	9a07      	ldr	r2, [sp, #28]
 80032fe:	4639      	mov	r1, r7
 8003300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003304:	3b30      	subs	r3, #48	; 0x30
 8003306:	2b09      	cmp	r3, #9
 8003308:	d94d      	bls.n	80033a6 <_svfiprintf_r+0x16e>
 800330a:	b1b8      	cbz	r0, 800333c <_svfiprintf_r+0x104>
 800330c:	e00f      	b.n	800332e <_svfiprintf_r+0xf6>
 800330e:	462f      	mov	r7, r5
 8003310:	e7b8      	b.n	8003284 <_svfiprintf_r+0x4c>
 8003312:	4a40      	ldr	r2, [pc, #256]	; (8003414 <_svfiprintf_r+0x1dc>)
 8003314:	463d      	mov	r5, r7
 8003316:	1a80      	subs	r0, r0, r2
 8003318:	fa0b f000 	lsl.w	r0, fp, r0
 800331c:	4318      	orrs	r0, r3
 800331e:	9004      	str	r0, [sp, #16]
 8003320:	e7d3      	b.n	80032ca <_svfiprintf_r+0x92>
 8003322:	9a03      	ldr	r2, [sp, #12]
 8003324:	1d11      	adds	r1, r2, #4
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	9103      	str	r1, [sp, #12]
 800332a:	2a00      	cmp	r2, #0
 800332c:	db01      	blt.n	8003332 <_svfiprintf_r+0xfa>
 800332e:	9207      	str	r2, [sp, #28]
 8003330:	e004      	b.n	800333c <_svfiprintf_r+0x104>
 8003332:	4252      	negs	r2, r2
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	9207      	str	r2, [sp, #28]
 800333a:	9304      	str	r3, [sp, #16]
 800333c:	783b      	ldrb	r3, [r7, #0]
 800333e:	2b2e      	cmp	r3, #46	; 0x2e
 8003340:	d10c      	bne.n	800335c <_svfiprintf_r+0x124>
 8003342:	787b      	ldrb	r3, [r7, #1]
 8003344:	2b2a      	cmp	r3, #42	; 0x2a
 8003346:	d133      	bne.n	80033b0 <_svfiprintf_r+0x178>
 8003348:	9b03      	ldr	r3, [sp, #12]
 800334a:	3702      	adds	r7, #2
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	9203      	str	r2, [sp, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	bfb8      	it	lt
 8003356:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800335a:	9305      	str	r3, [sp, #20]
 800335c:	4d2e      	ldr	r5, [pc, #184]	; (8003418 <_svfiprintf_r+0x1e0>)
 800335e:	2203      	movs	r2, #3
 8003360:	7839      	ldrb	r1, [r7, #0]
 8003362:	4628      	mov	r0, r5
 8003364:	f000 fd82 	bl	8003e6c <memchr>
 8003368:	b138      	cbz	r0, 800337a <_svfiprintf_r+0x142>
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	1b40      	subs	r0, r0, r5
 800336e:	fa03 f000 	lsl.w	r0, r3, r0
 8003372:	9b04      	ldr	r3, [sp, #16]
 8003374:	3701      	adds	r7, #1
 8003376:	4303      	orrs	r3, r0
 8003378:	9304      	str	r3, [sp, #16]
 800337a:	7839      	ldrb	r1, [r7, #0]
 800337c:	2206      	movs	r2, #6
 800337e:	4827      	ldr	r0, [pc, #156]	; (800341c <_svfiprintf_r+0x1e4>)
 8003380:	1c7e      	adds	r6, r7, #1
 8003382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003386:	f000 fd71 	bl	8003e6c <memchr>
 800338a:	2800      	cmp	r0, #0
 800338c:	d038      	beq.n	8003400 <_svfiprintf_r+0x1c8>
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <_svfiprintf_r+0x1e8>)
 8003390:	bb13      	cbnz	r3, 80033d8 <_svfiprintf_r+0x1a0>
 8003392:	9b03      	ldr	r3, [sp, #12]
 8003394:	3307      	adds	r3, #7
 8003396:	f023 0307 	bic.w	r3, r3, #7
 800339a:	3308      	adds	r3, #8
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033a0:	444b      	add	r3, r9
 80033a2:	9309      	str	r3, [sp, #36]	; 0x24
 80033a4:	e76d      	b.n	8003282 <_svfiprintf_r+0x4a>
 80033a6:	fb05 3202 	mla	r2, r5, r2, r3
 80033aa:	2001      	movs	r0, #1
 80033ac:	460f      	mov	r7, r1
 80033ae:	e7a6      	b.n	80032fe <_svfiprintf_r+0xc6>
 80033b0:	2300      	movs	r3, #0
 80033b2:	250a      	movs	r5, #10
 80033b4:	4619      	mov	r1, r3
 80033b6:	3701      	adds	r7, #1
 80033b8:	9305      	str	r3, [sp, #20]
 80033ba:	4638      	mov	r0, r7
 80033bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c0:	3a30      	subs	r2, #48	; 0x30
 80033c2:	2a09      	cmp	r2, #9
 80033c4:	d903      	bls.n	80033ce <_svfiprintf_r+0x196>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0c8      	beq.n	800335c <_svfiprintf_r+0x124>
 80033ca:	9105      	str	r1, [sp, #20]
 80033cc:	e7c6      	b.n	800335c <_svfiprintf_r+0x124>
 80033ce:	fb05 2101 	mla	r1, r5, r1, r2
 80033d2:	2301      	movs	r3, #1
 80033d4:	4607      	mov	r7, r0
 80033d6:	e7f0      	b.n	80033ba <_svfiprintf_r+0x182>
 80033d8:	ab03      	add	r3, sp, #12
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4622      	mov	r2, r4
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <_svfiprintf_r+0x1ec>)
 80033e0:	a904      	add	r1, sp, #16
 80033e2:	4640      	mov	r0, r8
 80033e4:	f3af 8000 	nop.w
 80033e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80033ec:	4681      	mov	r9, r0
 80033ee:	d1d6      	bne.n	800339e <_svfiprintf_r+0x166>
 80033f0:	89a3      	ldrh	r3, [r4, #12]
 80033f2:	065b      	lsls	r3, r3, #25
 80033f4:	f53f af35 	bmi.w	8003262 <_svfiprintf_r+0x2a>
 80033f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033fa:	b01d      	add	sp, #116	; 0x74
 80033fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003400:	ab03      	add	r3, sp, #12
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	4622      	mov	r2, r4
 8003406:	4b07      	ldr	r3, [pc, #28]	; (8003424 <_svfiprintf_r+0x1ec>)
 8003408:	a904      	add	r1, sp, #16
 800340a:	4640      	mov	r0, r8
 800340c:	f000 f9c0 	bl	8003790 <_printf_i>
 8003410:	e7ea      	b.n	80033e8 <_svfiprintf_r+0x1b0>
 8003412:	bf00      	nop
 8003414:	08004134 	.word	0x08004134
 8003418:	0800413a 	.word	0x0800413a
 800341c:	0800413e 	.word	0x0800413e
 8003420:	00000000 	.word	0x00000000
 8003424:	08003185 	.word	0x08003185

08003428 <__sfputc_r>:
 8003428:	6893      	ldr	r3, [r2, #8]
 800342a:	b410      	push	{r4}
 800342c:	3b01      	subs	r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	6093      	str	r3, [r2, #8]
 8003432:	da07      	bge.n	8003444 <__sfputc_r+0x1c>
 8003434:	6994      	ldr	r4, [r2, #24]
 8003436:	42a3      	cmp	r3, r4
 8003438:	db01      	blt.n	800343e <__sfputc_r+0x16>
 800343a:	290a      	cmp	r1, #10
 800343c:	d102      	bne.n	8003444 <__sfputc_r+0x1c>
 800343e:	bc10      	pop	{r4}
 8003440:	f000 bb0c 	b.w	8003a5c <__swbuf_r>
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	1c58      	adds	r0, r3, #1
 8003448:	6010      	str	r0, [r2, #0]
 800344a:	7019      	strb	r1, [r3, #0]
 800344c:	4608      	mov	r0, r1
 800344e:	bc10      	pop	{r4}
 8003450:	4770      	bx	lr

08003452 <__sfputs_r>:
 8003452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003454:	4606      	mov	r6, r0
 8003456:	460f      	mov	r7, r1
 8003458:	4614      	mov	r4, r2
 800345a:	18d5      	adds	r5, r2, r3
 800345c:	42ac      	cmp	r4, r5
 800345e:	d101      	bne.n	8003464 <__sfputs_r+0x12>
 8003460:	2000      	movs	r0, #0
 8003462:	e007      	b.n	8003474 <__sfputs_r+0x22>
 8003464:	463a      	mov	r2, r7
 8003466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346a:	4630      	mov	r0, r6
 800346c:	f7ff ffdc 	bl	8003428 <__sfputc_r>
 8003470:	1c43      	adds	r3, r0, #1
 8003472:	d1f3      	bne.n	800345c <__sfputs_r+0xa>
 8003474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003478 <_vfiprintf_r>:
 8003478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347c:	460c      	mov	r4, r1
 800347e:	b09d      	sub	sp, #116	; 0x74
 8003480:	4617      	mov	r7, r2
 8003482:	461d      	mov	r5, r3
 8003484:	4606      	mov	r6, r0
 8003486:	b118      	cbz	r0, 8003490 <_vfiprintf_r+0x18>
 8003488:	6983      	ldr	r3, [r0, #24]
 800348a:	b90b      	cbnz	r3, 8003490 <_vfiprintf_r+0x18>
 800348c:	f7ff fd96 	bl	8002fbc <__sinit>
 8003490:	4b7c      	ldr	r3, [pc, #496]	; (8003684 <_vfiprintf_r+0x20c>)
 8003492:	429c      	cmp	r4, r3
 8003494:	d158      	bne.n	8003548 <_vfiprintf_r+0xd0>
 8003496:	6874      	ldr	r4, [r6, #4]
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	0718      	lsls	r0, r3, #28
 800349c:	d55e      	bpl.n	800355c <_vfiprintf_r+0xe4>
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05b      	beq.n	800355c <_vfiprintf_r+0xe4>
 80034a4:	2300      	movs	r3, #0
 80034a6:	9309      	str	r3, [sp, #36]	; 0x24
 80034a8:	2320      	movs	r3, #32
 80034aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034ae:	2330      	movs	r3, #48	; 0x30
 80034b0:	f04f 0b01 	mov.w	fp, #1
 80034b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034b8:	9503      	str	r5, [sp, #12]
 80034ba:	46b8      	mov	r8, r7
 80034bc:	4645      	mov	r5, r8
 80034be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80034c2:	b10b      	cbz	r3, 80034c8 <_vfiprintf_r+0x50>
 80034c4:	2b25      	cmp	r3, #37	; 0x25
 80034c6:	d154      	bne.n	8003572 <_vfiprintf_r+0xfa>
 80034c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80034cc:	d00b      	beq.n	80034e6 <_vfiprintf_r+0x6e>
 80034ce:	4653      	mov	r3, sl
 80034d0:	463a      	mov	r2, r7
 80034d2:	4621      	mov	r1, r4
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7ff ffbc 	bl	8003452 <__sfputs_r>
 80034da:	3001      	adds	r0, #1
 80034dc:	f000 80c2 	beq.w	8003664 <_vfiprintf_r+0x1ec>
 80034e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e2:	4453      	add	r3, sl
 80034e4:	9309      	str	r3, [sp, #36]	; 0x24
 80034e6:	f898 3000 	ldrb.w	r3, [r8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80ba 	beq.w	8003664 <_vfiprintf_r+0x1ec>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034fa:	9304      	str	r3, [sp, #16]
 80034fc:	9307      	str	r3, [sp, #28]
 80034fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003502:	931a      	str	r3, [sp, #104]	; 0x68
 8003504:	46a8      	mov	r8, r5
 8003506:	2205      	movs	r2, #5
 8003508:	f818 1b01 	ldrb.w	r1, [r8], #1
 800350c:	485e      	ldr	r0, [pc, #376]	; (8003688 <_vfiprintf_r+0x210>)
 800350e:	f000 fcad 	bl	8003e6c <memchr>
 8003512:	9b04      	ldr	r3, [sp, #16]
 8003514:	bb78      	cbnz	r0, 8003576 <_vfiprintf_r+0xfe>
 8003516:	06d9      	lsls	r1, r3, #27
 8003518:	bf44      	itt	mi
 800351a:	2220      	movmi	r2, #32
 800351c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003520:	071a      	lsls	r2, r3, #28
 8003522:	bf44      	itt	mi
 8003524:	222b      	movmi	r2, #43	; 0x2b
 8003526:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800352a:	782a      	ldrb	r2, [r5, #0]
 800352c:	2a2a      	cmp	r2, #42	; 0x2a
 800352e:	d02a      	beq.n	8003586 <_vfiprintf_r+0x10e>
 8003530:	46a8      	mov	r8, r5
 8003532:	2000      	movs	r0, #0
 8003534:	250a      	movs	r5, #10
 8003536:	9a07      	ldr	r2, [sp, #28]
 8003538:	4641      	mov	r1, r8
 800353a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800353e:	3b30      	subs	r3, #48	; 0x30
 8003540:	2b09      	cmp	r3, #9
 8003542:	d969      	bls.n	8003618 <_vfiprintf_r+0x1a0>
 8003544:	b360      	cbz	r0, 80035a0 <_vfiprintf_r+0x128>
 8003546:	e024      	b.n	8003592 <_vfiprintf_r+0x11a>
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <_vfiprintf_r+0x214>)
 800354a:	429c      	cmp	r4, r3
 800354c:	d101      	bne.n	8003552 <_vfiprintf_r+0xda>
 800354e:	68b4      	ldr	r4, [r6, #8]
 8003550:	e7a2      	b.n	8003498 <_vfiprintf_r+0x20>
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <_vfiprintf_r+0x218>)
 8003554:	429c      	cmp	r4, r3
 8003556:	bf08      	it	eq
 8003558:	68f4      	ldreq	r4, [r6, #12]
 800355a:	e79d      	b.n	8003498 <_vfiprintf_r+0x20>
 800355c:	4621      	mov	r1, r4
 800355e:	4630      	mov	r0, r6
 8003560:	f000 fae0 	bl	8003b24 <__swsetup_r>
 8003564:	2800      	cmp	r0, #0
 8003566:	d09d      	beq.n	80034a4 <_vfiprintf_r+0x2c>
 8003568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356c:	b01d      	add	sp, #116	; 0x74
 800356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003572:	46a8      	mov	r8, r5
 8003574:	e7a2      	b.n	80034bc <_vfiprintf_r+0x44>
 8003576:	4a44      	ldr	r2, [pc, #272]	; (8003688 <_vfiprintf_r+0x210>)
 8003578:	4645      	mov	r5, r8
 800357a:	1a80      	subs	r0, r0, r2
 800357c:	fa0b f000 	lsl.w	r0, fp, r0
 8003580:	4318      	orrs	r0, r3
 8003582:	9004      	str	r0, [sp, #16]
 8003584:	e7be      	b.n	8003504 <_vfiprintf_r+0x8c>
 8003586:	9a03      	ldr	r2, [sp, #12]
 8003588:	1d11      	adds	r1, r2, #4
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	9103      	str	r1, [sp, #12]
 800358e:	2a00      	cmp	r2, #0
 8003590:	db01      	blt.n	8003596 <_vfiprintf_r+0x11e>
 8003592:	9207      	str	r2, [sp, #28]
 8003594:	e004      	b.n	80035a0 <_vfiprintf_r+0x128>
 8003596:	4252      	negs	r2, r2
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	9207      	str	r2, [sp, #28]
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	f898 3000 	ldrb.w	r3, [r8]
 80035a4:	2b2e      	cmp	r3, #46	; 0x2e
 80035a6:	d10e      	bne.n	80035c6 <_vfiprintf_r+0x14e>
 80035a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035ac:	2b2a      	cmp	r3, #42	; 0x2a
 80035ae:	d138      	bne.n	8003622 <_vfiprintf_r+0x1aa>
 80035b0:	9b03      	ldr	r3, [sp, #12]
 80035b2:	f108 0802 	add.w	r8, r8, #2
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	9203      	str	r2, [sp, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bfb8      	it	lt
 80035c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035c4:	9305      	str	r3, [sp, #20]
 80035c6:	4d33      	ldr	r5, [pc, #204]	; (8003694 <_vfiprintf_r+0x21c>)
 80035c8:	2203      	movs	r2, #3
 80035ca:	f898 1000 	ldrb.w	r1, [r8]
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fc4c 	bl	8003e6c <memchr>
 80035d4:	b140      	cbz	r0, 80035e8 <_vfiprintf_r+0x170>
 80035d6:	2340      	movs	r3, #64	; 0x40
 80035d8:	1b40      	subs	r0, r0, r5
 80035da:	fa03 f000 	lsl.w	r0, r3, r0
 80035de:	9b04      	ldr	r3, [sp, #16]
 80035e0:	f108 0801 	add.w	r8, r8, #1
 80035e4:	4303      	orrs	r3, r0
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	f898 1000 	ldrb.w	r1, [r8]
 80035ec:	2206      	movs	r2, #6
 80035ee:	482a      	ldr	r0, [pc, #168]	; (8003698 <_vfiprintf_r+0x220>)
 80035f0:	f108 0701 	add.w	r7, r8, #1
 80035f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035f8:	f000 fc38 	bl	8003e6c <memchr>
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d037      	beq.n	8003670 <_vfiprintf_r+0x1f8>
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <_vfiprintf_r+0x224>)
 8003602:	bb1b      	cbnz	r3, 800364c <_vfiprintf_r+0x1d4>
 8003604:	9b03      	ldr	r3, [sp, #12]
 8003606:	3307      	adds	r3, #7
 8003608:	f023 0307 	bic.w	r3, r3, #7
 800360c:	3308      	adds	r3, #8
 800360e:	9303      	str	r3, [sp, #12]
 8003610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003612:	444b      	add	r3, r9
 8003614:	9309      	str	r3, [sp, #36]	; 0x24
 8003616:	e750      	b.n	80034ba <_vfiprintf_r+0x42>
 8003618:	fb05 3202 	mla	r2, r5, r2, r3
 800361c:	2001      	movs	r0, #1
 800361e:	4688      	mov	r8, r1
 8003620:	e78a      	b.n	8003538 <_vfiprintf_r+0xc0>
 8003622:	2300      	movs	r3, #0
 8003624:	250a      	movs	r5, #10
 8003626:	4619      	mov	r1, r3
 8003628:	f108 0801 	add.w	r8, r8, #1
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	4640      	mov	r0, r8
 8003630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003634:	3a30      	subs	r2, #48	; 0x30
 8003636:	2a09      	cmp	r2, #9
 8003638:	d903      	bls.n	8003642 <_vfiprintf_r+0x1ca>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c3      	beq.n	80035c6 <_vfiprintf_r+0x14e>
 800363e:	9105      	str	r1, [sp, #20]
 8003640:	e7c1      	b.n	80035c6 <_vfiprintf_r+0x14e>
 8003642:	fb05 2101 	mla	r1, r5, r1, r2
 8003646:	2301      	movs	r3, #1
 8003648:	4680      	mov	r8, r0
 800364a:	e7f0      	b.n	800362e <_vfiprintf_r+0x1b6>
 800364c:	ab03      	add	r3, sp, #12
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4622      	mov	r2, r4
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <_vfiprintf_r+0x228>)
 8003654:	a904      	add	r1, sp, #16
 8003656:	4630      	mov	r0, r6
 8003658:	f3af 8000 	nop.w
 800365c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003660:	4681      	mov	r9, r0
 8003662:	d1d5      	bne.n	8003610 <_vfiprintf_r+0x198>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	065b      	lsls	r3, r3, #25
 8003668:	f53f af7e 	bmi.w	8003568 <_vfiprintf_r+0xf0>
 800366c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800366e:	e77d      	b.n	800356c <_vfiprintf_r+0xf4>
 8003670:	ab03      	add	r3, sp, #12
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4622      	mov	r2, r4
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <_vfiprintf_r+0x228>)
 8003678:	a904      	add	r1, sp, #16
 800367a:	4630      	mov	r0, r6
 800367c:	f000 f888 	bl	8003790 <_printf_i>
 8003680:	e7ec      	b.n	800365c <_vfiprintf_r+0x1e4>
 8003682:	bf00      	nop
 8003684:	080040f4 	.word	0x080040f4
 8003688:	08004134 	.word	0x08004134
 800368c:	08004114 	.word	0x08004114
 8003690:	080040d4 	.word	0x080040d4
 8003694:	0800413a 	.word	0x0800413a
 8003698:	0800413e 	.word	0x0800413e
 800369c:	00000000 	.word	0x00000000
 80036a0:	08003453 	.word	0x08003453

080036a4 <_printf_common>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4691      	mov	r9, r2
 80036aa:	461f      	mov	r7, r3
 80036ac:	688a      	ldr	r2, [r1, #8]
 80036ae:	690b      	ldr	r3, [r1, #16]
 80036b0:	4606      	mov	r6, r0
 80036b2:	4293      	cmp	r3, r2
 80036b4:	bfb8      	it	lt
 80036b6:	4613      	movlt	r3, r2
 80036b8:	f8c9 3000 	str.w	r3, [r9]
 80036bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036c0:	460c      	mov	r4, r1
 80036c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036c6:	b112      	cbz	r2, 80036ce <_printf_common+0x2a>
 80036c8:	3301      	adds	r3, #1
 80036ca:	f8c9 3000 	str.w	r3, [r9]
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	0699      	lsls	r1, r3, #26
 80036d2:	bf42      	ittt	mi
 80036d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80036d8:	3302      	addmi	r3, #2
 80036da:	f8c9 3000 	strmi.w	r3, [r9]
 80036de:	6825      	ldr	r5, [r4, #0]
 80036e0:	f015 0506 	ands.w	r5, r5, #6
 80036e4:	d107      	bne.n	80036f6 <_printf_common+0x52>
 80036e6:	f104 0a19 	add.w	sl, r4, #25
 80036ea:	68e3      	ldr	r3, [r4, #12]
 80036ec:	f8d9 2000 	ldr.w	r2, [r9]
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	42ab      	cmp	r3, r5
 80036f4:	dc29      	bgt.n	800374a <_printf_common+0xa6>
 80036f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80036fa:	6822      	ldr	r2, [r4, #0]
 80036fc:	3300      	adds	r3, #0
 80036fe:	bf18      	it	ne
 8003700:	2301      	movne	r3, #1
 8003702:	0692      	lsls	r2, r2, #26
 8003704:	d42e      	bmi.n	8003764 <_printf_common+0xc0>
 8003706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800370a:	4639      	mov	r1, r7
 800370c:	4630      	mov	r0, r6
 800370e:	47c0      	blx	r8
 8003710:	3001      	adds	r0, #1
 8003712:	d021      	beq.n	8003758 <_printf_common+0xb4>
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	68e5      	ldr	r5, [r4, #12]
 8003718:	f003 0306 	and.w	r3, r3, #6
 800371c:	2b04      	cmp	r3, #4
 800371e:	bf18      	it	ne
 8003720:	2500      	movne	r5, #0
 8003722:	f8d9 2000 	ldr.w	r2, [r9]
 8003726:	f04f 0900 	mov.w	r9, #0
 800372a:	bf08      	it	eq
 800372c:	1aad      	subeq	r5, r5, r2
 800372e:	68a3      	ldr	r3, [r4, #8]
 8003730:	6922      	ldr	r2, [r4, #16]
 8003732:	bf08      	it	eq
 8003734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003738:	4293      	cmp	r3, r2
 800373a:	bfc4      	itt	gt
 800373c:	1a9b      	subgt	r3, r3, r2
 800373e:	18ed      	addgt	r5, r5, r3
 8003740:	341a      	adds	r4, #26
 8003742:	454d      	cmp	r5, r9
 8003744:	d11a      	bne.n	800377c <_printf_common+0xd8>
 8003746:	2000      	movs	r0, #0
 8003748:	e008      	b.n	800375c <_printf_common+0xb8>
 800374a:	2301      	movs	r3, #1
 800374c:	4652      	mov	r2, sl
 800374e:	4639      	mov	r1, r7
 8003750:	4630      	mov	r0, r6
 8003752:	47c0      	blx	r8
 8003754:	3001      	adds	r0, #1
 8003756:	d103      	bne.n	8003760 <_printf_common+0xbc>
 8003758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	3501      	adds	r5, #1
 8003762:	e7c2      	b.n	80036ea <_printf_common+0x46>
 8003764:	2030      	movs	r0, #48	; 0x30
 8003766:	18e1      	adds	r1, r4, r3
 8003768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003772:	4422      	add	r2, r4
 8003774:	3302      	adds	r3, #2
 8003776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800377a:	e7c4      	b.n	8003706 <_printf_common+0x62>
 800377c:	2301      	movs	r3, #1
 800377e:	4622      	mov	r2, r4
 8003780:	4639      	mov	r1, r7
 8003782:	4630      	mov	r0, r6
 8003784:	47c0      	blx	r8
 8003786:	3001      	adds	r0, #1
 8003788:	d0e6      	beq.n	8003758 <_printf_common+0xb4>
 800378a:	f109 0901 	add.w	r9, r9, #1
 800378e:	e7d8      	b.n	8003742 <_printf_common+0x9e>

08003790 <_printf_i>:
 8003790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003794:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003798:	460c      	mov	r4, r1
 800379a:	7e09      	ldrb	r1, [r1, #24]
 800379c:	b085      	sub	sp, #20
 800379e:	296e      	cmp	r1, #110	; 0x6e
 80037a0:	4617      	mov	r7, r2
 80037a2:	4606      	mov	r6, r0
 80037a4:	4698      	mov	r8, r3
 80037a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037a8:	f000 80b3 	beq.w	8003912 <_printf_i+0x182>
 80037ac:	d822      	bhi.n	80037f4 <_printf_i+0x64>
 80037ae:	2963      	cmp	r1, #99	; 0x63
 80037b0:	d036      	beq.n	8003820 <_printf_i+0x90>
 80037b2:	d80a      	bhi.n	80037ca <_printf_i+0x3a>
 80037b4:	2900      	cmp	r1, #0
 80037b6:	f000 80b9 	beq.w	800392c <_printf_i+0x19c>
 80037ba:	2958      	cmp	r1, #88	; 0x58
 80037bc:	f000 8083 	beq.w	80038c6 <_printf_i+0x136>
 80037c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80037c8:	e032      	b.n	8003830 <_printf_i+0xa0>
 80037ca:	2964      	cmp	r1, #100	; 0x64
 80037cc:	d001      	beq.n	80037d2 <_printf_i+0x42>
 80037ce:	2969      	cmp	r1, #105	; 0x69
 80037d0:	d1f6      	bne.n	80037c0 <_printf_i+0x30>
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	0605      	lsls	r5, r0, #24
 80037d8:	f103 0104 	add.w	r1, r3, #4
 80037dc:	d52a      	bpl.n	8003834 <_printf_i+0xa4>
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6011      	str	r1, [r2, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	da03      	bge.n	80037ee <_printf_i+0x5e>
 80037e6:	222d      	movs	r2, #45	; 0x2d
 80037e8:	425b      	negs	r3, r3
 80037ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037ee:	486f      	ldr	r0, [pc, #444]	; (80039ac <_printf_i+0x21c>)
 80037f0:	220a      	movs	r2, #10
 80037f2:	e039      	b.n	8003868 <_printf_i+0xd8>
 80037f4:	2973      	cmp	r1, #115	; 0x73
 80037f6:	f000 809d 	beq.w	8003934 <_printf_i+0x1a4>
 80037fa:	d808      	bhi.n	800380e <_printf_i+0x7e>
 80037fc:	296f      	cmp	r1, #111	; 0x6f
 80037fe:	d020      	beq.n	8003842 <_printf_i+0xb2>
 8003800:	2970      	cmp	r1, #112	; 0x70
 8003802:	d1dd      	bne.n	80037c0 <_printf_i+0x30>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f043 0320 	orr.w	r3, r3, #32
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	e003      	b.n	8003816 <_printf_i+0x86>
 800380e:	2975      	cmp	r1, #117	; 0x75
 8003810:	d017      	beq.n	8003842 <_printf_i+0xb2>
 8003812:	2978      	cmp	r1, #120	; 0x78
 8003814:	d1d4      	bne.n	80037c0 <_printf_i+0x30>
 8003816:	2378      	movs	r3, #120	; 0x78
 8003818:	4865      	ldr	r0, [pc, #404]	; (80039b0 <_printf_i+0x220>)
 800381a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800381e:	e055      	b.n	80038cc <_printf_i+0x13c>
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003826:	1d19      	adds	r1, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6011      	str	r1, [r2, #0]
 800382c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003830:	2301      	movs	r3, #1
 8003832:	e08c      	b.n	800394e <_printf_i+0x1be>
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800383a:	6011      	str	r1, [r2, #0]
 800383c:	bf18      	it	ne
 800383e:	b21b      	sxthne	r3, r3
 8003840:	e7cf      	b.n	80037e2 <_printf_i+0x52>
 8003842:	6813      	ldr	r3, [r2, #0]
 8003844:	6825      	ldr	r5, [r4, #0]
 8003846:	1d18      	adds	r0, r3, #4
 8003848:	6010      	str	r0, [r2, #0]
 800384a:	0628      	lsls	r0, r5, #24
 800384c:	d501      	bpl.n	8003852 <_printf_i+0xc2>
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	e002      	b.n	8003858 <_printf_i+0xc8>
 8003852:	0668      	lsls	r0, r5, #25
 8003854:	d5fb      	bpl.n	800384e <_printf_i+0xbe>
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	296f      	cmp	r1, #111	; 0x6f
 800385a:	bf14      	ite	ne
 800385c:	220a      	movne	r2, #10
 800385e:	2208      	moveq	r2, #8
 8003860:	4852      	ldr	r0, [pc, #328]	; (80039ac <_printf_i+0x21c>)
 8003862:	2100      	movs	r1, #0
 8003864:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003868:	6865      	ldr	r5, [r4, #4]
 800386a:	2d00      	cmp	r5, #0
 800386c:	60a5      	str	r5, [r4, #8]
 800386e:	f2c0 8095 	blt.w	800399c <_printf_i+0x20c>
 8003872:	6821      	ldr	r1, [r4, #0]
 8003874:	f021 0104 	bic.w	r1, r1, #4
 8003878:	6021      	str	r1, [r4, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d13d      	bne.n	80038fa <_printf_i+0x16a>
 800387e:	2d00      	cmp	r5, #0
 8003880:	f040 808e 	bne.w	80039a0 <_printf_i+0x210>
 8003884:	4665      	mov	r5, ip
 8003886:	2a08      	cmp	r2, #8
 8003888:	d10b      	bne.n	80038a2 <_printf_i+0x112>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	07db      	lsls	r3, r3, #31
 800388e:	d508      	bpl.n	80038a2 <_printf_i+0x112>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	6862      	ldr	r2, [r4, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	bfde      	ittt	le
 8003898:	2330      	movle	r3, #48	; 0x30
 800389a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800389e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038a2:	ebac 0305 	sub.w	r3, ip, r5
 80038a6:	6123      	str	r3, [r4, #16]
 80038a8:	f8cd 8000 	str.w	r8, [sp]
 80038ac:	463b      	mov	r3, r7
 80038ae:	aa03      	add	r2, sp, #12
 80038b0:	4621      	mov	r1, r4
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7ff fef6 	bl	80036a4 <_printf_common>
 80038b8:	3001      	adds	r0, #1
 80038ba:	d14d      	bne.n	8003958 <_printf_i+0x1c8>
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c0:	b005      	add	sp, #20
 80038c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038c6:	4839      	ldr	r0, [pc, #228]	; (80039ac <_printf_i+0x21c>)
 80038c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80038cc:	6813      	ldr	r3, [r2, #0]
 80038ce:	6821      	ldr	r1, [r4, #0]
 80038d0:	1d1d      	adds	r5, r3, #4
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6015      	str	r5, [r2, #0]
 80038d6:	060a      	lsls	r2, r1, #24
 80038d8:	d50b      	bpl.n	80038f2 <_printf_i+0x162>
 80038da:	07ca      	lsls	r2, r1, #31
 80038dc:	bf44      	itt	mi
 80038de:	f041 0120 	orrmi.w	r1, r1, #32
 80038e2:	6021      	strmi	r1, [r4, #0]
 80038e4:	b91b      	cbnz	r3, 80038ee <_printf_i+0x15e>
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	f022 0220 	bic.w	r2, r2, #32
 80038ec:	6022      	str	r2, [r4, #0]
 80038ee:	2210      	movs	r2, #16
 80038f0:	e7b7      	b.n	8003862 <_printf_i+0xd2>
 80038f2:	064d      	lsls	r5, r1, #25
 80038f4:	bf48      	it	mi
 80038f6:	b29b      	uxthmi	r3, r3
 80038f8:	e7ef      	b.n	80038da <_printf_i+0x14a>
 80038fa:	4665      	mov	r5, ip
 80038fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003900:	fb02 3311 	mls	r3, r2, r1, r3
 8003904:	5cc3      	ldrb	r3, [r0, r3]
 8003906:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800390a:	460b      	mov	r3, r1
 800390c:	2900      	cmp	r1, #0
 800390e:	d1f5      	bne.n	80038fc <_printf_i+0x16c>
 8003910:	e7b9      	b.n	8003886 <_printf_i+0xf6>
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	6825      	ldr	r5, [r4, #0]
 8003916:	1d18      	adds	r0, r3, #4
 8003918:	6961      	ldr	r1, [r4, #20]
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	0628      	lsls	r0, r5, #24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	d501      	bpl.n	8003926 <_printf_i+0x196>
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0x19c>
 8003926:	066a      	lsls	r2, r5, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0x192>
 800392a:	8019      	strh	r1, [r3, #0]
 800392c:	2300      	movs	r3, #0
 800392e:	4665      	mov	r5, ip
 8003930:	6123      	str	r3, [r4, #16]
 8003932:	e7b9      	b.n	80038a8 <_printf_i+0x118>
 8003934:	6813      	ldr	r3, [r2, #0]
 8003936:	1d19      	adds	r1, r3, #4
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	681d      	ldr	r5, [r3, #0]
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	2100      	movs	r1, #0
 8003940:	4628      	mov	r0, r5
 8003942:	f000 fa93 	bl	8003e6c <memchr>
 8003946:	b108      	cbz	r0, 800394c <_printf_i+0x1bc>
 8003948:	1b40      	subs	r0, r0, r5
 800394a:	6060      	str	r0, [r4, #4]
 800394c:	6863      	ldr	r3, [r4, #4]
 800394e:	6123      	str	r3, [r4, #16]
 8003950:	2300      	movs	r3, #0
 8003952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003956:	e7a7      	b.n	80038a8 <_printf_i+0x118>
 8003958:	6923      	ldr	r3, [r4, #16]
 800395a:	462a      	mov	r2, r5
 800395c:	4639      	mov	r1, r7
 800395e:	4630      	mov	r0, r6
 8003960:	47c0      	blx	r8
 8003962:	3001      	adds	r0, #1
 8003964:	d0aa      	beq.n	80038bc <_printf_i+0x12c>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	079b      	lsls	r3, r3, #30
 800396a:	d413      	bmi.n	8003994 <_printf_i+0x204>
 800396c:	68e0      	ldr	r0, [r4, #12]
 800396e:	9b03      	ldr	r3, [sp, #12]
 8003970:	4298      	cmp	r0, r3
 8003972:	bfb8      	it	lt
 8003974:	4618      	movlt	r0, r3
 8003976:	e7a3      	b.n	80038c0 <_printf_i+0x130>
 8003978:	2301      	movs	r3, #1
 800397a:	464a      	mov	r2, r9
 800397c:	4639      	mov	r1, r7
 800397e:	4630      	mov	r0, r6
 8003980:	47c0      	blx	r8
 8003982:	3001      	adds	r0, #1
 8003984:	d09a      	beq.n	80038bc <_printf_i+0x12c>
 8003986:	3501      	adds	r5, #1
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	9a03      	ldr	r2, [sp, #12]
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	42ab      	cmp	r3, r5
 8003990:	dcf2      	bgt.n	8003978 <_printf_i+0x1e8>
 8003992:	e7eb      	b.n	800396c <_printf_i+0x1dc>
 8003994:	2500      	movs	r5, #0
 8003996:	f104 0919 	add.w	r9, r4, #25
 800399a:	e7f5      	b.n	8003988 <_printf_i+0x1f8>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1ac      	bne.n	80038fa <_printf_i+0x16a>
 80039a0:	7803      	ldrb	r3, [r0, #0]
 80039a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039aa:	e76c      	b.n	8003886 <_printf_i+0xf6>
 80039ac:	08004145 	.word	0x08004145
 80039b0:	08004156 	.word	0x08004156

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4c05      	ldr	r4, [pc, #20]	; (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4605      	mov	r5, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	f7fd f9b2 	bl	8000d28 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	602b      	str	r3, [r5, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000290 	.word	0x20000290

080039d4 <__sread>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	460c      	mov	r4, r1
 80039d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039dc:	f000 faec 	bl	8003fb8 <_read_r>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	bfab      	itete	ge
 80039e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039e6:	89a3      	ldrhlt	r3, [r4, #12]
 80039e8:	181b      	addge	r3, r3, r0
 80039ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ee:	bfac      	ite	ge
 80039f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80039f2:	81a3      	strhlt	r3, [r4, #12]
 80039f4:	bd10      	pop	{r4, pc}

080039f6 <__swrite>:
 80039f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039fa:	461f      	mov	r7, r3
 80039fc:	898b      	ldrh	r3, [r1, #12]
 80039fe:	4605      	mov	r5, r0
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	460c      	mov	r4, r1
 8003a04:	4616      	mov	r6, r2
 8003a06:	d505      	bpl.n	8003a14 <__swrite+0x1e>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a10:	f000 f9b6 	bl	8003d80 <_lseek_r>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	4632      	mov	r2, r6
 8003a18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a22:	463b      	mov	r3, r7
 8003a24:	4628      	mov	r0, r5
 8003a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2a:	f000 b869 	b.w	8003b00 <_write_r>

08003a2e <__sseek>:
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	460c      	mov	r4, r1
 8003a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a36:	f000 f9a3 	bl	8003d80 <_lseek_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	bf15      	itete	ne
 8003a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a4a:	81a3      	strheq	r3, [r4, #12]
 8003a4c:	bf18      	it	ne
 8003a4e:	81a3      	strhne	r3, [r4, #12]
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <__sclose>:
 8003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a56:	f000 b8d3 	b.w	8003c00 <_close_r>
	...

08003a5c <__swbuf_r>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	460e      	mov	r6, r1
 8003a60:	4614      	mov	r4, r2
 8003a62:	4605      	mov	r5, r0
 8003a64:	b118      	cbz	r0, 8003a6e <__swbuf_r+0x12>
 8003a66:	6983      	ldr	r3, [r0, #24]
 8003a68:	b90b      	cbnz	r3, 8003a6e <__swbuf_r+0x12>
 8003a6a:	f7ff faa7 	bl	8002fbc <__sinit>
 8003a6e:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <__swbuf_r+0x98>)
 8003a70:	429c      	cmp	r4, r3
 8003a72:	d12a      	bne.n	8003aca <__swbuf_r+0x6e>
 8003a74:	686c      	ldr	r4, [r5, #4]
 8003a76:	69a3      	ldr	r3, [r4, #24]
 8003a78:	60a3      	str	r3, [r4, #8]
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	071a      	lsls	r2, r3, #28
 8003a7e:	d52e      	bpl.n	8003ade <__swbuf_r+0x82>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	b363      	cbz	r3, 8003ade <__swbuf_r+0x82>
 8003a84:	6923      	ldr	r3, [r4, #16]
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	b2f6      	uxtb	r6, r6
 8003a8a:	1ac0      	subs	r0, r0, r3
 8003a8c:	6963      	ldr	r3, [r4, #20]
 8003a8e:	4637      	mov	r7, r6
 8003a90:	4283      	cmp	r3, r0
 8003a92:	dc04      	bgt.n	8003a9e <__swbuf_r+0x42>
 8003a94:	4621      	mov	r1, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 f948 	bl	8003d2c <_fflush_r>
 8003a9c:	bb28      	cbnz	r0, 8003aea <__swbuf_r+0x8e>
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60a3      	str	r3, [r4, #8]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	6022      	str	r2, [r4, #0]
 8003aac:	701e      	strb	r6, [r3, #0]
 8003aae:	6963      	ldr	r3, [r4, #20]
 8003ab0:	4283      	cmp	r3, r0
 8003ab2:	d004      	beq.n	8003abe <__swbuf_r+0x62>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	07db      	lsls	r3, r3, #31
 8003ab8:	d519      	bpl.n	8003aee <__swbuf_r+0x92>
 8003aba:	2e0a      	cmp	r6, #10
 8003abc:	d117      	bne.n	8003aee <__swbuf_r+0x92>
 8003abe:	4621      	mov	r1, r4
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f000 f933 	bl	8003d2c <_fflush_r>
 8003ac6:	b190      	cbz	r0, 8003aee <__swbuf_r+0x92>
 8003ac8:	e00f      	b.n	8003aea <__swbuf_r+0x8e>
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <__swbuf_r+0x9c>)
 8003acc:	429c      	cmp	r4, r3
 8003ace:	d101      	bne.n	8003ad4 <__swbuf_r+0x78>
 8003ad0:	68ac      	ldr	r4, [r5, #8]
 8003ad2:	e7d0      	b.n	8003a76 <__swbuf_r+0x1a>
 8003ad4:	4b09      	ldr	r3, [pc, #36]	; (8003afc <__swbuf_r+0xa0>)
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	bf08      	it	eq
 8003ada:	68ec      	ldreq	r4, [r5, #12]
 8003adc:	e7cb      	b.n	8003a76 <__swbuf_r+0x1a>
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f000 f81f 	bl	8003b24 <__swsetup_r>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d0cc      	beq.n	8003a84 <__swbuf_r+0x28>
 8003aea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003aee:	4638      	mov	r0, r7
 8003af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	080040f4 	.word	0x080040f4
 8003af8:	08004114 	.word	0x08004114
 8003afc:	080040d4 	.word	0x080040d4

08003b00 <_write_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4605      	mov	r5, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	2200      	movs	r2, #0
 8003b0a:	4c05      	ldr	r4, [pc, #20]	; (8003b20 <_write_r+0x20>)
 8003b0c:	6022      	str	r2, [r4, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fc fb90 	bl	8000234 <_write>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_write_r+0x1e>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_write_r+0x1e>
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000290 	.word	0x20000290

08003b24 <__swsetup_r>:
 8003b24:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <__swsetup_r+0xcc>)
 8003b26:	b570      	push	{r4, r5, r6, lr}
 8003b28:	681d      	ldr	r5, [r3, #0]
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	b125      	cbz	r5, 8003b3a <__swsetup_r+0x16>
 8003b30:	69ab      	ldr	r3, [r5, #24]
 8003b32:	b913      	cbnz	r3, 8003b3a <__swsetup_r+0x16>
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7ff fa41 	bl	8002fbc <__sinit>
 8003b3a:	4b2e      	ldr	r3, [pc, #184]	; (8003bf4 <__swsetup_r+0xd0>)
 8003b3c:	429c      	cmp	r4, r3
 8003b3e:	d10f      	bne.n	8003b60 <__swsetup_r+0x3c>
 8003b40:	686c      	ldr	r4, [r5, #4]
 8003b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	0715      	lsls	r5, r2, #28
 8003b4a:	d42c      	bmi.n	8003ba6 <__swsetup_r+0x82>
 8003b4c:	06d0      	lsls	r0, r2, #27
 8003b4e:	d411      	bmi.n	8003b74 <__swsetup_r+0x50>
 8003b50:	2209      	movs	r2, #9
 8003b52:	6032      	str	r2, [r6, #0]
 8003b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b5e:	e03e      	b.n	8003bde <__swsetup_r+0xba>
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <__swsetup_r+0xd4>)
 8003b62:	429c      	cmp	r4, r3
 8003b64:	d101      	bne.n	8003b6a <__swsetup_r+0x46>
 8003b66:	68ac      	ldr	r4, [r5, #8]
 8003b68:	e7eb      	b.n	8003b42 <__swsetup_r+0x1e>
 8003b6a:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <__swsetup_r+0xd8>)
 8003b6c:	429c      	cmp	r4, r3
 8003b6e:	bf08      	it	eq
 8003b70:	68ec      	ldreq	r4, [r5, #12]
 8003b72:	e7e6      	b.n	8003b42 <__swsetup_r+0x1e>
 8003b74:	0751      	lsls	r1, r2, #29
 8003b76:	d512      	bpl.n	8003b9e <__swsetup_r+0x7a>
 8003b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b7a:	b141      	cbz	r1, 8003b8e <__swsetup_r+0x6a>
 8003b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b80:	4299      	cmp	r1, r3
 8003b82:	d002      	beq.n	8003b8a <__swsetup_r+0x66>
 8003b84:	4630      	mov	r0, r6
 8003b86:	f000 f9a5 	bl	8003ed4 <_free_r>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	2300      	movs	r3, #0
 8003b98:	6063      	str	r3, [r4, #4]
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	6923      	ldr	r3, [r4, #16]
 8003ba8:	b94b      	cbnz	r3, 8003bbe <__swsetup_r+0x9a>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bb4:	d003      	beq.n	8003bbe <__swsetup_r+0x9a>
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f917 	bl	8003dec <__smakebuf_r>
 8003bbe:	89a2      	ldrh	r2, [r4, #12]
 8003bc0:	f012 0301 	ands.w	r3, r2, #1
 8003bc4:	d00c      	beq.n	8003be0 <__swsetup_r+0xbc>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60a3      	str	r3, [r4, #8]
 8003bca:	6963      	ldr	r3, [r4, #20]
 8003bcc:	425b      	negs	r3, r3
 8003bce:	61a3      	str	r3, [r4, #24]
 8003bd0:	6923      	ldr	r3, [r4, #16]
 8003bd2:	b953      	cbnz	r3, 8003bea <__swsetup_r+0xc6>
 8003bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003bdc:	d1ba      	bne.n	8003b54 <__swsetup_r+0x30>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	0792      	lsls	r2, r2, #30
 8003be2:	bf58      	it	pl
 8003be4:	6963      	ldrpl	r3, [r4, #20]
 8003be6:	60a3      	str	r3, [r4, #8]
 8003be8:	e7f2      	b.n	8003bd0 <__swsetup_r+0xac>
 8003bea:	2000      	movs	r0, #0
 8003bec:	e7f7      	b.n	8003bde <__swsetup_r+0xba>
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c
 8003bf4:	080040f4 	.word	0x080040f4
 8003bf8:	08004114 	.word	0x08004114
 8003bfc:	080040d4 	.word	0x080040d4

08003c00 <_close_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	2300      	movs	r3, #0
 8003c04:	4c05      	ldr	r4, [pc, #20]	; (8003c1c <_close_r+0x1c>)
 8003c06:	4605      	mov	r5, r0
 8003c08:	4608      	mov	r0, r1
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	f7fd f85b 	bl	8000cc6 <_close>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_close_r+0x1a>
 8003c14:	6823      	ldr	r3, [r4, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_close_r+0x1a>
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	20000290 	.word	0x20000290

08003c20 <__sflush_r>:
 8003c20:	898a      	ldrh	r2, [r1, #12]
 8003c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c26:	4605      	mov	r5, r0
 8003c28:	0710      	lsls	r0, r2, #28
 8003c2a:	460c      	mov	r4, r1
 8003c2c:	d458      	bmi.n	8003ce0 <__sflush_r+0xc0>
 8003c2e:	684b      	ldr	r3, [r1, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dc05      	bgt.n	8003c40 <__sflush_r+0x20>
 8003c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	dc02      	bgt.n	8003c40 <__sflush_r+0x20>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c42:	2e00      	cmp	r6, #0
 8003c44:	d0f9      	beq.n	8003c3a <__sflush_r+0x1a>
 8003c46:	2300      	movs	r3, #0
 8003c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c4c:	682f      	ldr	r7, [r5, #0]
 8003c4e:	6a21      	ldr	r1, [r4, #32]
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	d032      	beq.n	8003cba <__sflush_r+0x9a>
 8003c54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	075a      	lsls	r2, r3, #29
 8003c5a:	d505      	bpl.n	8003c68 <__sflush_r+0x48>
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	1ac0      	subs	r0, r0, r3
 8003c60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c62:	b10b      	cbz	r3, 8003c68 <__sflush_r+0x48>
 8003c64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c66:	1ac0      	subs	r0, r0, r3
 8003c68:	2300      	movs	r3, #0
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6e:	6a21      	ldr	r1, [r4, #32]
 8003c70:	4628      	mov	r0, r5
 8003c72:	47b0      	blx	r6
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	d106      	bne.n	8003c88 <__sflush_r+0x68>
 8003c7a:	6829      	ldr	r1, [r5, #0]
 8003c7c:	291d      	cmp	r1, #29
 8003c7e:	d848      	bhi.n	8003d12 <__sflush_r+0xf2>
 8003c80:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <__sflush_r+0x108>)
 8003c82:	40ca      	lsrs	r2, r1
 8003c84:	07d6      	lsls	r6, r2, #31
 8003c86:	d544      	bpl.n	8003d12 <__sflush_r+0xf2>
 8003c88:	2200      	movs	r2, #0
 8003c8a:	6062      	str	r2, [r4, #4]
 8003c8c:	6922      	ldr	r2, [r4, #16]
 8003c8e:	04d9      	lsls	r1, r3, #19
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	d504      	bpl.n	8003c9e <__sflush_r+0x7e>
 8003c94:	1c42      	adds	r2, r0, #1
 8003c96:	d101      	bne.n	8003c9c <__sflush_r+0x7c>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	b903      	cbnz	r3, 8003c9e <__sflush_r+0x7e>
 8003c9c:	6560      	str	r0, [r4, #84]	; 0x54
 8003c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ca0:	602f      	str	r7, [r5, #0]
 8003ca2:	2900      	cmp	r1, #0
 8003ca4:	d0c9      	beq.n	8003c3a <__sflush_r+0x1a>
 8003ca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003caa:	4299      	cmp	r1, r3
 8003cac:	d002      	beq.n	8003cb4 <__sflush_r+0x94>
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f000 f910 	bl	8003ed4 <_free_r>
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	6360      	str	r0, [r4, #52]	; 0x34
 8003cb8:	e7c0      	b.n	8003c3c <__sflush_r+0x1c>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b0      	blx	r6
 8003cc0:	1c41      	adds	r1, r0, #1
 8003cc2:	d1c8      	bne.n	8003c56 <__sflush_r+0x36>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0c5      	beq.n	8003c56 <__sflush_r+0x36>
 8003cca:	2b1d      	cmp	r3, #29
 8003ccc:	d001      	beq.n	8003cd2 <__sflush_r+0xb2>
 8003cce:	2b16      	cmp	r3, #22
 8003cd0:	d101      	bne.n	8003cd6 <__sflush_r+0xb6>
 8003cd2:	602f      	str	r7, [r5, #0]
 8003cd4:	e7b1      	b.n	8003c3a <__sflush_r+0x1a>
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cdc:	81a3      	strh	r3, [r4, #12]
 8003cde:	e7ad      	b.n	8003c3c <__sflush_r+0x1c>
 8003ce0:	690f      	ldr	r7, [r1, #16]
 8003ce2:	2f00      	cmp	r7, #0
 8003ce4:	d0a9      	beq.n	8003c3a <__sflush_r+0x1a>
 8003ce6:	0793      	lsls	r3, r2, #30
 8003ce8:	bf18      	it	ne
 8003cea:	2300      	movne	r3, #0
 8003cec:	680e      	ldr	r6, [r1, #0]
 8003cee:	bf08      	it	eq
 8003cf0:	694b      	ldreq	r3, [r1, #20]
 8003cf2:	eba6 0807 	sub.w	r8, r6, r7
 8003cf6:	600f      	str	r7, [r1, #0]
 8003cf8:	608b      	str	r3, [r1, #8]
 8003cfa:	f1b8 0f00 	cmp.w	r8, #0
 8003cfe:	dd9c      	ble.n	8003c3a <__sflush_r+0x1a>
 8003d00:	4643      	mov	r3, r8
 8003d02:	463a      	mov	r2, r7
 8003d04:	6a21      	ldr	r1, [r4, #32]
 8003d06:	4628      	mov	r0, r5
 8003d08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d0a:	47b0      	blx	r6
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	dc06      	bgt.n	8003d1e <__sflush_r+0xfe>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d1c:	e78e      	b.n	8003c3c <__sflush_r+0x1c>
 8003d1e:	4407      	add	r7, r0
 8003d20:	eba8 0800 	sub.w	r8, r8, r0
 8003d24:	e7e9      	b.n	8003cfa <__sflush_r+0xda>
 8003d26:	bf00      	nop
 8003d28:	20400001 	.word	0x20400001

08003d2c <_fflush_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	690b      	ldr	r3, [r1, #16]
 8003d30:	4605      	mov	r5, r0
 8003d32:	460c      	mov	r4, r1
 8003d34:	b1db      	cbz	r3, 8003d6e <_fflush_r+0x42>
 8003d36:	b118      	cbz	r0, 8003d40 <_fflush_r+0x14>
 8003d38:	6983      	ldr	r3, [r0, #24]
 8003d3a:	b90b      	cbnz	r3, 8003d40 <_fflush_r+0x14>
 8003d3c:	f7ff f93e 	bl	8002fbc <__sinit>
 8003d40:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <_fflush_r+0x48>)
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d109      	bne.n	8003d5a <_fflush_r+0x2e>
 8003d46:	686c      	ldr	r4, [r5, #4]
 8003d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d4c:	b17b      	cbz	r3, 8003d6e <_fflush_r+0x42>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d56:	f7ff bf63 	b.w	8003c20 <__sflush_r>
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <_fflush_r+0x4c>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	d101      	bne.n	8003d64 <_fflush_r+0x38>
 8003d60:	68ac      	ldr	r4, [r5, #8]
 8003d62:	e7f1      	b.n	8003d48 <_fflush_r+0x1c>
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <_fflush_r+0x50>)
 8003d66:	429c      	cmp	r4, r3
 8003d68:	bf08      	it	eq
 8003d6a:	68ec      	ldreq	r4, [r5, #12]
 8003d6c:	e7ec      	b.n	8003d48 <_fflush_r+0x1c>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	bd38      	pop	{r3, r4, r5, pc}
 8003d72:	bf00      	nop
 8003d74:	080040f4 	.word	0x080040f4
 8003d78:	08004114 	.word	0x08004114
 8003d7c:	080040d4 	.word	0x080040d4

08003d80 <_lseek_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4605      	mov	r5, r0
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4c05      	ldr	r4, [pc, #20]	; (8003da0 <_lseek_r+0x20>)
 8003d8c:	6022      	str	r2, [r4, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7fc ffbd 	bl	8000d0e <_lseek>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_lseek_r+0x1e>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_lseek_r+0x1e>
 8003d9c:	602b      	str	r3, [r5, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	20000290 	.word	0x20000290

08003da4 <__swhatbuf_r>:
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	460e      	mov	r6, r1
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	b096      	sub	sp, #88	; 0x58
 8003dae:	2900      	cmp	r1, #0
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	da07      	bge.n	8003dc6 <__swhatbuf_r+0x22>
 8003db6:	2300      	movs	r3, #0
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	89b3      	ldrh	r3, [r6, #12]
 8003dbc:	061a      	lsls	r2, r3, #24
 8003dbe:	d410      	bmi.n	8003de2 <__swhatbuf_r+0x3e>
 8003dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc4:	e00e      	b.n	8003de4 <__swhatbuf_r+0x40>
 8003dc6:	466a      	mov	r2, sp
 8003dc8:	f000 f908 	bl	8003fdc <_fstat_r>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	dbf2      	blt.n	8003db6 <__swhatbuf_r+0x12>
 8003dd0:	9a01      	ldr	r2, [sp, #4]
 8003dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dda:	425a      	negs	r2, r3
 8003ddc:	415a      	adcs	r2, r3
 8003dde:	602a      	str	r2, [r5, #0]
 8003de0:	e7ee      	b.n	8003dc0 <__swhatbuf_r+0x1c>
 8003de2:	2340      	movs	r3, #64	; 0x40
 8003de4:	2000      	movs	r0, #0
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	b016      	add	sp, #88	; 0x58
 8003dea:	bd70      	pop	{r4, r5, r6, pc}

08003dec <__smakebuf_r>:
 8003dec:	898b      	ldrh	r3, [r1, #12]
 8003dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003df0:	079d      	lsls	r5, r3, #30
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	d507      	bpl.n	8003e08 <__smakebuf_r+0x1c>
 8003df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	2301      	movs	r3, #1
 8003e02:	6163      	str	r3, [r4, #20]
 8003e04:	b002      	add	sp, #8
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	ab01      	add	r3, sp, #4
 8003e0a:	466a      	mov	r2, sp
 8003e0c:	f7ff ffca 	bl	8003da4 <__swhatbuf_r>
 8003e10:	9900      	ldr	r1, [sp, #0]
 8003e12:	4605      	mov	r5, r0
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff f95b 	bl	80030d0 <_malloc_r>
 8003e1a:	b948      	cbnz	r0, 8003e30 <__smakebuf_r+0x44>
 8003e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e20:	059a      	lsls	r2, r3, #22
 8003e22:	d4ef      	bmi.n	8003e04 <__smakebuf_r+0x18>
 8003e24:	f023 0303 	bic.w	r3, r3, #3
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	e7e3      	b.n	8003df8 <__smakebuf_r+0xc>
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <__smakebuf_r+0x7c>)
 8003e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	6020      	str	r0, [r4, #0]
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	9b00      	ldr	r3, [sp, #0]
 8003e40:	6120      	str	r0, [r4, #16]
 8003e42:	6163      	str	r3, [r4, #20]
 8003e44:	9b01      	ldr	r3, [sp, #4]
 8003e46:	b15b      	cbz	r3, 8003e60 <__smakebuf_r+0x74>
 8003e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f8d7 	bl	8004000 <_isatty_r>
 8003e52:	b128      	cbz	r0, 8003e60 <__smakebuf_r+0x74>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	431d      	orrs	r5, r3
 8003e64:	81a5      	strh	r5, [r4, #12]
 8003e66:	e7cd      	b.n	8003e04 <__smakebuf_r+0x18>
 8003e68:	08002f85 	.word	0x08002f85

08003e6c <memchr>:
 8003e6c:	b510      	push	{r4, lr}
 8003e6e:	b2c9      	uxtb	r1, r1
 8003e70:	4402      	add	r2, r0
 8003e72:	4290      	cmp	r0, r2
 8003e74:	4603      	mov	r3, r0
 8003e76:	d101      	bne.n	8003e7c <memchr+0x10>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e003      	b.n	8003e84 <memchr+0x18>
 8003e7c:	781c      	ldrb	r4, [r3, #0]
 8003e7e:	3001      	adds	r0, #1
 8003e80:	428c      	cmp	r4, r1
 8003e82:	d1f6      	bne.n	8003e72 <memchr+0x6>
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd10      	pop	{r4, pc}

08003e88 <memcpy>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	1e43      	subs	r3, r0, #1
 8003e8c:	440a      	add	r2, r1
 8003e8e:	4291      	cmp	r1, r2
 8003e90:	d100      	bne.n	8003e94 <memcpy+0xc>
 8003e92:	bd10      	pop	{r4, pc}
 8003e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e9c:	e7f7      	b.n	8003e8e <memcpy+0x6>

08003e9e <memmove>:
 8003e9e:	4288      	cmp	r0, r1
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	eb01 0302 	add.w	r3, r1, r2
 8003ea6:	d807      	bhi.n	8003eb8 <memmove+0x1a>
 8003ea8:	1e42      	subs	r2, r0, #1
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	d00a      	beq.n	8003ec4 <memmove+0x26>
 8003eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eb2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003eb6:	e7f8      	b.n	8003eaa <memmove+0xc>
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	d9f5      	bls.n	8003ea8 <memmove+0xa>
 8003ebc:	1881      	adds	r1, r0, r2
 8003ebe:	1ad2      	subs	r2, r2, r3
 8003ec0:	42d3      	cmn	r3, r2
 8003ec2:	d100      	bne.n	8003ec6 <memmove+0x28>
 8003ec4:	bd10      	pop	{r4, pc}
 8003ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ece:	e7f7      	b.n	8003ec0 <memmove+0x22>

08003ed0 <__malloc_lock>:
 8003ed0:	4770      	bx	lr

08003ed2 <__malloc_unlock>:
 8003ed2:	4770      	bx	lr

08003ed4 <_free_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	2900      	cmp	r1, #0
 8003eda:	d043      	beq.n	8003f64 <_free_r+0x90>
 8003edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee0:	1f0c      	subs	r4, r1, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfb8      	it	lt
 8003ee6:	18e4      	addlt	r4, r4, r3
 8003ee8:	f7ff fff2 	bl	8003ed0 <__malloc_lock>
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <_free_r+0x94>)
 8003eee:	6813      	ldr	r3, [r2, #0]
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	b933      	cbnz	r3, 8003f02 <_free_r+0x2e>
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6014      	str	r4, [r2, #0]
 8003ef8:	4628      	mov	r0, r5
 8003efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003efe:	f7ff bfe8 	b.w	8003ed2 <__malloc_unlock>
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d90b      	bls.n	8003f1e <_free_r+0x4a>
 8003f06:	6821      	ldr	r1, [r4, #0]
 8003f08:	1862      	adds	r2, r4, r1
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bf01      	itttt	eq
 8003f0e:	681a      	ldreq	r2, [r3, #0]
 8003f10:	685b      	ldreq	r3, [r3, #4]
 8003f12:	1852      	addeq	r2, r2, r1
 8003f14:	6022      	streq	r2, [r4, #0]
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	6004      	str	r4, [r0, #0]
 8003f1a:	e7ed      	b.n	8003ef8 <_free_r+0x24>
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	b10a      	cbz	r2, 8003f26 <_free_r+0x52>
 8003f22:	42a2      	cmp	r2, r4
 8003f24:	d9fa      	bls.n	8003f1c <_free_r+0x48>
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	1858      	adds	r0, r3, r1
 8003f2a:	42a0      	cmp	r0, r4
 8003f2c:	d10b      	bne.n	8003f46 <_free_r+0x72>
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	4401      	add	r1, r0
 8003f32:	1858      	adds	r0, r3, r1
 8003f34:	4282      	cmp	r2, r0
 8003f36:	6019      	str	r1, [r3, #0]
 8003f38:	d1de      	bne.n	8003ef8 <_free_r+0x24>
 8003f3a:	6810      	ldr	r0, [r2, #0]
 8003f3c:	6852      	ldr	r2, [r2, #4]
 8003f3e:	4401      	add	r1, r0
 8003f40:	6019      	str	r1, [r3, #0]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e7d8      	b.n	8003ef8 <_free_r+0x24>
 8003f46:	d902      	bls.n	8003f4e <_free_r+0x7a>
 8003f48:	230c      	movs	r3, #12
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	e7d4      	b.n	8003ef8 <_free_r+0x24>
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1821      	adds	r1, r4, r0
 8003f52:	428a      	cmp	r2, r1
 8003f54:	bf01      	itttt	eq
 8003f56:	6811      	ldreq	r1, [r2, #0]
 8003f58:	6852      	ldreq	r2, [r2, #4]
 8003f5a:	1809      	addeq	r1, r1, r0
 8003f5c:	6021      	streq	r1, [r4, #0]
 8003f5e:	6062      	str	r2, [r4, #4]
 8003f60:	605c      	str	r4, [r3, #4]
 8003f62:	e7c9      	b.n	8003ef8 <_free_r+0x24>
 8003f64:	bd38      	pop	{r3, r4, r5, pc}
 8003f66:	bf00      	nop
 8003f68:	20000098 	.word	0x20000098

08003f6c <_realloc_r>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	4607      	mov	r7, r0
 8003f70:	4614      	mov	r4, r2
 8003f72:	460e      	mov	r6, r1
 8003f74:	b921      	cbnz	r1, 8003f80 <_realloc_r+0x14>
 8003f76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	f7ff b8a8 	b.w	80030d0 <_malloc_r>
 8003f80:	b922      	cbnz	r2, 8003f8c <_realloc_r+0x20>
 8003f82:	f7ff ffa7 	bl	8003ed4 <_free_r>
 8003f86:	4625      	mov	r5, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8c:	f000 f848 	bl	8004020 <_malloc_usable_size_r>
 8003f90:	42a0      	cmp	r0, r4
 8003f92:	d20f      	bcs.n	8003fb4 <_realloc_r+0x48>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4638      	mov	r0, r7
 8003f98:	f7ff f89a 	bl	80030d0 <_malloc_r>
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d0f2      	beq.n	8003f88 <_realloc_r+0x1c>
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	f7ff ff6f 	bl	8003e88 <memcpy>
 8003faa:	4631      	mov	r1, r6
 8003fac:	4638      	mov	r0, r7
 8003fae:	f7ff ff91 	bl	8003ed4 <_free_r>
 8003fb2:	e7e9      	b.n	8003f88 <_realloc_r+0x1c>
 8003fb4:	4635      	mov	r5, r6
 8003fb6:	e7e7      	b.n	8003f88 <_realloc_r+0x1c>

08003fb8 <_read_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4605      	mov	r5, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4c05      	ldr	r4, [pc, #20]	; (8003fd8 <_read_r+0x20>)
 8003fc4:	6022      	str	r2, [r4, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f7fc fe60 	bl	8000c8c <_read>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_read_r+0x1e>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_read_r+0x1e>
 8003fd4:	602b      	str	r3, [r5, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	20000290 	.word	0x20000290

08003fdc <_fstat_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4c06      	ldr	r4, [pc, #24]	; (8003ffc <_fstat_r+0x20>)
 8003fe2:	4605      	mov	r5, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	f7fc fe77 	bl	8000cdc <_fstat>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	d102      	bne.n	8003ff8 <_fstat_r+0x1c>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	b103      	cbz	r3, 8003ff8 <_fstat_r+0x1c>
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000290 	.word	0x20000290

08004000 <_isatty_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	2300      	movs	r3, #0
 8004004:	4c05      	ldr	r4, [pc, #20]	; (800401c <_isatty_r+0x1c>)
 8004006:	4605      	mov	r5, r0
 8004008:	4608      	mov	r0, r1
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	f7fc fe75 	bl	8000cfa <_isatty>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_isatty_r+0x1a>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	b103      	cbz	r3, 800401a <_isatty_r+0x1a>
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	20000290 	.word	0x20000290

08004020 <_malloc_usable_size_r>:
 8004020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004024:	1f18      	subs	r0, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	bfbc      	itt	lt
 800402a:	580b      	ldrlt	r3, [r1, r0]
 800402c:	18c0      	addlt	r0, r0, r3
 800402e:	4770      	bx	lr

08004030 <_init>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr

0800403c <_fini>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr
