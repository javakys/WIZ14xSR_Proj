
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045f4  080045f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f4  080045f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000070  0800466c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800466c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd12  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000206d  00000000  00000000  0002ddab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b084  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5f3  00000000  00000000  0004ca04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c803  00000000  00000000  00057ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f47fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d8  00000000  00000000  000f4878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080044bc 	.word	0x080044bc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080044bc 	.word	0x080044bc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	230a      	movs	r3, #10
 8000246:	68b9      	ldr	r1, [r7, #8]
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <_write+0x24>)
 800024a:	f002 fbde 	bl	8002a0a <HAL_UART_Transmit>
	return len;
 800024e:	687b      	ldr	r3, [r7, #4]
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000298 	.word	0x20000298

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 fec6 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f8a2 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 fa04 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800026c:	f000 f9ae 	bl	80005cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000270:	f000 f8e2 	bl	8000438 <MX_TIM2_Init>
  MX_UART4_Init();
 8000274:	f000 f92c 	bl	80004d0 <MX_UART4_Init>
  MX_UART5_Init();
 8000278:	f000 f954 	bl	8000524 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800027c:	f000 f97c 	bl	8000578 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000280:	f000 f9ce 	bl	8000620 <MX_USART3_UART_Init>
  MX_FSMC_Init();
 8000284:	f000 fadc 	bl	8000840 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000288:	483a      	ldr	r0, [pc, #232]	; (8000374 <main+0x118>)
 800028a:	f001 ff9f 	bl	80021cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Reset_W5300();
 800028e:	f000 fb61 	bl	8000954 <Reset_W5300>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 8000292:	4b39      	ldr	r3, [pc, #228]	; (8000378 <main+0x11c>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d0fb      	beq.n	8000292 <main+0x36>
	  {
		  onesecondElapsed = 0;
 800029a:	4b37      	ldr	r3, [pc, #220]	; (8000378 <main+0x11c>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 80002a0:	4b36      	ldr	r3, [pc, #216]	; (800037c <main+0x120>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b34      	ldr	r3, [pc, #208]	; (800037c <main+0x120>)
 80002aa:	701a      	strb	r2, [r3, #0]
		  printf("count: %d\r\n", count);	// print count
 80002ac:	4b33      	ldr	r3, [pc, #204]	; (800037c <main+0x120>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4619      	mov	r1, r3
 80002b2:	4833      	ldr	r0, [pc, #204]	; (8000380 <main+0x124>)
 80002b4:	f003 f850 	bl	8003358 <iprintf>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	4832      	ldr	r0, [pc, #200]	; (8000384 <main+0x128>)
 80002bc:	f001 fab4 	bl	8001828 <HAL_GPIO_TogglePin>
		  memset(msg, 0, 100);
 80002c0:	2264      	movs	r2, #100	; 0x64
 80002c2:	2100      	movs	r1, #0
 80002c4:	4830      	ldr	r0, [pc, #192]	; (8000388 <main+0x12c>)
 80002c6:	f003 f83f 	bl	8003348 <memset>
		  sprintf((char *)msg, "UART1, count: %d\r\n", count);
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <main+0x120>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	492e      	ldr	r1, [pc, #184]	; (800038c <main+0x130>)
 80002d2:	482d      	ldr	r0, [pc, #180]	; (8000388 <main+0x12c>)
 80002d4:	f003 f858 	bl	8003388 <siprintf>
		  HAL_UART_Transmit(&huart1, msg, strlen((const char*)msg), 10);
 80002d8:	482b      	ldr	r0, [pc, #172]	; (8000388 <main+0x12c>)
 80002da:	f7ff ffa3 	bl	8000224 <strlen>
 80002de:	4603      	mov	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	230a      	movs	r3, #10
 80002e4:	4928      	ldr	r1, [pc, #160]	; (8000388 <main+0x12c>)
 80002e6:	482a      	ldr	r0, [pc, #168]	; (8000390 <main+0x134>)
 80002e8:	f002 fb8f 	bl	8002a0a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 80002ec:	2264      	movs	r2, #100	; 0x64
 80002ee:	2100      	movs	r1, #0
 80002f0:	4825      	ldr	r0, [pc, #148]	; (8000388 <main+0x12c>)
 80002f2:	f003 f829 	bl	8003348 <memset>
		  sprintf((char *)msg, "UART3, count: %d\r\n", count);
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <main+0x120>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	461a      	mov	r2, r3
 80002fc:	4925      	ldr	r1, [pc, #148]	; (8000394 <main+0x138>)
 80002fe:	4822      	ldr	r0, [pc, #136]	; (8000388 <main+0x12c>)
 8000300:	f003 f842 	bl	8003388 <siprintf>
		  HAL_UART_Transmit(&huart3, msg, strlen((const char*)msg), 10);
 8000304:	4820      	ldr	r0, [pc, #128]	; (8000388 <main+0x12c>)
 8000306:	f7ff ff8d 	bl	8000224 <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	b29a      	uxth	r2, r3
 800030e:	230a      	movs	r3, #10
 8000310:	491d      	ldr	r1, [pc, #116]	; (8000388 <main+0x12c>)
 8000312:	4821      	ldr	r0, [pc, #132]	; (8000398 <main+0x13c>)
 8000314:	f002 fb79 	bl	8002a0a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000318:	2264      	movs	r2, #100	; 0x64
 800031a:	2100      	movs	r1, #0
 800031c:	481a      	ldr	r0, [pc, #104]	; (8000388 <main+0x12c>)
 800031e:	f003 f813 	bl	8003348 <memset>
		  sprintf((char *)msg, "UART4, count: %d\r\n", count);
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <main+0x120>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	491c      	ldr	r1, [pc, #112]	; (800039c <main+0x140>)
 800032a:	4817      	ldr	r0, [pc, #92]	; (8000388 <main+0x12c>)
 800032c:	f003 f82c 	bl	8003388 <siprintf>
		  HAL_UART_Transmit(&huart4, msg, strlen((const char*)msg), 10);
 8000330:	4815      	ldr	r0, [pc, #84]	; (8000388 <main+0x12c>)
 8000332:	f7ff ff77 	bl	8000224 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	230a      	movs	r3, #10
 800033c:	4912      	ldr	r1, [pc, #72]	; (8000388 <main+0x12c>)
 800033e:	4818      	ldr	r0, [pc, #96]	; (80003a0 <main+0x144>)
 8000340:	f002 fb63 	bl	8002a0a <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000344:	2264      	movs	r2, #100	; 0x64
 8000346:	2100      	movs	r1, #0
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <main+0x12c>)
 800034a:	f002 fffd 	bl	8003348 <memset>
		  sprintf((char *)msg, "UART5, count: %d\r\n", count);
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <main+0x120>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	4913      	ldr	r1, [pc, #76]	; (80003a4 <main+0x148>)
 8000356:	480c      	ldr	r0, [pc, #48]	; (8000388 <main+0x12c>)
 8000358:	f003 f816 	bl	8003388 <siprintf>
		  HAL_UART_Transmit(&huart5, msg, strlen((const char*)msg), 10);
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <main+0x12c>)
 800035e:	f7ff ff61 	bl	8000224 <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29a      	uxth	r2, r3
 8000366:	230a      	movs	r3, #10
 8000368:	4907      	ldr	r1, [pc, #28]	; (8000388 <main+0x12c>)
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0x14c>)
 800036c:	f002 fb4d 	bl	8002a0a <HAL_UART_Transmit>
	  if(onesecondElapsed)
 8000370:	e78f      	b.n	8000292 <main+0x36>
 8000372:	bf00      	nop
 8000374:	20000250 	.word	0x20000250
 8000378:	20000090 	.word	0x20000090
 800037c:	2000008c 	.word	0x2000008c
 8000380:	080044d4 	.word	0x080044d4
 8000384:	40011c00 	.word	0x40011c00
 8000388:	2000012c 	.word	0x2000012c
 800038c:	080044e0 	.word	0x080044e0
 8000390:	200001d0 	.word	0x200001d0
 8000394:	080044f4 	.word	0x080044f4
 8000398:	200000a4 	.word	0x200000a4
 800039c:	08004508 	.word	0x08004508
 80003a0:	20000210 	.word	0x20000210
 80003a4:	0800451c 	.word	0x0800451c
 80003a8:	20000190 	.word	0x20000190

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b090      	sub	sp, #64	; 0x40
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 ffc4 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ce:	2301      	movs	r3, #1
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003dc:	2301      	movs	r3, #1
 80003de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e0:	2302      	movs	r3, #2
 80003e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	f107 0318 	add.w	r3, r7, #24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fa31 	bl	800185c <HAL_RCC_OscConfig>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000400:	f000 fabe 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000404:	230f      	movs	r3, #15
 8000406:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2302      	movs	r3, #2
 800040a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fc9c 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800042a:	f000 faa9 	bl	8000980 <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3740      	adds	r7, #64	; 0x40
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_TIM2_Init+0x94>)
 8000456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <MX_TIM2_Init+0x94>)
 800045e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000462:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_TIM2_Init+0x94>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 800046a:	4b18      	ldr	r3, [pc, #96]	; (80004cc <MX_TIM2_Init+0x94>)
 800046c:	2248      	movs	r2, #72	; 0x48
 800046e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_TIM2_Init+0x94>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <MX_TIM2_Init+0x94>)
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047c:	4813      	ldr	r0, [pc, #76]	; (80004cc <MX_TIM2_Init+0x94>)
 800047e:	f001 fe56 	bl	800212e <HAL_TIM_Base_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000488:	f000 fa7a 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000492:	f107 0308 	add.w	r3, r7, #8
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <MX_TIM2_Init+0x94>)
 800049a:	f001 ffff 	bl	800249c <HAL_TIM_ConfigClockSource>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004a4:	f000 fa6c 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b0:	463b      	mov	r3, r7
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_TIM2_Init+0x94>)
 80004b6:	f002 f9dd 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004c0:	f000 fa5e 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000250 	.word	0x20000250

080004d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_UART4_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_UART4_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_UART4_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	; (800051c <MX_UART4_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_UART4_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_UART4_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_UART4_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_UART4_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_UART4_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_UART4_Init+0x4c>)
 8000508:	f002 fa32 	bl	8002970 <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 fa35 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000210 	.word	0x20000210
 8000520:	40004c00 	.word	0x40004c00

08000524 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_UART5_Init+0x4c>)
 800052a:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_UART5_Init+0x50>)
 800052c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_UART5_Init+0x4c>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_UART5_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_UART5_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_UART5_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_UART5_Init+0x4c>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_UART5_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_UART5_Init+0x4c>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_UART5_Init+0x4c>)
 800055c:	f002 fa08 	bl	8002970 <HAL_UART_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000566:	f000 fa0b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000190 	.word	0x20000190
 8000574:	40005000 	.word	0x40005000

08000578 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800057e:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <MX_USART1_UART_Init+0x50>)
 8000580:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000588:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 800059e:	220c      	movs	r2, #12
 80005a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005ae:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_USART1_UART_Init+0x4c>)
 80005b0:	f002 f9de 	bl	8002970 <HAL_UART_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ba:	f000 f9e1 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200001d0 	.word	0x200001d0
 80005c8:	40013800 	.word	0x40013800

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_USART2_UART_Init+0x50>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x4c>)
 8000604:	f002 f9b4 	bl	8002970 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800060e:	f000 f9b7 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000298 	.word	0x20000298
 800061c:	40004400 	.word	0x40004400

08000620 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART3_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART3_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART3_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART3_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART3_UART_Init+0x4c>)
 8000658:	f002 f98a 	bl	8002970 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f98d 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000a4 	.word	0x200000a4
 8000670:	40004800 	.word	0x40004800

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	4b68      	ldr	r3, [pc, #416]	; (800082c <MX_GPIO_Init+0x1b8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a67      	ldr	r2, [pc, #412]	; (800082c <MX_GPIO_Init+0x1b8>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b65      	ldr	r3, [pc, #404]	; (800082c <MX_GPIO_Init+0x1b8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0310 	and.w	r3, r3, #16
 800069c:	61fb      	str	r3, [r7, #28]
 800069e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a0:	4b62      	ldr	r3, [pc, #392]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a61      	ldr	r2, [pc, #388]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b5f      	ldr	r3, [pc, #380]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b5c      	ldr	r3, [pc, #368]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a5b      	ldr	r2, [pc, #364]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b59      	ldr	r3, [pc, #356]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b56      	ldr	r3, [pc, #344]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a55      	ldr	r2, [pc, #340]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e8:	4b50      	ldr	r3, [pc, #320]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a4f      	ldr	r2, [pc, #316]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b4d      	ldr	r3, [pc, #308]	; (800082c <MX_GPIO_Init+0x1b8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000700:	4b4a      	ldr	r3, [pc, #296]	; (800082c <MX_GPIO_Init+0x1b8>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a49      	ldr	r2, [pc, #292]	; (800082c <MX_GPIO_Init+0x1b8>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b47      	ldr	r3, [pc, #284]	; (800082c <MX_GPIO_Init+0x1b8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0320 	and.w	r3, r3, #32
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000718:	4b44      	ldr	r3, [pc, #272]	; (800082c <MX_GPIO_Init+0x1b8>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a43      	ldr	r2, [pc, #268]	; (800082c <MX_GPIO_Init+0x1b8>)
 800071e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b41      	ldr	r3, [pc, #260]	; (800082c <MX_GPIO_Init+0x1b8>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	21c0      	movs	r1, #192	; 0xc0
 8000734:	483e      	ldr	r0, [pc, #248]	; (8000830 <MX_GPIO_Init+0x1bc>)
 8000736:	f001 f85f 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000740:	483c      	ldr	r0, [pc, #240]	; (8000834 <MX_GPIO_Init+0x1c0>)
 8000742:	f001 f859 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000746:	2200      	movs	r2, #0
 8000748:	f244 11e0 	movw	r1, #16864	; 0x41e0
 800074c:	483a      	ldr	r0, [pc, #232]	; (8000838 <MX_GPIO_Init+0x1c4>)
 800074e:	f001 f853 	bl	80017f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000758:	4838      	ldr	r0, [pc, #224]	; (800083c <MX_GPIO_Init+0x1c8>)
 800075a:	f001 f84d 	bl	80017f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800075e:	f242 130f 	movw	r3, #8463	; 0x210f
 8000762:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 0320 	add.w	r3, r7, #32
 8000770:	4619      	mov	r1, r3
 8000772:	4830      	ldr	r0, [pc, #192]	; (8000834 <MX_GPIO_Init+0x1c0>)
 8000774:	f000 fed6 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000778:	23c0      	movs	r3, #192	; 0xc0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2302      	movs	r3, #2
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4619      	mov	r1, r3
 800078e:	4828      	ldr	r0, [pc, #160]	; (8000830 <MX_GPIO_Init+0x1bc>)
 8000790:	f000 fec8 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000794:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	4619      	mov	r1, r3
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_GPIO_Init+0x1c0>)
 80007ae:	f000 feb9 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 80007b2:	f242 0301 	movw	r3, #8193	; 0x2001
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4619      	mov	r1, r3
 80007c6:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0x1c4>)
 80007c8:	f000 feac 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007cc:	f244 13e0 	movw	r3, #16864	; 0x41e0
 80007d0:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4619      	mov	r1, r3
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_GPIO_Init+0x1c4>)
 80007e6:	f000 fe9d 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4619      	mov	r1, r3
 80007fe:	480f      	ldr	r0, [pc, #60]	; (800083c <MX_GPIO_Init+0x1c8>)
 8000800:	f000 fe90 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2302      	movs	r3, #2
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4619      	mov	r1, r3
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_GPIO_Init+0x1c8>)
 800081e:	f000 fe81 	bl	8001524 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	40011c00 	.word	0x40011c00
 8000834:	40011000 	.word	0x40011000
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40010800 	.word	0x40010800

08000840 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_FSMC_Init+0xbc>)
 800085a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800085e:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <MX_FSMC_Init+0xc0>)
 8000864:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000868:	2204      	movs	r2, #4
 800086a:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800086c:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_FSMC_Init+0xbc>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_FSMC_Init+0xbc>)
 800087a:	2210      	movs	r2, #16
 800087c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_FSMC_Init+0xbc>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_FSMC_Init+0xbc>)
 8000898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_FSMC_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_FSMC_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_FSMC_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_FSMC_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 3;
 80008be:	2303      	movs	r3, #3
 80008c0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80008c6:	2310      	movs	r3, #16
 80008c8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80008ca:	2311      	movs	r3, #17
 80008cc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	4619      	mov	r1, r3
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_FSMC_Init+0xbc>)
 80008da:	f001 fbdb 	bl	8002094 <HAL_SRAM_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80008e4:	f000 f84c 	bl	8000980 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_FSMC_Init+0xc4>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <MX_FSMC_Init+0xc4>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000e4 	.word	0x200000e4
 8000900:	a0000104 	.word	0xa0000104
 8000904:	40010000 	.word	0x40010000

08000908 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d110      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		ms_count++;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000926:	801a      	strh	r2, [r3, #0]

		if(ms_count >= 1000)
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000930:	d305      	bcc.n	800093e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			onesecondElapsed = 1;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	801a      	strh	r2, [r3, #0]
		}
		/* Toggle LEDs */
	}
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000250 	.word	0x20000250
 800094c:	2000008e 	.word	0x2000008e
 8000950:	20000090 	.word	0x20000090

08000954 <Reset_W5300>:

void Reset_W5300()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2140      	movs	r1, #64	; 0x40
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <Reset_W5300+0x28>)
 800095e:	f000 ff4b 	bl	80017f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000962:	200a      	movs	r0, #10
 8000964:	f000 fba6 	bl	80010b4 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <Reset_W5300+0x28>)
 800096e:	f000 ff43 	bl	80017f8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 fb9e 	bl	80010b4 <HAL_Delay>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40011c00 	.word	0x40011c00

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_MspInit+0x5c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <HAL_MspInit+0x5c>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x5c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x5c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x5c>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_MspInit+0x60>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_MspInit+0x60>)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010000 	.word	0x40010000

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a00:	d113      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_TIM_Base_MspInit+0x44>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fc41 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fc5a 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b092      	sub	sp, #72	; 0x48
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4aa1      	ldr	r2, [pc, #644]	; (8000cd8 <HAL_UART_MspInit+0x2a0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d13a      	bne.n	8000ace <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a58:	4ba0      	ldr	r3, [pc, #640]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	4a9f      	ldr	r2, [pc, #636]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a62:	61d3      	str	r3, [r2, #28]
 8000a64:	4b9d      	ldr	r3, [pc, #628]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a66:	69db      	ldr	r3, [r3, #28]
 8000a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a70:	4b9a      	ldr	r3, [pc, #616]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a99      	ldr	r2, [pc, #612]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b97      	ldr	r3, [pc, #604]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
 8000a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4890      	ldr	r0, [pc, #576]	; (8000ce0 <HAL_UART_MspInit+0x2a8>)
 8000a9e:	f000 fd41 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	488a      	ldr	r0, [pc, #552]	; (8000ce0 <HAL_UART_MspInit+0x2a8>)
 8000ab8:	f000 fd34 	bl	8001524 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2034      	movs	r0, #52	; 0x34
 8000ac2:	f000 fbf0 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ac6:	2034      	movs	r0, #52	; 0x34
 8000ac8:	f000 fc09 	bl	80012de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000acc:	e0ff      	b.n	8000cce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a84      	ldr	r2, [pc, #528]	; (8000ce4 <HAL_UART_MspInit+0x2ac>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d145      	bne.n	8000b64 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ad8:	4b80      	ldr	r3, [pc, #512]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a7f      	ldr	r2, [pc, #508]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ae2:	61d3      	str	r3, [r2, #28]
 8000ae4:	4b7d      	ldr	r3, [pc, #500]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b77      	ldr	r3, [pc, #476]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b08:	4b74      	ldr	r3, [pc, #464]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a73      	ldr	r2, [pc, #460]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0320 	and.w	r3, r3, #32
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b32:	4619      	mov	r1, r3
 8000b34:	486a      	ldr	r0, [pc, #424]	; (8000ce0 <HAL_UART_MspInit+0x2a8>)
 8000b36:	f000 fcf5 	bl	8001524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4866      	ldr	r0, [pc, #408]	; (8000ce8 <HAL_UART_MspInit+0x2b0>)
 8000b4e:	f000 fce9 	bl	8001524 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2035      	movs	r0, #53	; 0x35
 8000b58:	f000 fba5 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000b5c:	2035      	movs	r0, #53	; 0x35
 8000b5e:	f000 fbbe 	bl	80012de <HAL_NVIC_EnableIRQ>
}
 8000b62:	e0b4      	b.n	8000cce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a60      	ldr	r2, [pc, #384]	; (8000cec <HAL_UART_MspInit+0x2b4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d13a      	bne.n	8000be4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6193      	str	r3, [r2, #24]
 8000b92:	4b52      	ldr	r3, [pc, #328]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <HAL_UART_MspInit+0x2b8>)
 8000bb4:	f000 fcb6 	bl	8001524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4848      	ldr	r0, [pc, #288]	; (8000cf0 <HAL_UART_MspInit+0x2b8>)
 8000bce:	f000 fca9 	bl	8001524 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2025      	movs	r0, #37	; 0x25
 8000bd8:	f000 fb65 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bdc:	2025      	movs	r0, #37	; 0x25
 8000bde:	f000 fb7e 	bl	80012de <HAL_NVIC_EnableIRQ>
}
 8000be2:	e074      	b.n	8000cce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_UART_MspInit+0x2bc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d130      	bne.n	8000c50 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bee:	4b3b      	ldr	r3, [pc, #236]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b38      	ldr	r3, [pc, #224]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b35      	ldr	r3, [pc, #212]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b32      	ldr	r3, [pc, #200]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <HAL_UART_MspInit+0x2b8>)
 8000c32:	f000 fc77 	bl	8001524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c36:	2308      	movs	r3, #8
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c46:	4619      	mov	r1, r3
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <HAL_UART_MspInit+0x2b8>)
 8000c4a:	f000 fc6b 	bl	8001524 <HAL_GPIO_Init>
}
 8000c4e:	e03e      	b.n	8000cce <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART3)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <HAL_UART_MspInit+0x2c0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d139      	bne.n	8000cce <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0x2a4>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x2c4>)
 8000ca0:	f000 fc40 	bl	8001524 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ca4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_UART_MspInit+0x2c4>)
 8000cba:	f000 fc33 	bl	8001524 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2027      	movs	r0, #39	; 0x27
 8000cc4:	f000 faef 	bl	80012a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cc8:	2027      	movs	r0, #39	; 0x27
 8000cca:	f000 fb08 	bl	80012de <HAL_NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3748      	adds	r7, #72	; 0x48
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004c00 	.word	0x40004c00
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40005000 	.word	0x40005000
 8000ce8:	40011400 	.word	0x40011400
 8000cec:	40013800 	.word	0x40013800
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40004400 	.word	0x40004400
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <HAL_FSMC_MspInit+0xac>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d143      	bne.n	8000da4 <HAL_FSMC_MspInit+0xa4>
    return;
  }
  FSMC_Initialized = 1;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_FSMC_MspInit+0xac>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_FSMC_MspInit+0xb0>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a22      	ldr	r2, [pc, #136]	; (8000db0 <HAL_FSMC_MspInit+0xb0>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_FSMC_MspInit+0xb0>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000d3e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4819      	ldr	r0, [pc, #100]	; (8000db4 <HAL_FSMC_MspInit+0xb4>)
 8000d50:	f000 fbe8 	bl	8001524 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d54:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d58:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	4813      	ldr	r0, [pc, #76]	; (8000db8 <HAL_FSMC_MspInit+0xb8>)
 8000d6a:	f000 fbdb 	bl	8001524 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d6e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000d72:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4619      	mov	r1, r3
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <HAL_FSMC_MspInit+0xbc>)
 8000d84:	f000 fbce 	bl	8001524 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <HAL_FSMC_MspInit+0xc0>)
 8000d9e:	f000 fbc1 	bl	8001524 <HAL_GPIO_Init>
 8000da2:	e000      	b.n	8000da6 <HAL_FSMC_MspInit+0xa6>
    return;
 8000da4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000094 	.word	0x20000094
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40011c00 	.word	0x40011c00
 8000db8:	40011800 	.word	0x40011800
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40012000 	.word	0x40012000

08000dc4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000dcc:	f7ff ff98 	bl	8000d00 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <HardFault_Handler+0x4>

08000dea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <BusFault_Handler+0x4>

08000df6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <UsageFault_Handler+0x4>

08000dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr

08000e14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f92a 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <TIM2_IRQHandler+0x10>)
 8000e32:	f001 fa2b 	bl	800228c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000250 	.word	0x20000250

08000e40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <USART1_IRQHandler+0x10>)
 8000e46:	f001 fe73 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001d0 	.word	0x200001d0

08000e54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART3_IRQHandler+0x10>)
 8000e5a:	f001 fe69 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000a4 	.word	0x200000a4

08000e68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <UART4_IRQHandler+0x10>)
 8000e6e:	f001 fe5f 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000210 	.word	0x20000210

08000e7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <UART5_IRQHandler+0x10>)
 8000e82:	f001 fe55 	bl	8002b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000190 	.word	0x20000190

08000e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:
	}
	return len;
}

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <_isatty>:

int _isatty(int file)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
	return 1;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b085      	sub	sp, #20
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 f9ca 	bl	80032f4 <__errno>
 8000f60:	4602      	mov	r2, r0
 8000f62:	230c      	movs	r3, #12
 8000f64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20010000 	.word	0x20010000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000098 	.word	0x20000098
 8000f94:	200002e0 	.word	0x200002e0

08000f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb0:	480a      	ldr	r0, [pc, #40]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fca:	f7ff ffe5 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 f997 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd2:	f7ff f943 	bl	800025c <main>
  bx lr
 8000fd6:	4770      	bx	lr
  ldr r3, =_sidata
 8000fd8:	080045fc 	.word	0x080045fc
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000fe4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000fe8:	200002e0 	.word	0x200002e0

08000fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_2_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x28>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x28>)
 8000ffa:	f043 0310 	orr.w	r3, r3, #16
 8000ffe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f945 	bl	8001290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f808 	bl	800101c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fcbe 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f95d 	bl	80012fa <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	f000 f925 	bl	80012a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x1c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x20>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a03      	ldr	r2, [pc, #12]	; (800109c <HAL_IncTick+0x20>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	20000008 	.word	0x20000008
 800109c:	200002d8 	.word	0x200002d8

080010a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <HAL_GetTick+0x10>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	200002d8 	.word	0x200002d8

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fff0 	bl	80010a0 <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_Delay+0x40>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffe0 	bl	80010a0 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000008 	.word	0x20000008

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4906      	ldr	r1, [pc, #24]	; (8001190 <__NVIC_EnableIRQ+0x34>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800125c:	d301      	bcc.n	8001262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125e:	2301      	movs	r3, #1
 8001260:	e00f      	b.n	8001282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <SysTick_Config+0x40>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126a:	210f      	movs	r1, #15
 800126c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001270:	f7ff ff90 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <SysTick_Config+0x40>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <SysTick_Config+0x40>)
 800127c:	2207      	movs	r2, #7
 800127e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	e000e010 	.word	0xe000e010

08001290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff ff2d 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b8:	f7ff ff42 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f7ff ff90 	bl	80011e8 <NVIC_EncodePriority>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff5f 	bl	8001194 <__NVIC_SetPriority>
}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff35 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffa2 	bl	800124c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e0d6      	b.n	80014e4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020e 	bic.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	4b64      	ldr	r3, [pc, #400]	; (80014f0 <HAL_DMA_Abort_IT+0x1dc>)
 800135e:	429a      	cmp	r2, r3
 8001360:	d958      	bls.n	8001414 <HAL_DMA_Abort_IT+0x100>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <HAL_DMA_Abort_IT+0x1e0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d04f      	beq.n	800140c <HAL_DMA_Abort_IT+0xf8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <HAL_DMA_Abort_IT+0x1e4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d048      	beq.n	8001408 <HAL_DMA_Abort_IT+0xf4>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a60      	ldr	r2, [pc, #384]	; (80014fc <HAL_DMA_Abort_IT+0x1e8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d040      	beq.n	8001402 <HAL_DMA_Abort_IT+0xee>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <HAL_DMA_Abort_IT+0x1ec>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d038      	beq.n	80013fc <HAL_DMA_Abort_IT+0xe8>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a5d      	ldr	r2, [pc, #372]	; (8001504 <HAL_DMA_Abort_IT+0x1f0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d030      	beq.n	80013f6 <HAL_DMA_Abort_IT+0xe2>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a5b      	ldr	r2, [pc, #364]	; (8001508 <HAL_DMA_Abort_IT+0x1f4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d028      	beq.n	80013f0 <HAL_DMA_Abort_IT+0xdc>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_DMA_Abort_IT+0x1dc>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d020      	beq.n	80013ea <HAL_DMA_Abort_IT+0xd6>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_DMA_Abort_IT+0x1f8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_DMA_Abort_IT+0xd2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_DMA_Abort_IT+0x1fc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d012      	beq.n	80013e2 <HAL_DMA_Abort_IT+0xce>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_DMA_Abort_IT+0x200>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00a      	beq.n	80013dc <HAL_DMA_Abort_IT+0xc8>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a53      	ldr	r2, [pc, #332]	; (8001518 <HAL_DMA_Abort_IT+0x204>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d102      	bne.n	80013d6 <HAL_DMA_Abort_IT+0xc2>
 80013d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d4:	e01b      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	e018      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	e015      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013e2:	2310      	movs	r3, #16
 80013e4:	e013      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e011      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013ee:	e00e      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013f4:	e00b      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013fa:	e008      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	e005      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 8001402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001406:	e002      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 8001408:	2310      	movs	r3, #16
 800140a:	e000      	b.n	800140e <HAL_DMA_Abort_IT+0xfa>
 800140c:	2301      	movs	r3, #1
 800140e:	4a43      	ldr	r2, [pc, #268]	; (800151c <HAL_DMA_Abort_IT+0x208>)
 8001410:	6053      	str	r3, [r2, #4]
 8001412:	e057      	b.n	80014c4 <HAL_DMA_Abort_IT+0x1b0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a36      	ldr	r2, [pc, #216]	; (80014f4 <HAL_DMA_Abort_IT+0x1e0>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d04f      	beq.n	80014be <HAL_DMA_Abort_IT+0x1aa>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a35      	ldr	r2, [pc, #212]	; (80014f8 <HAL_DMA_Abort_IT+0x1e4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d048      	beq.n	80014ba <HAL_DMA_Abort_IT+0x1a6>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a33      	ldr	r2, [pc, #204]	; (80014fc <HAL_DMA_Abort_IT+0x1e8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d040      	beq.n	80014b4 <HAL_DMA_Abort_IT+0x1a0>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a32      	ldr	r2, [pc, #200]	; (8001500 <HAL_DMA_Abort_IT+0x1ec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d038      	beq.n	80014ae <HAL_DMA_Abort_IT+0x19a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a30      	ldr	r2, [pc, #192]	; (8001504 <HAL_DMA_Abort_IT+0x1f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d030      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x194>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <HAL_DMA_Abort_IT+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d028      	beq.n	80014a2 <HAL_DMA_Abort_IT+0x18e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_DMA_Abort_IT+0x1dc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d020      	beq.n	800149c <HAL_DMA_Abort_IT+0x188>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_DMA_Abort_IT+0x1f8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_DMA_Abort_IT+0x184>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_DMA_Abort_IT+0x1fc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d012      	beq.n	8001494 <HAL_DMA_Abort_IT+0x180>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a28      	ldr	r2, [pc, #160]	; (8001514 <HAL_DMA_Abort_IT+0x200>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00a      	beq.n	800148e <HAL_DMA_Abort_IT+0x17a>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a26      	ldr	r2, [pc, #152]	; (8001518 <HAL_DMA_Abort_IT+0x204>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d102      	bne.n	8001488 <HAL_DMA_Abort_IT+0x174>
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	e01b      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 8001488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148c:	e018      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	e015      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 8001494:	2310      	movs	r3, #16
 8001496:	e013      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 8001498:	2301      	movs	r3, #1
 800149a:	e011      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 800149c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014a0:	e00e      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a6:	e00b      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ac:	e008      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b2:	e005      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b8:	e002      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014ba:	2310      	movs	r3, #16
 80014bc:	e000      	b.n	80014c0 <HAL_DMA_Abort_IT+0x1ac>
 80014be:	2301      	movs	r3, #1
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_DMA_Abort_IT+0x20c>)
 80014c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	4798      	blx	r3
    } 
  }
  return status;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020080 	.word	0x40020080
 80014f4:	40020008 	.word	0x40020008
 80014f8:	4002001c 	.word	0x4002001c
 80014fc:	40020030 	.word	0x40020030
 8001500:	40020044 	.word	0x40020044
 8001504:	40020058 	.word	0x40020058
 8001508:	4002006c 	.word	0x4002006c
 800150c:	40020408 	.word	0x40020408
 8001510:	4002041c 	.word	0x4002041c
 8001514:	40020430 	.word	0x40020430
 8001518:	40020444 	.word	0x40020444
 800151c:	40020400 	.word	0x40020400
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	; 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001536:	e133      	b.n	80017a0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001538:	2201      	movs	r2, #1
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8122 	bne.w	800179a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b12      	cmp	r3, #18
 800155c:	d034      	beq.n	80015c8 <HAL_GPIO_Init+0xa4>
 800155e:	2b12      	cmp	r3, #18
 8001560:	d80d      	bhi.n	800157e <HAL_GPIO_Init+0x5a>
 8001562:	2b02      	cmp	r3, #2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x9a>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d804      	bhi.n	8001574 <HAL_GPIO_Init+0x50>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d031      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
 800156e:	2b01      	cmp	r3, #1
 8001570:	d01c      	beq.n	80015ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001572:	e048      	b.n	8001606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001574:	2b03      	cmp	r3, #3
 8001576:	d043      	beq.n	8001600 <HAL_GPIO_Init+0xdc>
 8001578:	2b11      	cmp	r3, #17
 800157a:	d01b      	beq.n	80015b4 <HAL_GPIO_Init+0x90>
          break;
 800157c:	e043      	b.n	8001606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800157e:	4a8f      	ldr	r2, [pc, #572]	; (80017bc <HAL_GPIO_Init+0x298>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d026      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
 8001584:	4a8d      	ldr	r2, [pc, #564]	; (80017bc <HAL_GPIO_Init+0x298>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d806      	bhi.n	8001598 <HAL_GPIO_Init+0x74>
 800158a:	4a8d      	ldr	r2, [pc, #564]	; (80017c0 <HAL_GPIO_Init+0x29c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d020      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
 8001590:	4a8c      	ldr	r2, [pc, #560]	; (80017c4 <HAL_GPIO_Init+0x2a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01d      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
          break;
 8001596:	e036      	b.n	8001606 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001598:	4a8b      	ldr	r2, [pc, #556]	; (80017c8 <HAL_GPIO_Init+0x2a4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
 800159e:	4a8b      	ldr	r2, [pc, #556]	; (80017cc <HAL_GPIO_Init+0x2a8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d016      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
 80015a4:	4a8a      	ldr	r2, [pc, #552]	; (80017d0 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0xae>
          break;
 80015aa:	e02c      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e028      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e023      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	3308      	adds	r3, #8
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e01e      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	330c      	adds	r3, #12
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e019      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015da:	2304      	movs	r3, #4
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e012      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	611a      	str	r2, [r3, #16]
          break;
 80015f2:	e008      	b.n	8001606 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	615a      	str	r2, [r3, #20]
          break;
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d801      	bhi.n	8001610 <HAL_GPIO_Init+0xec>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	e001      	b.n	8001614 <HAL_GPIO_Init+0xf0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3304      	adds	r3, #4
 8001614:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d802      	bhi.n	8001622 <HAL_GPIO_Init+0xfe>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x104>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	3b08      	subs	r3, #8
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	210f      	movs	r1, #15
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	6a39      	ldr	r1, [r7, #32]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	431a      	orrs	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a2 	beq.w	800179a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_GPIO_Init+0x2b0>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_GPIO_Init+0x2b0>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_GPIO_Init+0x2b0>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800166e:	4a5a      	ldr	r2, [pc, #360]	; (80017d8 <HAL_GPIO_Init+0x2b4>)
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	220f      	movs	r2, #15
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x2b8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_Init+0x1b6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x2bc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x1b2>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x2c0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x1ae>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_GPIO_Init+0x2c4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x1aa>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x2c8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x1a6>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_GPIO_Init+0x2cc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x1a2>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016c6:	2306      	movs	r3, #6
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x1b8>
 80016da:	2300      	movs	r3, #0
 80016dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ec:	493a      	ldr	r1, [pc, #232]	; (80017d8 <HAL_GPIO_Init+0x2b4>)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	493a      	ldr	r1, [pc, #232]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4935      	ldr	r1, [pc, #212]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172e:	4b31      	ldr	r3, [pc, #196]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4930      	ldr	r1, [pc, #192]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
 800173a:	e006      	b.n	800174a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	43db      	mvns	r3, r3
 8001744:	492b      	ldr	r1, [pc, #172]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001746:	4013      	ands	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001756:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4926      	ldr	r1, [pc, #152]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
 8001762:	e006      	b.n	8001772 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	43db      	mvns	r3, r3
 800176c:	4921      	ldr	r1, [pc, #132]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800176e:	4013      	ands	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	491c      	ldr	r1, [pc, #112]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	60cb      	str	r3, [r1, #12]
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4917      	ldr	r1, [pc, #92]	; (80017f4 <HAL_GPIO_Init+0x2d0>)
 8001796:	4013      	ands	r3, r2
 8001798:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f aec4 	bne.w	8001538 <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	372c      	adds	r7, #44	; 0x2c
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	10210000 	.word	0x10210000
 80017c0:	10110000 	.word	0x10110000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10310000 	.word	0x10310000
 80017cc:	10320000 	.word	0x10320000
 80017d0:	10220000 	.word	0x10220000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40011400 	.word	0x40011400
 80017ec:	40011800 	.word	0x40011800
 80017f0:	40011c00 	.word	0x40011c00
 80017f4:	40010400 	.word	0x40010400

080017f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	807b      	strh	r3, [r7, #2]
 8001804:	4613      	mov	r3, r2
 8001806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001808:	787b      	ldrb	r3, [r7, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001814:	e003      	b.n	800181e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	041a      	lsls	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	041a      	lsls	r2, r3, #16
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43d9      	mvns	r1, r3
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	400b      	ands	r3, r1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e26c      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8087 	beq.w	800198a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800187c:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b04      	cmp	r3, #4
 8001886:	d00c      	beq.n	80018a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001888:	4b8f      	ldr	r3, [pc, #572]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d112      	bne.n	80018ba <HAL_RCC_OscConfig+0x5e>
 8001894:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d10b      	bne.n	80018ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a2:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06c      	beq.n	8001988 <HAL_RCC_OscConfig+0x12c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d168      	bne.n	8001988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e246      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c2:	d106      	bne.n	80018d2 <HAL_RCC_OscConfig+0x76>
 80018c4:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a7f      	ldr	r2, [pc, #508]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e02e      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x98>
 80018da:	4b7b      	ldr	r3, [pc, #492]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7a      	ldr	r2, [pc, #488]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b78      	ldr	r3, [pc, #480]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a77      	ldr	r2, [pc, #476]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xbc>
 80018fe:	4b72      	ldr	r3, [pc, #456]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a71      	ldr	r2, [pc, #452]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xd4>
 8001918:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a67      	ldr	r2, [pc, #412]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fbb2 	bl	80010a0 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff fbae 	bl	80010a0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	; 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e1fa      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xe4>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fb9e 	bl	80010a0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fb9a 	bl	80010a0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1e6      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x10c>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d063      	beq.n	8001a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a2:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d11c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x18c>
 80019ae:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d116      	bne.n	80019e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_RCC_OscConfig+0x176>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1ba      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4939      	ldr	r1, [pc, #228]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCC_OscConfig+0x270>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb53 	bl	80010a0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fb4f 	bl	80010a0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e19b      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	4927      	ldr	r1, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
 8001a30:	e015      	b.n	8001a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_RCC_OscConfig+0x270>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb32 	bl	80010a0 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fb2e 	bl	80010a0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e17a      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d03a      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d019      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fb12 	bl	80010a0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fb0e 	bl	80010a0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e15a      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 fada 	bl	8002058 <RCC_Delay>
 8001aa4:	e01c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff faf8 	bl	80010a0 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab2:	e00f      	b.n	8001ad4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff faf4 	bl	80010a0 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d908      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e140      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	42420000 	.word	0x42420000
 8001ad0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1e9      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a6 	beq.w	8001c3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b97      	ldr	r3, [pc, #604]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10d      	bne.n	8001b1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b94      	ldr	r3, [pc, #592]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a93      	ldr	r2, [pc, #588]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b91      	ldr	r3, [pc, #580]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b8e      	ldr	r3, [pc, #568]	; (8001d54 <HAL_RCC_OscConfig+0x4f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b26:	4b8b      	ldr	r3, [pc, #556]	; (8001d54 <HAL_RCC_OscConfig+0x4f8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a8a      	ldr	r2, [pc, #552]	; (8001d54 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff fab5 	bl	80010a0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff fab1 	bl	80010a0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b64      	cmp	r3, #100	; 0x64
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e0fd      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	4b81      	ldr	r3, [pc, #516]	; (8001d54 <HAL_RCC_OscConfig+0x4f8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x312>
 8001b60:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a7a      	ldr	r2, [pc, #488]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	e02d      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x334>
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b73      	ldr	r3, [pc, #460]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a72      	ldr	r2, [pc, #456]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	e01c      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x356>
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a69      	ldr	r2, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e00b      	b.n	8001bca <HAL_RCC_OscConfig+0x36e>
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a66      	ldr	r2, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	4b64      	ldr	r3, [pc, #400]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a63      	ldr	r2, [pc, #396]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d015      	beq.n	8001bfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fa65 	bl	80010a0 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7ff fa61 	bl	80010a0 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e0ab      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0ee      	beq.n	8001bda <HAL_RCC_OscConfig+0x37e>
 8001bfc:	e014      	b.n	8001c28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fa4f 	bl	80010a0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff fa4b 	bl	80010a0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e095      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c28:	7dfb      	ldrb	r3, [r7, #23]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8081 	beq.w	8001d46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d061      	beq.n	8001d14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d146      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c58:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <HAL_RCC_OscConfig+0x4fc>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa1f 	bl	80010a0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fa1b 	bl	80010a0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e067      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d108      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	492d      	ldr	r1, [pc, #180]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a19      	ldr	r1, [r3, #32]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	4927      	ldr	r1, [pc, #156]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x4fc>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f9ef 	bl	80010a0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f9eb 	bl	80010a0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e037      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x46a>
 8001ce4:	e02f      	b.n	8001d46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_RCC_OscConfig+0x4fc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f9d8 	bl	80010a0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f9d4 	bl	80010a0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e020      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x498>
 8001d12:	e018      	b.n	8001d46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42420060 	.word	0x42420060

08001d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0d0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4965      	ldr	r1, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d040      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e073      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f928 	bl	80010a0 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff f924 	bl	80010a0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e053      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4601      	mov	r1, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	fa21 f303 	lsr.w	r3, r1, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1cc>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f886 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	08004544 	.word	0x08004544
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b490      	push	{r4, r7}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f38:	1d3c      	adds	r4, r7, #4
 8001f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f40:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0x40>
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0x46>
 8001f6e:	e02d      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	e02d      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	0c9b      	lsrs	r3, r3, #18
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f82:	4413      	add	r3, r2
 8001f84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0c5b      	lsrs	r3, r3, #17
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4a0f      	ldr	r2, [pc, #60]	; (8001fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fae:	fb02 f203 	mul.w	r2, r2, r3
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	e004      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	623b      	str	r3, [r7, #32]
      break;
 8001fca:	e002      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc90      	pop	{r4, r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	08004530 	.word	0x08004530
 8001fe4:	08004540 	.word	0x08004540
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	003d0900 	.word	0x003d0900

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000000 	.word	0x20000000

08002008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800200c:	f7ff fff2 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002010:	4601      	mov	r1, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x24>)
 800201e:	5cd3      	ldrb	r3, [r2, r3]
 8002020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	08004554 	.word	0x08004554

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002038:	4601      	mov	r1, r0
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0adb      	lsrs	r3, r3, #11
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002046:	5cd3      	ldrb	r3, [r2, r3]
 8002048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08004554 	.word	0x08004554

08002058 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <RCC_Delay+0x34>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <RCC_Delay+0x38>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0a5b      	lsrs	r3, r3, #9
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002074:	bf00      	nop
  }
  while (Delay --);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	60fa      	str	r2, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f9      	bne.n	8002074 <RCC_Delay+0x1c>
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000000 	.word	0x20000000
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_SRAM_Init+0x1c>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ae:	d101      	bne.n	80020b4 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e038      	b.n	8002126 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d106      	bne.n	80020ce <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7fe fe7b 	bl	8000dc4 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3308      	adds	r3, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	4610      	mov	r0, r2
 80020da:	f001 f835 	bl	8003148 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	f001 f897 	bl	800321c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6858      	ldr	r0, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f001 f8c2 	bl	8003284 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6892      	ldr	r2, [r2, #8]
 8002108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	6892      	ldr	r2, [r2, #8]
 8002114:	f041 0101 	orr.w	r1, r1, #1
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e041      	b.n	80021c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fc4b 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f000 fa71 	bl	8002654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d001      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e044      	b.n	800226e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_TIM_Base_Start_IT+0xac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d018      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_TIM_Base_Start_IT+0xb0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002218:	d00e      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_TIM_Base_Start_IT+0xb4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d009      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIM_Base_Start_IT+0xb8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x6c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_TIM_Base_Start_IT+0xbc>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d010      	beq.n	800226c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	e007      	b.n	800226c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40013400 	.word	0x40013400
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800
 8002288:	40000c00 	.word	0x40000c00

0800228c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d122      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0202 	mvn.w	r2, #2
 80022b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9a4 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f997 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f9a6 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b04      	cmp	r3, #4
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0204 	mvn.w	r2, #4
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f97a 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f96d 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f97c 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b08      	cmp	r3, #8
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b08      	cmp	r3, #8
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0208 	mvn.w	r2, #8
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2204      	movs	r2, #4
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f950 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f943 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f952 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	2b10      	cmp	r3, #16
 800239c:	d122      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d11b      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0210 	mvn.w	r2, #16
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2208      	movs	r2, #8
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f926 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f919 	bl	800260a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f928 	bl	800262e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0201 	mvn.w	r2, #1
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fa7c 	bl	8000908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241a:	2b80      	cmp	r3, #128	; 0x80
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa91 	bl	800295e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8ec 	bl	8002640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b20      	cmp	r3, #32
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0220 	mvn.w	r2, #32
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa5c 	bl	800294c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_TIM_ConfigClockSource+0x18>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0a6      	b.n	8002602 <HAL_TIM_ConfigClockSource+0x166>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d067      	beq.n	80025bc <HAL_TIM_ConfigClockSource+0x120>
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d80b      	bhi.n	8002508 <HAL_TIM_ConfigClockSource+0x6c>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d073      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d802      	bhi.n	80024fe <HAL_TIM_ConfigClockSource+0x62>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d06f      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80024fc:	e078      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d06c      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
 8002502:	2b30      	cmp	r3, #48	; 0x30
 8002504:	d06a      	beq.n	80025dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002506:	e073      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d00d      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0x8c>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d804      	bhi.n	800251a <HAL_TIM_ConfigClockSource+0x7e>
 8002510:	2b50      	cmp	r3, #80	; 0x50
 8002512:	d033      	beq.n	800257c <HAL_TIM_ConfigClockSource+0xe0>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d041      	beq.n	800259c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002518:	e06a      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d066      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x152>
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002524:	d017      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002526:	e063      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f000 f97d 	bl	8002836 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800254a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]
      break;
 8002554:	e04c      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 f966 	bl	8002836 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002578:	609a      	str	r2, [r3, #8]
      break;
 800257a:	e039      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	461a      	mov	r2, r3
 800258a:	f000 f8dd 	bl	8002748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2150      	movs	r1, #80	; 0x50
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f934 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 800259a:	e029      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f000 f8fb 	bl	80027a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2160      	movs	r1, #96	; 0x60
 80025b4:	4618      	mov	r0, r3
 80025b6:	f000 f924 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 80025ba:	e019      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f000 f8bd 	bl	8002748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2140      	movs	r1, #64	; 0x40
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f914 	bl	8002802 <TIM_ITRx_SetConfig>
      break;
 80025da:	e009      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f000 f90b 	bl	8002802 <TIM_ITRx_SetConfig>
        break;
 80025ec:	e000      	b.n	80025f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
	...

08002654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a33      	ldr	r2, [pc, #204]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d013      	beq.n	8002694 <TIM_Base_SetConfig+0x40>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a32      	ldr	r2, [pc, #200]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00f      	beq.n	8002694 <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d00b      	beq.n	8002694 <TIM_Base_SetConfig+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <TIM_Base_SetConfig+0xe8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <TIM_Base_SetConfig+0x40>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a2e      	ldr	r2, [pc, #184]	; (8002740 <TIM_Base_SetConfig+0xec>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0x40>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a2d      	ldr	r2, [pc, #180]	; (8002744 <TIM_Base_SetConfig+0xf0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d108      	bne.n	80026a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a22      	ldr	r2, [pc, #136]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <TIM_Base_SetConfig+0x82>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <TIM_Base_SetConfig+0x82>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d00b      	beq.n	80026d6 <TIM_Base_SetConfig+0x82>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <TIM_Base_SetConfig+0xe8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x82>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <TIM_Base_SetConfig+0xec>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x82>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <TIM_Base_SetConfig+0xf0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <TIM_Base_SetConfig+0xe0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0xc8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <TIM_Base_SetConfig+0xe4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d103      	bne.n	8002724 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	615a      	str	r2, [r3, #20]
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40013400 	.word	0x40013400
 800273c:	40000400 	.word	0x40000400
 8002740:	40000800 	.word	0x40000800
 8002744:	40000c00 	.word	0x40000c00

08002748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0201 	bic.w	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 030a 	bic.w	r3, r3, #10
 8002784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f023 0210 	bic.w	r2, r3, #16
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	031b      	lsls	r3, r3, #12
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	621a      	str	r2, [r3, #32]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	f043 0307 	orr.w	r3, r3, #7
 8002824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002836:	b480      	push	{r7}
 8002838:	b087      	sub	sp, #28
 800283a:	af00      	add	r7, sp, #0
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002850:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	431a      	orrs	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	609a      	str	r2, [r3, #8]
}
 800286a:	bf00      	nop
 800286c:	371c      	adds	r7, #28
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e050      	b.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a1b      	ldr	r2, [pc, #108]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d018      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d00e      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10c      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40013400 	.word	0x40013400
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800
 8002948:	40000c00 	.word	0x40000c00

0800294c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e03f      	b.n	8002a02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f84e 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2224      	movs	r2, #36	; 0x24
 80029a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb39 	bl	800302c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b08a      	sub	sp, #40	; 0x28
 8002a0e:	af02      	add	r7, sp, #8
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b20      	cmp	r3, #32
 8002a28:	d17c      	bne.n	8002b24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_UART_Transmit+0x2c>
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e075      	b.n	8002b26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_UART_Transmit+0x3e>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e06e      	b.n	8002b26 <HAL_UART_Transmit+0x11c>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2221      	movs	r2, #33	; 0x21
 8002a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe fb1f 	bl	80010a0 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a78:	d108      	bne.n	8002a8c <HAL_UART_Transmit+0x82>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e003      	b.n	8002a94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a9c:	e02a      	b.n	8002af4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f95c 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e036      	b.n	8002b26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10b      	bne.n	8002ad6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e007      	b.n	8002ae6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	781a      	ldrb	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1cf      	bne.n	8002a9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f92c 	bl	8002d66 <UART_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e006      	b.n	8002b26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3720      	adds	r7, #32
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10d      	bne.n	8002b82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_UART_IRQHandler+0x52>
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9d5 	bl	8002f2a <UART_Receive_IT>
      return;
 8002b80:	e0d1      	b.n	8002d26 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80b0 	beq.w	8002cea <HAL_UART_IRQHandler+0x1ba>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x70>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80a5 	beq.w	8002cea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x90>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0xb0>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	f043 0202 	orr.w	r2, r3, #2
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_UART_IRQHandler+0xd0>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00f      	beq.n	8002c2a <HAL_UART_IRQHandler+0xfa>
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d104      	bne.n	8002c1e <HAL_UART_IRQHandler+0xee>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	f043 0208 	orr.w	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d078      	beq.n	8002d24 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_UART_IRQHandler+0x11c>
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f96f 	bl	8002f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <HAL_UART_IRQHandler+0x144>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d031      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8c0 	bl	8002dfa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d023      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c96:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <HAL_UART_IRQHandler+0x1fc>)
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe fb31 	bl	8001314 <HAL_DMA_Abort_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc6:	e00e      	b.n	8002ce6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f843 	bl	8002d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cce:	e00a      	b.n	8002ce6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f83f 	bl	8002d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd6:	e006      	b.n	8002ce6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f83b 	bl	8002d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ce4:	e01e      	b.n	8002d24 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce6:	bf00      	nop
    return;
 8002ce8:	e01c      	b.n	8002d24 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x1d6>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8ac 	bl	8002e5c <UART_Transmit_IT>
    return;
 8002d04:	e00f      	b.n	8002d26 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1f6>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8ed 	bl	8002efa <UART_EndTransmit_IT>
    return;
 8002d20:	bf00      	nop
 8002d22:	e000      	b.n	8002d26 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d24:	bf00      	nop
  }
}
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	08002e35 	.word	0x08002e35

08002d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d76:	e02c      	b.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7e:	d028      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d86:	f7fe f98b 	bl	80010a0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d21d      	bcs.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002da4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d0c3      	beq.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e10:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff80 	bl	8002d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b21      	cmp	r3, #33	; 0x21
 8002e6e:	d13e      	bne.n	8002eee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d114      	bne.n	8002ea4 <UART_Transmit_IT+0x48>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d110      	bne.n	8002ea4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	1c9a      	adds	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]
 8002ea2:	e008      	b.n	8002eb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	1c59      	adds	r1, r3, #1
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6211      	str	r1, [r2, #32]
 8002eae:	781a      	ldrb	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff08 	bl	8002d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b22      	cmp	r3, #34	; 0x22
 8002f3c:	d170      	bne.n	8003020 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d117      	bne.n	8002f78 <UART_Receive_IT+0x4e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d113      	bne.n	8002f78 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	1c9a      	adds	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
 8002f76:	e026      	b.n	8002fc6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8a:	d007      	beq.n	8002f9c <UART_Receive_IT+0x72>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <UART_Receive_IT+0x80>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e008      	b.n	8002fbc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d120      	bne.n	800301c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0220 	bic.w	r2, r2, #32
 8002fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0201 	bic.w	r2, r2, #1
 8003008:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe95 	bl	8002d42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e002      	b.n	8003022 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003066:	f023 030c 	bic.w	r3, r3, #12
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <UART_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe ffcc 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	e002      	b.n	80030a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe ffb4 	bl	8002008 <HAL_RCC_GetPCLK1Freq>
 80030a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a22      	ldr	r2, [pc, #136]	; (8003144 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	0119      	lsls	r1, r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	4419      	add	r1, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <UART_SetConfig+0x118>)
 8003112:	fba3 0302 	umull	r0, r3, r3, r2
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2064      	movs	r0, #100	; 0x64
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	3332      	adds	r3, #50	; 0x32
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	440a      	add	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013800 	.word	0x40013800
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f023 0101 	bic.w	r1, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b08      	cmp	r3, #8
 8003170:	d102      	bne.n	8003178 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003172:	2340      	movs	r3, #64	; 0x40
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e001      	b.n	800317c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003188:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800318e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003194:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800319a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80031a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80031a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80031ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80031b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80031b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <FSMC_NORSRAM_Init+0xd0>)
 80031d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80031e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	ea02 0103 	and.w	r1, r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4319      	orrs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	0008fb7f 	.word	0x0008fb7f

0800321c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003232:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	431a      	orrs	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	431a      	orrs	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	3b01      	subs	r3, #1
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	431a      	orrs	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	3b02      	subs	r3, #2
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	431a      	orrs	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	3201      	adds	r2, #1
 8003270:	4319      	orrs	r1, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d11d      	bne.n	80032d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	6811      	ldr	r1, [r2, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	6852      	ldr	r2, [r2, #4]
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	4311      	orrs	r1, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	0212      	lsls	r2, r2, #8
 80032b8:	4311      	orrs	r1, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	6992      	ldr	r2, [r2, #24]
 80032be:	4311      	orrs	r1, r2
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	68d2      	ldr	r2, [r2, #12]
 80032c4:	0412      	lsls	r2, r2, #16
 80032c6:	430a      	orrs	r2, r1
 80032c8:	ea43 0102 	orr.w	r1, r3, r2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80032d4:	e005      	b.n	80032e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80032de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	cff00000 	.word	0xcff00000

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	; (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000000c 	.word	0x2000000c

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	2500      	movs	r5, #0
 8003304:	4e0c      	ldr	r6, [pc, #48]	; (8003338 <__libc_init_array+0x38>)
 8003306:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003308:	1ba4      	subs	r4, r4, r6
 800330a:	10a4      	asrs	r4, r4, #2
 800330c:	42a5      	cmp	r5, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	f001 f8d4 	bl	80044bc <_init>
 8003314:	2500      	movs	r5, #0
 8003316:	4e0a      	ldr	r6, [pc, #40]	; (8003340 <__libc_init_array+0x40>)
 8003318:	4c0a      	ldr	r4, [pc, #40]	; (8003344 <__libc_init_array+0x44>)
 800331a:	1ba4      	subs	r4, r4, r6
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	42a5      	cmp	r5, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003328:	4798      	blx	r3
 800332a:	3501      	adds	r5, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003332:	4798      	blx	r3
 8003334:	3501      	adds	r5, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	080045f4 	.word	0x080045f4
 800333c:	080045f4 	.word	0x080045f4
 8003340:	080045f4 	.word	0x080045f4
 8003344:	080045f8 	.word	0x080045f8

08003348 <memset>:
 8003348:	4603      	mov	r3, r0
 800334a:	4402      	add	r2, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <iprintf>:
 8003358:	b40f      	push	{r0, r1, r2, r3}
 800335a:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <iprintf+0x2c>)
 800335c:	b513      	push	{r0, r1, r4, lr}
 800335e:	681c      	ldr	r4, [r3, #0]
 8003360:	b124      	cbz	r4, 800336c <iprintf+0x14>
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	b913      	cbnz	r3, 800336c <iprintf+0x14>
 8003366:	4620      	mov	r0, r4
 8003368:	f000 f86e 	bl	8003448 <__sinit>
 800336c:	ab05      	add	r3, sp, #20
 800336e:	9a04      	ldr	r2, [sp, #16]
 8003370:	68a1      	ldr	r1, [r4, #8]
 8003372:	4620      	mov	r0, r4
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	f000 fac5 	bl	8003904 <_vfiprintf_r>
 800337a:	b002      	add	sp, #8
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	b004      	add	sp, #16
 8003382:	4770      	bx	lr
 8003384:	2000000c 	.word	0x2000000c

08003388 <siprintf>:
 8003388:	b40e      	push	{r1, r2, r3}
 800338a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800338e:	b500      	push	{lr}
 8003390:	b09c      	sub	sp, #112	; 0x70
 8003392:	ab1d      	add	r3, sp, #116	; 0x74
 8003394:	9002      	str	r0, [sp, #8]
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	9107      	str	r1, [sp, #28]
 800339a:	9104      	str	r1, [sp, #16]
 800339c:	4808      	ldr	r0, [pc, #32]	; (80033c0 <siprintf+0x38>)
 800339e:	4909      	ldr	r1, [pc, #36]	; (80033c4 <siprintf+0x3c>)
 80033a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	6800      	ldr	r0, [r0, #0]
 80033a8:	a902      	add	r1, sp, #8
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	f000 f98a 	bl	80036c4 <_svfiprintf_r>
 80033b0:	2200      	movs	r2, #0
 80033b2:	9b02      	ldr	r3, [sp, #8]
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	b01c      	add	sp, #112	; 0x70
 80033b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033bc:	b003      	add	sp, #12
 80033be:	4770      	bx	lr
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	ffff0208 	.word	0xffff0208

080033c8 <std>:
 80033c8:	2300      	movs	r3, #0
 80033ca:	b510      	push	{r4, lr}
 80033cc:	4604      	mov	r4, r0
 80033ce:	e9c0 3300 	strd	r3, r3, [r0]
 80033d2:	6083      	str	r3, [r0, #8]
 80033d4:	8181      	strh	r1, [r0, #12]
 80033d6:	6643      	str	r3, [r0, #100]	; 0x64
 80033d8:	81c2      	strh	r2, [r0, #14]
 80033da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033de:	6183      	str	r3, [r0, #24]
 80033e0:	4619      	mov	r1, r3
 80033e2:	2208      	movs	r2, #8
 80033e4:	305c      	adds	r0, #92	; 0x5c
 80033e6:	f7ff ffaf 	bl	8003348 <memset>
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <std+0x38>)
 80033ec:	6224      	str	r4, [r4, #32]
 80033ee:	6263      	str	r3, [r4, #36]	; 0x24
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <std+0x3c>)
 80033f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <std+0x40>)
 80033f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <std+0x44>)
 80033fa:	6323      	str	r3, [r4, #48]	; 0x30
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	bf00      	nop
 8003400:	08003e61 	.word	0x08003e61
 8003404:	08003e83 	.word	0x08003e83
 8003408:	08003ebb 	.word	0x08003ebb
 800340c:	08003edf 	.word	0x08003edf

08003410 <_cleanup_r>:
 8003410:	4901      	ldr	r1, [pc, #4]	; (8003418 <_cleanup_r+0x8>)
 8003412:	f000 b885 	b.w	8003520 <_fwalk_reent>
 8003416:	bf00      	nop
 8003418:	080041b9 	.word	0x080041b9

0800341c <__sfmoreglue>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	2568      	movs	r5, #104	; 0x68
 8003420:	1e4a      	subs	r2, r1, #1
 8003422:	4355      	muls	r5, r2
 8003424:	460e      	mov	r6, r1
 8003426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800342a:	f000 f897 	bl	800355c <_malloc_r>
 800342e:	4604      	mov	r4, r0
 8003430:	b140      	cbz	r0, 8003444 <__sfmoreglue+0x28>
 8003432:	2100      	movs	r1, #0
 8003434:	e9c0 1600 	strd	r1, r6, [r0]
 8003438:	300c      	adds	r0, #12
 800343a:	60a0      	str	r0, [r4, #8]
 800343c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003440:	f7ff ff82 	bl	8003348 <memset>
 8003444:	4620      	mov	r0, r4
 8003446:	bd70      	pop	{r4, r5, r6, pc}

08003448 <__sinit>:
 8003448:	6983      	ldr	r3, [r0, #24]
 800344a:	b510      	push	{r4, lr}
 800344c:	4604      	mov	r4, r0
 800344e:	bb33      	cbnz	r3, 800349e <__sinit+0x56>
 8003450:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003454:	6503      	str	r3, [r0, #80]	; 0x50
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <__sinit+0x58>)
 8003458:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <__sinit+0x5c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6282      	str	r2, [r0, #40]	; 0x28
 800345e:	4298      	cmp	r0, r3
 8003460:	bf04      	itt	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	6183      	streq	r3, [r0, #24]
 8003466:	f000 f81f 	bl	80034a8 <__sfp>
 800346a:	6060      	str	r0, [r4, #4]
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f81b 	bl	80034a8 <__sfp>
 8003472:	60a0      	str	r0, [r4, #8]
 8003474:	4620      	mov	r0, r4
 8003476:	f000 f817 	bl	80034a8 <__sfp>
 800347a:	2200      	movs	r2, #0
 800347c:	60e0      	str	r0, [r4, #12]
 800347e:	2104      	movs	r1, #4
 8003480:	6860      	ldr	r0, [r4, #4]
 8003482:	f7ff ffa1 	bl	80033c8 <std>
 8003486:	2201      	movs	r2, #1
 8003488:	2109      	movs	r1, #9
 800348a:	68a0      	ldr	r0, [r4, #8]
 800348c:	f7ff ff9c 	bl	80033c8 <std>
 8003490:	2202      	movs	r2, #2
 8003492:	2112      	movs	r1, #18
 8003494:	68e0      	ldr	r0, [r4, #12]
 8003496:	f7ff ff97 	bl	80033c8 <std>
 800349a:	2301      	movs	r3, #1
 800349c:	61a3      	str	r3, [r4, #24]
 800349e:	bd10      	pop	{r4, pc}
 80034a0:	0800455c 	.word	0x0800455c
 80034a4:	08003411 	.word	0x08003411

080034a8 <__sfp>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <__sfp+0x70>)
 80034ac:	4607      	mov	r7, r0
 80034ae:	681e      	ldr	r6, [r3, #0]
 80034b0:	69b3      	ldr	r3, [r6, #24]
 80034b2:	b913      	cbnz	r3, 80034ba <__sfp+0x12>
 80034b4:	4630      	mov	r0, r6
 80034b6:	f7ff ffc7 	bl	8003448 <__sinit>
 80034ba:	3648      	adds	r6, #72	; 0x48
 80034bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	d503      	bpl.n	80034cc <__sfp+0x24>
 80034c4:	6833      	ldr	r3, [r6, #0]
 80034c6:	b133      	cbz	r3, 80034d6 <__sfp+0x2e>
 80034c8:	6836      	ldr	r6, [r6, #0]
 80034ca:	e7f7      	b.n	80034bc <__sfp+0x14>
 80034cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034d0:	b16d      	cbz	r5, 80034ee <__sfp+0x46>
 80034d2:	3468      	adds	r4, #104	; 0x68
 80034d4:	e7f4      	b.n	80034c0 <__sfp+0x18>
 80034d6:	2104      	movs	r1, #4
 80034d8:	4638      	mov	r0, r7
 80034da:	f7ff ff9f 	bl	800341c <__sfmoreglue>
 80034de:	6030      	str	r0, [r6, #0]
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d1f1      	bne.n	80034c8 <__sfp+0x20>
 80034e4:	230c      	movs	r3, #12
 80034e6:	4604      	mov	r4, r0
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	4620      	mov	r0, r4
 80034ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <__sfp+0x74>)
 80034f0:	6665      	str	r5, [r4, #100]	; 0x64
 80034f2:	e9c4 5500 	strd	r5, r5, [r4]
 80034f6:	60a5      	str	r5, [r4, #8]
 80034f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80034fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003500:	2208      	movs	r2, #8
 8003502:	4629      	mov	r1, r5
 8003504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003508:	f7ff ff1e 	bl	8003348 <memset>
 800350c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003514:	e7e9      	b.n	80034ea <__sfp+0x42>
 8003516:	bf00      	nop
 8003518:	0800455c 	.word	0x0800455c
 800351c:	ffff0001 	.word	0xffff0001

08003520 <_fwalk_reent>:
 8003520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003524:	4680      	mov	r8, r0
 8003526:	4689      	mov	r9, r1
 8003528:	2600      	movs	r6, #0
 800352a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800352e:	b914      	cbnz	r4, 8003536 <_fwalk_reent+0x16>
 8003530:	4630      	mov	r0, r6
 8003532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003536:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800353a:	3f01      	subs	r7, #1
 800353c:	d501      	bpl.n	8003542 <_fwalk_reent+0x22>
 800353e:	6824      	ldr	r4, [r4, #0]
 8003540:	e7f5      	b.n	800352e <_fwalk_reent+0xe>
 8003542:	89ab      	ldrh	r3, [r5, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d907      	bls.n	8003558 <_fwalk_reent+0x38>
 8003548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800354c:	3301      	adds	r3, #1
 800354e:	d003      	beq.n	8003558 <_fwalk_reent+0x38>
 8003550:	4629      	mov	r1, r5
 8003552:	4640      	mov	r0, r8
 8003554:	47c8      	blx	r9
 8003556:	4306      	orrs	r6, r0
 8003558:	3568      	adds	r5, #104	; 0x68
 800355a:	e7ee      	b.n	800353a <_fwalk_reent+0x1a>

0800355c <_malloc_r>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	1ccd      	adds	r5, r1, #3
 8003560:	f025 0503 	bic.w	r5, r5, #3
 8003564:	3508      	adds	r5, #8
 8003566:	2d0c      	cmp	r5, #12
 8003568:	bf38      	it	cc
 800356a:	250c      	movcc	r5, #12
 800356c:	2d00      	cmp	r5, #0
 800356e:	4606      	mov	r6, r0
 8003570:	db01      	blt.n	8003576 <_malloc_r+0x1a>
 8003572:	42a9      	cmp	r1, r5
 8003574:	d903      	bls.n	800357e <_malloc_r+0x22>
 8003576:	230c      	movs	r3, #12
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	2000      	movs	r0, #0
 800357c:	bd70      	pop	{r4, r5, r6, pc}
 800357e:	f000 feed 	bl	800435c <__malloc_lock>
 8003582:	4a21      	ldr	r2, [pc, #132]	; (8003608 <_malloc_r+0xac>)
 8003584:	6814      	ldr	r4, [r2, #0]
 8003586:	4621      	mov	r1, r4
 8003588:	b991      	cbnz	r1, 80035b0 <_malloc_r+0x54>
 800358a:	4c20      	ldr	r4, [pc, #128]	; (800360c <_malloc_r+0xb0>)
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	b91b      	cbnz	r3, 8003598 <_malloc_r+0x3c>
 8003590:	4630      	mov	r0, r6
 8003592:	f000 fc55 	bl	8003e40 <_sbrk_r>
 8003596:	6020      	str	r0, [r4, #0]
 8003598:	4629      	mov	r1, r5
 800359a:	4630      	mov	r0, r6
 800359c:	f000 fc50 	bl	8003e40 <_sbrk_r>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d124      	bne.n	80035ee <_malloc_r+0x92>
 80035a4:	230c      	movs	r3, #12
 80035a6:	4630      	mov	r0, r6
 80035a8:	6033      	str	r3, [r6, #0]
 80035aa:	f000 fed8 	bl	800435e <__malloc_unlock>
 80035ae:	e7e4      	b.n	800357a <_malloc_r+0x1e>
 80035b0:	680b      	ldr	r3, [r1, #0]
 80035b2:	1b5b      	subs	r3, r3, r5
 80035b4:	d418      	bmi.n	80035e8 <_malloc_r+0x8c>
 80035b6:	2b0b      	cmp	r3, #11
 80035b8:	d90f      	bls.n	80035da <_malloc_r+0x7e>
 80035ba:	600b      	str	r3, [r1, #0]
 80035bc:	18cc      	adds	r4, r1, r3
 80035be:	50cd      	str	r5, [r1, r3]
 80035c0:	4630      	mov	r0, r6
 80035c2:	f000 fecc 	bl	800435e <__malloc_unlock>
 80035c6:	f104 000b 	add.w	r0, r4, #11
 80035ca:	1d23      	adds	r3, r4, #4
 80035cc:	f020 0007 	bic.w	r0, r0, #7
 80035d0:	1ac3      	subs	r3, r0, r3
 80035d2:	d0d3      	beq.n	800357c <_malloc_r+0x20>
 80035d4:	425a      	negs	r2, r3
 80035d6:	50e2      	str	r2, [r4, r3]
 80035d8:	e7d0      	b.n	800357c <_malloc_r+0x20>
 80035da:	684b      	ldr	r3, [r1, #4]
 80035dc:	428c      	cmp	r4, r1
 80035de:	bf16      	itet	ne
 80035e0:	6063      	strne	r3, [r4, #4]
 80035e2:	6013      	streq	r3, [r2, #0]
 80035e4:	460c      	movne	r4, r1
 80035e6:	e7eb      	b.n	80035c0 <_malloc_r+0x64>
 80035e8:	460c      	mov	r4, r1
 80035ea:	6849      	ldr	r1, [r1, #4]
 80035ec:	e7cc      	b.n	8003588 <_malloc_r+0x2c>
 80035ee:	1cc4      	adds	r4, r0, #3
 80035f0:	f024 0403 	bic.w	r4, r4, #3
 80035f4:	42a0      	cmp	r0, r4
 80035f6:	d005      	beq.n	8003604 <_malloc_r+0xa8>
 80035f8:	1a21      	subs	r1, r4, r0
 80035fa:	4630      	mov	r0, r6
 80035fc:	f000 fc20 	bl	8003e40 <_sbrk_r>
 8003600:	3001      	adds	r0, #1
 8003602:	d0cf      	beq.n	80035a4 <_malloc_r+0x48>
 8003604:	6025      	str	r5, [r4, #0]
 8003606:	e7db      	b.n	80035c0 <_malloc_r+0x64>
 8003608:	2000009c 	.word	0x2000009c
 800360c:	200000a0 	.word	0x200000a0

08003610 <__ssputs_r>:
 8003610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003614:	688e      	ldr	r6, [r1, #8]
 8003616:	4682      	mov	sl, r0
 8003618:	429e      	cmp	r6, r3
 800361a:	460c      	mov	r4, r1
 800361c:	4690      	mov	r8, r2
 800361e:	4699      	mov	r9, r3
 8003620:	d837      	bhi.n	8003692 <__ssputs_r+0x82>
 8003622:	898a      	ldrh	r2, [r1, #12]
 8003624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003628:	d031      	beq.n	800368e <__ssputs_r+0x7e>
 800362a:	2302      	movs	r3, #2
 800362c:	6825      	ldr	r5, [r4, #0]
 800362e:	6909      	ldr	r1, [r1, #16]
 8003630:	1a6f      	subs	r7, r5, r1
 8003632:	6965      	ldr	r5, [r4, #20]
 8003634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003638:	fb95 f5f3 	sdiv	r5, r5, r3
 800363c:	f109 0301 	add.w	r3, r9, #1
 8003640:	443b      	add	r3, r7
 8003642:	429d      	cmp	r5, r3
 8003644:	bf38      	it	cc
 8003646:	461d      	movcc	r5, r3
 8003648:	0553      	lsls	r3, r2, #21
 800364a:	d530      	bpl.n	80036ae <__ssputs_r+0x9e>
 800364c:	4629      	mov	r1, r5
 800364e:	f7ff ff85 	bl	800355c <_malloc_r>
 8003652:	4606      	mov	r6, r0
 8003654:	b950      	cbnz	r0, 800366c <__ssputs_r+0x5c>
 8003656:	230c      	movs	r3, #12
 8003658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800365c:	f8ca 3000 	str.w	r3, [sl]
 8003660:	89a3      	ldrh	r3, [r4, #12]
 8003662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003666:	81a3      	strh	r3, [r4, #12]
 8003668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366c:	463a      	mov	r2, r7
 800366e:	6921      	ldr	r1, [r4, #16]
 8003670:	f000 fe50 	bl	8004314 <memcpy>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800367a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	6126      	str	r6, [r4, #16]
 8003682:	443e      	add	r6, r7
 8003684:	6026      	str	r6, [r4, #0]
 8003686:	464e      	mov	r6, r9
 8003688:	6165      	str	r5, [r4, #20]
 800368a:	1bed      	subs	r5, r5, r7
 800368c:	60a5      	str	r5, [r4, #8]
 800368e:	454e      	cmp	r6, r9
 8003690:	d900      	bls.n	8003694 <__ssputs_r+0x84>
 8003692:	464e      	mov	r6, r9
 8003694:	4632      	mov	r2, r6
 8003696:	4641      	mov	r1, r8
 8003698:	6820      	ldr	r0, [r4, #0]
 800369a:	f000 fe46 	bl	800432a <memmove>
 800369e:	68a3      	ldr	r3, [r4, #8]
 80036a0:	2000      	movs	r0, #0
 80036a2:	1b9b      	subs	r3, r3, r6
 80036a4:	60a3      	str	r3, [r4, #8]
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	441e      	add	r6, r3
 80036aa:	6026      	str	r6, [r4, #0]
 80036ac:	e7dc      	b.n	8003668 <__ssputs_r+0x58>
 80036ae:	462a      	mov	r2, r5
 80036b0:	f000 fea2 	bl	80043f8 <_realloc_r>
 80036b4:	4606      	mov	r6, r0
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d1e2      	bne.n	8003680 <__ssputs_r+0x70>
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	4650      	mov	r0, sl
 80036be:	f000 fe4f 	bl	8004360 <_free_r>
 80036c2:	e7c8      	b.n	8003656 <__ssputs_r+0x46>

080036c4 <_svfiprintf_r>:
 80036c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	461d      	mov	r5, r3
 80036ca:	898b      	ldrh	r3, [r1, #12]
 80036cc:	b09d      	sub	sp, #116	; 0x74
 80036ce:	061f      	lsls	r7, r3, #24
 80036d0:	4680      	mov	r8, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	4616      	mov	r6, r2
 80036d6:	d50f      	bpl.n	80036f8 <_svfiprintf_r+0x34>
 80036d8:	690b      	ldr	r3, [r1, #16]
 80036da:	b96b      	cbnz	r3, 80036f8 <_svfiprintf_r+0x34>
 80036dc:	2140      	movs	r1, #64	; 0x40
 80036de:	f7ff ff3d 	bl	800355c <_malloc_r>
 80036e2:	6020      	str	r0, [r4, #0]
 80036e4:	6120      	str	r0, [r4, #16]
 80036e6:	b928      	cbnz	r0, 80036f4 <_svfiprintf_r+0x30>
 80036e8:	230c      	movs	r3, #12
 80036ea:	f8c8 3000 	str.w	r3, [r8]
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036f2:	e0c8      	b.n	8003886 <_svfiprintf_r+0x1c2>
 80036f4:	2340      	movs	r3, #64	; 0x40
 80036f6:	6163      	str	r3, [r4, #20]
 80036f8:	2300      	movs	r3, #0
 80036fa:	9309      	str	r3, [sp, #36]	; 0x24
 80036fc:	2320      	movs	r3, #32
 80036fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003702:	2330      	movs	r3, #48	; 0x30
 8003704:	f04f 0b01 	mov.w	fp, #1
 8003708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800370c:	9503      	str	r5, [sp, #12]
 800370e:	4637      	mov	r7, r6
 8003710:	463d      	mov	r5, r7
 8003712:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003716:	b10b      	cbz	r3, 800371c <_svfiprintf_r+0x58>
 8003718:	2b25      	cmp	r3, #37	; 0x25
 800371a:	d13e      	bne.n	800379a <_svfiprintf_r+0xd6>
 800371c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003720:	d00b      	beq.n	800373a <_svfiprintf_r+0x76>
 8003722:	4653      	mov	r3, sl
 8003724:	4632      	mov	r2, r6
 8003726:	4621      	mov	r1, r4
 8003728:	4640      	mov	r0, r8
 800372a:	f7ff ff71 	bl	8003610 <__ssputs_r>
 800372e:	3001      	adds	r0, #1
 8003730:	f000 80a4 	beq.w	800387c <_svfiprintf_r+0x1b8>
 8003734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003736:	4453      	add	r3, sl
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
 800373a:	783b      	ldrb	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 809d 	beq.w	800387c <_svfiprintf_r+0x1b8>
 8003742:	2300      	movs	r3, #0
 8003744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800374c:	9304      	str	r3, [sp, #16]
 800374e:	9307      	str	r3, [sp, #28]
 8003750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003754:	931a      	str	r3, [sp, #104]	; 0x68
 8003756:	462f      	mov	r7, r5
 8003758:	2205      	movs	r2, #5
 800375a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800375e:	4850      	ldr	r0, [pc, #320]	; (80038a0 <_svfiprintf_r+0x1dc>)
 8003760:	f000 fdca 	bl	80042f8 <memchr>
 8003764:	9b04      	ldr	r3, [sp, #16]
 8003766:	b9d0      	cbnz	r0, 800379e <_svfiprintf_r+0xda>
 8003768:	06d9      	lsls	r1, r3, #27
 800376a:	bf44      	itt	mi
 800376c:	2220      	movmi	r2, #32
 800376e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003772:	071a      	lsls	r2, r3, #28
 8003774:	bf44      	itt	mi
 8003776:	222b      	movmi	r2, #43	; 0x2b
 8003778:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800377c:	782a      	ldrb	r2, [r5, #0]
 800377e:	2a2a      	cmp	r2, #42	; 0x2a
 8003780:	d015      	beq.n	80037ae <_svfiprintf_r+0xea>
 8003782:	462f      	mov	r7, r5
 8003784:	2000      	movs	r0, #0
 8003786:	250a      	movs	r5, #10
 8003788:	9a07      	ldr	r2, [sp, #28]
 800378a:	4639      	mov	r1, r7
 800378c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003790:	3b30      	subs	r3, #48	; 0x30
 8003792:	2b09      	cmp	r3, #9
 8003794:	d94d      	bls.n	8003832 <_svfiprintf_r+0x16e>
 8003796:	b1b8      	cbz	r0, 80037c8 <_svfiprintf_r+0x104>
 8003798:	e00f      	b.n	80037ba <_svfiprintf_r+0xf6>
 800379a:	462f      	mov	r7, r5
 800379c:	e7b8      	b.n	8003710 <_svfiprintf_r+0x4c>
 800379e:	4a40      	ldr	r2, [pc, #256]	; (80038a0 <_svfiprintf_r+0x1dc>)
 80037a0:	463d      	mov	r5, r7
 80037a2:	1a80      	subs	r0, r0, r2
 80037a4:	fa0b f000 	lsl.w	r0, fp, r0
 80037a8:	4318      	orrs	r0, r3
 80037aa:	9004      	str	r0, [sp, #16]
 80037ac:	e7d3      	b.n	8003756 <_svfiprintf_r+0x92>
 80037ae:	9a03      	ldr	r2, [sp, #12]
 80037b0:	1d11      	adds	r1, r2, #4
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	9103      	str	r1, [sp, #12]
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	db01      	blt.n	80037be <_svfiprintf_r+0xfa>
 80037ba:	9207      	str	r2, [sp, #28]
 80037bc:	e004      	b.n	80037c8 <_svfiprintf_r+0x104>
 80037be:	4252      	negs	r2, r2
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	9207      	str	r2, [sp, #28]
 80037c6:	9304      	str	r3, [sp, #16]
 80037c8:	783b      	ldrb	r3, [r7, #0]
 80037ca:	2b2e      	cmp	r3, #46	; 0x2e
 80037cc:	d10c      	bne.n	80037e8 <_svfiprintf_r+0x124>
 80037ce:	787b      	ldrb	r3, [r7, #1]
 80037d0:	2b2a      	cmp	r3, #42	; 0x2a
 80037d2:	d133      	bne.n	800383c <_svfiprintf_r+0x178>
 80037d4:	9b03      	ldr	r3, [sp, #12]
 80037d6:	3702      	adds	r7, #2
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9203      	str	r2, [sp, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bfb8      	it	lt
 80037e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80037e6:	9305      	str	r3, [sp, #20]
 80037e8:	4d2e      	ldr	r5, [pc, #184]	; (80038a4 <_svfiprintf_r+0x1e0>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	7839      	ldrb	r1, [r7, #0]
 80037ee:	4628      	mov	r0, r5
 80037f0:	f000 fd82 	bl	80042f8 <memchr>
 80037f4:	b138      	cbz	r0, 8003806 <_svfiprintf_r+0x142>
 80037f6:	2340      	movs	r3, #64	; 0x40
 80037f8:	1b40      	subs	r0, r0, r5
 80037fa:	fa03 f000 	lsl.w	r0, r3, r0
 80037fe:	9b04      	ldr	r3, [sp, #16]
 8003800:	3701      	adds	r7, #1
 8003802:	4303      	orrs	r3, r0
 8003804:	9304      	str	r3, [sp, #16]
 8003806:	7839      	ldrb	r1, [r7, #0]
 8003808:	2206      	movs	r2, #6
 800380a:	4827      	ldr	r0, [pc, #156]	; (80038a8 <_svfiprintf_r+0x1e4>)
 800380c:	1c7e      	adds	r6, r7, #1
 800380e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003812:	f000 fd71 	bl	80042f8 <memchr>
 8003816:	2800      	cmp	r0, #0
 8003818:	d038      	beq.n	800388c <_svfiprintf_r+0x1c8>
 800381a:	4b24      	ldr	r3, [pc, #144]	; (80038ac <_svfiprintf_r+0x1e8>)
 800381c:	bb13      	cbnz	r3, 8003864 <_svfiprintf_r+0x1a0>
 800381e:	9b03      	ldr	r3, [sp, #12]
 8003820:	3307      	adds	r3, #7
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	3308      	adds	r3, #8
 8003828:	9303      	str	r3, [sp, #12]
 800382a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800382c:	444b      	add	r3, r9
 800382e:	9309      	str	r3, [sp, #36]	; 0x24
 8003830:	e76d      	b.n	800370e <_svfiprintf_r+0x4a>
 8003832:	fb05 3202 	mla	r2, r5, r2, r3
 8003836:	2001      	movs	r0, #1
 8003838:	460f      	mov	r7, r1
 800383a:	e7a6      	b.n	800378a <_svfiprintf_r+0xc6>
 800383c:	2300      	movs	r3, #0
 800383e:	250a      	movs	r5, #10
 8003840:	4619      	mov	r1, r3
 8003842:	3701      	adds	r7, #1
 8003844:	9305      	str	r3, [sp, #20]
 8003846:	4638      	mov	r0, r7
 8003848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800384c:	3a30      	subs	r2, #48	; 0x30
 800384e:	2a09      	cmp	r2, #9
 8003850:	d903      	bls.n	800385a <_svfiprintf_r+0x196>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c8      	beq.n	80037e8 <_svfiprintf_r+0x124>
 8003856:	9105      	str	r1, [sp, #20]
 8003858:	e7c6      	b.n	80037e8 <_svfiprintf_r+0x124>
 800385a:	fb05 2101 	mla	r1, r5, r1, r2
 800385e:	2301      	movs	r3, #1
 8003860:	4607      	mov	r7, r0
 8003862:	e7f0      	b.n	8003846 <_svfiprintf_r+0x182>
 8003864:	ab03      	add	r3, sp, #12
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	4622      	mov	r2, r4
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <_svfiprintf_r+0x1ec>)
 800386c:	a904      	add	r1, sp, #16
 800386e:	4640      	mov	r0, r8
 8003870:	f3af 8000 	nop.w
 8003874:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003878:	4681      	mov	r9, r0
 800387a:	d1d6      	bne.n	800382a <_svfiprintf_r+0x166>
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	065b      	lsls	r3, r3, #25
 8003880:	f53f af35 	bmi.w	80036ee <_svfiprintf_r+0x2a>
 8003884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003886:	b01d      	add	sp, #116	; 0x74
 8003888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388c:	ab03      	add	r3, sp, #12
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4622      	mov	r2, r4
 8003892:	4b07      	ldr	r3, [pc, #28]	; (80038b0 <_svfiprintf_r+0x1ec>)
 8003894:	a904      	add	r1, sp, #16
 8003896:	4640      	mov	r0, r8
 8003898:	f000 f9c0 	bl	8003c1c <_printf_i>
 800389c:	e7ea      	b.n	8003874 <_svfiprintf_r+0x1b0>
 800389e:	bf00      	nop
 80038a0:	080045c0 	.word	0x080045c0
 80038a4:	080045c6 	.word	0x080045c6
 80038a8:	080045ca 	.word	0x080045ca
 80038ac:	00000000 	.word	0x00000000
 80038b0:	08003611 	.word	0x08003611

080038b4 <__sfputc_r>:
 80038b4:	6893      	ldr	r3, [r2, #8]
 80038b6:	b410      	push	{r4}
 80038b8:	3b01      	subs	r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	6093      	str	r3, [r2, #8]
 80038be:	da07      	bge.n	80038d0 <__sfputc_r+0x1c>
 80038c0:	6994      	ldr	r4, [r2, #24]
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	db01      	blt.n	80038ca <__sfputc_r+0x16>
 80038c6:	290a      	cmp	r1, #10
 80038c8:	d102      	bne.n	80038d0 <__sfputc_r+0x1c>
 80038ca:	bc10      	pop	{r4}
 80038cc:	f000 bb0c 	b.w	8003ee8 <__swbuf_r>
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	1c58      	adds	r0, r3, #1
 80038d4:	6010      	str	r0, [r2, #0]
 80038d6:	7019      	strb	r1, [r3, #0]
 80038d8:	4608      	mov	r0, r1
 80038da:	bc10      	pop	{r4}
 80038dc:	4770      	bx	lr

080038de <__sfputs_r>:
 80038de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e0:	4606      	mov	r6, r0
 80038e2:	460f      	mov	r7, r1
 80038e4:	4614      	mov	r4, r2
 80038e6:	18d5      	adds	r5, r2, r3
 80038e8:	42ac      	cmp	r4, r5
 80038ea:	d101      	bne.n	80038f0 <__sfputs_r+0x12>
 80038ec:	2000      	movs	r0, #0
 80038ee:	e007      	b.n	8003900 <__sfputs_r+0x22>
 80038f0:	463a      	mov	r2, r7
 80038f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7ff ffdc 	bl	80038b4 <__sfputc_r>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d1f3      	bne.n	80038e8 <__sfputs_r+0xa>
 8003900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003904 <_vfiprintf_r>:
 8003904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003908:	460c      	mov	r4, r1
 800390a:	b09d      	sub	sp, #116	; 0x74
 800390c:	4617      	mov	r7, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4606      	mov	r6, r0
 8003912:	b118      	cbz	r0, 800391c <_vfiprintf_r+0x18>
 8003914:	6983      	ldr	r3, [r0, #24]
 8003916:	b90b      	cbnz	r3, 800391c <_vfiprintf_r+0x18>
 8003918:	f7ff fd96 	bl	8003448 <__sinit>
 800391c:	4b7c      	ldr	r3, [pc, #496]	; (8003b10 <_vfiprintf_r+0x20c>)
 800391e:	429c      	cmp	r4, r3
 8003920:	d158      	bne.n	80039d4 <_vfiprintf_r+0xd0>
 8003922:	6874      	ldr	r4, [r6, #4]
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	0718      	lsls	r0, r3, #28
 8003928:	d55e      	bpl.n	80039e8 <_vfiprintf_r+0xe4>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d05b      	beq.n	80039e8 <_vfiprintf_r+0xe4>
 8003930:	2300      	movs	r3, #0
 8003932:	9309      	str	r3, [sp, #36]	; 0x24
 8003934:	2320      	movs	r3, #32
 8003936:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800393a:	2330      	movs	r3, #48	; 0x30
 800393c:	f04f 0b01 	mov.w	fp, #1
 8003940:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003944:	9503      	str	r5, [sp, #12]
 8003946:	46b8      	mov	r8, r7
 8003948:	4645      	mov	r5, r8
 800394a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800394e:	b10b      	cbz	r3, 8003954 <_vfiprintf_r+0x50>
 8003950:	2b25      	cmp	r3, #37	; 0x25
 8003952:	d154      	bne.n	80039fe <_vfiprintf_r+0xfa>
 8003954:	ebb8 0a07 	subs.w	sl, r8, r7
 8003958:	d00b      	beq.n	8003972 <_vfiprintf_r+0x6e>
 800395a:	4653      	mov	r3, sl
 800395c:	463a      	mov	r2, r7
 800395e:	4621      	mov	r1, r4
 8003960:	4630      	mov	r0, r6
 8003962:	f7ff ffbc 	bl	80038de <__sfputs_r>
 8003966:	3001      	adds	r0, #1
 8003968:	f000 80c2 	beq.w	8003af0 <_vfiprintf_r+0x1ec>
 800396c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800396e:	4453      	add	r3, sl
 8003970:	9309      	str	r3, [sp, #36]	; 0x24
 8003972:	f898 3000 	ldrb.w	r3, [r8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80ba 	beq.w	8003af0 <_vfiprintf_r+0x1ec>
 800397c:	2300      	movs	r3, #0
 800397e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800398e:	931a      	str	r3, [sp, #104]	; 0x68
 8003990:	46a8      	mov	r8, r5
 8003992:	2205      	movs	r2, #5
 8003994:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003998:	485e      	ldr	r0, [pc, #376]	; (8003b14 <_vfiprintf_r+0x210>)
 800399a:	f000 fcad 	bl	80042f8 <memchr>
 800399e:	9b04      	ldr	r3, [sp, #16]
 80039a0:	bb78      	cbnz	r0, 8003a02 <_vfiprintf_r+0xfe>
 80039a2:	06d9      	lsls	r1, r3, #27
 80039a4:	bf44      	itt	mi
 80039a6:	2220      	movmi	r2, #32
 80039a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ac:	071a      	lsls	r2, r3, #28
 80039ae:	bf44      	itt	mi
 80039b0:	222b      	movmi	r2, #43	; 0x2b
 80039b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039b6:	782a      	ldrb	r2, [r5, #0]
 80039b8:	2a2a      	cmp	r2, #42	; 0x2a
 80039ba:	d02a      	beq.n	8003a12 <_vfiprintf_r+0x10e>
 80039bc:	46a8      	mov	r8, r5
 80039be:	2000      	movs	r0, #0
 80039c0:	250a      	movs	r5, #10
 80039c2:	9a07      	ldr	r2, [sp, #28]
 80039c4:	4641      	mov	r1, r8
 80039c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ca:	3b30      	subs	r3, #48	; 0x30
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d969      	bls.n	8003aa4 <_vfiprintf_r+0x1a0>
 80039d0:	b360      	cbz	r0, 8003a2c <_vfiprintf_r+0x128>
 80039d2:	e024      	b.n	8003a1e <_vfiprintf_r+0x11a>
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <_vfiprintf_r+0x214>)
 80039d6:	429c      	cmp	r4, r3
 80039d8:	d101      	bne.n	80039de <_vfiprintf_r+0xda>
 80039da:	68b4      	ldr	r4, [r6, #8]
 80039dc:	e7a2      	b.n	8003924 <_vfiprintf_r+0x20>
 80039de:	4b4f      	ldr	r3, [pc, #316]	; (8003b1c <_vfiprintf_r+0x218>)
 80039e0:	429c      	cmp	r4, r3
 80039e2:	bf08      	it	eq
 80039e4:	68f4      	ldreq	r4, [r6, #12]
 80039e6:	e79d      	b.n	8003924 <_vfiprintf_r+0x20>
 80039e8:	4621      	mov	r1, r4
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 fae0 	bl	8003fb0 <__swsetup_r>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d09d      	beq.n	8003930 <_vfiprintf_r+0x2c>
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f8:	b01d      	add	sp, #116	; 0x74
 80039fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039fe:	46a8      	mov	r8, r5
 8003a00:	e7a2      	b.n	8003948 <_vfiprintf_r+0x44>
 8003a02:	4a44      	ldr	r2, [pc, #272]	; (8003b14 <_vfiprintf_r+0x210>)
 8003a04:	4645      	mov	r5, r8
 8003a06:	1a80      	subs	r0, r0, r2
 8003a08:	fa0b f000 	lsl.w	r0, fp, r0
 8003a0c:	4318      	orrs	r0, r3
 8003a0e:	9004      	str	r0, [sp, #16]
 8003a10:	e7be      	b.n	8003990 <_vfiprintf_r+0x8c>
 8003a12:	9a03      	ldr	r2, [sp, #12]
 8003a14:	1d11      	adds	r1, r2, #4
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	2a00      	cmp	r2, #0
 8003a1c:	db01      	blt.n	8003a22 <_vfiprintf_r+0x11e>
 8003a1e:	9207      	str	r2, [sp, #28]
 8003a20:	e004      	b.n	8003a2c <_vfiprintf_r+0x128>
 8003a22:	4252      	negs	r2, r2
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	9207      	str	r2, [sp, #28]
 8003a2a:	9304      	str	r3, [sp, #16]
 8003a2c:	f898 3000 	ldrb.w	r3, [r8]
 8003a30:	2b2e      	cmp	r3, #46	; 0x2e
 8003a32:	d10e      	bne.n	8003a52 <_vfiprintf_r+0x14e>
 8003a34:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d138      	bne.n	8003aae <_vfiprintf_r+0x1aa>
 8003a3c:	9b03      	ldr	r3, [sp, #12]
 8003a3e:	f108 0802 	add.w	r8, r8, #2
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	9203      	str	r2, [sp, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bfb8      	it	lt
 8003a4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a50:	9305      	str	r3, [sp, #20]
 8003a52:	4d33      	ldr	r5, [pc, #204]	; (8003b20 <_vfiprintf_r+0x21c>)
 8003a54:	2203      	movs	r2, #3
 8003a56:	f898 1000 	ldrb.w	r1, [r8]
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 fc4c 	bl	80042f8 <memchr>
 8003a60:	b140      	cbz	r0, 8003a74 <_vfiprintf_r+0x170>
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	1b40      	subs	r0, r0, r5
 8003a66:	fa03 f000 	lsl.w	r0, r3, r0
 8003a6a:	9b04      	ldr	r3, [sp, #16]
 8003a6c:	f108 0801 	add.w	r8, r8, #1
 8003a70:	4303      	orrs	r3, r0
 8003a72:	9304      	str	r3, [sp, #16]
 8003a74:	f898 1000 	ldrb.w	r1, [r8]
 8003a78:	2206      	movs	r2, #6
 8003a7a:	482a      	ldr	r0, [pc, #168]	; (8003b24 <_vfiprintf_r+0x220>)
 8003a7c:	f108 0701 	add.w	r7, r8, #1
 8003a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a84:	f000 fc38 	bl	80042f8 <memchr>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d037      	beq.n	8003afc <_vfiprintf_r+0x1f8>
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <_vfiprintf_r+0x224>)
 8003a8e:	bb1b      	cbnz	r3, 8003ad8 <_vfiprintf_r+0x1d4>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	3307      	adds	r3, #7
 8003a94:	f023 0307 	bic.w	r3, r3, #7
 8003a98:	3308      	adds	r3, #8
 8003a9a:	9303      	str	r3, [sp, #12]
 8003a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a9e:	444b      	add	r3, r9
 8003aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa2:	e750      	b.n	8003946 <_vfiprintf_r+0x42>
 8003aa4:	fb05 3202 	mla	r2, r5, r2, r3
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	4688      	mov	r8, r1
 8003aac:	e78a      	b.n	80039c4 <_vfiprintf_r+0xc0>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	250a      	movs	r5, #10
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f108 0801 	add.w	r8, r8, #1
 8003ab8:	9305      	str	r3, [sp, #20]
 8003aba:	4640      	mov	r0, r8
 8003abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac0:	3a30      	subs	r2, #48	; 0x30
 8003ac2:	2a09      	cmp	r2, #9
 8003ac4:	d903      	bls.n	8003ace <_vfiprintf_r+0x1ca>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0c3      	beq.n	8003a52 <_vfiprintf_r+0x14e>
 8003aca:	9105      	str	r1, [sp, #20]
 8003acc:	e7c1      	b.n	8003a52 <_vfiprintf_r+0x14e>
 8003ace:	fb05 2101 	mla	r1, r5, r1, r2
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	4680      	mov	r8, r0
 8003ad6:	e7f0      	b.n	8003aba <_vfiprintf_r+0x1b6>
 8003ad8:	ab03      	add	r3, sp, #12
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4622      	mov	r2, r4
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <_vfiprintf_r+0x228>)
 8003ae0:	a904      	add	r1, sp, #16
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003aec:	4681      	mov	r9, r0
 8003aee:	d1d5      	bne.n	8003a9c <_vfiprintf_r+0x198>
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	065b      	lsls	r3, r3, #25
 8003af4:	f53f af7e 	bmi.w	80039f4 <_vfiprintf_r+0xf0>
 8003af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afa:	e77d      	b.n	80039f8 <_vfiprintf_r+0xf4>
 8003afc:	ab03      	add	r3, sp, #12
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4622      	mov	r2, r4
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <_vfiprintf_r+0x228>)
 8003b04:	a904      	add	r1, sp, #16
 8003b06:	4630      	mov	r0, r6
 8003b08:	f000 f888 	bl	8003c1c <_printf_i>
 8003b0c:	e7ec      	b.n	8003ae8 <_vfiprintf_r+0x1e4>
 8003b0e:	bf00      	nop
 8003b10:	08004580 	.word	0x08004580
 8003b14:	080045c0 	.word	0x080045c0
 8003b18:	080045a0 	.word	0x080045a0
 8003b1c:	08004560 	.word	0x08004560
 8003b20:	080045c6 	.word	0x080045c6
 8003b24:	080045ca 	.word	0x080045ca
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	080038df 	.word	0x080038df

08003b30 <_printf_common>:
 8003b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	4691      	mov	r9, r2
 8003b36:	461f      	mov	r7, r3
 8003b38:	688a      	ldr	r2, [r1, #8]
 8003b3a:	690b      	ldr	r3, [r1, #16]
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	bfb8      	it	lt
 8003b42:	4613      	movlt	r3, r2
 8003b44:	f8c9 3000 	str.w	r3, [r9]
 8003b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b4c:	460c      	mov	r4, r1
 8003b4e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b52:	b112      	cbz	r2, 8003b5a <_printf_common+0x2a>
 8003b54:	3301      	adds	r3, #1
 8003b56:	f8c9 3000 	str.w	r3, [r9]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b64:	3302      	addmi	r3, #2
 8003b66:	f8c9 3000 	strmi.w	r3, [r9]
 8003b6a:	6825      	ldr	r5, [r4, #0]
 8003b6c:	f015 0506 	ands.w	r5, r5, #6
 8003b70:	d107      	bne.n	8003b82 <_printf_common+0x52>
 8003b72:	f104 0a19 	add.w	sl, r4, #25
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	f8d9 2000 	ldr.w	r2, [r9]
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dc29      	bgt.n	8003bd6 <_printf_common+0xa6>
 8003b82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	3300      	adds	r3, #0
 8003b8a:	bf18      	it	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	0692      	lsls	r2, r2, #26
 8003b90:	d42e      	bmi.n	8003bf0 <_printf_common+0xc0>
 8003b92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b96:	4639      	mov	r1, r7
 8003b98:	4630      	mov	r0, r6
 8003b9a:	47c0      	blx	r8
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d021      	beq.n	8003be4 <_printf_common+0xb4>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	68e5      	ldr	r5, [r4, #12]
 8003ba4:	f003 0306 	and.w	r3, r3, #6
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	bf18      	it	ne
 8003bac:	2500      	movne	r5, #0
 8003bae:	f8d9 2000 	ldr.w	r2, [r9]
 8003bb2:	f04f 0900 	mov.w	r9, #0
 8003bb6:	bf08      	it	eq
 8003bb8:	1aad      	subeq	r5, r5, r2
 8003bba:	68a3      	ldr	r3, [r4, #8]
 8003bbc:	6922      	ldr	r2, [r4, #16]
 8003bbe:	bf08      	it	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bfc4      	itt	gt
 8003bc8:	1a9b      	subgt	r3, r3, r2
 8003bca:	18ed      	addgt	r5, r5, r3
 8003bcc:	341a      	adds	r4, #26
 8003bce:	454d      	cmp	r5, r9
 8003bd0:	d11a      	bne.n	8003c08 <_printf_common+0xd8>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	e008      	b.n	8003be8 <_printf_common+0xb8>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4652      	mov	r2, sl
 8003bda:	4639      	mov	r1, r7
 8003bdc:	4630      	mov	r0, r6
 8003bde:	47c0      	blx	r8
 8003be0:	3001      	adds	r0, #1
 8003be2:	d103      	bne.n	8003bec <_printf_common+0xbc>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bec:	3501      	adds	r5, #1
 8003bee:	e7c2      	b.n	8003b76 <_printf_common+0x46>
 8003bf0:	2030      	movs	r0, #48	; 0x30
 8003bf2:	18e1      	adds	r1, r4, r3
 8003bf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bfe:	4422      	add	r2, r4
 8003c00:	3302      	adds	r3, #2
 8003c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c06:	e7c4      	b.n	8003b92 <_printf_common+0x62>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	4630      	mov	r0, r6
 8003c10:	47c0      	blx	r8
 8003c12:	3001      	adds	r0, #1
 8003c14:	d0e6      	beq.n	8003be4 <_printf_common+0xb4>
 8003c16:	f109 0901 	add.w	r9, r9, #1
 8003c1a:	e7d8      	b.n	8003bce <_printf_common+0x9e>

08003c1c <_printf_i>:
 8003c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003c24:	460c      	mov	r4, r1
 8003c26:	7e09      	ldrb	r1, [r1, #24]
 8003c28:	b085      	sub	sp, #20
 8003c2a:	296e      	cmp	r1, #110	; 0x6e
 8003c2c:	4617      	mov	r7, r2
 8003c2e:	4606      	mov	r6, r0
 8003c30:	4698      	mov	r8, r3
 8003c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c34:	f000 80b3 	beq.w	8003d9e <_printf_i+0x182>
 8003c38:	d822      	bhi.n	8003c80 <_printf_i+0x64>
 8003c3a:	2963      	cmp	r1, #99	; 0x63
 8003c3c:	d036      	beq.n	8003cac <_printf_i+0x90>
 8003c3e:	d80a      	bhi.n	8003c56 <_printf_i+0x3a>
 8003c40:	2900      	cmp	r1, #0
 8003c42:	f000 80b9 	beq.w	8003db8 <_printf_i+0x19c>
 8003c46:	2958      	cmp	r1, #88	; 0x58
 8003c48:	f000 8083 	beq.w	8003d52 <_printf_i+0x136>
 8003c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c54:	e032      	b.n	8003cbc <_printf_i+0xa0>
 8003c56:	2964      	cmp	r1, #100	; 0x64
 8003c58:	d001      	beq.n	8003c5e <_printf_i+0x42>
 8003c5a:	2969      	cmp	r1, #105	; 0x69
 8003c5c:	d1f6      	bne.n	8003c4c <_printf_i+0x30>
 8003c5e:	6820      	ldr	r0, [r4, #0]
 8003c60:	6813      	ldr	r3, [r2, #0]
 8003c62:	0605      	lsls	r5, r0, #24
 8003c64:	f103 0104 	add.w	r1, r3, #4
 8003c68:	d52a      	bpl.n	8003cc0 <_printf_i+0xa4>
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6011      	str	r1, [r2, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	da03      	bge.n	8003c7a <_printf_i+0x5e>
 8003c72:	222d      	movs	r2, #45	; 0x2d
 8003c74:	425b      	negs	r3, r3
 8003c76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c7a:	486f      	ldr	r0, [pc, #444]	; (8003e38 <_printf_i+0x21c>)
 8003c7c:	220a      	movs	r2, #10
 8003c7e:	e039      	b.n	8003cf4 <_printf_i+0xd8>
 8003c80:	2973      	cmp	r1, #115	; 0x73
 8003c82:	f000 809d 	beq.w	8003dc0 <_printf_i+0x1a4>
 8003c86:	d808      	bhi.n	8003c9a <_printf_i+0x7e>
 8003c88:	296f      	cmp	r1, #111	; 0x6f
 8003c8a:	d020      	beq.n	8003cce <_printf_i+0xb2>
 8003c8c:	2970      	cmp	r1, #112	; 0x70
 8003c8e:	d1dd      	bne.n	8003c4c <_printf_i+0x30>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	f043 0320 	orr.w	r3, r3, #32
 8003c96:	6023      	str	r3, [r4, #0]
 8003c98:	e003      	b.n	8003ca2 <_printf_i+0x86>
 8003c9a:	2975      	cmp	r1, #117	; 0x75
 8003c9c:	d017      	beq.n	8003cce <_printf_i+0xb2>
 8003c9e:	2978      	cmp	r1, #120	; 0x78
 8003ca0:	d1d4      	bne.n	8003c4c <_printf_i+0x30>
 8003ca2:	2378      	movs	r3, #120	; 0x78
 8003ca4:	4865      	ldr	r0, [pc, #404]	; (8003e3c <_printf_i+0x220>)
 8003ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003caa:	e055      	b.n	8003d58 <_printf_i+0x13c>
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb2:	1d19      	adds	r1, r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6011      	str	r1, [r2, #0]
 8003cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e08c      	b.n	8003dda <_printf_i+0x1be>
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cc6:	6011      	str	r1, [r2, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	b21b      	sxthne	r3, r3
 8003ccc:	e7cf      	b.n	8003c6e <_printf_i+0x52>
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	6825      	ldr	r5, [r4, #0]
 8003cd2:	1d18      	adds	r0, r3, #4
 8003cd4:	6010      	str	r0, [r2, #0]
 8003cd6:	0628      	lsls	r0, r5, #24
 8003cd8:	d501      	bpl.n	8003cde <_printf_i+0xc2>
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e002      	b.n	8003ce4 <_printf_i+0xc8>
 8003cde:	0668      	lsls	r0, r5, #25
 8003ce0:	d5fb      	bpl.n	8003cda <_printf_i+0xbe>
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	296f      	cmp	r1, #111	; 0x6f
 8003ce6:	bf14      	ite	ne
 8003ce8:	220a      	movne	r2, #10
 8003cea:	2208      	moveq	r2, #8
 8003cec:	4852      	ldr	r0, [pc, #328]	; (8003e38 <_printf_i+0x21c>)
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cf4:	6865      	ldr	r5, [r4, #4]
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	60a5      	str	r5, [r4, #8]
 8003cfa:	f2c0 8095 	blt.w	8003e28 <_printf_i+0x20c>
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	f021 0104 	bic.w	r1, r1, #4
 8003d04:	6021      	str	r1, [r4, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13d      	bne.n	8003d86 <_printf_i+0x16a>
 8003d0a:	2d00      	cmp	r5, #0
 8003d0c:	f040 808e 	bne.w	8003e2c <_printf_i+0x210>
 8003d10:	4665      	mov	r5, ip
 8003d12:	2a08      	cmp	r2, #8
 8003d14:	d10b      	bne.n	8003d2e <_printf_i+0x112>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	07db      	lsls	r3, r3, #31
 8003d1a:	d508      	bpl.n	8003d2e <_printf_i+0x112>
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bfde      	ittt	le
 8003d24:	2330      	movle	r3, #48	; 0x30
 8003d26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d2a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d2e:	ebac 0305 	sub.w	r3, ip, r5
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	f8cd 8000 	str.w	r8, [sp]
 8003d38:	463b      	mov	r3, r7
 8003d3a:	aa03      	add	r2, sp, #12
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff fef6 	bl	8003b30 <_printf_common>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d14d      	bne.n	8003de4 <_printf_i+0x1c8>
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d4c:	b005      	add	sp, #20
 8003d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d52:	4839      	ldr	r0, [pc, #228]	; (8003e38 <_printf_i+0x21c>)
 8003d54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d58:	6813      	ldr	r3, [r2, #0]
 8003d5a:	6821      	ldr	r1, [r4, #0]
 8003d5c:	1d1d      	adds	r5, r3, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6015      	str	r5, [r2, #0]
 8003d62:	060a      	lsls	r2, r1, #24
 8003d64:	d50b      	bpl.n	8003d7e <_printf_i+0x162>
 8003d66:	07ca      	lsls	r2, r1, #31
 8003d68:	bf44      	itt	mi
 8003d6a:	f041 0120 	orrmi.w	r1, r1, #32
 8003d6e:	6021      	strmi	r1, [r4, #0]
 8003d70:	b91b      	cbnz	r3, 8003d7a <_printf_i+0x15e>
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	f022 0220 	bic.w	r2, r2, #32
 8003d78:	6022      	str	r2, [r4, #0]
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	e7b7      	b.n	8003cee <_printf_i+0xd2>
 8003d7e:	064d      	lsls	r5, r1, #25
 8003d80:	bf48      	it	mi
 8003d82:	b29b      	uxthmi	r3, r3
 8003d84:	e7ef      	b.n	8003d66 <_printf_i+0x14a>
 8003d86:	4665      	mov	r5, ip
 8003d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d8c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d90:	5cc3      	ldrb	r3, [r0, r3]
 8003d92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d96:	460b      	mov	r3, r1
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d1f5      	bne.n	8003d88 <_printf_i+0x16c>
 8003d9c:	e7b9      	b.n	8003d12 <_printf_i+0xf6>
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	6825      	ldr	r5, [r4, #0]
 8003da2:	1d18      	adds	r0, r3, #4
 8003da4:	6961      	ldr	r1, [r4, #20]
 8003da6:	6010      	str	r0, [r2, #0]
 8003da8:	0628      	lsls	r0, r5, #24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	d501      	bpl.n	8003db2 <_printf_i+0x196>
 8003dae:	6019      	str	r1, [r3, #0]
 8003db0:	e002      	b.n	8003db8 <_printf_i+0x19c>
 8003db2:	066a      	lsls	r2, r5, #25
 8003db4:	d5fb      	bpl.n	8003dae <_printf_i+0x192>
 8003db6:	8019      	strh	r1, [r3, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	4665      	mov	r5, ip
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	e7b9      	b.n	8003d34 <_printf_i+0x118>
 8003dc0:	6813      	ldr	r3, [r2, #0]
 8003dc2:	1d19      	adds	r1, r3, #4
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	681d      	ldr	r5, [r3, #0]
 8003dc8:	6862      	ldr	r2, [r4, #4]
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f000 fa93 	bl	80042f8 <memchr>
 8003dd2:	b108      	cbz	r0, 8003dd8 <_printf_i+0x1bc>
 8003dd4:	1b40      	subs	r0, r0, r5
 8003dd6:	6060      	str	r0, [r4, #4]
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	6123      	str	r3, [r4, #16]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003de2:	e7a7      	b.n	8003d34 <_printf_i+0x118>
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	462a      	mov	r2, r5
 8003de8:	4639      	mov	r1, r7
 8003dea:	4630      	mov	r0, r6
 8003dec:	47c0      	blx	r8
 8003dee:	3001      	adds	r0, #1
 8003df0:	d0aa      	beq.n	8003d48 <_printf_i+0x12c>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	079b      	lsls	r3, r3, #30
 8003df6:	d413      	bmi.n	8003e20 <_printf_i+0x204>
 8003df8:	68e0      	ldr	r0, [r4, #12]
 8003dfa:	9b03      	ldr	r3, [sp, #12]
 8003dfc:	4298      	cmp	r0, r3
 8003dfe:	bfb8      	it	lt
 8003e00:	4618      	movlt	r0, r3
 8003e02:	e7a3      	b.n	8003d4c <_printf_i+0x130>
 8003e04:	2301      	movs	r3, #1
 8003e06:	464a      	mov	r2, r9
 8003e08:	4639      	mov	r1, r7
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	47c0      	blx	r8
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d09a      	beq.n	8003d48 <_printf_i+0x12c>
 8003e12:	3501      	adds	r5, #1
 8003e14:	68e3      	ldr	r3, [r4, #12]
 8003e16:	9a03      	ldr	r2, [sp, #12]
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	42ab      	cmp	r3, r5
 8003e1c:	dcf2      	bgt.n	8003e04 <_printf_i+0x1e8>
 8003e1e:	e7eb      	b.n	8003df8 <_printf_i+0x1dc>
 8003e20:	2500      	movs	r5, #0
 8003e22:	f104 0919 	add.w	r9, r4, #25
 8003e26:	e7f5      	b.n	8003e14 <_printf_i+0x1f8>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ac      	bne.n	8003d86 <_printf_i+0x16a>
 8003e2c:	7803      	ldrb	r3, [r0, #0]
 8003e2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e36:	e76c      	b.n	8003d12 <_printf_i+0xf6>
 8003e38:	080045d1 	.word	0x080045d1
 8003e3c:	080045e2 	.word	0x080045e2

08003e40 <_sbrk_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	2300      	movs	r3, #0
 8003e44:	4c05      	ldr	r4, [pc, #20]	; (8003e5c <_sbrk_r+0x1c>)
 8003e46:	4605      	mov	r5, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f7fd f86e 	bl	8000f2c <_sbrk>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_sbrk_r+0x1a>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_sbrk_r+0x1a>
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	200002dc 	.word	0x200002dc

08003e60 <__sread>:
 8003e60:	b510      	push	{r4, lr}
 8003e62:	460c      	mov	r4, r1
 8003e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e68:	f000 faec 	bl	8004444 <_read_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	bfab      	itete	ge
 8003e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e72:	89a3      	ldrhlt	r3, [r4, #12]
 8003e74:	181b      	addge	r3, r3, r0
 8003e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e7a:	bfac      	ite	ge
 8003e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e7e:	81a3      	strhlt	r3, [r4, #12]
 8003e80:	bd10      	pop	{r4, pc}

08003e82 <__swrite>:
 8003e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e86:	461f      	mov	r7, r3
 8003e88:	898b      	ldrh	r3, [r1, #12]
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	05db      	lsls	r3, r3, #23
 8003e8e:	460c      	mov	r4, r1
 8003e90:	4616      	mov	r6, r2
 8003e92:	d505      	bpl.n	8003ea0 <__swrite+0x1e>
 8003e94:	2302      	movs	r3, #2
 8003e96:	2200      	movs	r2, #0
 8003e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9c:	f000 f9b6 	bl	800420c <_lseek_r>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea8:	81a3      	strh	r3, [r4, #12]
 8003eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eae:	463b      	mov	r3, r7
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb6:	f000 b869 	b.w	8003f8c <_write_r>

08003eba <__sseek>:
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec2:	f000 f9a3 	bl	800420c <_lseek_r>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	bf15      	itete	ne
 8003ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ed6:	81a3      	strheq	r3, [r4, #12]
 8003ed8:	bf18      	it	ne
 8003eda:	81a3      	strhne	r3, [r4, #12]
 8003edc:	bd10      	pop	{r4, pc}

08003ede <__sclose>:
 8003ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee2:	f000 b8d3 	b.w	800408c <_close_r>
	...

08003ee8 <__swbuf_r>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	460e      	mov	r6, r1
 8003eec:	4614      	mov	r4, r2
 8003eee:	4605      	mov	r5, r0
 8003ef0:	b118      	cbz	r0, 8003efa <__swbuf_r+0x12>
 8003ef2:	6983      	ldr	r3, [r0, #24]
 8003ef4:	b90b      	cbnz	r3, 8003efa <__swbuf_r+0x12>
 8003ef6:	f7ff faa7 	bl	8003448 <__sinit>
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <__swbuf_r+0x98>)
 8003efc:	429c      	cmp	r4, r3
 8003efe:	d12a      	bne.n	8003f56 <__swbuf_r+0x6e>
 8003f00:	686c      	ldr	r4, [r5, #4]
 8003f02:	69a3      	ldr	r3, [r4, #24]
 8003f04:	60a3      	str	r3, [r4, #8]
 8003f06:	89a3      	ldrh	r3, [r4, #12]
 8003f08:	071a      	lsls	r2, r3, #28
 8003f0a:	d52e      	bpl.n	8003f6a <__swbuf_r+0x82>
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	b363      	cbz	r3, 8003f6a <__swbuf_r+0x82>
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	6820      	ldr	r0, [r4, #0]
 8003f14:	b2f6      	uxtb	r6, r6
 8003f16:	1ac0      	subs	r0, r0, r3
 8003f18:	6963      	ldr	r3, [r4, #20]
 8003f1a:	4637      	mov	r7, r6
 8003f1c:	4283      	cmp	r3, r0
 8003f1e:	dc04      	bgt.n	8003f2a <__swbuf_r+0x42>
 8003f20:	4621      	mov	r1, r4
 8003f22:	4628      	mov	r0, r5
 8003f24:	f000 f948 	bl	80041b8 <_fflush_r>
 8003f28:	bb28      	cbnz	r0, 8003f76 <__swbuf_r+0x8e>
 8003f2a:	68a3      	ldr	r3, [r4, #8]
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	60a3      	str	r3, [r4, #8]
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	701e      	strb	r6, [r3, #0]
 8003f3a:	6963      	ldr	r3, [r4, #20]
 8003f3c:	4283      	cmp	r3, r0
 8003f3e:	d004      	beq.n	8003f4a <__swbuf_r+0x62>
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	07db      	lsls	r3, r3, #31
 8003f44:	d519      	bpl.n	8003f7a <__swbuf_r+0x92>
 8003f46:	2e0a      	cmp	r6, #10
 8003f48:	d117      	bne.n	8003f7a <__swbuf_r+0x92>
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 f933 	bl	80041b8 <_fflush_r>
 8003f52:	b190      	cbz	r0, 8003f7a <__swbuf_r+0x92>
 8003f54:	e00f      	b.n	8003f76 <__swbuf_r+0x8e>
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <__swbuf_r+0x9c>)
 8003f58:	429c      	cmp	r4, r3
 8003f5a:	d101      	bne.n	8003f60 <__swbuf_r+0x78>
 8003f5c:	68ac      	ldr	r4, [r5, #8]
 8003f5e:	e7d0      	b.n	8003f02 <__swbuf_r+0x1a>
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <__swbuf_r+0xa0>)
 8003f62:	429c      	cmp	r4, r3
 8003f64:	bf08      	it	eq
 8003f66:	68ec      	ldreq	r4, [r5, #12]
 8003f68:	e7cb      	b.n	8003f02 <__swbuf_r+0x1a>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f81f 	bl	8003fb0 <__swsetup_r>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d0cc      	beq.n	8003f10 <__swbuf_r+0x28>
 8003f76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	08004580 	.word	0x08004580
 8003f84:	080045a0 	.word	0x080045a0
 8003f88:	08004560 	.word	0x08004560

08003f8c <_write_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4605      	mov	r5, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	2200      	movs	r2, #0
 8003f96:	4c05      	ldr	r4, [pc, #20]	; (8003fac <_write_r+0x20>)
 8003f98:	6022      	str	r2, [r4, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fc f94a 	bl	8000234 <_write>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_write_r+0x1e>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_write_r+0x1e>
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	200002dc 	.word	0x200002dc

08003fb0 <__swsetup_r>:
 8003fb0:	4b32      	ldr	r3, [pc, #200]	; (800407c <__swsetup_r+0xcc>)
 8003fb2:	b570      	push	{r4, r5, r6, lr}
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	460c      	mov	r4, r1
 8003fba:	b125      	cbz	r5, 8003fc6 <__swsetup_r+0x16>
 8003fbc:	69ab      	ldr	r3, [r5, #24]
 8003fbe:	b913      	cbnz	r3, 8003fc6 <__swsetup_r+0x16>
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7ff fa41 	bl	8003448 <__sinit>
 8003fc6:	4b2e      	ldr	r3, [pc, #184]	; (8004080 <__swsetup_r+0xd0>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d10f      	bne.n	8003fec <__swsetup_r+0x3c>
 8003fcc:	686c      	ldr	r4, [r5, #4]
 8003fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	0715      	lsls	r5, r2, #28
 8003fd6:	d42c      	bmi.n	8004032 <__swsetup_r+0x82>
 8003fd8:	06d0      	lsls	r0, r2, #27
 8003fda:	d411      	bmi.n	8004000 <__swsetup_r+0x50>
 8003fdc:	2209      	movs	r2, #9
 8003fde:	6032      	str	r2, [r6, #0]
 8003fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe4:	81a3      	strh	r3, [r4, #12]
 8003fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fea:	e03e      	b.n	800406a <__swsetup_r+0xba>
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <__swsetup_r+0xd4>)
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d101      	bne.n	8003ff6 <__swsetup_r+0x46>
 8003ff2:	68ac      	ldr	r4, [r5, #8]
 8003ff4:	e7eb      	b.n	8003fce <__swsetup_r+0x1e>
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <__swsetup_r+0xd8>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	bf08      	it	eq
 8003ffc:	68ec      	ldreq	r4, [r5, #12]
 8003ffe:	e7e6      	b.n	8003fce <__swsetup_r+0x1e>
 8004000:	0751      	lsls	r1, r2, #29
 8004002:	d512      	bpl.n	800402a <__swsetup_r+0x7a>
 8004004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004006:	b141      	cbz	r1, 800401a <__swsetup_r+0x6a>
 8004008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400c:	4299      	cmp	r1, r3
 800400e:	d002      	beq.n	8004016 <__swsetup_r+0x66>
 8004010:	4630      	mov	r0, r6
 8004012:	f000 f9a5 	bl	8004360 <_free_r>
 8004016:	2300      	movs	r3, #0
 8004018:	6363      	str	r3, [r4, #52]	; 0x34
 800401a:	89a3      	ldrh	r3, [r4, #12]
 800401c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004020:	81a3      	strh	r3, [r4, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	89a3      	ldrh	r3, [r4, #12]
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	b94b      	cbnz	r3, 800404a <__swsetup_r+0x9a>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800403c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004040:	d003      	beq.n	800404a <__swsetup_r+0x9a>
 8004042:	4621      	mov	r1, r4
 8004044:	4630      	mov	r0, r6
 8004046:	f000 f917 	bl	8004278 <__smakebuf_r>
 800404a:	89a2      	ldrh	r2, [r4, #12]
 800404c:	f012 0301 	ands.w	r3, r2, #1
 8004050:	d00c      	beq.n	800406c <__swsetup_r+0xbc>
 8004052:	2300      	movs	r3, #0
 8004054:	60a3      	str	r3, [r4, #8]
 8004056:	6963      	ldr	r3, [r4, #20]
 8004058:	425b      	negs	r3, r3
 800405a:	61a3      	str	r3, [r4, #24]
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	b953      	cbnz	r3, 8004076 <__swsetup_r+0xc6>
 8004060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004064:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004068:	d1ba      	bne.n	8003fe0 <__swsetup_r+0x30>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	0792      	lsls	r2, r2, #30
 800406e:	bf58      	it	pl
 8004070:	6963      	ldrpl	r3, [r4, #20]
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	e7f2      	b.n	800405c <__swsetup_r+0xac>
 8004076:	2000      	movs	r0, #0
 8004078:	e7f7      	b.n	800406a <__swsetup_r+0xba>
 800407a:	bf00      	nop
 800407c:	2000000c 	.word	0x2000000c
 8004080:	08004580 	.word	0x08004580
 8004084:	080045a0 	.word	0x080045a0
 8004088:	08004560 	.word	0x08004560

0800408c <_close_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	2300      	movs	r3, #0
 8004090:	4c05      	ldr	r4, [pc, #20]	; (80040a8 <_close_r+0x1c>)
 8004092:	4605      	mov	r5, r0
 8004094:	4608      	mov	r0, r1
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	f7fc ff17 	bl	8000eca <_close>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_close_r+0x1a>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_close_r+0x1a>
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	200002dc 	.word	0x200002dc

080040ac <__sflush_r>:
 80040ac:	898a      	ldrh	r2, [r1, #12]
 80040ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b2:	4605      	mov	r5, r0
 80040b4:	0710      	lsls	r0, r2, #28
 80040b6:	460c      	mov	r4, r1
 80040b8:	d458      	bmi.n	800416c <__sflush_r+0xc0>
 80040ba:	684b      	ldr	r3, [r1, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dc05      	bgt.n	80040cc <__sflush_r+0x20>
 80040c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dc02      	bgt.n	80040cc <__sflush_r+0x20>
 80040c6:	2000      	movs	r0, #0
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040ce:	2e00      	cmp	r6, #0
 80040d0:	d0f9      	beq.n	80040c6 <__sflush_r+0x1a>
 80040d2:	2300      	movs	r3, #0
 80040d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040d8:	682f      	ldr	r7, [r5, #0]
 80040da:	6a21      	ldr	r1, [r4, #32]
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	d032      	beq.n	8004146 <__sflush_r+0x9a>
 80040e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	075a      	lsls	r2, r3, #29
 80040e6:	d505      	bpl.n	80040f4 <__sflush_r+0x48>
 80040e8:	6863      	ldr	r3, [r4, #4]
 80040ea:	1ac0      	subs	r0, r0, r3
 80040ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040ee:	b10b      	cbz	r3, 80040f4 <__sflush_r+0x48>
 80040f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040f2:	1ac0      	subs	r0, r0, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	4602      	mov	r2, r0
 80040f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040fa:	6a21      	ldr	r1, [r4, #32]
 80040fc:	4628      	mov	r0, r5
 80040fe:	47b0      	blx	r6
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	d106      	bne.n	8004114 <__sflush_r+0x68>
 8004106:	6829      	ldr	r1, [r5, #0]
 8004108:	291d      	cmp	r1, #29
 800410a:	d848      	bhi.n	800419e <__sflush_r+0xf2>
 800410c:	4a29      	ldr	r2, [pc, #164]	; (80041b4 <__sflush_r+0x108>)
 800410e:	40ca      	lsrs	r2, r1
 8004110:	07d6      	lsls	r6, r2, #31
 8004112:	d544      	bpl.n	800419e <__sflush_r+0xf2>
 8004114:	2200      	movs	r2, #0
 8004116:	6062      	str	r2, [r4, #4]
 8004118:	6922      	ldr	r2, [r4, #16]
 800411a:	04d9      	lsls	r1, r3, #19
 800411c:	6022      	str	r2, [r4, #0]
 800411e:	d504      	bpl.n	800412a <__sflush_r+0x7e>
 8004120:	1c42      	adds	r2, r0, #1
 8004122:	d101      	bne.n	8004128 <__sflush_r+0x7c>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	b903      	cbnz	r3, 800412a <__sflush_r+0x7e>
 8004128:	6560      	str	r0, [r4, #84]	; 0x54
 800412a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800412c:	602f      	str	r7, [r5, #0]
 800412e:	2900      	cmp	r1, #0
 8004130:	d0c9      	beq.n	80040c6 <__sflush_r+0x1a>
 8004132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004136:	4299      	cmp	r1, r3
 8004138:	d002      	beq.n	8004140 <__sflush_r+0x94>
 800413a:	4628      	mov	r0, r5
 800413c:	f000 f910 	bl	8004360 <_free_r>
 8004140:	2000      	movs	r0, #0
 8004142:	6360      	str	r0, [r4, #52]	; 0x34
 8004144:	e7c0      	b.n	80040c8 <__sflush_r+0x1c>
 8004146:	2301      	movs	r3, #1
 8004148:	4628      	mov	r0, r5
 800414a:	47b0      	blx	r6
 800414c:	1c41      	adds	r1, r0, #1
 800414e:	d1c8      	bne.n	80040e2 <__sflush_r+0x36>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0c5      	beq.n	80040e2 <__sflush_r+0x36>
 8004156:	2b1d      	cmp	r3, #29
 8004158:	d001      	beq.n	800415e <__sflush_r+0xb2>
 800415a:	2b16      	cmp	r3, #22
 800415c:	d101      	bne.n	8004162 <__sflush_r+0xb6>
 800415e:	602f      	str	r7, [r5, #0]
 8004160:	e7b1      	b.n	80040c6 <__sflush_r+0x1a>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	81a3      	strh	r3, [r4, #12]
 800416a:	e7ad      	b.n	80040c8 <__sflush_r+0x1c>
 800416c:	690f      	ldr	r7, [r1, #16]
 800416e:	2f00      	cmp	r7, #0
 8004170:	d0a9      	beq.n	80040c6 <__sflush_r+0x1a>
 8004172:	0793      	lsls	r3, r2, #30
 8004174:	bf18      	it	ne
 8004176:	2300      	movne	r3, #0
 8004178:	680e      	ldr	r6, [r1, #0]
 800417a:	bf08      	it	eq
 800417c:	694b      	ldreq	r3, [r1, #20]
 800417e:	eba6 0807 	sub.w	r8, r6, r7
 8004182:	600f      	str	r7, [r1, #0]
 8004184:	608b      	str	r3, [r1, #8]
 8004186:	f1b8 0f00 	cmp.w	r8, #0
 800418a:	dd9c      	ble.n	80040c6 <__sflush_r+0x1a>
 800418c:	4643      	mov	r3, r8
 800418e:	463a      	mov	r2, r7
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	4628      	mov	r0, r5
 8004194:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004196:	47b0      	blx	r6
 8004198:	2800      	cmp	r0, #0
 800419a:	dc06      	bgt.n	80041aa <__sflush_r+0xfe>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a8:	e78e      	b.n	80040c8 <__sflush_r+0x1c>
 80041aa:	4407      	add	r7, r0
 80041ac:	eba8 0800 	sub.w	r8, r8, r0
 80041b0:	e7e9      	b.n	8004186 <__sflush_r+0xda>
 80041b2:	bf00      	nop
 80041b4:	20400001 	.word	0x20400001

080041b8 <_fflush_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	4605      	mov	r5, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	b1db      	cbz	r3, 80041fa <_fflush_r+0x42>
 80041c2:	b118      	cbz	r0, 80041cc <_fflush_r+0x14>
 80041c4:	6983      	ldr	r3, [r0, #24]
 80041c6:	b90b      	cbnz	r3, 80041cc <_fflush_r+0x14>
 80041c8:	f7ff f93e 	bl	8003448 <__sinit>
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <_fflush_r+0x48>)
 80041ce:	429c      	cmp	r4, r3
 80041d0:	d109      	bne.n	80041e6 <_fflush_r+0x2e>
 80041d2:	686c      	ldr	r4, [r5, #4]
 80041d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041d8:	b17b      	cbz	r3, 80041fa <_fflush_r+0x42>
 80041da:	4621      	mov	r1, r4
 80041dc:	4628      	mov	r0, r5
 80041de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e2:	f7ff bf63 	b.w	80040ac <__sflush_r>
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <_fflush_r+0x4c>)
 80041e8:	429c      	cmp	r4, r3
 80041ea:	d101      	bne.n	80041f0 <_fflush_r+0x38>
 80041ec:	68ac      	ldr	r4, [r5, #8]
 80041ee:	e7f1      	b.n	80041d4 <_fflush_r+0x1c>
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <_fflush_r+0x50>)
 80041f2:	429c      	cmp	r4, r3
 80041f4:	bf08      	it	eq
 80041f6:	68ec      	ldreq	r4, [r5, #12]
 80041f8:	e7ec      	b.n	80041d4 <_fflush_r+0x1c>
 80041fa:	2000      	movs	r0, #0
 80041fc:	bd38      	pop	{r3, r4, r5, pc}
 80041fe:	bf00      	nop
 8004200:	08004580 	.word	0x08004580
 8004204:	080045a0 	.word	0x080045a0
 8004208:	08004560 	.word	0x08004560

0800420c <_lseek_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4605      	mov	r5, r0
 8004210:	4608      	mov	r0, r1
 8004212:	4611      	mov	r1, r2
 8004214:	2200      	movs	r2, #0
 8004216:	4c05      	ldr	r4, [pc, #20]	; (800422c <_lseek_r+0x20>)
 8004218:	6022      	str	r2, [r4, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	f7fc fe79 	bl	8000f12 <_lseek>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d102      	bne.n	800422a <_lseek_r+0x1e>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	b103      	cbz	r3, 800422a <_lseek_r+0x1e>
 8004228:	602b      	str	r3, [r5, #0]
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	200002dc 	.word	0x200002dc

08004230 <__swhatbuf_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	460e      	mov	r6, r1
 8004234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004238:	b096      	sub	sp, #88	; 0x58
 800423a:	2900      	cmp	r1, #0
 800423c:	4614      	mov	r4, r2
 800423e:	461d      	mov	r5, r3
 8004240:	da07      	bge.n	8004252 <__swhatbuf_r+0x22>
 8004242:	2300      	movs	r3, #0
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	89b3      	ldrh	r3, [r6, #12]
 8004248:	061a      	lsls	r2, r3, #24
 800424a:	d410      	bmi.n	800426e <__swhatbuf_r+0x3e>
 800424c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004250:	e00e      	b.n	8004270 <__swhatbuf_r+0x40>
 8004252:	466a      	mov	r2, sp
 8004254:	f000 f908 	bl	8004468 <_fstat_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	dbf2      	blt.n	8004242 <__swhatbuf_r+0x12>
 800425c:	9a01      	ldr	r2, [sp, #4]
 800425e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004262:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004266:	425a      	negs	r2, r3
 8004268:	415a      	adcs	r2, r3
 800426a:	602a      	str	r2, [r5, #0]
 800426c:	e7ee      	b.n	800424c <__swhatbuf_r+0x1c>
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	2000      	movs	r0, #0
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	b016      	add	sp, #88	; 0x58
 8004276:	bd70      	pop	{r4, r5, r6, pc}

08004278 <__smakebuf_r>:
 8004278:	898b      	ldrh	r3, [r1, #12]
 800427a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800427c:	079d      	lsls	r5, r3, #30
 800427e:	4606      	mov	r6, r0
 8004280:	460c      	mov	r4, r1
 8004282:	d507      	bpl.n	8004294 <__smakebuf_r+0x1c>
 8004284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	2301      	movs	r3, #1
 800428e:	6163      	str	r3, [r4, #20]
 8004290:	b002      	add	sp, #8
 8004292:	bd70      	pop	{r4, r5, r6, pc}
 8004294:	ab01      	add	r3, sp, #4
 8004296:	466a      	mov	r2, sp
 8004298:	f7ff ffca 	bl	8004230 <__swhatbuf_r>
 800429c:	9900      	ldr	r1, [sp, #0]
 800429e:	4605      	mov	r5, r0
 80042a0:	4630      	mov	r0, r6
 80042a2:	f7ff f95b 	bl	800355c <_malloc_r>
 80042a6:	b948      	cbnz	r0, 80042bc <__smakebuf_r+0x44>
 80042a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ac:	059a      	lsls	r2, r3, #22
 80042ae:	d4ef      	bmi.n	8004290 <__smakebuf_r+0x18>
 80042b0:	f023 0303 	bic.w	r3, r3, #3
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	81a3      	strh	r3, [r4, #12]
 80042ba:	e7e3      	b.n	8004284 <__smakebuf_r+0xc>
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <__smakebuf_r+0x7c>)
 80042be:	62b3      	str	r3, [r6, #40]	; 0x28
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	6020      	str	r0, [r4, #0]
 80042c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c8:	81a3      	strh	r3, [r4, #12]
 80042ca:	9b00      	ldr	r3, [sp, #0]
 80042cc:	6120      	str	r0, [r4, #16]
 80042ce:	6163      	str	r3, [r4, #20]
 80042d0:	9b01      	ldr	r3, [sp, #4]
 80042d2:	b15b      	cbz	r3, 80042ec <__smakebuf_r+0x74>
 80042d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f8d7 	bl	800448c <_isatty_r>
 80042de:	b128      	cbz	r0, 80042ec <__smakebuf_r+0x74>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	431d      	orrs	r5, r3
 80042f0:	81a5      	strh	r5, [r4, #12]
 80042f2:	e7cd      	b.n	8004290 <__smakebuf_r+0x18>
 80042f4:	08003411 	.word	0x08003411

080042f8 <memchr>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	b2c9      	uxtb	r1, r1
 80042fc:	4402      	add	r2, r0
 80042fe:	4290      	cmp	r0, r2
 8004300:	4603      	mov	r3, r0
 8004302:	d101      	bne.n	8004308 <memchr+0x10>
 8004304:	2300      	movs	r3, #0
 8004306:	e003      	b.n	8004310 <memchr+0x18>
 8004308:	781c      	ldrb	r4, [r3, #0]
 800430a:	3001      	adds	r0, #1
 800430c:	428c      	cmp	r4, r1
 800430e:	d1f6      	bne.n	80042fe <memchr+0x6>
 8004310:	4618      	mov	r0, r3
 8004312:	bd10      	pop	{r4, pc}

08004314 <memcpy>:
 8004314:	b510      	push	{r4, lr}
 8004316:	1e43      	subs	r3, r0, #1
 8004318:	440a      	add	r2, r1
 800431a:	4291      	cmp	r1, r2
 800431c:	d100      	bne.n	8004320 <memcpy+0xc>
 800431e:	bd10      	pop	{r4, pc}
 8004320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004328:	e7f7      	b.n	800431a <memcpy+0x6>

0800432a <memmove>:
 800432a:	4288      	cmp	r0, r1
 800432c:	b510      	push	{r4, lr}
 800432e:	eb01 0302 	add.w	r3, r1, r2
 8004332:	d807      	bhi.n	8004344 <memmove+0x1a>
 8004334:	1e42      	subs	r2, r0, #1
 8004336:	4299      	cmp	r1, r3
 8004338:	d00a      	beq.n	8004350 <memmove+0x26>
 800433a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004342:	e7f8      	b.n	8004336 <memmove+0xc>
 8004344:	4283      	cmp	r3, r0
 8004346:	d9f5      	bls.n	8004334 <memmove+0xa>
 8004348:	1881      	adds	r1, r0, r2
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	42d3      	cmn	r3, r2
 800434e:	d100      	bne.n	8004352 <memmove+0x28>
 8004350:	bd10      	pop	{r4, pc}
 8004352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004356:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800435a:	e7f7      	b.n	800434c <memmove+0x22>

0800435c <__malloc_lock>:
 800435c:	4770      	bx	lr

0800435e <__malloc_unlock>:
 800435e:	4770      	bx	lr

08004360 <_free_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	d043      	beq.n	80043f0 <_free_r+0x90>
 8004368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436c:	1f0c      	subs	r4, r1, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	bfb8      	it	lt
 8004372:	18e4      	addlt	r4, r4, r3
 8004374:	f7ff fff2 	bl	800435c <__malloc_lock>
 8004378:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <_free_r+0x94>)
 800437a:	6813      	ldr	r3, [r2, #0]
 800437c:	4610      	mov	r0, r2
 800437e:	b933      	cbnz	r3, 800438e <_free_r+0x2e>
 8004380:	6063      	str	r3, [r4, #4]
 8004382:	6014      	str	r4, [r2, #0]
 8004384:	4628      	mov	r0, r5
 8004386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438a:	f7ff bfe8 	b.w	800435e <__malloc_unlock>
 800438e:	42a3      	cmp	r3, r4
 8004390:	d90b      	bls.n	80043aa <_free_r+0x4a>
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	1862      	adds	r2, r4, r1
 8004396:	4293      	cmp	r3, r2
 8004398:	bf01      	itttt	eq
 800439a:	681a      	ldreq	r2, [r3, #0]
 800439c:	685b      	ldreq	r3, [r3, #4]
 800439e:	1852      	addeq	r2, r2, r1
 80043a0:	6022      	streq	r2, [r4, #0]
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	6004      	str	r4, [r0, #0]
 80043a6:	e7ed      	b.n	8004384 <_free_r+0x24>
 80043a8:	4613      	mov	r3, r2
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	b10a      	cbz	r2, 80043b2 <_free_r+0x52>
 80043ae:	42a2      	cmp	r2, r4
 80043b0:	d9fa      	bls.n	80043a8 <_free_r+0x48>
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	1858      	adds	r0, r3, r1
 80043b6:	42a0      	cmp	r0, r4
 80043b8:	d10b      	bne.n	80043d2 <_free_r+0x72>
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	4401      	add	r1, r0
 80043be:	1858      	adds	r0, r3, r1
 80043c0:	4282      	cmp	r2, r0
 80043c2:	6019      	str	r1, [r3, #0]
 80043c4:	d1de      	bne.n	8004384 <_free_r+0x24>
 80043c6:	6810      	ldr	r0, [r2, #0]
 80043c8:	6852      	ldr	r2, [r2, #4]
 80043ca:	4401      	add	r1, r0
 80043cc:	6019      	str	r1, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	e7d8      	b.n	8004384 <_free_r+0x24>
 80043d2:	d902      	bls.n	80043da <_free_r+0x7a>
 80043d4:	230c      	movs	r3, #12
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	e7d4      	b.n	8004384 <_free_r+0x24>
 80043da:	6820      	ldr	r0, [r4, #0]
 80043dc:	1821      	adds	r1, r4, r0
 80043de:	428a      	cmp	r2, r1
 80043e0:	bf01      	itttt	eq
 80043e2:	6811      	ldreq	r1, [r2, #0]
 80043e4:	6852      	ldreq	r2, [r2, #4]
 80043e6:	1809      	addeq	r1, r1, r0
 80043e8:	6021      	streq	r1, [r4, #0]
 80043ea:	6062      	str	r2, [r4, #4]
 80043ec:	605c      	str	r4, [r3, #4]
 80043ee:	e7c9      	b.n	8004384 <_free_r+0x24>
 80043f0:	bd38      	pop	{r3, r4, r5, pc}
 80043f2:	bf00      	nop
 80043f4:	2000009c 	.word	0x2000009c

080043f8 <_realloc_r>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	4607      	mov	r7, r0
 80043fc:	4614      	mov	r4, r2
 80043fe:	460e      	mov	r6, r1
 8004400:	b921      	cbnz	r1, 800440c <_realloc_r+0x14>
 8004402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004406:	4611      	mov	r1, r2
 8004408:	f7ff b8a8 	b.w	800355c <_malloc_r>
 800440c:	b922      	cbnz	r2, 8004418 <_realloc_r+0x20>
 800440e:	f7ff ffa7 	bl	8004360 <_free_r>
 8004412:	4625      	mov	r5, r4
 8004414:	4628      	mov	r0, r5
 8004416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004418:	f000 f848 	bl	80044ac <_malloc_usable_size_r>
 800441c:	42a0      	cmp	r0, r4
 800441e:	d20f      	bcs.n	8004440 <_realloc_r+0x48>
 8004420:	4621      	mov	r1, r4
 8004422:	4638      	mov	r0, r7
 8004424:	f7ff f89a 	bl	800355c <_malloc_r>
 8004428:	4605      	mov	r5, r0
 800442a:	2800      	cmp	r0, #0
 800442c:	d0f2      	beq.n	8004414 <_realloc_r+0x1c>
 800442e:	4631      	mov	r1, r6
 8004430:	4622      	mov	r2, r4
 8004432:	f7ff ff6f 	bl	8004314 <memcpy>
 8004436:	4631      	mov	r1, r6
 8004438:	4638      	mov	r0, r7
 800443a:	f7ff ff91 	bl	8004360 <_free_r>
 800443e:	e7e9      	b.n	8004414 <_realloc_r+0x1c>
 8004440:	4635      	mov	r5, r6
 8004442:	e7e7      	b.n	8004414 <_realloc_r+0x1c>

08004444 <_read_r>:
 8004444:	b538      	push	{r3, r4, r5, lr}
 8004446:	4605      	mov	r5, r0
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	2200      	movs	r2, #0
 800444e:	4c05      	ldr	r4, [pc, #20]	; (8004464 <_read_r+0x20>)
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	f7fc fd1c 	bl	8000e90 <_read>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d102      	bne.n	8004462 <_read_r+0x1e>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	b103      	cbz	r3, 8004462 <_read_r+0x1e>
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	200002dc 	.word	0x200002dc

08004468 <_fstat_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	2300      	movs	r3, #0
 800446c:	4c06      	ldr	r4, [pc, #24]	; (8004488 <_fstat_r+0x20>)
 800446e:	4605      	mov	r5, r0
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	f7fc fd33 	bl	8000ee0 <_fstat>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	d102      	bne.n	8004484 <_fstat_r+0x1c>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	b103      	cbz	r3, 8004484 <_fstat_r+0x1c>
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	bf00      	nop
 8004488:	200002dc 	.word	0x200002dc

0800448c <_isatty_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	2300      	movs	r3, #0
 8004490:	4c05      	ldr	r4, [pc, #20]	; (80044a8 <_isatty_r+0x1c>)
 8004492:	4605      	mov	r5, r0
 8004494:	4608      	mov	r0, r1
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	f7fc fd31 	bl	8000efe <_isatty>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_isatty_r+0x1a>
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_isatty_r+0x1a>
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	200002dc 	.word	0x200002dc

080044ac <_malloc_usable_size_r>:
 80044ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b0:	1f18      	subs	r0, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfbc      	itt	lt
 80044b6:	580b      	ldrlt	r3, [r1, r0]
 80044b8:	18c0      	addlt	r0, r0, r3
 80044ba:	4770      	bx	lr

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
