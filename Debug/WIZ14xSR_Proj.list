
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008098  08008098  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008098  08008098  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008098  08008098  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800809c  0800809c  0001809c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080080a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000075c0  200000c8  08008168  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007688  08008168  00027688  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011608  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da1  00000000  00000000  000316f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000344a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf1d  00000000  00000000  00036560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d1f  00000000  00000000  0005247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1545  00000000  00000000  0006419c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001056e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea8  00000000  00000000  00105734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000c8 	.word	0x200000c8
 8000200:	00000000 	.word	0x00000000
 8000204:	08007c48 	.word	0x08007c48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000cc 	.word	0x200000cc
 8000220:	08007c48 	.word	0x08007c48

08000224 <Reset_W5300>:

#include "main.h"
#include "W5300BasicFunctions.h"

void Reset_W5300()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	4807      	ldr	r0, [pc, #28]	; (800024c <Reset_W5300+0x28>)
 800022e:	f002 ff6f 	bl	8003110 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000232:	200a      	movs	r0, #10
 8000234:	f002 f85e 	bl	80022f4 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <Reset_W5300+0x28>)
 800023e:	f002 ff67 	bl	8003110 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f002 f856 	bl	80022f4 <HAL_Delay>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40011c00 	.word	0x40011c00

08000250 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
 8000258:	460b      	mov	r3, r1
 800025a:	807b      	strh	r3, [r7, #2]
	*((uint16_t*)(addr << 1)) = wd;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	461a      	mov	r2, r3
 8000262:	887b      	ldrh	r3, [r7, #2]
 8000264:	8013      	strh	r3, [r2, #0]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	return *((uint16_t*)(addr << 1));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	881b      	ldrh	r3, [r3, #0]
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <W5300Initialize>:

void W5300Initialize(unsigned char * mem_size)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)mem_size) == -1)
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	2001      	movs	r0, #1
 8000294:	f005 ffc6 	bl	8006224 <ctlwizchip>
 8000298:	4603      	mov	r3, r0
 800029a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800029e:	d102      	bne.n	80002a6 <W5300Initialize+0x1e>
	{
		printf("W5300 memory initialization failed\r\n");
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <W5300Initialize+0x28>)
 80002a2:	f006 fe27 	bl	8006ef4 <puts>
	}
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	08007c60 	.word	0x08007c60

080002b4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
//	HAL_UART_Transmit(&huart5, (uint8_t *)ptr, len, 10);
//	HAL_UART_Transmit_IT(&huart5, (uint8_t *)ptr, len);
	for(int i=0; i<len; i++)
 80002c0:	2300      	movs	r3, #0
 80002c2:	617b      	str	r3, [r7, #20]
 80002c4:	e018      	b.n	80002f8 <_write+0x44>
	{
		debugBuf[debugWrite++] = ptr[i];
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	441a      	add	r2, r3
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <_write+0x58>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	1c59      	adds	r1, r3, #1
 80002d2:	b288      	uxth	r0, r1
 80002d4:	490d      	ldr	r1, [pc, #52]	; (800030c <_write+0x58>)
 80002d6:	8008      	strh	r0, [r1, #0]
 80002d8:	4619      	mov	r1, r3
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <_write+0x5c>)
 80002de:	545a      	strb	r2, [r3, r1]
		if(debugWrite >= DEBUG_BUF_SIZE)
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <_write+0x58>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	f640 0213 	movw	r2, #2067	; 0x813
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d902      	bls.n	80002f2 <_write+0x3e>
			debugWrite = 0;
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <_write+0x58>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<len; i++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbe2      	blt.n	80002c6 <_write+0x12>
	}

	return len;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	371c      	adds	r7, #28
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr
 800030c:	200000e4 	.word	0x200000e4
 8000310:	20006298 	.word	0x20006298

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031a:	f001 ff89 	bl	8002230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031e:	f000 f987 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000322:	f000 fb4b 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000326:	f000 fae7 	bl	80008f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800032a:	f000 fa91 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800032e:	f000 f9c5 	bl	80006bc <MX_TIM2_Init>
  MX_UART4_Init();
 8000332:	f000 fa0f 	bl	8000754 <MX_UART4_Init>
  MX_UART5_Init();
 8000336:	f000 fa37 	bl	80007a8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800033a:	f000 fa5f 	bl	80007fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800033e:	f000 fab1 	bl	80008a4 <MX_USART3_UART_Init>
  MX_FSMC_Init();
 8000342:	f000 fc21 	bl	8000b88 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000346:	4891      	ldr	r0, [pc, #580]	; (800058c <main+0x278>)
 8000348:	f003 fbca 	bl	8003ae0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Reset_W5300();
 800034c:	f7ff ff6a 	bl	8000224 <Reset_W5300>

  reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 8000350:	498f      	ldr	r1, [pc, #572]	; (8000590 <main+0x27c>)
 8000352:	4890      	ldr	r0, [pc, #576]	; (8000594 <main+0x280>)
 8000354:	f005 ff3a 	bl	80061cc <reg_wizchip_bus_cbfunc>

  printf("GetMR()=%04X\r\n", getMR());
 8000358:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 800035c:	f004 fdbe 	bl	8004edc <WIZCHIP_READ>
 8000360:	4603      	mov	r3, r0
 8000362:	4619      	mov	r1, r3
 8000364:	488c      	ldr	r0, [pc, #560]	; (8000598 <main+0x284>)
 8000366:	f006 fd3f 	bl	8006de8 <iprintf>
//  setSHAR(gWIZNETINFO.mac);
//  setSIPR(gWIZNETINFO.ip);
//  setGAR(gWIZNETINFO.gw);
//  setSUBR(gWIZNETINFO.sn);

  W5300Initialize(W5300_memsize);
 800036a:	488c      	ldr	r0, [pc, #560]	; (800059c <main+0x288>)
 800036c:	f7ff ff8c 	bl	8000288 <W5300Initialize>
  printf("GetTMS01R()\%04X\r\n", getTMS01R());
 8000370:	488b      	ldr	r0, [pc, #556]	; (80005a0 <main+0x28c>)
 8000372:	f004 fdb3 	bl	8004edc <WIZCHIP_READ>
 8000376:	4603      	mov	r3, r0
 8000378:	4619      	mov	r1, r3
 800037a:	488a      	ldr	r0, [pc, #552]	; (80005a4 <main+0x290>)
 800037c:	f006 fd34 	bl	8006de8 <iprintf>
  printf("GetTMS23R()\%04X\r\n", getTMS23R());
 8000380:	4889      	ldr	r0, [pc, #548]	; (80005a8 <main+0x294>)
 8000382:	f004 fdab 	bl	8004edc <WIZCHIP_READ>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4888      	ldr	r0, [pc, #544]	; (80005ac <main+0x298>)
 800038c:	f006 fd2c 	bl	8006de8 <iprintf>
  printf("GetTMS45R()\%04X\r\n", getTMS45R());
 8000390:	4887      	ldr	r0, [pc, #540]	; (80005b0 <main+0x29c>)
 8000392:	f004 fda3 	bl	8004edc <WIZCHIP_READ>
 8000396:	4603      	mov	r3, r0
 8000398:	4619      	mov	r1, r3
 800039a:	4886      	ldr	r0, [pc, #536]	; (80005b4 <main+0x2a0>)
 800039c:	f006 fd24 	bl	8006de8 <iprintf>
  printf("GetTMS67R()\%04X\r\n", getTMS67R());
 80003a0:	4885      	ldr	r0, [pc, #532]	; (80005b8 <main+0x2a4>)
 80003a2:	f004 fd9b 	bl	8004edc <WIZCHIP_READ>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4619      	mov	r1, r3
 80003aa:	4884      	ldr	r0, [pc, #528]	; (80005bc <main+0x2a8>)
 80003ac:	f006 fd1c 	bl	8006de8 <iprintf>
  printf("GetRMS01R()\%04X\r\n", getRMS01R());
 80003b0:	4883      	ldr	r0, [pc, #524]	; (80005c0 <main+0x2ac>)
 80003b2:	f004 fd93 	bl	8004edc <WIZCHIP_READ>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4619      	mov	r1, r3
 80003ba:	4882      	ldr	r0, [pc, #520]	; (80005c4 <main+0x2b0>)
 80003bc:	f006 fd14 	bl	8006de8 <iprintf>
  printf("GetRMS23R()\%04X\r\n", getRMS23R());
 80003c0:	4881      	ldr	r0, [pc, #516]	; (80005c8 <main+0x2b4>)
 80003c2:	f004 fd8b 	bl	8004edc <WIZCHIP_READ>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4619      	mov	r1, r3
 80003ca:	4880      	ldr	r0, [pc, #512]	; (80005cc <main+0x2b8>)
 80003cc:	f006 fd0c 	bl	8006de8 <iprintf>
  printf("GetRMS45R()\%04X\r\n", getRMS45R());
 80003d0:	487f      	ldr	r0, [pc, #508]	; (80005d0 <main+0x2bc>)
 80003d2:	f004 fd83 	bl	8004edc <WIZCHIP_READ>
 80003d6:	4603      	mov	r3, r0
 80003d8:	4619      	mov	r1, r3
 80003da:	487e      	ldr	r0, [pc, #504]	; (80005d4 <main+0x2c0>)
 80003dc:	f006 fd04 	bl	8006de8 <iprintf>
  printf("GetRMS67R()\%04X\r\n", getRMS67R());
 80003e0:	487d      	ldr	r0, [pc, #500]	; (80005d8 <main+0x2c4>)
 80003e2:	f004 fd7b 	bl	8004edc <WIZCHIP_READ>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4619      	mov	r1, r3
 80003ea:	487c      	ldr	r0, [pc, #496]	; (80005dc <main+0x2c8>)
 80003ec:	f006 fcfc 	bl	8006de8 <iprintf>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80003f0:	497b      	ldr	r1, [pc, #492]	; (80005e0 <main+0x2cc>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f005 ffc4 	bl	8006380 <ctlnetwork>
  print_network_information();
 80003f8:	f000 fe8a 	bl	8001110 <print_network_information>
//  HAL_UART_Receive_DMA(&huart2, &rxByte2, 1);

//  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
//  HAL_UART_Receive_DMA(&huart1, DMARxBuf[0], DATA_BUF_SIZE);

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 80003fc:	4b79      	ldr	r3, [pc, #484]	; (80005e4 <main+0x2d0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	68da      	ldr	r2, [r3, #12]
 8000402:	4b78      	ldr	r3, [pc, #480]	; (80005e4 <main+0x2d0>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f042 0210 	orr.w	r2, r2, #16
 800040a:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart2, DMARxBuf[1], DATA_BUF_SIZE);
 800040c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000410:	4975      	ldr	r1, [pc, #468]	; (80005e8 <main+0x2d4>)
 8000412:	4874      	ldr	r0, [pc, #464]	; (80005e4 <main+0x2d0>)
 8000414:	f004 f840 	bl	8004498 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000418:	4b74      	ldr	r3, [pc, #464]	; (80005ec <main+0x2d8>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	68da      	ldr	r2, [r3, #12]
 800041e:	4b73      	ldr	r3, [pc, #460]	; (80005ec <main+0x2d8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f042 0210 	orr.w	r2, r2, #16
 8000426:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart3, DMARxBuf[2], DATA_BUF_SIZE);
 8000428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800042c:	4970      	ldr	r1, [pc, #448]	; (80005f0 <main+0x2dc>)
 800042e:	486f      	ldr	r0, [pc, #444]	; (80005ec <main+0x2d8>)
 8000430:	f004 f832 	bl	8004498 <HAL_UART_Receive_DMA>

  __HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
 8000434:	4b6f      	ldr	r3, [pc, #444]	; (80005f4 <main+0x2e0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	68da      	ldr	r2, [r3, #12]
 800043a:	4b6e      	ldr	r3, [pc, #440]	; (80005f4 <main+0x2e0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f042 0210 	orr.w	r2, r2, #16
 8000442:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart4, DMARxBuf[3], DATA_BUF_SIZE);
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	496b      	ldr	r1, [pc, #428]	; (80005f8 <main+0x2e4>)
 800044a:	486a      	ldr	r0, [pc, #424]	; (80005f4 <main+0x2e0>)
 800044c:	f004 f824 	bl	8004498 <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 8000450:	4b6a      	ldr	r3, [pc, #424]	; (80005fc <main+0x2e8>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d00c      	beq.n	8000472 <main+0x15e>
	  {
		  onesecondElapsed = 0;
 8000458:	4b68      	ldr	r3, [pc, #416]	; (80005fc <main+0x2e8>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 800045e:	4b68      	ldr	r3, [pc, #416]	; (8000600 <main+0x2ec>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b66      	ldr	r3, [pc, #408]	; (8000600 <main+0x2ec>)
 8000468:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	4865      	ldr	r0, [pc, #404]	; (8000604 <main+0x2f0>)
 800046e:	f002 fe67 	bl	8003140 <HAL_GPIO_TogglePin>

	  }

	  if(intervalElapsed)
 8000472:	4b65      	ldr	r3, [pc, #404]	; (8000608 <main+0x2f4>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d01d      	beq.n	80004b6 <main+0x1a2>
	  {
		  intervalElapsed = 0;
 800047a:	4b63      	ldr	r3, [pc, #396]	; (8000608 <main+0x2f4>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]

		  for(ch=0; ch<4; ch++)
 8000480:	4b62      	ldr	r3, [pc, #392]	; (800060c <main+0x2f8>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e012      	b.n	80004ae <main+0x19a>
		  {
			  if(UartTxEnable[ch])
 8000488:	4b60      	ldr	r3, [pc, #384]	; (800060c <main+0x2f8>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b60      	ldr	r3, [pc, #384]	; (8000610 <main+0x2fc>)
 8000490:	5c9b      	ldrb	r3, [r3, r2]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d005      	beq.n	80004a2 <main+0x18e>
				  DMATxStart[ch] = 1;
 8000496:	4b5d      	ldr	r3, [pc, #372]	; (800060c <main+0x2f8>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	461a      	mov	r2, r3
 800049c:	4b5d      	ldr	r3, [pc, #372]	; (8000614 <main+0x300>)
 800049e:	2101      	movs	r1, #1
 80004a0:	5499      	strb	r1, [r3, r2]
		  for(ch=0; ch<4; ch++)
 80004a2:	4b5a      	ldr	r3, [pc, #360]	; (800060c <main+0x2f8>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	3301      	adds	r3, #1
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	4b58      	ldr	r3, [pc, #352]	; (800060c <main+0x2f8>)
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	4b57      	ldr	r3, [pc, #348]	; (800060c <main+0x2f8>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d9e8      	bls.n	8000488 <main+0x174>
	  }

//	  DMALoopback(1);
//	  DMALoopback(2);
//	  DMALoopback(3);
	  U2E_tcps(1, 5000);
 80004b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80004ba:	2001      	movs	r0, #1
 80004bc:	f000 fec4 	bl	8001248 <U2E_tcps>
	  U2E_tcps(2, 5001);
 80004c0:	f241 3189 	movw	r1, #5001	; 0x1389
 80004c4:	2002      	movs	r0, #2
 80004c6:	f000 febf 	bl	8001248 <U2E_tcps>
	  U2E_tcps(3, 5002);
 80004ca:	f241 318a 	movw	r1, #5002	; 0x138a
 80004ce:	2003      	movs	r0, #3
 80004d0:	f000 feba 	bl	8001248 <U2E_tcps>


	  if(HAL_UART_GetState(&huart5) == HAL_UART_STATE_READY)
 80004d4:	4850      	ldr	r0, [pc, #320]	; (8000618 <main+0x304>)
 80004d6:	f004 f971 	bl	80047bc <HAL_UART_GetState>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b20      	cmp	r3, #32
 80004de:	d1b7      	bne.n	8000450 <main+0x13c>
	  {
		  if(debugWrite != debugRead)
 80004e0:	4b4e      	ldr	r3, [pc, #312]	; (800061c <main+0x308>)
 80004e2:	881a      	ldrh	r2, [r3, #0]
 80004e4:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <main+0x30c>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d0b1      	beq.n	8000450 <main+0x13c>
		  {
			  if(debugWrite > debugRead)
 80004ec:	4b4b      	ldr	r3, [pc, #300]	; (800061c <main+0x308>)
 80004ee:	881a      	ldrh	r2, [r3, #0]
 80004f0:	4b4b      	ldr	r3, [pc, #300]	; (8000620 <main+0x30c>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d917      	bls.n	8000528 <main+0x214>
			  {
				  uart5TxLen = debugWrite - debugRead;
 80004f8:	4b48      	ldr	r3, [pc, #288]	; (800061c <main+0x308>)
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	4b48      	ldr	r3, [pc, #288]	; (8000620 <main+0x30c>)
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	b29a      	uxth	r2, r3
 8000504:	4b47      	ldr	r3, [pc, #284]	; (8000624 <main+0x310>)
 8000506:	801a      	strh	r2, [r3, #0]
				  memcpy(uart5TxBuf, debugBuf + debugRead, uart5TxLen);
 8000508:	4b45      	ldr	r3, [pc, #276]	; (8000620 <main+0x30c>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b46      	ldr	r3, [pc, #280]	; (8000628 <main+0x314>)
 8000510:	4413      	add	r3, r2
 8000512:	4a44      	ldr	r2, [pc, #272]	; (8000624 <main+0x310>)
 8000514:	8812      	ldrh	r2, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4844      	ldr	r0, [pc, #272]	; (800062c <main+0x318>)
 800051a:	f006 fba9 	bl	8006c70 <memcpy>
				  debugRead = debugWrite;
 800051e:	4b3f      	ldr	r3, [pc, #252]	; (800061c <main+0x308>)
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <main+0x30c>)
 8000524:	801a      	strh	r2, [r3, #0]
 8000526:	e029      	b.n	800057c <main+0x268>
			  }else
			  {
				  uart5TxLen = DEBUG_BUF_SIZE - debugRead;
 8000528:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <main+0x30c>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	f5c3 6301 	rsb	r3, r3, #2064	; 0x810
 8000530:	3304      	adds	r3, #4
 8000532:	b29a      	uxth	r2, r3
 8000534:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <main+0x310>)
 8000536:	801a      	strh	r2, [r3, #0]
				  memcpy(uart5TxBuf, debugBuf + debugRead, uart5TxLen);
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <main+0x30c>)
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <main+0x314>)
 8000540:	4413      	add	r3, r2
 8000542:	4a38      	ldr	r2, [pc, #224]	; (8000624 <main+0x310>)
 8000544:	8812      	ldrh	r2, [r2, #0]
 8000546:	4619      	mov	r1, r3
 8000548:	4838      	ldr	r0, [pc, #224]	; (800062c <main+0x318>)
 800054a:	f006 fb91 	bl	8006c70 <memcpy>
				  memcpy(uart5TxBuf + uart5TxLen, debugBuf, debugWrite);
 800054e:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x310>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <main+0x318>)
 8000556:	4413      	add	r3, r2
 8000558:	4a30      	ldr	r2, [pc, #192]	; (800061c <main+0x308>)
 800055a:	8812      	ldrh	r2, [r2, #0]
 800055c:	4932      	ldr	r1, [pc, #200]	; (8000628 <main+0x314>)
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fb86 	bl	8006c70 <memcpy>
				  uart5TxLen += debugWrite;
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <main+0x310>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x308>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	4413      	add	r3, r2
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <main+0x310>)
 8000572:	801a      	strh	r2, [r3, #0]
				  debugRead = debugWrite;
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <main+0x308>)
 8000576:	881a      	ldrh	r2, [r3, #0]
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0x30c>)
 800057a:	801a      	strh	r2, [r3, #0]
			  }
			  HAL_UART_Transmit_IT(&huart5, uart5TxBuf, uart5TxLen);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <main+0x310>)
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	492a      	ldr	r1, [pc, #168]	; (800062c <main+0x318>)
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <main+0x304>)
 8000586:	f003 fed6 	bl	8004336 <HAL_UART_Transmit_IT>
	  if(onesecondElapsed)
 800058a:	e761      	b.n	8000450 <main+0x13c>
 800058c:	200075a4 	.word	0x200075a4
 8000590:	08000251 	.word	0x08000251
 8000594:	08000271 	.word	0x08000271
 8000598:	08007c84 	.word	0x08007c84
 800059c:	20000018 	.word	0x20000018
 80005a0:	34000020 	.word	0x34000020
 80005a4:	08007c94 	.word	0x08007c94
 80005a8:	34000022 	.word	0x34000022
 80005ac:	08007ca8 	.word	0x08007ca8
 80005b0:	34000024 	.word	0x34000024
 80005b4:	08007cbc 	.word	0x08007cbc
 80005b8:	34000026 	.word	0x34000026
 80005bc:	08007cd0 	.word	0x08007cd0
 80005c0:	34000028 	.word	0x34000028
 80005c4:	08007ce4 	.word	0x08007ce4
 80005c8:	3400002a 	.word	0x3400002a
 80005cc:	08007cf8 	.word	0x08007cf8
 80005d0:	3400002c 	.word	0x3400002c
 80005d4:	08007d0c 	.word	0x08007d0c
 80005d8:	3400002e 	.word	0x3400002e
 80005dc:	08007d20 	.word	0x08007d20
 80005e0:	20000000 	.word	0x20000000
 80005e4:	200075ec 	.word	0x200075ec
 80005e8:	200028f0 	.word	0x200028f0
 80005ec:	20006258 	.word	0x20006258
 80005f0:	200030f0 	.word	0x200030f0
 80005f4:	20007564 	.word	0x20007564
 80005f8:	200038f0 	.word	0x200038f0
 80005fc:	200000ee 	.word	0x200000ee
 8000600:	200000ea 	.word	0x200000ea
 8000604:	40011c00 	.word	0x40011c00
 8000608:	200000ef 	.word	0x200000ef
 800060c:	2000762c 	.word	0x2000762c
 8000610:	20000028 	.word	0x20000028
 8000614:	200060f0 	.word	0x200060f0
 8000618:	20007458 	.word	0x20007458
 800061c:	200000e4 	.word	0x200000e4
 8000620:	200000e6 	.word	0x200000e6
 8000624:	200000e8 	.word	0x200000e8
 8000628:	20006298 	.word	0x20006298
 800062c:	20006c00 	.word	0x20006c00

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 fb24 	bl	8006c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fd7b 	bl	8003174 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000684:	f001 f880 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ffe6 	bl	8003674 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ae:	f001 f86b 	bl	8001788 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3740      	adds	r7, #64	; 0x40
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	463b      	mov	r3, r7
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_TIM2_Init+0x94>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_TIM2_Init+0x94>)
 80006e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_TIM2_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_TIM2_Init+0x94>)
 80006f0:	2248      	movs	r2, #72	; 0x48
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_TIM2_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_TIM2_Init+0x94>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_TIM2_Init+0x94>)
 8000702:	f003 f99e 	bl	8003a42 <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800070c:	f001 f83c 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_TIM2_Init+0x94>)
 800071e:	f003 fb47 	bl	8003db0 <HAL_TIM_ConfigClockSource>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000728:	f001 f82e 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_TIM2_Init+0x94>)
 800073a:	f003 fd31 	bl	80041a0 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000744:	f001 f820 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200075a4 	.word	0x200075a4

08000754 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_UART4_Init+0x48>)
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <MX_UART4_Init+0x4c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_UART4_Init+0x48>)
 8000760:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <MX_UART4_Init+0x50>)
 8000762:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_UART4_Init+0x48>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_UART4_Init+0x48>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_UART4_Init+0x48>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_UART4_Init+0x48>)
 8000778:	220c      	movs	r2, #12
 800077a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_UART4_Init+0x48>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_UART4_Init+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_UART4_Init+0x48>)
 800078a:	f003 fd87 	bl	800429c <HAL_UART_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8000794:	f000 fff8 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20007564 	.word	0x20007564
 80007a0:	40004c00 	.word	0x40004c00
 80007a4:	001e8480 	.word	0x001e8480

080007a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_UART5_Init+0x48>)
 80007ae:	4a11      	ldr	r2, [pc, #68]	; (80007f4 <MX_UART5_Init+0x4c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_UART5_Init+0x48>)
 80007b4:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <MX_UART5_Init+0x50>)
 80007b6:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_UART5_Init+0x48>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_UART5_Init+0x48>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_UART5_Init+0x48>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_UART5_Init+0x48>)
 80007cc:	220c      	movs	r2, #12
 80007ce:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_UART5_Init+0x48>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_UART5_Init+0x48>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_UART5_Init+0x48>)
 80007de:	f003 fd5d 	bl	800429c <HAL_UART_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_UART5_Init+0x44>
  {
    Error_Handler();
 80007e8:	f000 ffce 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20007458 	.word	0x20007458
 80007f4:	40005000 	.word	0x40005000
 80007f8:	001e8480 	.word	0x001e8480

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <MX_USART1_UART_Init+0x4c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000808:	4a10      	ldr	r2, [pc, #64]	; (800084c <MX_USART1_UART_Init+0x50>)
 800080a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_USART1_UART_Init+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_USART1_UART_Init+0x48>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000820:	220c      	movs	r2, #12
 8000822:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART1_UART_Init+0x48>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_USART1_UART_Init+0x48>)
 8000832:	f003 fd33 	bl	800429c <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800083c:	f000 ffa4 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20007520 	.word	0x20007520
 8000848:	40013800 	.word	0x40013800
 800084c:	001e8480 	.word	0x001e8480

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <MX_USART2_UART_Init+0x4c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART2_UART_Init+0x48>)
 800085c:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_USART2_UART_Init+0x50>)
 800085e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_USART2_UART_Init+0x48>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000874:	220c      	movs	r2, #12
 8000876:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <MX_USART2_UART_Init+0x48>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_USART2_UART_Init+0x48>)
 8000886:	f003 fd09 	bl	800429c <HAL_UART_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000890:	f000 ff7a 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200075ec 	.word	0x200075ec
 800089c:	40004400 	.word	0x40004400
 80008a0:	001e8480 	.word	0x001e8480

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008b0:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <MX_USART3_UART_Init+0x50>)
 80008b2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008c8:	220c      	movs	r2, #12
 80008ca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_USART3_UART_Init+0x48>)
 80008da:	f003 fcdf 	bl	800429c <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80008e4:	f000 ff50 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20006258 	.word	0x20006258
 80008f0:	40004800 	.word	0x40004800
 80008f4:	001e8480 	.word	0x001e8480

080008f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008fe:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <MX_DMA_Init+0xc0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a2d      	ldr	r2, [pc, #180]	; (80009b8 <MX_DMA_Init+0xc0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b2b      	ldr	r3, [pc, #172]	; (80009b8 <MX_DMA_Init+0xc0>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000916:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <MX_DMA_Init+0xc0>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a27      	ldr	r2, [pc, #156]	; (80009b8 <MX_DMA_Init+0xc0>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_DMA_Init+0xc0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	200c      	movs	r0, #12
 8000934:	f001 fdd9 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000938:	200c      	movs	r0, #12
 800093a:	f001 fdf2 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200d      	movs	r0, #13
 8000944:	f001 fdd1 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000948:	200d      	movs	r0, #13
 800094a:	f001 fdea 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	200e      	movs	r0, #14
 8000954:	f001 fdc9 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000958:	200e      	movs	r0, #14
 800095a:	f001 fde2 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200f      	movs	r0, #15
 8000964:	f001 fdc1 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000968:	200f      	movs	r0, #15
 800096a:	f001 fdda 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2010      	movs	r0, #16
 8000974:	f001 fdb9 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000978:	2010      	movs	r0, #16
 800097a:	f001 fdd2 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2011      	movs	r0, #17
 8000984:	f001 fdb1 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000988:	2011      	movs	r0, #17
 800098a:	f001 fdca 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	203a      	movs	r0, #58	; 0x3a
 8000994:	f001 fda9 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000998:	203a      	movs	r0, #58	; 0x3a
 800099a:	f001 fdc2 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	203b      	movs	r0, #59	; 0x3b
 80009a4:	f001 fda1 	bl	80024ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80009a8:	203b      	movs	r0, #59	; 0x3b
 80009aa:	f001 fdba 	bl	8002522 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d0:	4b68      	ldr	r3, [pc, #416]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	4a67      	ldr	r2, [pc, #412]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009d6:	f043 0310 	orr.w	r3, r3, #16
 80009da:	6193      	str	r3, [r2, #24]
 80009dc:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e8:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b5f      	ldr	r3, [pc, #380]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b5c      	ldr	r3, [pc, #368]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b56      	ldr	r3, [pc, #344]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a55      	ldr	r2, [pc, #340]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a30:	4b50      	ldr	r3, [pc, #320]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a4f      	ldr	r2, [pc, #316]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b47      	ldr	r3, [pc, #284]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a43      	ldr	r2, [pc, #268]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b41      	ldr	r3, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x1b8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	21c0      	movs	r1, #192	; 0xc0
 8000a7c:	483e      	ldr	r0, [pc, #248]	; (8000b78 <MX_GPIO_Init+0x1bc>)
 8000a7e:	f002 fb47 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a88:	483c      	ldr	r0, [pc, #240]	; (8000b7c <MX_GPIO_Init+0x1c0>)
 8000a8a:	f002 fb41 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 11e0 	movw	r1, #16864	; 0x41e0
 8000a94:	483a      	ldr	r0, [pc, #232]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000a96:	f002 fb3b 	bl	8003110 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa0:	4838      	ldr	r0, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000aa2:	f002 fb35 	bl	8003110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000aa6:	f242 130f 	movw	r3, #8463	; 0x210f
 8000aaa:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4830      	ldr	r0, [pc, #192]	; (8000b7c <MX_GPIO_Init+0x1c0>)
 8000abc:	f002 f994 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4828      	ldr	r0, [pc, #160]	; (8000b78 <MX_GPIO_Init+0x1bc>)
 8000ad8:	f002 f986 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000adc:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	4619      	mov	r1, r3
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x1c0>)
 8000af6:	f002 f977 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000afa:	f242 0301 	movw	r3, #8193	; 0x2001
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	481c      	ldr	r0, [pc, #112]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000b10:	f002 f96a 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000b14:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000b18:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <MX_GPIO_Init+0x1c4>)
 8000b2e:	f002 f95b 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	4619      	mov	r1, r3
 8000b46:	480f      	ldr	r0, [pc, #60]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000b48:	f002 f94e 	bl	8002de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_GPIO_Init+0x1c8>)
 8000b66:	f002 f93f 	bl	8002de8 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40011c00 	.word	0x40011c00
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40010c00 	.word	0x40010c00
 8000b84:	40010800 	.word	0x40010800

08000b88 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000ba2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ba6:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <MX_FSMC_Init+0xc0>)
 8000bac:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c02:	230f      	movs	r3, #15
 8000c04:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 3;
 8000c06:	2303      	movs	r3, #3
 8000c08:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c12:	2311      	movs	r3, #17
 8000c14:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_FSMC_Init+0xbc>)
 8000c22:	f002 fec1 	bl	80039a8 <HAL_SRAM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000c2c:	f000 fdac 	bl	8001788 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_FSMC_Init+0xc4>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <MX_FSMC_Init+0xc4>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20006aac 	.word	0x20006aac
 8000c48:	a0000104 	.word	0xa0000104
 8000c4c:	40010000 	.word	0x40010000

08000c50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d121      	bne.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		ms_count++;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c6e:	801a      	strh	r2, [r3, #0]

		if((ms_count % 10) == 0) intervalElapsed = 1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c72:	881a      	ldrh	r2, [r3, #0]
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c76:	fba3 1302 	umull	r1, r3, r3, r2
 8000c7a:	08d9      	lsrs	r1, r3, #3
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d102      	bne.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]

		if(ms_count >= 1000)
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c9a:	d305      	bcc.n	8000ca8 <HAL_TIM_PeriodElapsedCallback+0x58>
		{
			onesecondElapsed = 1;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	801a      	strh	r2, [r3, #0]
		}

		/* Toggle LEDs */
	}
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200075a4 	.word	0x200075a4
 8000cb8:	200000ec 	.word	0x200000ec
 8000cbc:	cccccccd 	.word	0xcccccccd
 8000cc0:	200000ef 	.word	0x200000ef
 8000cc4:	200000ee 	.word	0x200000ee

08000cc8 <UART_Data_Process>:

void UART_Data_Process(UART_HandleTypeDef *huart)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	if(huart->Instance == huart1.Instance)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b74      	ldr	r3, [pc, #464]	; (8000ea8 <UART_Data_Process+0x1e0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d107      	bne.n	8000cec <UART_Data_Process+0x24>
	{
		ch = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
		printf("CH%d selected in UART_DATA_Process\r\n", ch);
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4871      	ldr	r0, [pc, #452]	; (8000eac <UART_Data_Process+0x1e4>)
 8000ce6:	f006 f87f 	bl	8006de8 <iprintf>
 8000cea:	e028      	b.n	8000d3e <UART_Data_Process+0x76>
	}
	else if(huart->Instance == huart2.Instance)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b6f      	ldr	r3, [pc, #444]	; (8000eb0 <UART_Data_Process+0x1e8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d107      	bne.n	8000d08 <UART_Data_Process+0x40>
	{
		ch = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
		printf("CH%d selected in UART_DATA_Process\r\n", ch);	}
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	486a      	ldr	r0, [pc, #424]	; (8000eac <UART_Data_Process+0x1e4>)
 8000d02:	f006 f871 	bl	8006de8 <iprintf>
 8000d06:	e01a      	b.n	8000d3e <UART_Data_Process+0x76>
	else if(huart->Instance == huart3.Instance)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <UART_Data_Process+0x1ec>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d107      	bne.n	8000d24 <UART_Data_Process+0x5c>
	{
		ch = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	73fb      	strb	r3, [r7, #15]
		printf("CH%d selected in UART_DATA_Process\r\n", ch);	}
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4863      	ldr	r0, [pc, #396]	; (8000eac <UART_Data_Process+0x1e4>)
 8000d1e:	f006 f863 	bl	8006de8 <iprintf>
 8000d22:	e00c      	b.n	8000d3e <UART_Data_Process+0x76>
	else if(huart->Instance == huart4.Instance)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b63      	ldr	r3, [pc, #396]	; (8000eb8 <UART_Data_Process+0x1f0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d106      	bne.n	8000d3e <UART_Data_Process+0x76>
	{
		ch = 3;
 8000d30:	2303      	movs	r3, #3
 8000d32:	73fb      	strb	r3, [r7, #15]
		printf("CH%d selected in UART_DATA_Process\r\n", ch);	}
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	4619      	mov	r1, r3
 8000d38:	485c      	ldr	r0, [pc, #368]	; (8000eac <UART_Data_Process+0x1e4>)
 8000d3a:	f006 f855 	bl	8006de8 <iprintf>

//	printf("UART_Data_Process was called with %d\r\n", ch);

	wrPtr[ch] = DATA_BUF_SIZE - huart->hdmarx->Instance->CNDTR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8000d4e:	b291      	uxth	r1, r2
 8000d50:	4a5a      	ldr	r2, [pc, #360]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	rcvdLen[ch] = 0;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	4a59      	ldr	r2, [pc, #356]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(wrPtr[ch] != rdPtr[ch])
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	4a56      	ldr	r2, [pc, #344]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000d64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	4956      	ldr	r1, [pc, #344]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	f000 8086 	beq.w	8000e82 <UART_Data_Process+0x1ba>
	{
		memset(RxBuf[ch], 0, DATA_BUF_SIZE);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	02db      	lsls	r3, r3, #11
 8000d7a:	4a53      	ldr	r2, [pc, #332]	; (8000ec8 <UART_Data_Process+0x200>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f005 ff81 	bl	8006c8c <memset>

		if (wrPtr[ch] > rdPtr[ch])
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000d8e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	494b      	ldr	r1, [pc, #300]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000d96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d922      	bls.n	8000de4 <UART_Data_Process+0x11c>
		{
			rcvdLen[ch] = wrPtr[ch] - rdPtr[ch];
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4a46      	ldr	r2, [pc, #280]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000da2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	4a46      	ldr	r2, [pc, #280]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000daa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dae:	7bfb      	ldrb	r3, [r7, #15]
 8000db0:	1a8a      	subs	r2, r1, r2
 8000db2:	b291      	uxth	r1, r2
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			memcpy(RxBuf[ch], DMARxBuf[ch] + rdPtr[ch], rcvdLen[ch]);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	02db      	lsls	r3, r3, #11
 8000dbe:	4a42      	ldr	r2, [pc, #264]	; (8000ec8 <UART_Data_Process+0x200>)
 8000dc0:	1898      	adds	r0, r3, r2
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	02db      	lsls	r3, r3, #11
 8000dc6:	4a41      	ldr	r2, [pc, #260]	; (8000ecc <UART_Data_Process+0x204>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	493d      	ldr	r1, [pc, #244]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000dce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dd2:	1899      	adds	r1, r3, r2
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	4a3a      	ldr	r2, [pc, #232]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f005 ff47 	bl	8006c70 <memcpy>
 8000de2:	e046      	b.n	8000e72 <UART_Data_Process+0x1aa>
		}else
		{
			rcvdLen[ch] = DATA_BUF_SIZE - rdPtr[ch];
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000de8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
 8000df2:	b291      	uxth	r1, r2
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			memcpy(RxBuf[ch], DMARxBuf[ch] + rdPtr[ch], rcvdLen[ch]);
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	02db      	lsls	r3, r3, #11
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <UART_Data_Process+0x200>)
 8000e00:	1898      	adds	r0, r3, r2
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	02db      	lsls	r3, r3, #11
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <UART_Data_Process+0x204>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	492d      	ldr	r1, [pc, #180]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000e0e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e12:	1899      	adds	r1, r3, r2
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f005 ff27 	bl	8006c70 <memcpy>
			if(wrPtr[ch] > 0)
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d021      	beq.n	8000e72 <UART_Data_Process+0x1aa>
			{
				memcpy(RxBuf[ch] + rcvdLen[ch], DMARxBuf[ch], wrPtr[ch]);
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	02db      	lsls	r3, r3, #11
 8000e32:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <UART_Data_Process+0x200>)
 8000e34:	4413      	add	r3, r2
 8000e36:	7bfa      	ldrb	r2, [r7, #15]
 8000e38:	4921      	ldr	r1, [pc, #132]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000e3a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e3e:	1898      	adds	r0, r3, r2
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	02db      	lsls	r3, r3, #11
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <UART_Data_Process+0x204>)
 8000e46:	1899      	adds	r1, r3, r2
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e50:	461a      	mov	r2, r3
 8000e52:	f005 ff0d 	bl	8006c70 <memcpy>
				rcvdLen[ch] += wrPtr[ch];
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000e5a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000e62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	440a      	add	r2, r1
 8000e6a:	b291      	uxth	r1, r2
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000e6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		rdPtr[ch] = wrPtr[ch];
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4911      	ldr	r1, [pc, #68]	; (8000ebc <UART_Data_Process+0x1f4>)
 8000e78:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <UART_Data_Process+0x1fc>)
 8000e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	totalRcvdBytes[ch] += rcvdLen[ch];
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <UART_Data_Process+0x208>)
 8000e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <UART_Data_Process+0x1f8>)
 8000e8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e92:	4619      	mov	r1, r3
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	440a      	add	r2, r1
 8000e98:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <UART_Data_Process+0x208>)
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20007520 	.word	0x20007520
 8000eac:	08007d34 	.word	0x08007d34
 8000eb0:	200075ec 	.word	0x200075ec
 8000eb4:	20006258 	.word	0x20006258
 8000eb8:	20007564 	.word	0x20007564
 8000ebc:	20006134 	.word	0x20006134
 8000ec0:	20006144 	.word	0x20006144
 8000ec4:	2000613c 	.word	0x2000613c
 8000ec8:	200040f0 	.word	0x200040f0
 8000ecc:	200020f0 	.word	0x200020f0
 8000ed0:	20006124 	.word	0x20006124

08000ed4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	if(huart->Instance == huart1.Instance) ch = 0;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_UART_RxCpltCallback+0x7c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d102      	bne.n	8000eee <HAL_UART_RxCpltCallback+0x1a>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e019      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x4e>
	else if(huart->Instance == huart2.Instance) ch = 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <HAL_UART_RxCpltCallback+0x80>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d102      	bne.n	8000f00 <HAL_UART_RxCpltCallback+0x2c>
 8000efa:	2301      	movs	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	e010      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x4e>
	else if(huart->Instance == huart3.Instance) ch = 2;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d102      	bne.n	8000f12 <HAL_UART_RxCpltCallback+0x3e>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e007      	b.n	8000f22 <HAL_UART_RxCpltCallback+0x4e>
	else if(huart->Instance == huart4.Instance) ch = 3;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d101      	bne.n	8000f22 <HAL_UART_RxCpltCallback+0x4e>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	73fb      	strb	r3, [r7, #15]

	_TC_Count[ch]++;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_UART_RxCpltCallback+0x8c>)
 8000f26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	b291      	uxth	r1, r2
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <HAL_UART_RxCpltCallback+0x8c>)
 8000f30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//	printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
//		  ch, _TX_Count[ch], _HT_Count[ch], _TC_Count[ch], _IDLE_Count[ch], rdPtr[ch], wrPtr[ch], rcvdLen[ch], totalSentBytes[ch], totalRcvdBytes[ch]);

//	UART_Data_Process(huart);

	if(rcvFlag[ch] == 0) rcvFlag[ch] = 1;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_UART_RxCpltCallback+0x90>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <HAL_UART_RxCpltCallback+0x72>
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_UART_RxCpltCallback+0x90>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	54d1      	strb	r1, [r2, r3]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	20007520 	.word	0x20007520
 8000f54:	200075ec 	.word	0x200075ec
 8000f58:	20006258 	.word	0x20006258
 8000f5c:	20007564 	.word	0x20007564
 8000f60:	20006104 	.word	0x20006104
 8000f64:	2000614c 	.word	0x2000614c

08000f68 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	if(huart->Instance == huart1.Instance) ch = 0;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_UART_RxHalfCpltCallback+0x7c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d102      	bne.n	8000f82 <HAL_UART_RxHalfCpltCallback+0x1a>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e019      	b.n	8000fb6 <HAL_UART_RxHalfCpltCallback+0x4e>
	else if(huart->Instance == huart2.Instance) ch = 1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_RxHalfCpltCallback+0x80>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d102      	bne.n	8000f94 <HAL_UART_RxHalfCpltCallback+0x2c>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e010      	b.n	8000fb6 <HAL_UART_RxHalfCpltCallback+0x4e>
	else if(huart->Instance == huart3.Instance) ch = 2;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_UART_RxHalfCpltCallback+0x84>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d102      	bne.n	8000fa6 <HAL_UART_RxHalfCpltCallback+0x3e>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e007      	b.n	8000fb6 <HAL_UART_RxHalfCpltCallback+0x4e>
	else if(huart->Instance == huart4.Instance) ch = 3;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_UART_RxHalfCpltCallback+0x88>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d101      	bne.n	8000fb6 <HAL_UART_RxHalfCpltCallback+0x4e>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	73fb      	strb	r3, [r7, #15]

	_HT_Count[ch]++;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_UART_RxHalfCpltCallback+0x8c>)
 8000fba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000fbe:	3201      	adds	r2, #1
 8000fc0:	b291      	uxth	r1, r2
 8000fc2:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <HAL_UART_RxHalfCpltCallback+0x8c>)
 8000fc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//	printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
//		  ch, _TX_Count[ch], _HT_Count[ch], _TC_Count[ch], _IDLE_Count[ch], rdPtr[ch], wrPtr[ch], rcvdLen[ch], totalSentBytes[ch], totalRcvdBytes[ch]);

//	UART_Data_Process(huart);

	if(rcvFlag[ch] == 0) rcvFlag[ch] = 1;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_UART_RxHalfCpltCallback+0x90>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d103      	bne.n	8000fda <HAL_UART_RxHalfCpltCallback+0x72>
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_UART_RxHalfCpltCallback+0x90>)
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	54d1      	strb	r1, [r2, r3]
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20007520 	.word	0x20007520
 8000fe8:	200075ec 	.word	0x200075ec
 8000fec:	20006258 	.word	0x20006258
 8000ff0:	20007564 	.word	0x20007564
 8000ff4:	200060fc 	.word	0x200060fc
 8000ff8:	2000614c 	.word	0x2000614c

08000ffc <UART_IDLECallback>:


void UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	if(huart->Instance == huart1.Instance) ch = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <UART_IDLECallback+0x7c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d102      	bne.n	8001016 <UART_IDLECallback+0x1a>
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e019      	b.n	800104a <UART_IDLECallback+0x4e>
	else if(huart->Instance == huart2.Instance) ch = 1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <UART_IDLECallback+0x80>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d102      	bne.n	8001028 <UART_IDLECallback+0x2c>
 8001022:	2301      	movs	r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	e010      	b.n	800104a <UART_IDLECallback+0x4e>
	else if(huart->Instance == huart3.Instance) ch = 2;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <UART_IDLECallback+0x84>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d102      	bne.n	800103a <UART_IDLECallback+0x3e>
 8001034:	2302      	movs	r3, #2
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e007      	b.n	800104a <UART_IDLECallback+0x4e>
	else if(huart->Instance == huart4.Instance) ch = 3;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <UART_IDLECallback+0x88>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d101      	bne.n	800104a <UART_IDLECallback+0x4e>
 8001046:	2303      	movs	r3, #3
 8001048:	73fb      	strb	r3, [r7, #15]

	_IDLE_Count[ch]++;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <UART_IDLECallback+0x8c>)
 800104e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001052:	3201      	adds	r2, #1
 8001054:	b291      	uxth	r1, r2
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <UART_IDLECallback+0x8c>)
 8001058:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//	printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
//		  ch, _TX_Count[ch], _HT_Count[ch], _TC_Count[ch], _IDLE_Count[ch], rdPtr[ch], wrPtr[ch], rcvdLen[ch], totalSentBytes[ch], totalRcvdBytes[ch]);

//	UART_Data_Process(huart);

	if(rcvFlag[ch] == 0) rcvFlag[ch] = 1;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <UART_IDLECallback+0x90>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <UART_IDLECallback+0x72>
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <UART_IDLECallback+0x90>)
 800106a:	2101      	movs	r1, #1
 800106c:	54d1      	strb	r1, [r2, r3]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	20007520 	.word	0x20007520
 800107c:	200075ec 	.word	0x200075ec
 8001080:	20006258 	.word	0x20006258
 8001084:	20007564 	.word	0x20007564
 8001088:	2000610c 	.word	0x2000610c
 800108c:	2000614c 	.word	0x2000614c

08001090 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	uint8_t ch;

	if(huart->Instance == huart1.Instance) ch = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_TxCpltCallback+0x6c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d102      	bne.n	80010aa <HAL_UART_TxCpltCallback+0x1a>
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e019      	b.n	80010de <HAL_UART_TxCpltCallback+0x4e>
	else if(huart->Instance == huart2.Instance) ch = 1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_UART_TxCpltCallback+0x70>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d102      	bne.n	80010bc <HAL_UART_TxCpltCallback+0x2c>
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e010      	b.n	80010de <HAL_UART_TxCpltCallback+0x4e>
	else if(huart->Instance == huart3.Instance) ch = 2;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_UART_TxCpltCallback+0x74>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d102      	bne.n	80010ce <HAL_UART_TxCpltCallback+0x3e>
 80010c8:	2302      	movs	r3, #2
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e007      	b.n	80010de <HAL_UART_TxCpltCallback+0x4e>
	else if(huart->Instance == huart4.Instance) ch = 3;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_UART_TxCpltCallback+0x78>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d101      	bne.n	80010de <HAL_UART_TxCpltCallback+0x4e>
 80010da:	2303      	movs	r3, #3
 80010dc:	73fb      	strb	r3, [r7, #15]

	if(UartTxEnable[ch] == 0) UartTxEnable[ch] = 1;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_UART_TxCpltCallback+0x7c>)
 80010e2:	5cd3      	ldrb	r3, [r2, r3]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <HAL_UART_TxCpltCallback+0x60>
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_UART_TxCpltCallback+0x7c>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	54d1      	strb	r1, [r2, r3]
//	printf("UartTxEnable[%d] was changed to %d in HAL_UART_TxCpltCallback\r\n", index, UartTxEnable[index]);
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20007520 	.word	0x20007520
 8001100:	200075ec 	.word	0x200075ec
 8001104:	20006258 	.word	0x20006258
 8001108:	20007564 	.word	0x20007564
 800110c:	20000028 	.word	0x20000028

08001110 <print_network_information>:

void print_network_information(void)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af04      	add	r7, sp, #16

    wizchip_getnetinfo(&gWIZNETINFO);
 8001116:	4830      	ldr	r0, [pc, #192]	; (80011d8 <print_network_information+0xc8>)
 8001118:	f005 fc5a 	bl	80069d0 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <print_network_information+0xc8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <print_network_information+0xc8>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	461c      	mov	r4, r3
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <print_network_information+0xc8>)
 800112a:	789b      	ldrb	r3, [r3, #2]
 800112c:	461d      	mov	r5, r3
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <print_network_information+0xc8>)
 8001130:	78db      	ldrb	r3, [r3, #3]
 8001132:	461a      	mov	r2, r3
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <print_network_information+0xc8>)
 8001136:	791b      	ldrb	r3, [r3, #4]
 8001138:	4619      	mov	r1, r3
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <print_network_information+0xc8>)
 800113c:	795b      	ldrb	r3, [r3, #5]
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	9101      	str	r1, [sp, #4]
 8001142:	9200      	str	r2, [sp, #0]
 8001144:	462b      	mov	r3, r5
 8001146:	4622      	mov	r2, r4
 8001148:	4601      	mov	r1, r0
 800114a:	4824      	ldr	r0, [pc, #144]	; (80011dc <print_network_information+0xcc>)
 800114c:	f005 fe4c 	bl	8006de8 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <print_network_information+0xc8>)
 8001152:	799b      	ldrb	r3, [r3, #6]
 8001154:	4619      	mov	r1, r3
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <print_network_information+0xc8>)
 8001158:	79db      	ldrb	r3, [r3, #7]
 800115a:	461a      	mov	r2, r3
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <print_network_information+0xc8>)
 800115e:	7a1b      	ldrb	r3, [r3, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <print_network_information+0xc8>)
 8001164:	7a5b      	ldrb	r3, [r3, #9]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	481d      	ldr	r0, [pc, #116]	; (80011e0 <print_network_information+0xd0>)
 800116c:	f005 fe3c 	bl	8006de8 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <print_network_information+0xc8>)
 8001172:	7a9b      	ldrb	r3, [r3, #10]
 8001174:	4619      	mov	r1, r3
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <print_network_information+0xc8>)
 8001178:	7adb      	ldrb	r3, [r3, #11]
 800117a:	461a      	mov	r2, r3
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <print_network_information+0xc8>)
 800117e:	7b1b      	ldrb	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <print_network_information+0xc8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4603      	mov	r3, r0
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <print_network_information+0xd4>)
 800118c:	f005 fe2c 	bl	8006de8 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <print_network_information+0xc8>)
 8001192:	7b9b      	ldrb	r3, [r3, #14]
 8001194:	4619      	mov	r1, r3
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <print_network_information+0xc8>)
 8001198:	7bdb      	ldrb	r3, [r3, #15]
 800119a:	461a      	mov	r2, r3
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <print_network_information+0xc8>)
 800119e:	7c1b      	ldrb	r3, [r3, #16]
 80011a0:	4618      	mov	r0, r3
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <print_network_information+0xc8>)
 80011a4:	7c5b      	ldrb	r3, [r3, #17]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4603      	mov	r3, r0
 80011aa:	480f      	ldr	r0, [pc, #60]	; (80011e8 <print_network_information+0xd8>)
 80011ac:	f005 fe1c 	bl	8006de8 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <print_network_information+0xc8>)
 80011b2:	7c9b      	ldrb	r3, [r3, #18]
 80011b4:	4619      	mov	r1, r3
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <print_network_information+0xc8>)
 80011b8:	7cdb      	ldrb	r3, [r3, #19]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <print_network_information+0xc8>)
 80011be:	7d1b      	ldrb	r3, [r3, #20]
 80011c0:	4618      	mov	r0, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <print_network_information+0xc8>)
 80011c4:	7d5b      	ldrb	r3, [r3, #21]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	4603      	mov	r3, r0
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <print_network_information+0xdc>)
 80011cc:	f005 fe0c 	bl	8006de8 <iprintf>
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000
 80011dc:	08007d5c 	.word	0x08007d5c
 80011e0:	08007d8c 	.word	0x08007d8c
 80011e4:	08007da8 	.word	0x08007da8
 80011e8:	08007dc4 	.word	0x08007dc4
 80011ec:	08007de0 	.word	0x08007de0

080011f0 <gethuart>:

UART_HandleTypeDef * gethuart(uint8_t sn)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	printf("ch: %d in gethuart\r\n", sn);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <gethuart+0x44>)
 8001200:	f005 fdf2 	bl	8006de8 <iprintf>
	if(sn == 0)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <gethuart+0x1e>
		return &huart1;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <gethuart+0x48>)
 800120c:	e00e      	b.n	800122c <gethuart+0x3c>
	else if(sn == 1)
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <gethuart+0x28>
		return &huart2;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <gethuart+0x4c>)
 8001216:	e009      	b.n	800122c <gethuart+0x3c>
	else if(sn == 2)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b02      	cmp	r3, #2
 800121c:	d101      	bne.n	8001222 <gethuart+0x32>
		return &huart3;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <gethuart+0x50>)
 8001220:	e004      	b.n	800122c <gethuart+0x3c>
	else if(sn == 3)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d101      	bne.n	800122c <gethuart+0x3c>
		return &huart4;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <gethuart+0x54>)
 800122a:	e7ff      	b.n	800122c <gethuart+0x3c>
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	08007dfc 	.word	0x08007dfc
 8001238:	20007520 	.word	0x20007520
 800123c:	200075ec 	.word	0x200075ec
 8001240:	20006258 	.word	0x20006258
 8001244:	20007564 	.word	0x20007564

08001248 <U2E_tcps>:
			  ch, _TX_Count[ch], _HT_Count[ch], _TC_Count[ch], _IDLE_Count[ch], rdPtr[ch], wrPtr[ch], rcvdLen[ch], totalSentBytes[ch], totalRcvdBytes[ch]);
	}
}

int32_t U2E_tcps(uint8_t sn, uint16_t port)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	f6ad 0d44 	subw	sp, sp, #2116	; 0x844
 800124e:	af08      	add	r7, sp, #32
 8001250:	4602      	mov	r2, r0
 8001252:	f107 030f 	add.w	r3, r7, #15
 8001256:	701a      	strb	r2, [r3, #0]
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	460a      	mov	r2, r1
 800125e:	801a      	strh	r2, [r3, #0]
//	UART_HandleTypeDef *huart;
//	huart = gethuart(sn);
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8001260:	2300      	movs	r3, #0
 8001262:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
 8001266:	2300      	movs	r3, #0
 8001268:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
   uint16_t i;

   uint8_t buf[DATA_BUF_SIZE] = {0,};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f005 fd05 	bl	8006c8c <memset>
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8001282:	f107 030f 	add.w	r3, r7, #15
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800128c:	3308      	adds	r3, #8
 800128e:	019b      	lsls	r3, r3, #6
 8001290:	3308      	adds	r3, #8
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fe22 	bl	8004edc <WIZCHIP_READ>
 8001298:	4603      	mov	r3, r0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b1c      	cmp	r3, #28
 800129e:	f200 8238 	bhi.w	8001712 <U2E_tcps+0x4ca>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <U2E_tcps+0x60>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080016e5 	.word	0x080016e5
 80012ac:	08001713 	.word	0x08001713
 80012b0:	08001713 	.word	0x08001713
 80012b4:	08001713 	.word	0x08001713
 80012b8:	08001713 	.word	0x08001713
 80012bc:	08001713 	.word	0x08001713
 80012c0:	08001713 	.word	0x08001713
 80012c4:	08001713 	.word	0x08001713
 80012c8:	08001713 	.word	0x08001713
 80012cc:	08001713 	.word	0x08001713
 80012d0:	08001713 	.word	0x08001713
 80012d4:	08001713 	.word	0x08001713
 80012d8:	08001713 	.word	0x08001713
 80012dc:	08001713 	.word	0x08001713
 80012e0:	08001713 	.word	0x08001713
 80012e4:	08001713 	.word	0x08001713
 80012e8:	08001713 	.word	0x08001713
 80012ec:	08001713 	.word	0x08001713
 80012f0:	08001713 	.word	0x08001713
 80012f4:	080016b1 	.word	0x080016b1
 80012f8:	08001713 	.word	0x08001713
 80012fc:	08001713 	.word	0x08001713
 8001300:	08001713 	.word	0x08001713
 8001304:	0800131d 	.word	0x0800131d
 8001308:	08001713 	.word	0x08001713
 800130c:	08001713 	.word	0x08001713
 8001310:	08001713 	.word	0x08001713
 8001314:	08001713 	.word	0x08001713
 8001318:	08001681 	.word	0x08001681
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 800131c:	f107 030f 	add.w	r3, r7, #15
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8001326:	3308      	adds	r3, #8
 8001328:	019b      	lsls	r3, r3, #6
 800132a:	3306      	adds	r3, #6
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fdd5 	bl	8004edc <WIZCHIP_READ>
 8001332:	4603      	mov	r3, r0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d07a      	beq.n	8001434 <U2E_tcps+0x1ec>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 800133e:	f107 030f 	add.w	r3, r7, #15
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8001348:	3308      	adds	r3, #8
 800134a:	019b      	lsls	r3, r3, #6
 800134c:	3314      	adds	r3, #20
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fdc4 	bl	8004edc <WIZCHIP_READ>
 8001354:	4603      	mov	r3, r0
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	f107 030f 	add.w	r3, r7, #15
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800136c:	3308      	adds	r3, #8
 800136e:	019b      	lsls	r3, r3, #6
 8001370:	3314      	adds	r3, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fdb2 	bl	8004edc <WIZCHIP_READ>
 8001378:	4603      	mov	r3, r0
 800137a:	b2da      	uxtb	r2, r3
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	705a      	strb	r2, [r3, #1]
 8001382:	f107 030f 	add.w	r3, r7, #15
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800138c:	3308      	adds	r3, #8
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	3316      	adds	r3, #22
 8001392:	4618      	mov	r0, r3
 8001394:	f003 fda2 	bl	8004edc <WIZCHIP_READ>
 8001398:	4603      	mov	r3, r0
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	709a      	strb	r2, [r3, #2]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80013b0:	3308      	adds	r3, #8
 80013b2:	019b      	lsls	r3, r3, #6
 80013b4:	3316      	adds	r3, #22
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fd90 	bl	8004edc <WIZCHIP_READ>
 80013bc:	4603      	mov	r3, r0
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	70da      	strb	r2, [r3, #3]
			destport = getSn_DPORT(sn);
 80013c6:	f107 030f 	add.w	r3, r7, #15
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80013d0:	3308      	adds	r3, #8
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	3312      	adds	r3, #18
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fd80 	bl	8004edc <WIZCHIP_READ>
 80013dc:	4603      	mov	r3, r0
 80013de:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 80013e2:	f107 030f 	add.w	r3, r7, #15
 80013e6:	7819      	ldrb	r1, [r3, #0]
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461c      	mov	r4, r3
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	461d      	mov	r5, r3
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	789b      	ldrb	r3, [r3, #2]
 80013fe:	461a      	mov	r2, r3
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	78db      	ldrb	r3, [r3, #3]
 8001406:	4618      	mov	r0, r3
 8001408:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	9001      	str	r0, [sp, #4]
 8001410:	9200      	str	r2, [sp, #0]
 8001412:	462b      	mov	r3, r5
 8001414:	4622      	mov	r2, r4
 8001416:	48c1      	ldr	r0, [pc, #772]	; (800171c <U2E_tcps+0x4d4>)
 8001418:	f005 fce6 	bl	8006de8 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 800141c:	f107 030f 	add.w	r3, r7, #15
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8001426:	3308      	adds	r3, #8
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	3306      	adds	r3, #6
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd36 	bl	8004ea0 <WIZCHIP_WRITE>
         }

//		if(DMATxStart[sn])
		if(UartTxEnable[sn])
 8001434:	f107 030f 	add.w	r3, r7, #15
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4ab9      	ldr	r2, [pc, #740]	; (8001720 <U2E_tcps+0x4d8>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d06c      	beq.n	800151c <U2E_tcps+0x2d4>
     	{
//			printf("data to read arrived\r\n");
			if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't occur.
 8001442:	f107 030f 	add.w	r3, r7, #15
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fe5b 	bl	8005104 <getSn_RX_RSR>
 800144e:	4603      	mov	r3, r0
 8001450:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
 8001454:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05f      	beq.n	800151c <U2E_tcps+0x2d4>
			{
				if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800145c:	f8b7 381e 	ldrh.w	r3, [r7, #2078]	; 0x81e
 8001460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001464:	d903      	bls.n	800146e <U2E_tcps+0x226>
 8001466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800146a:	f8a7 381e 	strh.w	r3, [r7, #2078]	; 0x81e
				ret = recv(sn, DMATxBuf[sn], size);
 800146e:	f107 030f 	add.w	r3, r7, #15
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	02db      	lsls	r3, r3, #11
 8001476:	4aab      	ldr	r2, [pc, #684]	; (8001724 <U2E_tcps+0x4dc>)
 8001478:	1899      	adds	r1, r3, r2
 800147a:	f8b7 281e 	ldrh.w	r2, [r7, #2078]	; 0x81e
 800147e:	f107 030f 	add.w	r3, r7, #15
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f004 facd 	bl	8005a24 <recv>
 800148a:	f8c7 0818 	str.w	r0, [r7, #2072]	; 0x818
				printf("rcvd bytes: %d\r\n", ret);
 800148e:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 8001492:	48a5      	ldr	r0, [pc, #660]	; (8001728 <U2E_tcps+0x4e0>)
 8001494:	f005 fca8 	bl	8006de8 <iprintf>
//				printf("\r\nrcvd data: \r\n%s\r\n\r\n", DMATxBuf[sn]);

				HAL_UART_Transmit_DMA(gethuart(sn), DMATxBuf[sn], ret);
 8001498:	f107 030f 	add.w	r3, r7, #15
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fea6 	bl	80011f0 <gethuart>
 80014a4:	f107 030f 	add.w	r3, r7, #15
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	02db      	lsls	r3, r3, #11
 80014ac:	4a9d      	ldr	r2, [pc, #628]	; (8001724 <U2E_tcps+0x4dc>)
 80014ae:	4413      	add	r3, r2
 80014b0:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 80014b4:	b292      	uxth	r2, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f002 ff82 	bl	80043c0 <HAL_UART_Transmit_DMA>
				UartTxEnable[sn] = 0;
 80014bc:	f107 030f 	add.w	r3, r7, #15
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	4a97      	ldr	r2, [pc, #604]	; (8001720 <U2E_tcps+0x4d8>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	54d1      	strb	r1, [r2, r3]
//				DMATxStart[sn] = 0;
				_TX_Count[sn] += 1;
 80014c8:	f107 030f 	add.w	r3, r7, #15
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4a97      	ldr	r2, [pc, #604]	; (800172c <U2E_tcps+0x4e4>)
 80014d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014d4:	f107 030f 	add.w	r3, r7, #15
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3201      	adds	r2, #1
 80014dc:	b291      	uxth	r1, r2
 80014de:	4a93      	ldr	r2, [pc, #588]	; (800172c <U2E_tcps+0x4e4>)
 80014e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				totalSentBytes[sn] += ret;
 80014e4:	f107 030f 	add.w	r3, r7, #15
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4a91      	ldr	r2, [pc, #580]	; (8001730 <U2E_tcps+0x4e8>)
 80014ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80014f0:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 80014f4:	f107 030f 	add.w	r3, r7, #15
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	440a      	add	r2, r1
 80014fc:	498c      	ldr	r1, [pc, #560]	; (8001730 <U2E_tcps+0x4e8>)
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				printf("================\r\n");
 8001502:	488c      	ldr	r0, [pc, #560]	; (8001734 <U2E_tcps+0x4ec>)
 8001504:	f005 fcf6 	bl	8006ef4 <puts>
				printf("UART%d HAL_UART_Transmit_DMA sent: %d bytes\r\n", (sn + 1), ret);
 8001508:	f107 030f 	add.w	r3, r7, #15
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8001514:	4619      	mov	r1, r3
 8001516:	4888      	ldr	r0, [pc, #544]	; (8001738 <U2E_tcps+0x4f0>)
 8001518:	f005 fc66 	bl	8006de8 <iprintf>
			}
     	}

		// DMA Rx Data가 있으면 User Buffer로 복사한다.
		if(rcvFlag[sn])
 800151c:	f107 030f 	add.w	r3, r7, #15
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4a86      	ldr	r2, [pc, #536]	; (800173c <U2E_tcps+0x4f4>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 80f5 	beq.w	8001716 <U2E_tcps+0x4ce>
		{
	//		huart = gethuart(ch);
			printf("ch[%d] rcvFlag: %d, %d, %d, %d\r\n", sn, rcvFlag[0], rcvFlag[1], rcvFlag[2], rcvFlag[3]);
 800152c:	f107 030f 	add.w	r3, r7, #15
 8001530:	7819      	ldrb	r1, [r3, #0]
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <U2E_tcps+0x4f4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	4b80      	ldr	r3, [pc, #512]	; (800173c <U2E_tcps+0x4f4>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	461c      	mov	r4, r3
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <U2E_tcps+0x4f4>)
 8001540:	789b      	ldrb	r3, [r3, #2]
 8001542:	461a      	mov	r2, r3
 8001544:	4b7d      	ldr	r3, [pc, #500]	; (800173c <U2E_tcps+0x4f4>)
 8001546:	78db      	ldrb	r3, [r3, #3]
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	4623      	mov	r3, r4
 800154e:	4602      	mov	r2, r0
 8001550:	487b      	ldr	r0, [pc, #492]	; (8001740 <U2E_tcps+0x4f8>)
 8001552:	f005 fc49 	bl	8006de8 <iprintf>
			rcvFlag[sn] = 0;
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4a77      	ldr	r2, [pc, #476]	; (800173c <U2E_tcps+0x4f4>)
 800155e:	2100      	movs	r1, #0
 8001560:	54d1      	strb	r1, [r2, r3]
			printf("ch[%d] rcvFlag: %d, %d, %d, %d\r\n", sn, rcvFlag[0], rcvFlag[1], rcvFlag[2], rcvFlag[3]);
 8001562:	f107 030f 	add.w	r3, r7, #15
 8001566:	7819      	ldrb	r1, [r3, #0]
 8001568:	4b74      	ldr	r3, [pc, #464]	; (800173c <U2E_tcps+0x4f4>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <U2E_tcps+0x4f4>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	461c      	mov	r4, r3
 8001574:	4b71      	ldr	r3, [pc, #452]	; (800173c <U2E_tcps+0x4f4>)
 8001576:	789b      	ldrb	r3, [r3, #2]
 8001578:	461a      	mov	r2, r3
 800157a:	4b70      	ldr	r3, [pc, #448]	; (800173c <U2E_tcps+0x4f4>)
 800157c:	78db      	ldrb	r3, [r3, #3]
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	9200      	str	r2, [sp, #0]
 8001582:	4623      	mov	r3, r4
 8001584:	4602      	mov	r2, r0
 8001586:	486e      	ldr	r0, [pc, #440]	; (8001740 <U2E_tcps+0x4f8>)
 8001588:	f005 fc2e 	bl	8006de8 <iprintf>

			UART_Data_Process(gethuart(sn));
 800158c:	f107 030f 	add.w	r3, r7, #15
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe2c 	bl	80011f0 <gethuart>
 8001598:	4603      	mov	r3, r0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb94 	bl	8000cc8 <UART_Data_Process>
			if(rcvdLen[sn] > 0)
 80015a0:	f107 030f 	add.w	r3, r7, #15
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4a67      	ldr	r2, [pc, #412]	; (8001744 <U2E_tcps+0x4fc>)
 80015a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d018      	beq.n	80015e2 <U2E_tcps+0x39a>
			{
//				printf("\r\nRxBuf[%d] rcvdLen: %d \r\n%s\r\n", sn, rcvdLen[sn], RxBuf[sn]);
				ret = send(sn, RxBuf[sn], rcvdLen[sn]);
 80015b0:	f107 030f 	add.w	r3, r7, #15
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	02db      	lsls	r3, r3, #11
 80015b8:	4a63      	ldr	r2, [pc, #396]	; (8001748 <U2E_tcps+0x500>)
 80015ba:	1899      	adds	r1, r3, r2
 80015bc:	f107 030f 	add.w	r3, r7, #15
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4a60      	ldr	r2, [pc, #384]	; (8001744 <U2E_tcps+0x4fc>)
 80015c4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015c8:	f107 030f 	add.w	r3, r7, #15
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 f91a 	bl	8005808 <send>
 80015d4:	f8c7 0818 	str.w	r0, [r7, #2072]	; 0x818
				printf("sent bytes: %d\r\n", ret);
 80015d8:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 80015dc:	485b      	ldr	r0, [pc, #364]	; (800174c <U2E_tcps+0x504>)
 80015de:	f005 fc03 	bl	8006de8 <iprintf>
			}
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 80015e2:	f107 030f 	add.w	r3, r7, #15
 80015e6:	7819      	ldrb	r1, [r3, #0]
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4a4f      	ldr	r2, [pc, #316]	; (800172c <U2E_tcps+0x4e4>)
 80015f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 80015f4:	469c      	mov	ip, r3
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 80015f6:	f107 030f 	add.w	r3, r7, #15
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4a54      	ldr	r2, [pc, #336]	; (8001750 <U2E_tcps+0x508>)
 80015fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 8001602:	469e      	mov	lr, r3
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 8001604:	f107 030f 	add.w	r3, r7, #15
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4a52      	ldr	r2, [pc, #328]	; (8001754 <U2E_tcps+0x50c>)
 800160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 8001610:	461c      	mov	r4, r3
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 8001612:	f107 030f 	add.w	r3, r7, #15
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <U2E_tcps+0x510>)
 800161a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 800161e:	461d      	mov	r5, r3
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 8001620:	f107 030f 	add.w	r3, r7, #15
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4a4d      	ldr	r2, [pc, #308]	; (800175c <U2E_tcps+0x514>)
 8001628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 800162c:	461e      	mov	r6, r3
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 800162e:	f107 030f 	add.w	r3, r7, #15
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4a4a      	ldr	r2, [pc, #296]	; (8001760 <U2E_tcps+0x518>)
 8001636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 800163a:	60bb      	str	r3, [r7, #8]
					sn, _TX_Count[sn], _HT_Count[sn], _TC_Count[sn], _IDLE_Count[sn], rdPtr[sn], wrPtr[sn], rcvdLen[sn], totalSentBytes[sn], totalRcvdBytes[sn]);
 800163c:	f107 030f 	add.w	r3, r7, #15
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <U2E_tcps+0x4fc>)
 8001644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
			printf("CH[%d] _TX_Count: %d, _HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f107 030f 	add.w	r3, r7, #15
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4a37      	ldr	r2, [pc, #220]	; (8001730 <U2E_tcps+0x4e8>)
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	f107 020f 	add.w	r2, r7, #15
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	4841      	ldr	r0, [pc, #260]	; (8001764 <U2E_tcps+0x51c>)
 800165e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8001662:	9206      	str	r2, [sp, #24]
 8001664:	9305      	str	r3, [sp, #20]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	9204      	str	r2, [sp, #16]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	9602      	str	r6, [sp, #8]
 8001670:	9501      	str	r5, [sp, #4]
 8001672:	9400      	str	r4, [sp, #0]
 8001674:	4673      	mov	r3, lr
 8001676:	4662      	mov	r2, ip
 8001678:	483b      	ldr	r0, [pc, #236]	; (8001768 <U2E_tcps+0x520>)
 800167a:	f005 fbb5 	bl	8006de8 <iprintf>
		}

         break;
 800167e:	e04a      	b.n	8001716 <U2E_tcps+0x4ce>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8001680:	f107 030f 	add.w	r3, r7, #15
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f844 	bl	8005714 <disconnect>
 800168c:	4603      	mov	r3, r0
 800168e:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 8001692:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001696:	2b01      	cmp	r3, #1
 8001698:	d002      	beq.n	80016a0 <U2E_tcps+0x458>
 800169a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800169e:	e06d      	b.n	800177c <U2E_tcps+0x534>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 80016a0:	f107 030f 	add.w	r3, r7, #15
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4830      	ldr	r0, [pc, #192]	; (800176c <U2E_tcps+0x524>)
 80016aa:	f005 fb9d 	bl	8006de8 <iprintf>
#endif
         break;
 80016ae:	e064      	b.n	800177a <U2E_tcps+0x532>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 80016b0:	f107 030f 	add.w	r3, r7, #15
 80016b4:	7819      	ldrb	r1, [r3, #0]
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	482c      	ldr	r0, [pc, #176]	; (8001770 <U2E_tcps+0x528>)
 80016c0:	f005 fb92 	bl	8006de8 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 80016c4:	f107 030f 	add.w	r3, r7, #15
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f003 ffc4 	bl	8005658 <listen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 80016d6:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d04a      	beq.n	8001774 <U2E_tcps+0x52c>
 80016de:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80016e2:	e04b      	b.n	800177c <U2E_tcps+0x534>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	f107 030f 	add.w	r3, r7, #15
 80016ee:	7818      	ldrb	r0, [r3, #0]
 80016f0:	2300      	movs	r3, #0
 80016f2:	2101      	movs	r1, #1
 80016f4:	f003 fdb4 	bl	8005260 <socket>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 80016fe:	f107 030f 	add.w	r3, r7, #15
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8001708:	429a      	cmp	r2, r3
 800170a:	d035      	beq.n	8001778 <U2E_tcps+0x530>
 800170c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001710:	e034      	b.n	800177c <U2E_tcps+0x534>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 8001712:	bf00      	nop
 8001714:	e031      	b.n	800177a <U2E_tcps+0x532>
         break;
 8001716:	bf00      	nop
 8001718:	e02f      	b.n	800177a <U2E_tcps+0x532>
 800171a:	bf00      	nop
 800171c:	08007f24 	.word	0x08007f24
 8001720:	20000028 	.word	0x20000028
 8001724:	200000f0 	.word	0x200000f0
 8001728:	08007f48 	.word	0x08007f48
 800172c:	200060f4 	.word	0x200060f4
 8001730:	20006114 	.word	0x20006114
 8001734:	08007e14 	.word	0x08007e14
 8001738:	08007e28 	.word	0x08007e28
 800173c:	2000614c 	.word	0x2000614c
 8001740:	08007e58 	.word	0x08007e58
 8001744:	20006144 	.word	0x20006144
 8001748:	200040f0 	.word	0x200040f0
 800174c:	08007f5c 	.word	0x08007f5c
 8001750:	200060fc 	.word	0x200060fc
 8001754:	20006104 	.word	0x20006104
 8001758:	2000610c 	.word	0x2000610c
 800175c:	2000613c 	.word	0x2000613c
 8001760:	20006134 	.word	0x20006134
 8001764:	20006124 	.word	0x20006124
 8001768:	08007e90 	.word	0x08007e90
 800176c:	08007f70 	.word	0x08007f70
 8001770:	08007f84 	.word	0x08007f84
         break;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <U2E_tcps+0x532>
         break;
 8001778:	bf00      	nop
   }
   return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8001782:	46bd      	mov	sp, r7
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001786:	bf00      	nop

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_MspInit+0x5c>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6193      	str	r3, [r2, #24]
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_MspInit+0x5c>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x5c>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61d3      	str	r3, [r2, #28]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x5c>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_MspInit+0x60>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_MspInit+0x60>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40010000 	.word	0x40010000

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d113      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_TIM_Base_MspInit+0x44>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <HAL_TIM_Base_MspInit+0x44>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_TIM_Base_MspInit+0x44>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	201c      	movs	r0, #28
 8001828:	f000 fe5f 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800182c:	201c      	movs	r0, #28
 800182e:	f000 fe78 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b092      	sub	sp, #72	; 0x48
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6b      	ldr	r2, [pc, #428]	; (8001a08 <HAL_UART_MspInit+0x1c8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	f040 8088 	bne.w	8001972 <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6193      	str	r3, [r2, #24]
 8001886:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
 8001890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a4:	4619      	mov	r1, r3
 80018a6:	485a      	ldr	r0, [pc, #360]	; (8001a10 <HAL_UART_MspInit+0x1d0>)
 80018a8:	f001 fa9e 	bl	8002de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018be:	4619      	mov	r1, r3
 80018c0:	4853      	ldr	r0, [pc, #332]	; (8001a10 <HAL_UART_MspInit+0x1d0>)
 80018c2:	f001 fa91 	bl	8002de8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80018c6:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018c8:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_UART_MspInit+0x1d8>)
 80018ca:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018cc:	4b51      	ldr	r3, [pc, #324]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018ce:	2210      	movs	r2, #16
 80018d0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d2:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018d8:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018de:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e4:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80018ea:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018f0:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80018f6:	4847      	ldr	r0, [pc, #284]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 80018f8:	f000 fe2e 	bl	8002558 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001902:	f7ff ff41 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
 800190c:	4a41      	ldr	r2, [pc, #260]	; (8001a14 <HAL_UART_MspInit+0x1d4>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8001912:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001914:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <HAL_UART_MspInit+0x1e0>)
 8001916:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001938:	2220      	movs	r2, #32
 800193a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 800193e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001942:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001944:	4835      	ldr	r0, [pc, #212]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001946:	f000 fe07 	bl	8002558 <HAL_DMA_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001950:	f7ff ff1a 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 8001958:	635a      	str	r2, [r3, #52]	; 0x34
 800195a:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <HAL_UART_MspInit+0x1dc>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2034      	movs	r0, #52	; 0x34
 8001966:	f000 fdc0 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800196a:	2034      	movs	r0, #52	; 0x34
 800196c:	f000 fdd9 	bl	8002522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001970:	e219      	b.n	8001da6 <HAL_UART_MspInit+0x566>
  else if(huart->Instance==UART5)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <HAL_UART_MspInit+0x1e4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d157      	bne.n	8001a2c <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART5_CLK_ENABLE();
 800197c:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 80019b2:	f043 0320 	orr.w	r3, r3, #32
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_UART_MspInit+0x1cc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019d6:	4619      	mov	r1, r3
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <HAL_UART_MspInit+0x1d0>)
 80019da:	f001 fa05 	bl	8002de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019de:	2304      	movs	r3, #4
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <HAL_UART_MspInit+0x1e8>)
 80019f2:	f001 f9f9 	bl	8002de8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2035      	movs	r0, #53	; 0x35
 80019fc:	f000 fd75 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001a00:	2035      	movs	r0, #53	; 0x35
 8001a02:	f000 fd8e 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001a06:	e1ce      	b.n	8001da6 <HAL_UART_MspInit+0x566>
 8001a08:	40004c00 	.word	0x40004c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40011000 	.word	0x40011000
 8001a14:	20007630 	.word	0x20007630
 8001a18:	40020458 	.word	0x40020458
 8001a1c:	2000618c 	.word	0x2000618c
 8001a20:	40020430 	.word	0x40020430
 8001a24:	40005000 	.word	0x40005000
 8001a28:	40011400 	.word	0x40011400
  else if(huart->Instance==USART1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_UART_MspInit+0x41c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	f040 8087 	bne.w	8001b46 <HAL_UART_MspInit+0x306>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a38:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4a88      	ldr	r2, [pc, #544]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a42:	6193      	str	r3, [r2, #24]
 8001a44:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a82      	ldr	r2, [pc, #520]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4879      	ldr	r0, [pc, #484]	; (8001c64 <HAL_UART_MspInit+0x424>)
 8001a7e:	f001 f9b3 	bl	8002de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a94:	4619      	mov	r1, r3
 8001a96:	4873      	ldr	r0, [pc, #460]	; (8001c64 <HAL_UART_MspInit+0x424>)
 8001a98:	f001 f9a6 	bl	8002de8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001a9c:	4b72      	ldr	r3, [pc, #456]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001a9e:	4a73      	ldr	r2, [pc, #460]	; (8001c6c <HAL_UART_MspInit+0x42c>)
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa2:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa8:	4b6f      	ldr	r3, [pc, #444]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b6c      	ldr	r3, [pc, #432]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ac0:	4b69      	ldr	r3, [pc, #420]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001acc:	4866      	ldr	r0, [pc, #408]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ace:	f000 fd43 	bl	8002558 <HAL_DMA_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8001ad8:	f7ff fe56 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a62      	ldr	r2, [pc, #392]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae2:	4a61      	ldr	r2, [pc, #388]	; (8001c68 <HAL_UART_MspInit+0x428>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001ae8:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001aea:	4a62      	ldr	r2, [pc, #392]	; (8001c74 <HAL_UART_MspInit+0x434>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b00:	4b5b      	ldr	r3, [pc, #364]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b06:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b0c:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b0e:	2220      	movs	r2, #32
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b12:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b18:	4855      	ldr	r0, [pc, #340]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b1a:	f000 fd1d 	bl	8002558 <HAL_DMA_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0x2e8>
      Error_Handler();
 8001b24:	f7ff fe30 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a51      	ldr	r2, [pc, #324]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2e:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_UART_MspInit+0x430>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2025      	movs	r0, #37	; 0x25
 8001b3a:	f000 fcd6 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b3e:	2025      	movs	r0, #37	; 0x25
 8001b40:	f000 fcef 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001b44:	e12f      	b.n	8001da6 <HAL_UART_MspInit+0x566>
  else if(huart->Instance==USART2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_UART_MspInit+0x438>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	f040 809d 	bne.w	8001c8c <HAL_UART_MspInit+0x44c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	4a42      	ldr	r2, [pc, #264]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	61d3      	str	r3, [r2, #28]
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b3a      	ldr	r3, [pc, #232]	; (8001c60 <HAL_UART_MspInit+0x420>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b82:	2304      	movs	r3, #4
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b92:	4619      	mov	r1, r3
 8001b94:	4833      	ldr	r0, [pc, #204]	; (8001c64 <HAL_UART_MspInit+0x424>)
 8001b96:	f001 f927 	bl	8002de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001baa:	4619      	mov	r1, r3
 8001bac:	482d      	ldr	r0, [pc, #180]	; (8001c64 <HAL_UART_MspInit+0x424>)
 8001bae:	f001 f91b 	bl	8002de8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_UART_MspInit+0x440>)
 8001bb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb8:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bba:	2210      	movs	r2, #16
 8001bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bca:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001be2:	4826      	ldr	r0, [pc, #152]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001be4:	f000 fcb8 	bl	8002558 <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0x3b2>
      Error_Handler();
 8001bee:	f7ff fdcb 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf8:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <HAL_UART_MspInit+0x43c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c00:	4a21      	ldr	r2, [pc, #132]	; (8001c88 <HAL_UART_MspInit+0x448>)
 8001c02:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c22:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c24:	2220      	movs	r2, #32
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c2e:	4815      	ldr	r0, [pc, #84]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c30:	f000 fc92 	bl	8002558 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_MspInit+0x3fe>
      Error_Handler();
 8001c3a:	f7ff fda5 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34
 8001c44:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <HAL_UART_MspInit+0x444>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2026      	movs	r0, #38	; 0x26
 8001c50:	f000 fc4b 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c54:	2026      	movs	r0, #38	; 0x26
 8001c56:	f000 fc64 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001c5a:	e0a4      	b.n	8001da6 <HAL_UART_MspInit+0x566>
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	20007414 	.word	0x20007414
 8001c6c:	40020044 	.word	0x40020044
 8001c70:	20007498 	.word	0x20007498
 8001c74:	40020058 	.word	0x40020058
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	200074dc 	.word	0x200074dc
 8001c80:	40020080 	.word	0x40020080
 8001c84:	200061d0 	.word	0x200061d0
 8001c88:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a47      	ldr	r2, [pc, #284]	; (8001db0 <HAL_UART_MspInit+0x570>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	f040 8087 	bne.w	8001da6 <HAL_UART_MspInit+0x566>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a45      	ldr	r2, [pc, #276]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca2:	61d3      	str	r3, [r2, #28]
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a3f      	ldr	r2, [pc, #252]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b3d      	ldr	r3, [pc, #244]	; (8001db4 <HAL_UART_MspInit+0x574>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4836      	ldr	r0, [pc, #216]	; (8001db8 <HAL_UART_MspInit+0x578>)
 8001cde:	f001 f883 	bl	8002de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4830      	ldr	r0, [pc, #192]	; (8001db8 <HAL_UART_MspInit+0x578>)
 8001cf8:	f001 f876 	bl	8002de8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001cfc:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001cfe:	4a30      	ldr	r2, [pc, #192]	; (8001dc0 <HAL_UART_MspInit+0x580>)
 8001d00:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d04:	2210      	movs	r2, #16
 8001d06:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d20:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d2c:	4823      	ldr	r0, [pc, #140]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d2e:	f000 fc13 	bl	8002558 <HAL_DMA_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0x4fc>
      Error_Handler();
 8001d38:	f7ff fd26 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_UART_MspInit+0x57c>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_UART_MspInit+0x588>)
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d6e:	2220      	movs	r2, #32
 8001d70:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d78:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001d7a:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d7c:	f000 fbec 	bl	8002558 <HAL_DMA_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_UART_MspInit+0x54a>
      Error_Handler();
 8001d86:	f7ff fcff 	bl	8001788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_UART_MspInit+0x584>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2027      	movs	r0, #39	; 0x27
 8001d9c:	f000 fba5 	bl	80024ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001da0:	2027      	movs	r0, #39	; 0x27
 8001da2:	f000 fbbe 	bl	8002522 <HAL_NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3748      	adds	r7, #72	; 0x48
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40004800 	.word	0x40004800
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	20006bbc 	.word	0x20006bbc
 8001dc0:	4002001c 	.word	0x4002001c
 8001dc4:	20006214 	.word	0x20006214
 8001dc8:	40020030 	.word	0x40020030

08001dcc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_FSMC_MspInit+0xac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d143      	bne.n	8001e70 <HAL_FSMC_MspInit+0xa4>
    return;
  }
  FSMC_Initialized = 1;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_FSMC_MspInit+0xac>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_FSMC_MspInit+0xb0>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4a22      	ldr	r2, [pc, #136]	; (8001e7c <HAL_FSMC_MspInit+0xb0>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6153      	str	r3, [r2, #20]
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_FSMC_MspInit+0xb0>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001e06:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001e0a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4819      	ldr	r0, [pc, #100]	; (8001e80 <HAL_FSMC_MspInit+0xb4>)
 8001e1c:	f000 ffe4 	bl	8002de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e20:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e24:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	4619      	mov	r1, r3
 8001e34:	4813      	ldr	r0, [pc, #76]	; (8001e84 <HAL_FSMC_MspInit+0xb8>)
 8001e36:	f000 ffd7 	bl	8002de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e3a:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001e3e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <HAL_FSMC_MspInit+0xbc>)
 8001e50:	f000 ffca 	bl	8002de8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4619      	mov	r1, r3
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <HAL_FSMC_MspInit+0xc0>)
 8001e6a:	f000 ffbd 	bl	8002de8 <HAL_GPIO_Init>
 8001e6e:	e000      	b.n	8001e72 <HAL_FSMC_MspInit+0xa6>
    return;
 8001e70:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20006150 	.word	0x20006150
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40011c00 	.word	0x40011c00
 8001e84:	40011800 	.word	0x40011800
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	40012000 	.word	0x40012000

08001e90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001e98:	f7ff ff98 	bl	8001dcc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <MemManage_Handler+0x4>

08001ebc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <BusFault_Handler+0x4>

08001ec2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 f9e4 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <DMA1_Channel2_IRQHandler+0x10>)
 8001efe:	f000 fd09 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20006bbc 	.word	0x20006bbc

08001f0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <DMA1_Channel3_IRQHandler+0x10>)
 8001f12:	f000 fcff 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20006214 	.word	0x20006214

08001f20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA1_Channel4_IRQHandler+0x10>)
 8001f26:	f000 fcf5 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20007414 	.word	0x20007414

08001f34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <DMA1_Channel5_IRQHandler+0x10>)
 8001f3a:	f000 fceb 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20007498 	.word	0x20007498

08001f48 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <DMA1_Channel6_IRQHandler+0x10>)
 8001f4e:	f000 fce1 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200061d0 	.word	0x200061d0

08001f5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <DMA1_Channel7_IRQHandler+0x10>)
 8001f62:	f000 fcd7 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200074dc 	.word	0x200074dc

08001f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM2_IRQHandler+0x10>)
 8001f76:	f001 fe13 	bl	8003ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200075a4 	.word	0x200075a4

08001f84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <USART1_IRQHandler+0x40>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d10d      	bne.n	8001fb4 <USART1_IRQHandler+0x30>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <USART1_IRQHandler+0x40>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <USART1_IRQHandler+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
	  UART_IDLECallback(&huart1);
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <USART1_IRQHandler+0x40>)
 8001fb0:	f7ff f824 	bl	8000ffc <UART_IDLECallback>
  }

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <USART1_IRQHandler+0x40>)
 8001fb6:	f002 faef 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20007520 	.word	0x20007520

08001fc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) != RESET)
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <USART2_IRQHandler+0x40>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d10d      	bne.n	8001ff8 <USART2_IRQHandler+0x30>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <USART2_IRQHandler+0x40>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <USART2_IRQHandler+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
	  UART_IDLECallback(&huart2);
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <USART2_IRQHandler+0x40>)
 8001ff4:	f7ff f802 	bl	8000ffc <UART_IDLECallback>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <USART2_IRQHandler+0x40>)
 8001ffa:	f002 facd 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200075ec 	.word	0x200075ec

0800200c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) != RESET)
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <USART3_IRQHandler+0x40>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b10      	cmp	r3, #16
 800201e:	d10d      	bne.n	800203c <USART3_IRQHandler+0x30>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <USART3_IRQHandler+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <USART3_IRQHandler+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
	  UART_IDLECallback(&huart3);
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <USART3_IRQHandler+0x40>)
 8002038:	f7fe ffe0 	bl	8000ffc <UART_IDLECallback>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <USART3_IRQHandler+0x40>)
 800203e:	f002 faab 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20006258 	.word	0x20006258

08002050 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart4, UART_FLAG_IDLE) != RESET)
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <UART4_IRQHandler+0x40>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b10      	cmp	r3, #16
 8002062:	d10d      	bne.n	8002080 <UART4_IRQHandler+0x30>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <UART4_IRQHandler+0x40>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	4b07      	ldr	r3, [pc, #28]	; (8002090 <UART4_IRQHandler+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
	  UART_IDLECallback(&huart4);
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <UART4_IRQHandler+0x40>)
 800207c:	f7fe ffbe 	bl	8000ffc <UART_IDLECallback>
  }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002080:	4803      	ldr	r0, [pc, #12]	; (8002090 <UART4_IRQHandler+0x40>)
 8002082:	f002 fa89 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20007564 	.word	0x20007564

08002094 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <UART5_IRQHandler+0x10>)
 800209a:	f002 fa7d 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20007458 	.word	0x20007458

080020a8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA2_Channel3_IRQHandler+0x10>)
 80020ae:	f000 fc31 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000618c 	.word	0x2000618c

080020bc <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA2_Channel4_5_IRQHandler+0x10>)
 80020c2:	f000 fc27 	bl	8002914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20007630 	.word	0x20007630

080020d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	e00a      	b.n	80020f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020e2:	f3af 8000 	nop.w
 80020e6:	4601      	mov	r1, r0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	dbf0      	blt.n	80020e2 <_read+0x12>
	}

return len;
 8002100:	687b      	ldr	r3, [r7, #4]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_close>:
	}
	return len;
}

int _close(int file)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
	return -1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002130:	605a      	str	r2, [r3, #4]
	return 0;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
	return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
	...

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f004 fd3e 	bl	8006c1c <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20010000 	.word	0x20010000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	20006154 	.word	0x20006154
 80021d4:	20007688 	.word	0x20007688

080021d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021e6:	e003      	b.n	80021f0 <LoopCopyDataInit>

080021e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021ee:	3104      	adds	r1, #4

080021f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021f0:	480a      	ldr	r0, [pc, #40]	; (800221c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021f8:	d3f6      	bcc.n	80021e8 <CopyDataInit>
  ldr r2, =_sbss
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021fc:	e002      	b.n	8002204 <LoopFillZerobss>

080021fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002200:	f842 3b04 	str.w	r3, [r2], #4

08002204 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002206:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002208:	d3f9      	bcc.n	80021fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800220a:	f7ff ffe5 	bl	80021d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800220e:	f004 fd0b 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002212:	f7fe f87f 	bl	8000314 <main>
  bx lr
 8002216:	4770      	bx	lr
  ldr r3, =_sidata
 8002218:	080080a0 	.word	0x080080a0
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002220:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 8002224:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 8002228:	20007688 	.word	0x20007688

0800222c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800222c:	e7fe      	b.n	800222c <ADC1_2_IRQHandler>
	...

08002230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_Init+0x28>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_Init+0x28>)
 800223a:	f043 0310 	orr.w	r3, r3, #16
 800223e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f947 	bl	80024d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff faa2 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40022000 	.word	0x40022000

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f95f 	bl	800253e <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f000 f927 	bl	80024ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	20000034 	.word	0x20000034
 80022b8:	20000030 	.word	0x20000030

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x1c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_IncTick+0x20>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_IncTick+0x20>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	20000034 	.word	0x20000034
 80022dc:	20007674 	.word	0x20007674

080022e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return uwTick;
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_GetTick+0x10>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	20007674 	.word	0x20007674

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff fff0 	bl	80022e0 <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800230c:	d005      	beq.n	800231a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_Delay+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800231a:	bf00      	nop
 800231c:	f7ff ffe0 	bl	80022e0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d8f7      	bhi.n	800231c <HAL_Delay+0x28>
  {
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000034 	.word	0x20000034

0800233c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002358:	4013      	ands	r3, r2
 800235a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236e:	4a04      	ldr	r2, [pc, #16]	; (8002380 <__NVIC_SetPriorityGrouping+0x44>)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	60d3      	str	r3, [r2, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_GetPriorityGrouping+0x18>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	f003 0307 	and.w	r3, r3, #7
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0b      	blt.n	80023ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4906      	ldr	r1, [pc, #24]	; (80023d4 <__NVIC_EnableIRQ+0x34>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a0:	d301      	bcc.n	80024a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00f      	b.n	80024c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <SysTick_Config+0x40>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ae:	210f      	movs	r1, #15
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f7ff ff90 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <SysTick_Config+0x40>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <SysTick_Config+0x40>)
 80024c0:	2207      	movs	r2, #7
 80024c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	e000e010 	.word	0xe000e010

080024d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff ff2d 	bl	800233c <__NVIC_SetPriorityGrouping>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b086      	sub	sp, #24
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fc:	f7ff ff42 	bl	8002384 <__NVIC_GetPriorityGrouping>
 8002500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff90 	bl	800242c <NVIC_EncodePriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	4611      	mov	r1, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5f 	bl	80023d8 <__NVIC_SetPriority>
}
 800251a:	bf00      	nop
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff35 	bl	80023a0 <__NVIC_EnableIRQ>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffa2 	bl	8002490 <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e059      	b.n	8002622 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_DMA_Init+0xd4>)
 8002576:	429a      	cmp	r2, r3
 8002578:	d80f      	bhi.n	800259a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_DMA_Init+0xd8>)
 8002582:	4413      	add	r3, r2
 8002584:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_DMA_Init+0xdc>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a28      	ldr	r2, [pc, #160]	; (8002638 <HAL_DMA_Init+0xe0>)
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
 8002598:	e00e      	b.n	80025b8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_DMA_Init+0xe4>)
 80025a2:	4413      	add	r3, r2
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_DMA_Init+0xdc>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	009a      	lsls	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_DMA_Init+0xe8>)
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40020407 	.word	0x40020407
 8002630:	bffdfff8 	.word	0xbffdfff8
 8002634:	cccccccd 	.word	0xcccccccd
 8002638:	40020000 	.word	0x40020000
 800263c:	bffdfbf8 	.word	0xbffdfbf8
 8002640:	40020400 	.word	0x40020400

08002644 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Start_IT+0x20>
 8002660:	2302      	movs	r3, #2
 8002662:	e04a      	b.n	80026fa <HAL_DMA_Start_IT+0xb6>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002672:	2b01      	cmp	r3, #1
 8002674:	d13a      	bne.n	80026ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fb76 	bl	8002d8c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 020e 	orr.w	r2, r2, #14
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e00f      	b.n	80026da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0204 	bic.w	r2, r2, #4
 80026c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 020a 	orr.w	r2, r2, #10
 80026d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	e005      	b.n	80026f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002716:	2b02      	cmp	r3, #2
 8002718:	d005      	beq.n	8002726 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e0d6      	b.n	80028d4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 020e 	bic.w	r2, r2, #14
 8002734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_DMA_Abort_IT+0x1dc>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d958      	bls.n	8002804 <HAL_DMA_Abort_IT+0x100>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_DMA_Abort_IT+0x1e0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d04f      	beq.n	80027fc <HAL_DMA_Abort_IT+0xf8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_DMA_Abort_IT+0x1e4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d048      	beq.n	80027f8 <HAL_DMA_Abort_IT+0xf4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a60      	ldr	r2, [pc, #384]	; (80028ec <HAL_DMA_Abort_IT+0x1e8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d040      	beq.n	80027f2 <HAL_DMA_Abort_IT+0xee>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a5e      	ldr	r2, [pc, #376]	; (80028f0 <HAL_DMA_Abort_IT+0x1ec>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d038      	beq.n	80027ec <HAL_DMA_Abort_IT+0xe8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <HAL_DMA_Abort_IT+0x1f0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d030      	beq.n	80027e6 <HAL_DMA_Abort_IT+0xe2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5b      	ldr	r2, [pc, #364]	; (80028f8 <HAL_DMA_Abort_IT+0x1f4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d028      	beq.n	80027e0 <HAL_DMA_Abort_IT+0xdc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a53      	ldr	r2, [pc, #332]	; (80028e0 <HAL_DMA_Abort_IT+0x1dc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d020      	beq.n	80027da <HAL_DMA_Abort_IT+0xd6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a57      	ldr	r2, [pc, #348]	; (80028fc <HAL_DMA_Abort_IT+0x1f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_DMA_Abort_IT+0xd2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a56      	ldr	r2, [pc, #344]	; (8002900 <HAL_DMA_Abort_IT+0x1fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d012      	beq.n	80027d2 <HAL_DMA_Abort_IT+0xce>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a54      	ldr	r2, [pc, #336]	; (8002904 <HAL_DMA_Abort_IT+0x200>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00a      	beq.n	80027cc <HAL_DMA_Abort_IT+0xc8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a53      	ldr	r2, [pc, #332]	; (8002908 <HAL_DMA_Abort_IT+0x204>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <HAL_DMA_Abort_IT+0xc2>
 80027c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c4:	e01b      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ca:	e018      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d0:	e015      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027d2:	2310      	movs	r3, #16
 80027d4:	e013      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e011      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027de:	e00e      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027e4:	e00b      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ea:	e008      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f0:	e005      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f6:	e002      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027f8:	2310      	movs	r3, #16
 80027fa:	e000      	b.n	80027fe <HAL_DMA_Abort_IT+0xfa>
 80027fc:	2301      	movs	r3, #1
 80027fe:	4a43      	ldr	r2, [pc, #268]	; (800290c <HAL_DMA_Abort_IT+0x208>)
 8002800:	6053      	str	r3, [r2, #4]
 8002802:	e057      	b.n	80028b4 <HAL_DMA_Abort_IT+0x1b0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a36      	ldr	r2, [pc, #216]	; (80028e4 <HAL_DMA_Abort_IT+0x1e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04f      	beq.n	80028ae <HAL_DMA_Abort_IT+0x1aa>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <HAL_DMA_Abort_IT+0x1e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d048      	beq.n	80028aa <HAL_DMA_Abort_IT+0x1a6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a33      	ldr	r2, [pc, #204]	; (80028ec <HAL_DMA_Abort_IT+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x1a0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a32      	ldr	r2, [pc, #200]	; (80028f0 <HAL_DMA_Abort_IT+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d038      	beq.n	800289e <HAL_DMA_Abort_IT+0x19a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_DMA_Abort_IT+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d030      	beq.n	8002898 <HAL_DMA_Abort_IT+0x194>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <HAL_DMA_Abort_IT+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d028      	beq.n	8002892 <HAL_DMA_Abort_IT+0x18e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a26      	ldr	r2, [pc, #152]	; (80028e0 <HAL_DMA_Abort_IT+0x1dc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d020      	beq.n	800288c <HAL_DMA_Abort_IT+0x188>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <HAL_DMA_Abort_IT+0x1f8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d019      	beq.n	8002888 <HAL_DMA_Abort_IT+0x184>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a29      	ldr	r2, [pc, #164]	; (8002900 <HAL_DMA_Abort_IT+0x1fc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d012      	beq.n	8002884 <HAL_DMA_Abort_IT+0x180>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_DMA_Abort_IT+0x200>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00a      	beq.n	800287e <HAL_DMA_Abort_IT+0x17a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_DMA_Abort_IT+0x204>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d102      	bne.n	8002878 <HAL_DMA_Abort_IT+0x174>
 8002872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002876:	e01b      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 8002878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287c:	e018      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 800287e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002882:	e015      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 8002884:	2310      	movs	r3, #16
 8002886:	e013      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 8002888:	2301      	movs	r3, #1
 800288a:	e011      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 800288c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002890:	e00e      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 8002892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002896:	e00b      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 8002898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800289c:	e008      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	e005      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 80028a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a8:	e002      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 80028aa:	2310      	movs	r3, #16
 80028ac:	e000      	b.n	80028b0 <HAL_DMA_Abort_IT+0x1ac>
 80028ae:	2301      	movs	r3, #1
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_DMA_Abort_IT+0x20c>)
 80028b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
    } 
  }
  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40020080 	.word	0x40020080
 80028e4:	40020008 	.word	0x40020008
 80028e8:	4002001c 	.word	0x4002001c
 80028ec:	40020030 	.word	0x40020030
 80028f0:	40020044 	.word	0x40020044
 80028f4:	40020058 	.word	0x40020058
 80028f8:	4002006c 	.word	0x4002006c
 80028fc:	40020408 	.word	0x40020408
 8002900:	4002041c 	.word	0x4002041c
 8002904:	40020430 	.word	0x40020430
 8002908:	40020444 	.word	0x40020444
 800290c:	40020400 	.word	0x40020400
 8002910:	40020000 	.word	0x40020000

08002914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80d6 	beq.w	8002aea <HAL_DMA_IRQHandler+0x1d6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80d0 	beq.w	8002aea <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0204 	bic.w	r2, r2, #4
 8002966:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b9b      	ldr	r3, [pc, #620]	; (8002bdc <HAL_DMA_IRQHandler+0x2c8>)
 8002970:	429a      	cmp	r2, r3
 8002972:	d958      	bls.n	8002a26 <HAL_DMA_IRQHandler+0x112>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a99      	ldr	r2, [pc, #612]	; (8002be0 <HAL_DMA_IRQHandler+0x2cc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d04f      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x10a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a98      	ldr	r2, [pc, #608]	; (8002be4 <HAL_DMA_IRQHandler+0x2d0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d048      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x106>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a96      	ldr	r2, [pc, #600]	; (8002be8 <HAL_DMA_IRQHandler+0x2d4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d040      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x100>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a95      	ldr	r2, [pc, #596]	; (8002bec <HAL_DMA_IRQHandler+0x2d8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d038      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xfa>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a93      	ldr	r2, [pc, #588]	; (8002bf0 <HAL_DMA_IRQHandler+0x2dc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d030      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xf4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a92      	ldr	r2, [pc, #584]	; (8002bf4 <HAL_DMA_IRQHandler+0x2e0>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d028      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xee>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a89      	ldr	r2, [pc, #548]	; (8002bdc <HAL_DMA_IRQHandler+0x2c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d020      	beq.n	80029fc <HAL_DMA_IRQHandler+0xe8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a8e      	ldr	r2, [pc, #568]	; (8002bf8 <HAL_DMA_IRQHandler+0x2e4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d019      	beq.n	80029f8 <HAL_DMA_IRQHandler+0xe4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a8c      	ldr	r2, [pc, #560]	; (8002bfc <HAL_DMA_IRQHandler+0x2e8>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d012      	beq.n	80029f4 <HAL_DMA_IRQHandler+0xe0>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a8b      	ldr	r2, [pc, #556]	; (8002c00 <HAL_DMA_IRQHandler+0x2ec>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00a      	beq.n	80029ee <HAL_DMA_IRQHandler+0xda>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a89      	ldr	r2, [pc, #548]	; (8002c04 <HAL_DMA_IRQHandler+0x2f0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d102      	bne.n	80029e8 <HAL_DMA_IRQHandler+0xd4>
 80029e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e6:	e01b      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 80029e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029ec:	e018      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 80029ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f2:	e015      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 80029f4:	2340      	movs	r3, #64	; 0x40
 80029f6:	e013      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e011      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 80029fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a00:	e00e      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a06:	e00b      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a0c:	e008      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a12:	e005      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	e002      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a1a:	2340      	movs	r3, #64	; 0x40
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_IRQHandler+0x10c>
 8002a1e:	2304      	movs	r3, #4
 8002a20:	4a79      	ldr	r2, [pc, #484]	; (8002c08 <HAL_DMA_IRQHandler+0x2f4>)
 8002a22:	6053      	str	r3, [r2, #4]
 8002a24:	e057      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x1c2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <HAL_DMA_IRQHandler+0x2cc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04f      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x1bc>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	; (8002be4 <HAL_DMA_IRQHandler+0x2d0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d048      	beq.n	8002acc <HAL_DMA_IRQHandler+0x1b8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_DMA_IRQHandler+0x2d4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x1b2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_DMA_IRQHandler+0x2d8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d038      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x1ac>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_DMA_IRQHandler+0x2dc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d030      	beq.n	8002aba <HAL_DMA_IRQHandler+0x1a6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_DMA_IRQHandler+0x2e0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d028      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x1a0>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <HAL_DMA_IRQHandler+0x2c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d020      	beq.n	8002aae <HAL_DMA_IRQHandler+0x19a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a61      	ldr	r2, [pc, #388]	; (8002bf8 <HAL_DMA_IRQHandler+0x2e4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x196>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a60      	ldr	r2, [pc, #384]	; (8002bfc <HAL_DMA_IRQHandler+0x2e8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d012      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x192>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5e      	ldr	r2, [pc, #376]	; (8002c00 <HAL_DMA_IRQHandler+0x2ec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00a      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x18c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <HAL_DMA_IRQHandler+0x2f0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <HAL_DMA_IRQHandler+0x186>
 8002a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a98:	e01b      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002a9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a9e:	e018      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa4:	e015      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	e013      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002aaa:	2304      	movs	r3, #4
 8002aac:	e011      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002aae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ab2:	e00e      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002ab4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ab8:	e00b      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002aba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002abe:	e008      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac4:	e005      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aca:	e002      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002acc:	2340      	movs	r3, #64	; 0x40
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x1be>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	4a4e      	ldr	r2, [pc, #312]	; (8002c0c <HAL_DMA_IRQHandler+0x2f8>)
 8002ad4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8136 	beq.w	8002d4c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ae8:	e130      	b.n	8002d4c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2202      	movs	r2, #2
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80f8 	beq.w	8002cec <HAL_DMA_IRQHandler+0x3d8>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80f2 	beq.w	8002cec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020a 	bic.w	r2, r2, #10
 8002b24:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_DMA_IRQHandler+0x2c8>)
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d973      	bls.n	8002c22 <HAL_DMA_IRQHandler+0x30e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a28      	ldr	r2, [pc, #160]	; (8002be0 <HAL_DMA_IRQHandler+0x2cc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d06a      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x306>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <HAL_DMA_IRQHandler+0x2d0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d063      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x302>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a25      	ldr	r2, [pc, #148]	; (8002be8 <HAL_DMA_IRQHandler+0x2d4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d05b      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x2fc>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	; (8002bec <HAL_DMA_IRQHandler+0x2d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d038      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x2c0>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <HAL_DMA_IRQHandler+0x2dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d030      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2ba>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_DMA_IRQHandler+0x2e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d028      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2b4>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_DMA_IRQHandler+0x2c8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d020      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x2ae>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_DMA_IRQHandler+0x2e4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x2aa>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <HAL_DMA_IRQHandler+0x2e8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d012      	beq.n	8002bba <HAL_DMA_IRQHandler+0x2a6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a19      	ldr	r2, [pc, #100]	; (8002c00 <HAL_DMA_IRQHandler+0x2ec>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x2a0>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <HAL_DMA_IRQHandler+0x2f0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d102      	bne.n	8002bae <HAL_DMA_IRQHandler+0x29a>
 8002ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bac:	e036      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb2:	e033      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb8:	e030      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e02e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e02c      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	e029      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bcc:	e026      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd2:	e023      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	e020      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002bda:	bf00      	nop
 8002bdc:	40020080 	.word	0x40020080
 8002be0:	40020008 	.word	0x40020008
 8002be4:	4002001c 	.word	0x4002001c
 8002be8:	40020030 	.word	0x40020030
 8002bec:	40020044 	.word	0x40020044
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	4002006c 	.word	0x4002006c
 8002bf8:	40020408 	.word	0x40020408
 8002bfc:	4002041c 	.word	0x4002041c
 8002c00:	40020430 	.word	0x40020430
 8002c04:	40020444 	.word	0x40020444
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	e002      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002c16:	2320      	movs	r3, #32
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0x308>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <HAL_DMA_IRQHandler+0x444>)
 8002c1e:	6053      	str	r3, [r2, #4]
 8002c20:	e057      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x3be>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4d      	ldr	r2, [pc, #308]	; (8002d5c <HAL_DMA_IRQHandler+0x448>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d04f      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x3b8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_DMA_IRQHandler+0x44c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d048      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x3b4>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <HAL_DMA_IRQHandler+0x450>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d040      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x3ae>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_DMA_IRQHandler+0x454>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d038      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x3a8>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a47      	ldr	r2, [pc, #284]	; (8002d6c <HAL_DMA_IRQHandler+0x458>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d030      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x3a2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_DMA_IRQHandler+0x45c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d028      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x39c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a44      	ldr	r2, [pc, #272]	; (8002d74 <HAL_DMA_IRQHandler+0x460>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d020      	beq.n	8002caa <HAL_DMA_IRQHandler+0x396>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a42      	ldr	r2, [pc, #264]	; (8002d78 <HAL_DMA_IRQHandler+0x464>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x392>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <HAL_DMA_IRQHandler+0x468>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d012      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x38e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3f      	ldr	r2, [pc, #252]	; (8002d80 <HAL_DMA_IRQHandler+0x46c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00a      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x388>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3e      	ldr	r2, [pc, #248]	; (8002d84 <HAL_DMA_IRQHandler+0x470>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x382>
 8002c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c94:	e01b      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c9a:	e018      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca0:	e015      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e013      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e011      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002caa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cae:	e00e      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb4:	e00b      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002cb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cba:	e008      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc0:	e005      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc6:	e002      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e000      	b.n	8002cce <HAL_DMA_IRQHandler+0x3ba>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_DMA_IRQHandler+0x474>)
 8002cd0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d034      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002cea:	e02f      	b.n	8002d4c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d028      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x43a>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d023      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 020e 	bic.w	r2, r2, #14
 8002d14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
    }
  }
  return;
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
}
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	40020008 	.word	0x40020008
 8002d60:	4002001c 	.word	0x4002001c
 8002d64:	40020030 	.word	0x40020030
 8002d68:	40020044 	.word	0x40020044
 8002d6c:	40020058 	.word	0x40020058
 8002d70:	4002006c 	.word	0x4002006c
 8002d74:	40020080 	.word	0x40020080
 8002d78:	40020408 	.word	0x40020408
 8002d7c:	4002041c 	.word	0x4002041c
 8002d80:	40020430 	.word	0x40020430
 8002d84:	40020444 	.word	0x40020444
 8002d88:	40020000 	.word	0x40020000

08002d8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d108      	bne.n	8002dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dca:	e007      	b.n	8002ddc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	e179      	b.n	80030f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8168 	bne.w	80030ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	4aa0      	ldr	r2, [pc, #640]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d05e      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e24:	4a9e      	ldr	r2, [pc, #632]	; (80030a0 <HAL_GPIO_Init+0x2b8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d875      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a9e      	ldr	r2, [pc, #632]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d058      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e30:	4a9c      	ldr	r2, [pc, #624]	; (80030a4 <HAL_GPIO_Init+0x2bc>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d86f      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e36:	4a9c      	ldr	r2, [pc, #624]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d052      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e3c:	4a9a      	ldr	r2, [pc, #616]	; (80030a8 <HAL_GPIO_Init+0x2c0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d869      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e42:	4a9a      	ldr	r2, [pc, #616]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d04c      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e48:	4a98      	ldr	r2, [pc, #608]	; (80030ac <HAL_GPIO_Init+0x2c4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d863      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e4e:	4a98      	ldr	r2, [pc, #608]	; (80030b0 <HAL_GPIO_Init+0x2c8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d046      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
 8002e54:	4a96      	ldr	r2, [pc, #600]	; (80030b0 <HAL_GPIO_Init+0x2c8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d85d      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e5a:	2b12      	cmp	r3, #18
 8002e5c:	d82a      	bhi.n	8002eb4 <HAL_GPIO_Init+0xcc>
 8002e5e:	2b12      	cmp	r3, #18
 8002e60:	d859      	bhi.n	8002f16 <HAL_GPIO_Init+0x12e>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_GPIO_Init+0x80>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002ee3 	.word	0x08002ee3
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	08002ecf 	.word	0x08002ecf
 8002e74:	08002f11 	.word	0x08002f11
 8002e78:	08002f17 	.word	0x08002f17
 8002e7c:	08002f17 	.word	0x08002f17
 8002e80:	08002f17 	.word	0x08002f17
 8002e84:	08002f17 	.word	0x08002f17
 8002e88:	08002f17 	.word	0x08002f17
 8002e8c:	08002f17 	.word	0x08002f17
 8002e90:	08002f17 	.word	0x08002f17
 8002e94:	08002f17 	.word	0x08002f17
 8002e98:	08002f17 	.word	0x08002f17
 8002e9c:	08002f17 	.word	0x08002f17
 8002ea0:	08002f17 	.word	0x08002f17
 8002ea4:	08002f17 	.word	0x08002f17
 8002ea8:	08002f17 	.word	0x08002f17
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ed9 	.word	0x08002ed9
 8002eb4:	4a7f      	ldr	r2, [pc, #508]	; (80030b4 <HAL_GPIO_Init+0x2cc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eba:	e02c      	b.n	8002f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	623b      	str	r3, [r7, #32]
          break;
 8002ec2:	e029      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	623b      	str	r3, [r7, #32]
          break;
 8002ecc:	e024      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	623b      	str	r3, [r7, #32]
          break;
 8002ed6:	e01f      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	330c      	adds	r3, #12
 8002ede:	623b      	str	r3, [r7, #32]
          break;
 8002ee0:	e01a      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eea:	2304      	movs	r3, #4
 8002eec:	623b      	str	r3, [r7, #32]
          break;
 8002eee:	e013      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	611a      	str	r2, [r3, #16]
          break;
 8002f02:	e009      	b.n	8002f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f04:	2308      	movs	r3, #8
 8002f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	615a      	str	r2, [r3, #20]
          break;
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x130>
          break;
 8002f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2bff      	cmp	r3, #255	; 0xff
 8002f1c:	d801      	bhi.n	8002f22 <HAL_GPIO_Init+0x13a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e001      	b.n	8002f26 <HAL_GPIO_Init+0x13e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3304      	adds	r3, #4
 8002f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2bff      	cmp	r3, #255	; 0xff
 8002f2c:	d802      	bhi.n	8002f34 <HAL_GPIO_Init+0x14c>
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0x152>
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	3b08      	subs	r3, #8
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	210f      	movs	r1, #15
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa01 f303 	lsl.w	r3, r1, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80c1 	beq.w	80030ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_GPIO_Init+0x2d0>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f80:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <HAL_GPIO_Init+0x2d4>)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_GPIO_Init+0x2d8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d01f      	beq.n	8002fec <HAL_GPIO_Init+0x204>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_GPIO_Init+0x2dc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d019      	beq.n	8002fe8 <HAL_GPIO_Init+0x200>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a44      	ldr	r2, [pc, #272]	; (80030c8 <HAL_GPIO_Init+0x2e0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_GPIO_Init+0x1fc>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_GPIO_Init+0x2e4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00d      	beq.n	8002fe0 <HAL_GPIO_Init+0x1f8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a42      	ldr	r2, [pc, #264]	; (80030d0 <HAL_GPIO_Init+0x2e8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <HAL_GPIO_Init+0x1f4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <HAL_GPIO_Init+0x2ec>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_GPIO_Init+0x1f0>
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	e00a      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fd8:	2306      	movs	r3, #6
 8002fda:	e008      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fdc:	2304      	movs	r3, #4
 8002fde:	e006      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e004      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e002      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_GPIO_Init+0x206>
 8002fec:	2300      	movs	r3, #0
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	f002 0203 	and.w	r2, r2, #3
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	4093      	lsls	r3, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ffe:	492f      	ldr	r1, [pc, #188]	; (80030bc <HAL_GPIO_Init+0x2d4>)
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	089b      	lsrs	r3, r3, #2
 8003004:	3302      	adds	r3, #2
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003018:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	492e      	ldr	r1, [pc, #184]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	43db      	mvns	r3, r3
 800302e:	492a      	ldr	r1, [pc, #168]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003030:	4013      	ands	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003040:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4924      	ldr	r1, [pc, #144]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	4920      	ldr	r1, [pc, #128]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003058:	4013      	ands	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	491a      	ldr	r1, [pc, #104]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003080:	4013      	ands	r3, r2
 8003082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d025      	beq.n	80030dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4910      	ldr	r1, [pc, #64]	; (80030d8 <HAL_GPIO_Init+0x2f0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
 800309c:	e025      	b.n	80030ea <HAL_GPIO_Init+0x302>
 800309e:	bf00      	nop
 80030a0:	10320000 	.word	0x10320000
 80030a4:	10310000 	.word	0x10310000
 80030a8:	10220000 	.word	0x10220000
 80030ac:	10210000 	.word	0x10210000
 80030b0:	10120000 	.word	0x10120000
 80030b4:	10110000 	.word	0x10110000
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40010800 	.word	0x40010800
 80030c4:	40010c00 	.word	0x40010c00
 80030c8:	40011000 	.word	0x40011000
 80030cc:	40011400 	.word	0x40011400
 80030d0:	40011800 	.word	0x40011800
 80030d4:	40011c00 	.word	0x40011c00
 80030d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_GPIO_Init+0x324>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4909      	ldr	r1, [pc, #36]	; (800310c <HAL_GPIO_Init+0x324>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	3301      	adds	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f47f ae7e 	bne.w	8002dfc <HAL_GPIO_Init+0x14>
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	372c      	adds	r7, #44	; 0x2c
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
 800311c:	4613      	mov	r3, r2
 800311e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003120:	787b      	ldrb	r3, [r7, #1]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800312c:	e003      	b.n	8003136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	611a      	str	r2, [r3, #16]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4013      	ands	r3, r2
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43d9      	mvns	r1, r3
 800315e:	887b      	ldrh	r3, [r7, #2]
 8003160:	400b      	ands	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	611a      	str	r2, [r3, #16]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
	...

08003174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e26c      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8087 	beq.w	80032a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003194:	4b92      	ldr	r3, [pc, #584]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 030c 	and.w	r3, r3, #12
 800319c:	2b04      	cmp	r3, #4
 800319e:	d00c      	beq.n	80031ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a0:	4b8f      	ldr	r3, [pc, #572]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d112      	bne.n	80031d2 <HAL_RCC_OscConfig+0x5e>
 80031ac:	4b8c      	ldr	r3, [pc, #560]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d10b      	bne.n	80031d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ba:	4b89      	ldr	r3, [pc, #548]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x12c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d168      	bne.n	80032a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e246      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x76>
 80031dc:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a7f      	ldr	r2, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	e02e      	b.n	8003248 <HAL_RCC_OscConfig+0xd4>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x98>
 80031f2:	4b7b      	ldr	r3, [pc, #492]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7a      	ldr	r2, [pc, #488]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b78      	ldr	r3, [pc, #480]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a77      	ldr	r2, [pc, #476]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e01d      	b.n	8003248 <HAL_RCC_OscConfig+0xd4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0xbc>
 8003216:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a71      	ldr	r2, [pc, #452]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a6e      	ldr	r2, [pc, #440]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e00b      	b.n	8003248 <HAL_RCC_OscConfig+0xd4>
 8003230:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a6a      	ldr	r2, [pc, #424]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b68      	ldr	r3, [pc, #416]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7ff f846 	bl	80022e0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7ff f842 	bl	80022e0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e1fa      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0xe4>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7ff f832 	bl	80022e0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff f82e 	bl	80022e0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1e6      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x10c>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d063      	beq.n	8003376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032ae:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d11c      	bne.n	8003300 <HAL_RCC_OscConfig+0x18c>
 80032c6:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d116      	bne.n	8003300 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x176>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e1ba      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4939      	ldr	r1, [pc, #228]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	e03a      	b.n	8003376 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe ffe7 	bl	80022e0 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe ffe3 	bl	80022e0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e19b      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4927      	ldr	r1, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]
 8003348:	e015      	b.n	8003376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe ffc6 	bl	80022e0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003358:	f7fe ffc2 	bl	80022e0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e17a      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d03a      	beq.n	80033f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d019      	beq.n	80033be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <HAL_RCC_OscConfig+0x274>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003390:	f7fe ffa6 	bl	80022e0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003398:	f7fe ffa2 	bl	80022e0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e15a      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f000 fad8 	bl	800396c <RCC_Delay>
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_RCC_OscConfig+0x274>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fe ff8c 	bl	80022e0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ca:	e00f      	b.n	80033ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fe ff88 	bl	80022e0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d908      	bls.n	80033ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e140      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	42420000 	.word	0x42420000
 80033e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	4b9e      	ldr	r3, [pc, #632]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e9      	bne.n	80033cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a6 	beq.w	8003552 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340a:	4b97      	ldr	r3, [pc, #604]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b94      	ldr	r3, [pc, #592]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4a93      	ldr	r2, [pc, #588]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003420:	61d3      	str	r3, [r2, #28]
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b8e      	ldr	r3, [pc, #568]	; (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b8b      	ldr	r3, [pc, #556]	; (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a8a      	ldr	r2, [pc, #552]	; (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fe ff49 	bl	80022e0 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fe ff45 	bl	80022e0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b64      	cmp	r3, #100	; 0x64
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e0fd      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_RCC_OscConfig+0x4f8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x312>
 8003478:	4b7b      	ldr	r3, [pc, #492]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a7a      	ldr	r2, [pc, #488]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	e02d      	b.n	80034e2 <HAL_RCC_OscConfig+0x36e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x334>
 800348e:	4b76      	ldr	r3, [pc, #472]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4a75      	ldr	r2, [pc, #468]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6213      	str	r3, [r2, #32]
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	6213      	str	r3, [r2, #32]
 80034a6:	e01c      	b.n	80034e2 <HAL_RCC_OscConfig+0x36e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d10c      	bne.n	80034ca <HAL_RCC_OscConfig+0x356>
 80034b0:	4b6d      	ldr	r3, [pc, #436]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a6c      	ldr	r2, [pc, #432]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	4a69      	ldr	r2, [pc, #420]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6213      	str	r3, [r2, #32]
 80034c8:	e00b      	b.n	80034e2 <HAL_RCC_OscConfig+0x36e>
 80034ca:	4b67      	ldr	r3, [pc, #412]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4a66      	ldr	r2, [pc, #408]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6213      	str	r3, [r2, #32]
 80034d6:	4b64      	ldr	r3, [pc, #400]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4a63      	ldr	r2, [pc, #396]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d015      	beq.n	8003516 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ea:	f7fe fef9 	bl	80022e0 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe fef5 	bl	80022e0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0ab      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	4b57      	ldr	r3, [pc, #348]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ee      	beq.n	80034f2 <HAL_RCC_OscConfig+0x37e>
 8003514:	e014      	b.n	8003540 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003516:	f7fe fee3 	bl	80022e0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351c:	e00a      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe fedf 	bl	80022e0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	f241 3288 	movw	r2, #5000	; 0x1388
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e095      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	4b4c      	ldr	r3, [pc, #304]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1ee      	bne.n	800351e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d105      	bne.n	8003552 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003546:	4b48      	ldr	r3, [pc, #288]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a47      	ldr	r2, [pc, #284]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003550:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8081 	beq.w	800365e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d061      	beq.n	800362c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d146      	bne.n	80035fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003570:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <HAL_RCC_OscConfig+0x4fc>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003576:	f7fe feb3 	bl	80022e0 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357e:	f7fe feaf 	bl	80022e0 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e067      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	4b35      	ldr	r3, [pc, #212]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d108      	bne.n	80035b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035a6:	4b30      	ldr	r3, [pc, #192]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	492d      	ldr	r1, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a19      	ldr	r1, [r3, #32]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	430b      	orrs	r3, r1
 80035ca:	4927      	ldr	r1, [pc, #156]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_OscConfig+0x4fc>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe fe83 	bl	80022e0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fe fe7f 	bl	80022e0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e037      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x46a>
 80035fc:	e02f      	b.n	800365e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <HAL_RCC_OscConfig+0x4fc>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fe6c 	bl	80022e0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe fe68 	bl	80022e0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e020      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x498>
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e013      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	40007000 	.word	0x40007000
 8003670:	42420060 	.word	0x42420060

08003674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0d0      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b67      	ldr	r3, [pc, #412]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 0207 	bic.w	r2, r3, #7
 800369e:	4965      	ldr	r1, [pc, #404]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	4313      	orrs	r3, r2
 8003704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d040      	beq.n	8003794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d115      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	4b41      	ldr	r3, [pc, #260]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e073      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06b      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003752:	4b39      	ldr	r3, [pc, #228]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4936      	ldr	r1, [pc, #216]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003764:	f7fe fdbc 	bl	80022e0 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376a:	e00a      	b.n	8003782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376c:	f7fe fdb8 	bl	80022e0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e053      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 020c 	and.w	r2, r3, #12
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	429a      	cmp	r2, r3
 8003792:	d1eb      	bne.n	800376c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003794:	4b27      	ldr	r3, [pc, #156]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d210      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4922      	ldr	r1, [pc, #136]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1cc>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1d0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fd1a 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40022000 	.word	0x40022000
 8003838:	40021000 	.word	0x40021000
 800383c:	08007fe8 	.word	0x08007fe8
 8003840:	2000002c 	.word	0x2000002c
 8003844:	20000030 	.word	0x20000030

08003848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	b490      	push	{r4, r7}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003850:	1d3c      	adds	r4, r7, #4
 8003852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003854:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003858:	f240 2301 	movw	r3, #513	; 0x201
 800385c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b04      	cmp	r3, #4
 8003880:	d002      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 8003882:	2b08      	cmp	r3, #8
 8003884:	d003      	beq.n	800388e <HAL_RCC_GetSysClockFreq+0x46>
 8003886:	e02d      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388a:	623b      	str	r3, [r7, #32]
      break;
 800388c:	e02d      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	0c9b      	lsrs	r3, r3, #18
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800389a:	4413      	add	r3, r2
 800389c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d013      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c5b      	lsrs	r3, r3, #17
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038ba:	4413      	add	r3, r2
 80038bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	4a0e      	ldr	r2, [pc, #56]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c6:	fb02 f203 	mul.w	r2, r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	e004      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	623b      	str	r3, [r7, #32]
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e6:	623b      	str	r3, [r7, #32]
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	6a3b      	ldr	r3, [r7, #32]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc90      	pop	{r4, r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	08007fb0 	.word	0x08007fb0
 80038fc:	40021000 	.word	0x40021000
 8003900:	007a1200 	.word	0x007a1200
 8003904:	003d0900 	.word	0x003d0900

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800390c:	4b02      	ldr	r3, [pc, #8]	; (8003918 <HAL_RCC_GetHCLKFreq+0x10>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	2000002c 	.word	0x2000002c

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff2 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	08007ff8 	.word	0x08007ff8

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffde 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	0adb      	lsrs	r3, r3, #11
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	08007ff8 	.word	0x08007ff8

0800396c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <RCC_Delay+0x34>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <RCC_Delay+0x38>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0a5b      	lsrs	r3, r3, #9
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003988:	bf00      	nop
  }
  while (Delay --);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	60fa      	str	r2, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f9      	bne.n	8003988 <RCC_Delay+0x1c>
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	2000002c 	.word	0x2000002c
 80039a4:	10624dd3 	.word	0x10624dd3

080039a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_SRAM_Init+0x1c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c2:	d101      	bne.n	80039c8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e038      	b.n	8003a3a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fe fa57 	bl	8001e90 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3308      	adds	r3, #8
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f001 f981 	bl	8004cf4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	f001 f9e3 	bl	8004dc8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6858      	ldr	r0, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	f001 fa0e 	bl	8004e30 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	6892      	ldr	r2, [r2, #8]
 8003a28:	f041 0101 	orr.w	r1, r1, #1
 8003a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e041      	b.n	8003ad8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd fec5 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f000 fa7d 	bl	8003f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e044      	b.n	8003b82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <HAL_TIM_Base_Start_IT+0xac>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x6c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x6c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d00e      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x6c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x6c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIM_Base_Start_IT+0x6c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <HAL_TIM_Base_Start_IT+0xbc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b06      	cmp	r3, #6
 8003b5c:	d010      	beq.n	8003b80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6e:	e007      	b.n	8003b80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40013400 	.word	0x40013400
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00

08003ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0202 	mvn.w	r2, #2
 8003bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f9b1 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f9a4 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f9b3 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0204 	mvn.w	r2, #4
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f987 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f97a 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f989 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0208 	mvn.w	r2, #8
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f95d 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f950 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f95f 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0210 	mvn.w	r2, #16
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f933 	bl	8003f4a <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f926 	bl	8003f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f935 	bl	8003f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0201 	mvn.w	r2, #1
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fc ff96 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	2b80      	cmp	r3, #128	; 0x80
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa9d 	bl	800428a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8f9 	bl	8003f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0220 	mvn.w	r2, #32
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa68 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_TIM_ConfigClockSource+0x18>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e0b3      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x180>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e00:	d03e      	beq.n	8003e80 <HAL_TIM_ConfigClockSource+0xd0>
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	f200 8087 	bhi.w	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	f000 8085 	beq.w	8003f1c <HAL_TIM_ConfigClockSource+0x16c>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d87f      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e18:	2b70      	cmp	r3, #112	; 0x70
 8003e1a:	d01a      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0xa2>
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d87b      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e20:	2b60      	cmp	r3, #96	; 0x60
 8003e22:	d050      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0x116>
 8003e24:	2b60      	cmp	r3, #96	; 0x60
 8003e26:	d877      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e28:	2b50      	cmp	r3, #80	; 0x50
 8003e2a:	d03c      	beq.n	8003ea6 <HAL_TIM_ConfigClockSource+0xf6>
 8003e2c:	2b50      	cmp	r3, #80	; 0x50
 8003e2e:	d873      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d058      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0x136>
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d86f      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e38:	2b30      	cmp	r3, #48	; 0x30
 8003e3a:	d064      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x156>
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d86b      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e40:	2b20      	cmp	r3, #32
 8003e42:	d060      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x156>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d867      	bhi.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05c      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x156>
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d05a      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e50:	e062      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6899      	ldr	r1, [r3, #8]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f000 f97e 	bl	8004162 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
      break;
 8003e7e:	e04e      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f000 f967 	bl	8004162 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea2:	609a      	str	r2, [r3, #8]
      break;
 8003ea4:	e03b      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f000 f8de 	bl	8004074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2150      	movs	r1, #80	; 0x50
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f935 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e02b      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f000 f8fc 	bl	80040d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2160      	movs	r1, #96	; 0x60
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f925 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003ee4:	e01b      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f000 f8be 	bl	8004074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2140      	movs	r1, #64	; 0x40
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f915 	bl	800412e <TIM_ITRx_SetConfig>
      break;
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f000 f90c 	bl	800412e <TIM_ITRx_SetConfig>
        break;
 8003f16:	e002      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f18:	bf00      	nop
 8003f1a:	e000      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003f1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a33      	ldr	r2, [pc, #204]	; (8004060 <TIM_Base_SetConfig+0xe0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a32      	ldr	r2, [pc, #200]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a2f      	ldr	r2, [pc, #188]	; (8004068 <TIM_Base_SetConfig+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a2e      	ldr	r2, [pc, #184]	; (800406c <TIM_Base_SetConfig+0xec>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2d      	ldr	r2, [pc, #180]	; (8004070 <TIM_Base_SetConfig+0xf0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d108      	bne.n	8003fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a22      	ldr	r2, [pc, #136]	; (8004060 <TIM_Base_SetConfig+0xe0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_Base_SetConfig+0x82>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_Base_SetConfig+0x82>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0x82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <TIM_Base_SetConfig+0xe8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0x82>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1d      	ldr	r2, [pc, #116]	; (800406c <TIM_Base_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0x82>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <TIM_Base_SetConfig+0xf0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <TIM_Base_SetConfig+0xe0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_Base_SetConfig+0xc8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a08      	ldr	r2, [pc, #32]	; (8004064 <TIM_Base_SetConfig+0xe4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d103      	bne.n	8004050 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	615a      	str	r2, [r3, #20]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40013400 	.word	0x40013400
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00

08004074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 030a 	bic.w	r3, r3, #10
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 0210 	bic.w	r2, r3, #16
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	031b      	lsls	r3, r3, #12
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800410c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	621a      	str	r2, [r3, #32]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	f043 0307 	orr.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004162:	b480      	push	{r7}
 8004164:	b087      	sub	sp, #28
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	021a      	lsls	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	431a      	orrs	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	4313      	orrs	r3, r2
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e050      	b.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d018      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d013      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d00e      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	; (800426c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d009      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a12      	ldr	r2, [pc, #72]	; (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10c      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	4313      	orrs	r3, r2
 800423e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e03f      	b.n	800432e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fabc 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fc79 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695a      	ldr	r2, [r3, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d130      	bne.n	80043b2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Transmit_IT+0x26>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e029      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit_IT+0x38>
 800436a:	2302      	movs	r3, #2
 800436c:	e022      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	4613      	mov	r3, r2
 80043cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d153      	bne.n	8004482 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_UART_Transmit_DMA+0x26>
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e04c      	b.n	8004484 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_UART_Transmit_DMA+0x38>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e045      	b.n	8004484 <HAL_UART_Transmit_DMA+0xc4>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_UART_Transmit_DMA+0xcc>)
 8004426:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	4a18      	ldr	r2, [pc, #96]	; (8004490 <HAL_UART_Transmit_DMA+0xd0>)
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	4a17      	ldr	r2, [pc, #92]	; (8004494 <HAL_UART_Transmit_DMA+0xd4>)
 8004436:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	2200      	movs	r2, #0
 800443e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6819      	ldr	r1, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	461a      	mov	r2, r3
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	f7fe f8f4 	bl	8002644 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004464:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800447c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	080047f7 	.word	0x080047f7
 8004490:	08004849 	.word	0x08004849
 8004494:	080048e9 	.word	0x080048e9

08004498 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d166      	bne.n	8004580 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_UART_Receive_DMA+0x26>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e05f      	b.n	8004582 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Receive_DMA+0x38>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e058      	b.n	8004582 <HAL_UART_Receive_DMA+0xea>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2222      	movs	r2, #34	; 0x22
 80044ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	4a25      	ldr	r2, [pc, #148]	; (800458c <HAL_UART_Receive_DMA+0xf4>)
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	4a24      	ldr	r2, [pc, #144]	; (8004590 <HAL_UART_Receive_DMA+0xf8>)
 8004500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	4a23      	ldr	r2, [pc, #140]	; (8004594 <HAL_UART_Receive_DMA+0xfc>)
 8004508:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	2200      	movs	r2, #0
 8004510:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004512:	f107 0308 	add.w	r3, r7, #8
 8004516:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3304      	adds	r3, #4
 8004522:	4619      	mov	r1, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	88fb      	ldrh	r3, [r7, #6]
 800452a:	f7fe f88b 	bl	8002644 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800457a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	08004865 	.word	0x08004865
 8004590:	080048cd 	.word	0x080048cd
 8004594:	080048e9 	.word	0x080048e9

08004598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10d      	bne.n	80045ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_UART_IRQHandler+0x52>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa77 	bl	8004ad6 <UART_Receive_IT>
      return;
 80045e8:	e0d0      	b.n	800478c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80b0 	beq.w	8004752 <HAL_UART_IRQHandler+0x1ba>
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_UART_IRQHandler+0x70>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80a5 	beq.w	8004752 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_UART_IRQHandler+0x90>
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_UART_IRQHandler+0xb0>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	f043 0202 	orr.w	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_UART_IRQHandler+0xd0>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00f      	beq.n	8004692 <HAL_UART_IRQHandler+0xfa>
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <HAL_UART_IRQHandler+0xee>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	f043 0208 	orr.w	r2, r3, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d077      	beq.n	800478a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_UART_IRQHandler+0x11c>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fa11 	bl	8004ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <HAL_UART_IRQHandler+0x144>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d031      	beq.n	8004740 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f962 	bl	80049a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d023      	beq.n	8004738 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470c:	4a21      	ldr	r2, [pc, #132]	; (8004794 <HAL_UART_IRQHandler+0x1fc>)
 800470e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fff5 	bl	8002704 <HAL_DMA_Abort_IT>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d016      	beq.n	800474e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472a:	4610      	mov	r0, r2
 800472c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472e:	e00e      	b.n	800474e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f83a 	bl	80047aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004736:	e00a      	b.n	800474e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f836 	bl	80047aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473e:	e006      	b.n	800474e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f832 	bl	80047aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800474c:	e01d      	b.n	800478a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474e:	bf00      	nop
    return;
 8004750:	e01b      	b.n	800478a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_UART_IRQHandler+0x1d6>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f94e 	bl	8004a08 <UART_Transmit_IT>
    return;
 800476c:	e00e      	b.n	800478c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_UART_IRQHandler+0x1f4>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f98f 	bl	8004aa6 <UART_EndTransmit_IT>
    return;
 8004788:	e000      	b.n	800478c <HAL_UART_IRQHandler+0x1f4>
    return;
 800478a:	bf00      	nop
  }
}
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	080049e1 	.word	0x080049e1

08004798 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d113      	bne.n	800483a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004826:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004836:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004838:	e002      	b.n	8004840 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7fc fc28 	bl	8001090 <HAL_UART_TxCpltCallback>
}
 8004840:	bf00      	nop
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff ff9e 	bl	8004798 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11e      	bne.n	80048be <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004894:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0201 	bic.w	r2, r2, #1
 80048a4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7fc fb08 	bl	8000ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7fc fb44 	bl	8000f68 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b21      	cmp	r3, #33	; 0x21
 800491a:	d108      	bne.n	800492e <UART_DMAError+0x46>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f000 f827 	bl	800497c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b22      	cmp	r3, #34	; 0x22
 800494e:	d108      	bne.n	8004962 <UART_DMAError+0x7a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f000 f822 	bl	80049a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	f043 0210 	orr.w	r2, r3, #16
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800496e:	68b8      	ldr	r0, [r7, #8]
 8004970:	f7ff ff1b 	bl	80047aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004992:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff fed5 	bl	80047aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b21      	cmp	r3, #33	; 0x21
 8004a1a:	d13e      	bne.n	8004a9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a24:	d114      	bne.n	8004a50 <UART_Transmit_IT+0x48>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d110      	bne.n	8004a50 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	1c9a      	adds	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]
 8004a4e:	e008      	b.n	8004a62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	1c59      	adds	r1, r3, #1
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6211      	str	r1, [r2, #32]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	e000      	b.n	8004a9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fae2 	bl	8001090 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b22      	cmp	r3, #34	; 0x22
 8004ae8:	d170      	bne.n	8004bcc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af2:	d117      	bne.n	8004b24 <UART_Receive_IT+0x4e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
 8004b22:	e026      	b.n	8004b72 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b36:	d007      	beq.n	8004b48 <UART_Receive_IT+0x72>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <UART_Receive_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e008      	b.n	8004b68 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0220 	bic.w	r2, r2, #32
 8004b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fc f988 	bl	8000ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e002      	b.n	8004bce <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c12:	f023 030c 	bic.w	r3, r3, #12
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <UART_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7fe fe80 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	e002      	b.n	8004c4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe fe68 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8004c4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	0119      	lsls	r1, r3, #4
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009a      	lsls	r2, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c86:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2064      	movs	r0, #100	; 0x64
 8004c8e:	fb00 f303 	mul.w	r3, r0, r3
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	3332      	adds	r3, #50	; 0x32
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	4419      	add	r1, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <UART_SetConfig+0x118>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <UART_SetConfig+0x118>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	51eb851f 	.word	0x51eb851f

08004cf4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	f023 0101 	bic.w	r1, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d102      	bne.n	8004d24 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e001      	b.n	8004d28 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004d34:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004d3a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004d40:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004d46:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004d4c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004d52:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004d58:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004d5e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004d64:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <FSMC_NORSRAM_Init+0xd0>)
 8004d84:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d8c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004d94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	ea02 0103 	and.w	r1, r2, r3
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4319      	orrs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	0008fb7f 	.word	0x0008fb7f

08004dc8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dde:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	431a      	orrs	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	3b01      	subs	r3, #1
 8004e04:	051b      	lsls	r3, r3, #20
 8004e06:	431a      	orrs	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	3b02      	subs	r3, #2
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	4319      	orrs	r1, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e44:	d11d      	bne.n	8004e82 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e4e:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	6811      	ldr	r1, [r2, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	6852      	ldr	r2, [r2, #4]
 8004e5a:	0112      	lsls	r2, r2, #4
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0212      	lsls	r2, r2, #8
 8004e64:	4311      	orrs	r1, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	6992      	ldr	r2, [r2, #24]
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68d2      	ldr	r2, [r2, #12]
 8004e70:	0412      	lsls	r2, r2, #16
 8004e72:	430a      	orrs	r2, r1
 8004e74:	ea43 0102 	orr.w	r1, r3, r2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e80:	e005      	b.n	8004e8e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bc80      	pop	{r7}
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	cff00000 	.word	0xcff00000

08004ea0 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <WIZCHIP_WRITE+0x38>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <WIZCHIP_WRITE+0x38>)
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 8004eb8:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <WIZCHIP_WRITE+0x38>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <WIZCHIP_WRITE+0x38>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004eca:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <WIZCHIP_WRITE+0x38>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	4798      	blx	r3
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000038 	.word	0x20000038

08004edc <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <WIZCHIP_READ+0x38>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <WIZCHIP_READ+0x38>)
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <WIZCHIP_READ+0x38>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	4798      	blx	r3
 8004ef8:	4603      	mov	r3, r0
 8004efa:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <WIZCHIP_READ+0x38>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <WIZCHIP_READ+0x38>)
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	4798      	blx	r3
   return ret;
 8004f08:	89fb      	ldrh	r3, [r7, #14]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000038 	.word	0x20000038

08004f18 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	460a      	mov	r2, r1
 8004f22:	71fb      	strb	r3, [r7, #7]
 8004f24:	4613      	mov	r3, r2
 8004f26:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004f2e:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004f32:	3320      	adds	r3, #32
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ffd1 	bl	8004edc <WIZCHIP_READ>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <setTMSR+0x46>
 8004f48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f50:	b21a      	sxth	r2, r3
 8004f52:	79bb      	ldrb	r3, [r7, #6]
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	b21b      	sxth	r3, r3
 8004f5a:	81fb      	strh	r3, [r7, #14]
 8004f5c:	e009      	b.n	8004f72 <setTMSR+0x5a>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 8004f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	b21a      	sxth	r2, r3
 8004f66:	79bb      	ldrb	r3, [r7, #6]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004f78:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004f7c:	3320      	adds	r3, #32
 8004f7e:	461a      	mov	r2, r3
 8004f80:	89fb      	ldrh	r3, [r7, #14]
 8004f82:	4619      	mov	r1, r3
 8004f84:	4610      	mov	r0, r2
 8004f86:	f7ff ff8b 	bl	8004ea0 <WIZCHIP_WRITE>
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	4603      	mov	r3, r0
 8004f9a:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <getTMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004fac:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004fb0:	3320      	adds	r3, #32
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff ff92 	bl	8004edc <WIZCHIP_READ>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	e00c      	b.n	8004fd8 <getTMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 8004fbe:	79fb      	ldrb	r3, [r7, #7]
 8004fc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004fc4:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004fc8:	3320      	adds	r3, #32
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ff86 	bl	8004edc <WIZCHIP_READ>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	460a      	mov	r2, r1
 8004fea:	71fb      	strb	r3, [r7, #7]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ff6:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004ffa:	3328      	adds	r3, #40	; 0x28
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ff6d 	bl	8004edc <WIZCHIP_READ>
 8005002:	4603      	mov	r3, r0
 8005004:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <setRMSR+0x46>
 8005010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005014:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005018:	b21a      	sxth	r2, r3
 800501a:	79bb      	ldrb	r3, [r7, #6]
 800501c:	b21b      	sxth	r3, r3
 800501e:	4313      	orrs	r3, r2
 8005020:	b21b      	sxth	r3, r3
 8005022:	81fb      	strh	r3, [r7, #14]
 8005024:	e009      	b.n	800503a <setRMSR+0x5a>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8005026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	b21a      	sxth	r2, r3
 800502e:	79bb      	ldrb	r3, [r7, #6]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b21b      	sxth	r3, r3
 8005034:	4313      	orrs	r3, r2
 8005036:	b21b      	sxth	r3, r3
 8005038:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005040:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8005044:	3328      	adds	r3, #40	; 0x28
 8005046:	461a      	mov	r2, r3
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f7ff ff27 	bl	8004ea0 <WIZCHIP_WRITE>
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <getRMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005074:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8005078:	3328      	adds	r3, #40	; 0x28
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff2e 	bl	8004edc <WIZCHIP_READ>
 8005080:	4603      	mov	r3, r0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e00c      	b.n	80050a0 <getRMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800508c:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8005090:	3328      	adds	r3, #40	; 0x28
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff ff22 	bl	8004edc <WIZCHIP_READ>
 8005098:	4603      	mov	r3, r0
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	b29b      	uxth	r3, r3
 800509e:	b2db      	uxtb	r3, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050c0:	3308      	adds	r3, #8
 80050c2:	019b      	lsls	r3, r3, #6
 80050c4:	3324      	adds	r3, #36	; 0x24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff08 	bl	8004edc <WIZCHIP_READ>
 80050cc:	4603      	mov	r3, r0
 80050ce:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050d6:	3308      	adds	r3, #8
 80050d8:	019b      	lsls	r3, r3, #6
 80050da:	3326      	adds	r3, #38	; 0x26
 80050dc:	4618      	mov	r0, r3
 80050de:	f7ff fefd 	bl	8004edc <WIZCHIP_READ>
 80050e2:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80050e4:	4323      	orrs	r3, r4
 80050e6:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <getSn_TX_FSR+0x4e>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80050f4:	e7e1      	b.n	80050ba <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 80050f6:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 80050f8:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd90      	pop	{r4, r7, pc}
	...

08005104 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8005112:	2301      	movs	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800511c:	3308      	adds	r3, #8
 800511e:	019b      	lsls	r3, r3, #6
 8005120:	3328      	adds	r3, #40	; 0x28
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff feda 	bl	8004edc <WIZCHIP_READ>
 8005128:	4603      	mov	r3, r0
 800512a:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 800512c:	79fb      	ldrb	r3, [r7, #7]
 800512e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005132:	3308      	adds	r3, #8
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	332a      	adds	r3, #42	; 0x2a
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fecf 	bl	8004edc <WIZCHIP_READ>
 800513e:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8005140:	4323      	orrs	r3, r4
 8005142:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d002      	beq.n	8005152 <getSn_RX_RSR+0x4e>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8005150:	e7e1      	b.n	8005116 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8005152:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	4a05      	ldr	r2, [pc, #20]	; (800516c <getSn_RX_RSR+0x68>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	105b      	asrs	r3, r3, #1
 800515c:	f003 0201 	and.w	r2, r3, #1
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4413      	add	r3, r2
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	2000616c 	.word	0x2000616c

08005170 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d023      	beq.n	80051d0 <wiz_send_data+0x60>
   
   for(i = 0; i < len ; i += 2)
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e01b      	b.n	80051c6 <wiz_send_data+0x56>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005194:	3308      	adds	r3, #8
 8005196:	019b      	lsls	r3, r3, #6
 8005198:	332e      	adds	r3, #46	; 0x2e
 800519a:	4618      	mov	r0, r3
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	b21a      	sxth	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3301      	adds	r3, #1
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	440b      	add	r3, r1
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b21b      	sxth	r3, r3
 80051b4:	4313      	orrs	r3, r2
 80051b6:	b21b      	sxth	r3, r3
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	f7ff fe70 	bl	8004ea0 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	3302      	adds	r3, #2
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3df      	bcc.n	800518e <wiz_send_data+0x1e>
 80051ce:	e000      	b.n	80051d2 <wiz_send_data+0x62>
   if(len == 0)  return;
 80051d0:	bf00      	nop
}
 80051d2:	3718      	adds	r7, #24
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02e      	beq.n	8005252 <wiz_recv_data+0x7a>
      
   for(i = 0; i < len; i++)
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	e021      	b.n	800523e <wiz_recv_data+0x66>
   {
      if((i & 0x01)==0)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <wiz_recv_data+0x54>
      {
         rd = getSn_RX_FIFOR(sn);
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800520a:	3308      	adds	r3, #8
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	3330      	adds	r3, #48	; 0x30
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fe63 	bl	8004edc <WIZCHIP_READ>
 8005216:	4603      	mov	r3, r0
 8005218:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 800521a:	8afb      	ldrh	r3, [r7, #22]
 800521c:	0a1b      	lsrs	r3, r3, #8
 800521e:	b299      	uxth	r1, r3
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	b2ca      	uxtb	r2, r1
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	e005      	b.n	8005238 <wiz_recv_data+0x60>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	8afa      	ldrh	r2, [r7, #22]
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	3301      	adds	r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3d9      	bcc.n	80051fa <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	8afa      	ldrh	r2, [r7, #22]
 800524a:	b2d1      	uxtb	r1, r2
 800524c:	4a03      	ldr	r2, [pc, #12]	; (800525c <wiz_recv_data+0x84>)
 800524e:	54d1      	strb	r1, [r2, r3]
 8005250:	e000      	b.n	8005254 <wiz_recv_data+0x7c>
   if(len == 0) return;
 8005252:	bf00      	nop
}
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20006174 	.word	0x20006174

08005260 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4623      	mov	r3, r4
 8005270:	71fb      	strb	r3, [r7, #7]
 8005272:	4603      	mov	r3, r0
 8005274:	71bb      	strb	r3, [r7, #6]
 8005276:	460b      	mov	r3, r1
 8005278:	80bb      	strh	r3, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d902      	bls.n	800528a <socket+0x2a>
 8005284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005288:	e102      	b.n	8005490 <socket+0x230>
	switch(protocol)
 800528a:	79bb      	ldrb	r3, [r7, #6]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d005      	beq.n	800529c <socket+0x3c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	dd32      	ble.n	80052fa <socket+0x9a>
 8005294:	3b02      	subs	r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d82f      	bhi.n	80052fa <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800529a:	e032      	b.n	8005302 <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 800529c:	487e      	ldr	r0, [pc, #504]	; (8005498 <socket+0x238>)
 800529e:	f7ff fe1d 	bl	8004edc <WIZCHIP_READ>
 80052a2:	4603      	mov	r3, r0
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	4879      	ldr	r0, [pc, #484]	; (8005498 <socket+0x238>)
 80052b2:	f7ff fe13 	bl	8004edc <WIZCHIP_READ>
 80052b6:	4603      	mov	r3, r0
 80052b8:	461a      	mov	r2, r3
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	3301      	adds	r3, #1
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	4875      	ldr	r0, [pc, #468]	; (800549c <socket+0x23c>)
 80052c6:	f7ff fe09 	bl	8004edc <WIZCHIP_READ>
 80052ca:	4603      	mov	r3, r0
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	f107 030c 	add.w	r3, r7, #12
 80052d4:	3302      	adds	r3, #2
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	4870      	ldr	r0, [pc, #448]	; (800549c <socket+0x23c>)
 80052dc:	f7ff fdfe 	bl	8004edc <WIZCHIP_READ>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	f107 030c 	add.w	r3, r7, #12
 80052e8:	3303      	adds	r3, #3
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d105      	bne.n	8005300 <socket+0xa0>
 80052f4:	f06f 0302 	mvn.w	r3, #2
 80052f8:	e0ca      	b.n	8005490 <socket+0x230>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80052fa:	f06f 0304 	mvn.w	r3, #4
 80052fe:	e0c7      	b.n	8005490 <socket+0x230>
	    break;
 8005300:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <socket+0xb2>
 800530c:	f06f 0305 	mvn.w	r3, #5
 8005310:	e0be      	b.n	8005490 <socket+0x230>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d019      	beq.n	800534c <socket+0xec>
	{
   	switch(protocol)
 8005318:	79bb      	ldrb	r3, [r7, #6]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d002      	beq.n	8005324 <socket+0xc4>
 800531e:	2b02      	cmp	r3, #2
 8005320:	d008      	beq.n	8005334 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8005322:	e018      	b.n	8005356 <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	f003 0323 	and.w	r3, r3, #35	; 0x23
 800532a:	2b00      	cmp	r3, #0
 800532c:	d110      	bne.n	8005350 <socket+0xf0>
 800532e:	f06f 0305 	mvn.w	r3, #5
 8005332:	e0ad      	b.n	8005490 <socket+0x230>
   	      if(flag & SF_IGMP_VER2)
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800533e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005342:	2b00      	cmp	r3, #0
 8005344:	db06      	blt.n	8005354 <socket+0xf4>
 8005346:	f06f 0305 	mvn.w	r3, #5
 800534a:	e0a1      	b.n	8005490 <socket+0x230>
   	}
   }
 800534c:	bf00      	nop
 800534e:	e002      	b.n	8005356 <socket+0xf6>
   	      break;
 8005350:	bf00      	nop
 8005352:	e000      	b.n	8005356 <socket+0xf6>
   	      break;
 8005354:	bf00      	nop
	close(sn);
 8005356:	79fb      	ldrb	r3, [r7, #7]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f8ab 	bl	80054b4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005364:	3308      	adds	r3, #8
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	4618      	mov	r0, r3
 800536a:	79bb      	ldrb	r3, [r7, #6]
 800536c:	b21a      	sxth	r2, r3
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	b21b      	sxth	r3, r3
 8005372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005376:	b21b      	sxth	r3, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	b21a      	sxth	r2, r3
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	01db      	lsls	r3, r3, #7
 8005380:	b21b      	sxth	r3, r3
 8005382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005386:	b21b      	sxth	r3, r3
 8005388:	4313      	orrs	r3, r2
 800538a:	b21b      	sxth	r3, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	f7ff fd86 	bl	8004ea0 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8005394:	88bb      	ldrh	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d110      	bne.n	80053bc <socket+0x15c>
	{
	   port = sock_any_port++;
 800539a:	4b41      	ldr	r3, [pc, #260]	; (80054a0 <socket+0x240>)
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	b291      	uxth	r1, r2
 80053a2:	4a3f      	ldr	r2, [pc, #252]	; (80054a0 <socket+0x240>)
 80053a4:	8011      	strh	r1, [r2, #0]
 80053a6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <socket+0x240>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <socket+0x15c>
 80053b4:	4b3a      	ldr	r3, [pc, #232]	; (80054a0 <socket+0x240>)
 80053b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80053ba:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053c2:	3308      	adds	r3, #8
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	330a      	adds	r3, #10
 80053c8:	461a      	mov	r2, r3
 80053ca:	88bb      	ldrh	r3, [r7, #4]
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f7ff fd66 	bl	8004ea0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053da:	3308      	adds	r3, #8
 80053dc:	019b      	lsls	r3, r3, #6
 80053de:	3302      	adds	r3, #2
 80053e0:	2101      	movs	r1, #1
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fd5c 	bl	8004ea0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80053e8:	bf00      	nop
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053f0:	3308      	adds	r3, #8
 80053f2:	019b      	lsls	r3, r3, #6
 80053f4:	3302      	adds	r3, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff fd70 	bl	8004edc <WIZCHIP_READ>
 80053fc:	4603      	mov	r3, r0
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1f2      	bne.n	80053ea <socket+0x18a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	2201      	movs	r2, #1
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	b21b      	sxth	r3, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	b21a      	sxth	r2, r3
 8005412:	4b24      	ldr	r3, [pc, #144]	; (80054a4 <socket+0x244>)
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b21b      	sxth	r3, r3
 8005418:	4013      	ands	r3, r2
 800541a:	b21b      	sxth	r3, r3
 800541c:	b29a      	uxth	r2, r3
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <socket+0x244>)
 8005420:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	f003 0201 	and.w	r2, r3, #1
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	b21a      	sxth	r2, r3
 8005430:	4b1c      	ldr	r3, [pc, #112]	; (80054a4 <socket+0x244>)
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b21b      	sxth	r3, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	b21b      	sxth	r3, r3
 800543a:	b29a      	uxth	r2, r3
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <socket+0x244>)
 800543e:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2201      	movs	r2, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	b21b      	sxth	r3, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	b21a      	sxth	r2, r3
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <socket+0x248>)
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b21b      	sxth	r3, r3
 8005454:	4013      	ands	r3, r2
 8005456:	b21b      	sxth	r3, r3
 8005458:	b29a      	uxth	r2, r3
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <socket+0x248>)
 800545c:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	4a12      	ldr	r2, [pc, #72]	; (80054ac <socket+0x24c>)
 8005462:	2100      	movs	r1, #0
 8005464:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	4a11      	ldr	r2, [pc, #68]	; (80054b0 <socket+0x250>)
 800546c:	2100      	movs	r1, #0
 800546e:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8005470:	bf00      	nop
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005478:	3308      	adds	r3, #8
 800547a:	019b      	lsls	r3, r3, #6
 800547c:	3308      	adds	r3, #8
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fd2c 	bl	8004edc <WIZCHIP_READ>
 8005484:	4603      	mov	r3, r0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f2      	beq.n	8005472 <socket+0x212>
   return (int8_t)sn;
 800548c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}
 8005498:	34000018 	.word	0x34000018
 800549c:	3400001a 	.word	0x3400001a
 80054a0:	20000036 	.word	0x20000036
 80054a4:	20006158 	.word	0x20006158
 80054a8:	2000615a 	.word	0x2000615a
 80054ac:	2000615c 	.word	0x2000615c
 80054b0:	2000616c 	.word	0x2000616c

080054b4 <close>:

int8_t close(uint8_t sn)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	4603      	mov	r3, r0
 80054bc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d902      	bls.n	80054ca <close+0x16>
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054c8:	e0b9      	b.n	800563e <close+0x18a>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80054d0:	3308      	adds	r3, #8
 80054d2:	019b      	lsls	r3, r3, #6
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fd01 	bl	8004edc <WIZCHIP_READ>
 80054da:	4603      	mov	r3, r0
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d154      	bne.n	800558e <close+0xda>
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fdde 	bl	80050a8 <getSn_TX_FSR>
 80054ec:	4604      	mov	r4, r0
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7ff fd4e 	bl	8004f92 <getTMSR>
 80054f6:	4603      	mov	r3, r0
 80054f8:	029b      	lsls	r3, r3, #10
 80054fa:	429c      	cmp	r4, r3
 80054fc:	d047      	beq.n	800558e <close+0xda>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 80054fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005502:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800550a:	3308      	adds	r3, #8
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	2102      	movs	r1, #2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fcc5 	bl	8004ea0 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800551c:	3308      	adds	r3, #8
 800551e:	019b      	lsls	r3, r3, #6
 8005520:	330a      	adds	r3, #10
 8005522:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fcba 	bl	8004ea0 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005532:	3308      	adds	r3, #8
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	3302      	adds	r3, #2
 8005538:	2101      	movs	r1, #1
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fcb0 	bl	8004ea0 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8005540:	bf00      	nop
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005548:	3308      	adds	r3, #8
 800554a:	019b      	lsls	r3, r3, #6
 800554c:	3302      	adds	r3, #2
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fcc4 	bl	8004edc <WIZCHIP_READ>
 8005554:	4603      	mov	r3, r0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1f2      	bne.n	8005542 <close+0x8e>
      while(getSn_SR(sn) != SOCK_UDP);
 800555c:	bf00      	nop
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005564:	3308      	adds	r3, #8
 8005566:	019b      	lsls	r3, r3, #6
 8005568:	3308      	adds	r3, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fcb6 	bl	8004edc <WIZCHIP_READ>
 8005570:	4603      	mov	r3, r0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b22      	cmp	r3, #34	; 0x22
 8005576:	d1f2      	bne.n	800555e <close+0xaa>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	f107 010c 	add.w	r1, r7, #12
 8005580:	79f8      	ldrb	r0, [r7, #7]
 8005582:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005586:	9200      	str	r2, [sp, #0]
 8005588:	2201      	movs	r2, #1
 800558a:	f000 fbbf 	bl	8005d0c <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005594:	3308      	adds	r3, #8
 8005596:	019b      	lsls	r3, r3, #6
 8005598:	3302      	adds	r3, #2
 800559a:	2110      	movs	r1, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fc7f 	bl	8004ea0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80055a2:	bf00      	nop
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80055aa:	3308      	adds	r3, #8
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	3302      	adds	r3, #2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fc93 	bl	8004edc <WIZCHIP_READ>
 80055b6:	4603      	mov	r3, r0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f2      	bne.n	80055a4 <close+0xf0>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80055c4:	3308      	adds	r3, #8
 80055c6:	019b      	lsls	r3, r3, #6
 80055c8:	3306      	adds	r3, #6
 80055ca:	21ff      	movs	r1, #255	; 0xff
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fc67 	bl	8004ea0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2201      	movs	r2, #1
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	b21b      	sxth	r3, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	b21a      	sxth	r2, r3
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <close+0x194>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	4013      	ands	r3, r2
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <close+0x194>)
 80055ee:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	2201      	movs	r2, #1
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	b21b      	sxth	r3, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	4b13      	ldr	r3, [pc, #76]	; (800564c <close+0x198>)
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b21b      	sxth	r3, r3
 8005604:	4013      	ands	r3, r2
 8005606:	b21b      	sxth	r3, r3
 8005608:	b29a      	uxth	r2, r3
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <close+0x198>)
 800560c:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	4a0f      	ldr	r2, [pc, #60]	; (8005650 <close+0x19c>)
 8005612:	2100      	movs	r1, #0
 8005614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	4a0e      	ldr	r2, [pc, #56]	; (8005654 <close+0x1a0>)
 800561c:	2100      	movs	r1, #0
 800561e:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8005620:	bf00      	nop
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005628:	3308      	adds	r3, #8
 800562a:	019b      	lsls	r3, r3, #6
 800562c:	3308      	adds	r3, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fc54 	bl	8004edc <WIZCHIP_READ>
 8005634:	4603      	mov	r3, r0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f2      	bne.n	8005622 <close+0x16e>
	return SOCK_OK;
 800563c:	2301      	movs	r3, #1
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bd90      	pop	{r4, r7, pc}
 8005646:	bf00      	nop
 8005648:	20006158 	.word	0x20006158
 800564c:	2000615a 	.word	0x2000615a
 8005650:	2000615c 	.word	0x2000615c
 8005654:	2000616c 	.word	0x2000616c

08005658 <listen>:

int8_t listen(uint8_t sn)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d902      	bls.n	800566e <listen+0x16>
 8005668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800566c:	e04d      	b.n	800570a <listen+0xb2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005674:	3308      	adds	r3, #8
 8005676:	019b      	lsls	r3, r3, #6
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fc2f 	bl	8004edc <WIZCHIP_READ>
 800567e:	4603      	mov	r3, r0
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2b01      	cmp	r3, #1
 8005686:	d002      	beq.n	800568e <listen+0x36>
 8005688:	f06f 0304 	mvn.w	r3, #4
 800568c:	e03d      	b.n	800570a <listen+0xb2>
	CHECK_SOCKINIT();
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005694:	3308      	adds	r3, #8
 8005696:	019b      	lsls	r3, r3, #6
 8005698:	3308      	adds	r3, #8
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fc1e 	bl	8004edc <WIZCHIP_READ>
 80056a0:	4603      	mov	r3, r0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b13      	cmp	r3, #19
 80056a6:	d002      	beq.n	80056ae <listen+0x56>
 80056a8:	f06f 0302 	mvn.w	r3, #2
 80056ac:	e02d      	b.n	800570a <listen+0xb2>
	setSn_CR(sn,Sn_CR_LISTEN);
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80056b4:	3308      	adds	r3, #8
 80056b6:	019b      	lsls	r3, r3, #6
 80056b8:	3302      	adds	r3, #2
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff fbef 	bl	8004ea0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80056c2:	bf00      	nop
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80056ca:	3308      	adds	r3, #8
 80056cc:	019b      	lsls	r3, r3, #6
 80056ce:	3302      	adds	r3, #2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7ff fc03 	bl	8004edc <WIZCHIP_READ>
 80056d6:	4603      	mov	r3, r0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f2      	bne.n	80056c4 <listen+0x6c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80056de:	e006      	b.n	80056ee <listen+0x96>
   {
         close(sn);
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fee6 	bl	80054b4 <close>
         return SOCKERR_SOCKCLOSED;
 80056e8:	f06f 0303 	mvn.w	r3, #3
 80056ec:	e00d      	b.n	800570a <listen+0xb2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80056f4:	3308      	adds	r3, #8
 80056f6:	019b      	lsls	r3, r3, #6
 80056f8:	3308      	adds	r3, #8
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff fbee 	bl	8004edc <WIZCHIP_READ>
 8005700:	4603      	mov	r3, r0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b14      	cmp	r3, #20
 8005706:	d1eb      	bne.n	80056e0 <listen+0x88>
   }
   return SOCK_OK;
 8005708:	2301      	movs	r3, #1
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d902      	bls.n	800572a <disconnect+0x16>
 8005724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005728:	e066      	b.n	80057f8 <disconnect+0xe4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005730:	3308      	adds	r3, #8
 8005732:	019b      	lsls	r3, r3, #6
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fbd1 	bl	8004edc <WIZCHIP_READ>
 800573a:	4603      	mov	r3, r0
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	2b01      	cmp	r3, #1
 8005742:	d002      	beq.n	800574a <disconnect+0x36>
 8005744:	f06f 0304 	mvn.w	r3, #4
 8005748:	e056      	b.n	80057f8 <disconnect+0xe4>
	setSn_CR(sn,Sn_CR_DISCON);
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005750:	3308      	adds	r3, #8
 8005752:	019b      	lsls	r3, r3, #6
 8005754:	3302      	adds	r3, #2
 8005756:	2108      	movs	r1, #8
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fba1 	bl	8004ea0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800575e:	bf00      	nop
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005766:	3308      	adds	r3, #8
 8005768:	019b      	lsls	r3, r3, #6
 800576a:	3302      	adds	r3, #2
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff fbb5 	bl	8004edc <WIZCHIP_READ>
 8005772:	4603      	mov	r3, r0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f2      	bne.n	8005760 <disconnect+0x4c>
	sock_is_sending &= ~(1<<sn);
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	2201      	movs	r2, #1
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	b21b      	sxth	r3, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	b21a      	sxth	r2, r3
 8005788:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <disconnect+0xec>)
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b21b      	sxth	r3, r3
 800578e:	4013      	ands	r3, r2
 8005790:	b21b      	sxth	r3, r3
 8005792:	b29a      	uxth	r2, r3
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <disconnect+0xec>)
 8005796:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <disconnect+0xf0>)
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	fa42 f303 	asr.w	r3, r2, r3
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <disconnect+0xc8>
 80057ac:	2300      	movs	r3, #0
 80057ae:	e023      	b.n	80057f8 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80057b6:	3308      	adds	r3, #8
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	3306      	adds	r3, #6
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fb8d 	bl	8004edc <WIZCHIP_READ>
 80057c2:	4603      	mov	r3, r0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <disconnect+0xc8>
	   {
	      close(sn);
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fe6f 	bl	80054b4 <close>
	      return SOCKERR_TIMEOUT;
 80057d6:	f06f 030c 	mvn.w	r3, #12
 80057da:	e00d      	b.n	80057f8 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80057e2:	3308      	adds	r3, #8
 80057e4:	019b      	lsls	r3, r3, #6
 80057e6:	3308      	adds	r3, #8
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fb77 	bl	8004edc <WIZCHIP_READ>
 80057ee:	4603      	mov	r3, r0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1dc      	bne.n	80057b0 <disconnect+0x9c>
	   }
	}
	return SOCK_OK;
 80057f6:	2301      	movs	r3, #1
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	2000615a 	.word	0x2000615a
 8005804:	20006158 	.word	0x20006158

08005808 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
 8005814:	4613      	mov	r3, r2
 8005816:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005818:	2300      	movs	r3, #0
 800581a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800581c:	2300      	movs	r3, #0
 800581e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b08      	cmp	r3, #8
 8005824:	d902      	bls.n	800582c <send+0x24>
 8005826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800582a:	e0f3      	b.n	8005a14 <send+0x20c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005832:	3308      	adds	r3, #8
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fb50 	bl	8004edc <WIZCHIP_READ>
 800583c:	4603      	mov	r3, r0
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	2b01      	cmp	r3, #1
 8005844:	d002      	beq.n	800584c <send+0x44>
 8005846:	f06f 0304 	mvn.w	r3, #4
 800584a:	e0e3      	b.n	8005a14 <send+0x20c>
   CHECK_SOCKDATA();
 800584c:	88bb      	ldrh	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <send+0x50>
 8005852:	f06f 030d 	mvn.w	r3, #13
 8005856:	e0dd      	b.n	8005a14 <send+0x20c>
   tmp = getSn_SR(sn);
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800585e:	3308      	adds	r3, #8
 8005860:	019b      	lsls	r3, r3, #6
 8005862:	3308      	adds	r3, #8
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fb39 	bl	8004edc <WIZCHIP_READ>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b17      	cmp	r3, #23
 8005872:	d005      	beq.n	8005880 <send+0x78>
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	2b1c      	cmp	r3, #28
 8005878:	d002      	beq.n	8005880 <send+0x78>
 800587a:	f06f 0306 	mvn.w	r3, #6
 800587e:	e0c9      	b.n	8005a14 <send+0x20c>
   if( sock_is_sending & (1<<sn) )
 8005880:	4b66      	ldr	r3, [pc, #408]	; (8005a1c <send+0x214>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	fa42 f303 	asr.w	r3, r2, r3
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d037      	beq.n	8005904 <send+0xfc>
   {
      tmp = getSn_IR(sn);
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800589a:	3308      	adds	r3, #8
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	3306      	adds	r3, #6
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fb1b 	bl	8004edc <WIZCHIP_READ>
 80058a6:	4603      	mov	r3, r0
 80058a8:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <send+0xe0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80058ba:	3308      	adds	r3, #8
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	3306      	adds	r3, #6
 80058c0:	2110      	movs	r1, #16
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff faec 	bl	8004ea0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	2201      	movs	r2, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	43db      	mvns	r3, r3
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <send+0x214>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b21b      	sxth	r3, r3
 80058dc:	4013      	ands	r3, r2
 80058de:	b21b      	sxth	r3, r3
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	4b4e      	ldr	r3, [pc, #312]	; (8005a1c <send+0x214>)
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e00d      	b.n	8005904 <send+0xfc>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <send+0xf8>
      {
         close(sn);
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fddd 	bl	80054b4 <close>
         return SOCKERR_TIMEOUT;
 80058fa:	f06f 030c 	mvn.w	r3, #12
 80058fe:	e089      	b.n	8005a14 <send+0x20c>
      }
      else return SOCK_BUSY;
 8005900:	2300      	movs	r3, #0
 8005902:	e087      	b.n	8005a14 <send+0x20c>
   }
   freesize = getSn_TxMAX(sn);
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fb43 	bl	8004f92 <getTMSR>
 800590c:	4603      	mov	r3, r0
 800590e:	b29b      	uxth	r3, r3
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005914:	88ba      	ldrh	r2, [r7, #4]
 8005916:	89bb      	ldrh	r3, [r7, #12]
 8005918:	429a      	cmp	r2, r3
 800591a:	d901      	bls.n	8005920 <send+0x118>
 800591c:	89bb      	ldrh	r3, [r7, #12]
 800591e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff fbc0 	bl	80050a8 <getSn_TX_FSR>
 8005928:	4603      	mov	r3, r0
 800592a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005932:	3308      	adds	r3, #8
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	3308      	adds	r3, #8
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff facf 	bl	8004edc <WIZCHIP_READ>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b17      	cmp	r3, #23
 8005946:	d009      	beq.n	800595c <send+0x154>
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	2b1c      	cmp	r3, #28
 800594c:	d006      	beq.n	800595c <send+0x154>
      {
         close(sn);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fdaf 	bl	80054b4 <close>
         return SOCKERR_SOCKSTATUS;
 8005956:	f06f 0306 	mvn.w	r3, #6
 800595a:	e05b      	b.n	8005a14 <send+0x20c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800595c:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <send+0x218>)
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	fa42 f303 	asr.w	r3, r2, r3
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <send+0x174>
 8005970:	88ba      	ldrh	r2, [r7, #4]
 8005972:	89bb      	ldrh	r3, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	d901      	bls.n	800597c <send+0x174>
 8005978:	2300      	movs	r3, #0
 800597a:	e04b      	b.n	8005a14 <send+0x20c>
      if(len <= freesize) break;
 800597c:	88ba      	ldrh	r2, [r7, #4]
 800597e:	89bb      	ldrh	r3, [r7, #12]
 8005980:	429a      	cmp	r2, r3
 8005982:	d900      	bls.n	8005986 <send+0x17e>
      freesize = getSn_TX_FSR(sn);
 8005984:	e7cc      	b.n	8005920 <send+0x118>
      if(len <= freesize) break;
 8005986:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005988:	88ba      	ldrh	r2, [r7, #4]
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fbee 	bl	8005170 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800599a:	3308      	adds	r3, #8
 800599c:	019b      	lsls	r3, r3, #6
 800599e:	3320      	adds	r3, #32
 80059a0:	461a      	mov	r2, r3
 80059a2:	88bb      	ldrh	r3, [r7, #4]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7ff fa78 	bl	8004ea0 <WIZCHIP_WRITE>
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80059b6:	3308      	adds	r3, #8
 80059b8:	019b      	lsls	r3, r3, #6
 80059ba:	3322      	adds	r3, #34	; 0x22
 80059bc:	461a      	mov	r2, r3
 80059be:	88bb      	ldrh	r3, [r7, #4]
 80059c0:	4619      	mov	r1, r3
 80059c2:	4610      	mov	r0, r2
 80059c4:	f7ff fa6c 	bl	8004ea0 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80059ce:	3308      	adds	r3, #8
 80059d0:	019b      	lsls	r3, r3, #6
 80059d2:	3302      	adds	r3, #2
 80059d4:	2120      	movs	r1, #32
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fa62 	bl	8004ea0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80059dc:	bf00      	nop
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80059e4:	3308      	adds	r3, #8
 80059e6:	019b      	lsls	r3, r3, #6
 80059e8:	3302      	adds	r3, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fa76 	bl	8004edc <WIZCHIP_READ>
 80059f0:	4603      	mov	r3, r0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f2      	bne.n	80059de <send+0x1d6>
   sock_is_sending |= (1 << sn);
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2201      	movs	r2, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	b21a      	sxth	r2, r3
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <send+0x214>)
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	4b03      	ldr	r3, [pc, #12]	; (8005a1c <send+0x214>)
 8005a10:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005a12:	88bb      	ldrh	r3, [r7, #4]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	2000615a 	.word	0x2000615a
 8005a20:	20006158 	.word	0x20006158

08005a24 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	6039      	str	r1, [r7, #0]
 8005a2e:	71fb      	strb	r3, [r7, #7]
 8005a30:	4613      	mov	r3, r2
 8005a32:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d902      	bls.n	8005a48 <recv+0x24>
 8005a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a46:	e154      	b.n	8005cf2 <recv+0x2ce>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a4e:	3308      	adds	r3, #8
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fa42 	bl	8004edc <WIZCHIP_READ>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d002      	beq.n	8005a68 <recv+0x44>
 8005a62:	f06f 0304 	mvn.w	r3, #4
 8005a66:	e144      	b.n	8005cf2 <recv+0x2ce>
   CHECK_SOCKDATA();
 8005a68:	88bb      	ldrh	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d102      	bne.n	8005a74 <recv+0x50>
 8005a6e:	f06f 030d 	mvn.w	r3, #13
 8005a72:	e13e      	b.n	8005cf2 <recv+0x2ce>
   
   recvsize = getSn_RxMAX(sn);
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff faef 	bl	800505a <getRMSR>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 8005a84:	89fa      	ldrh	r2, [r7, #14]
 8005a86:	88bb      	ldrh	r3, [r7, #4]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d201      	bcs.n	8005a90 <recv+0x6c>
 8005a8c:	89fb      	ldrh	r3, [r7, #14]
 8005a8e:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	4a9a      	ldr	r2, [pc, #616]	; (8005cfc <recv+0x2d8>)
 8005a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d14a      	bne.n	8005b32 <recv+0x10e>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fb30 	bl	8005104 <getSn_RX_RSR>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005aae:	3308      	adds	r3, #8
 8005ab0:	019b      	lsls	r3, r3, #6
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff fa11 	bl	8004edc <WIZCHIP_READ>
 8005aba:	4603      	mov	r3, r0
 8005abc:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 8005abe:	7b7b      	ldrb	r3, [r7, #13]
 8005ac0:	2b17      	cmp	r3, #23
 8005ac2:	d020      	beq.n	8005b06 <recv+0xe2>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005ac4:	7b7b      	ldrb	r3, [r7, #13]
 8005ac6:	2b1c      	cmp	r3, #28
 8005ac8:	d116      	bne.n	8005af8 <recv+0xd4>
            {
               if(recvsize != 0) break;
 8005aca:	89fb      	ldrh	r3, [r7, #14]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d12d      	bne.n	8005b2c <recv+0x108>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fae8 	bl	80050a8 <getSn_TX_FSR>
 8005ad8:	4604      	mov	r4, r0
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fa58 	bl	8004f92 <getTMSR>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	029b      	lsls	r3, r3, #10
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d10d      	bne.n	8005b06 <recv+0xe2>
               {
                  close(sn);
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fce1 	bl	80054b4 <close>
                  return SOCKERR_SOCKSTATUS;
 8005af2:	f06f 0306 	mvn.w	r3, #6
 8005af6:	e0fc      	b.n	8005cf2 <recv+0x2ce>
               }
            }
            else
            {
               close(sn);
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fcda 	bl	80054b4 <close>
               return SOCKERR_SOCKSTATUS;
 8005b00:	f06f 0306 	mvn.w	r3, #6
 8005b04:	e0f5      	b.n	8005cf2 <recv+0x2ce>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005b06:	4b7e      	ldr	r3, [pc, #504]	; (8005d00 <recv+0x2dc>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	fa42 f303 	asr.w	r3, r2, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <recv+0x100>
 8005b1a:	89fb      	ldrh	r3, [r7, #14]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <recv+0x100>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e0e6      	b.n	8005cf2 <recv+0x2ce>
         if(recvsize != 0) break;
 8005b24:	89fb      	ldrh	r3, [r7, #14]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <recv+0x10c>
         recvsize = getSn_RX_RSR(sn);
 8005b2a:	e7b7      	b.n	8005a9c <recv+0x78>
               if(recvsize != 0) break;
 8005b2c:	bf00      	nop
 8005b2e:	e000      	b.n	8005b32 <recv+0x10e>
         if(recvsize != 0) break;
 8005b30:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	4a71      	ldr	r2, [pc, #452]	; (8005cfc <recv+0x2d8>)
 8005b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <recv+0x134>
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005b44:	3308      	adds	r3, #8
 8005b46:	019b      	lsls	r3, r3, #6
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff f9c7 	bl	8004edc <WIZCHIP_READ>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d038      	beq.n	8005bca <recv+0x1a6>
   {
      mr = getMR();
 8005b58:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8005b5c:	f7ff f9be 	bl	8004edc <WIZCHIP_READ>
 8005b60:	4603      	mov	r3, r0
 8005b62:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff f9b4 	bl	8004edc <WIZCHIP_READ>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d120      	bne.n	8005bc0 <recv+0x19c>
      {
         wiz_recv_data(sn,head,2);
 8005b7e:	f107 0108 	add.w	r1, r7, #8
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2202      	movs	r2, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fb26 	bl	80051d8 <wiz_recv_data>
         if(mr & MR_FS)
 8005b8c:	897b      	ldrh	r3, [r7, #10]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <recv+0x184>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 8005b96:	7a7b      	ldrb	r3, [r7, #9]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	b21a      	sxth	r2, r3
 8005b9c:	7a3b      	ldrb	r3, [r7, #8]
 8005b9e:	b21b      	sxth	r3, r3
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	81fb      	strh	r3, [r7, #14]
 8005ba6:	e007      	b.n	8005bb8 <recv+0x194>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 8005ba8:	7a3b      	ldrb	r3, [r7, #8]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	b21a      	sxth	r2, r3
 8005bae:	7a7b      	ldrb	r3, [r7, #9]
 8005bb0:	b21b      	sxth	r3, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	b21b      	sxth	r3, r3
 8005bb6:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	4a52      	ldr	r2, [pc, #328]	; (8005d04 <recv+0x2e0>)
 8005bbc:	2180      	movs	r1, #128	; 0x80
 8005bbe:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	494e      	ldr	r1, [pc, #312]	; (8005cfc <recv+0x2d8>)
 8005bc4:	89fa      	ldrh	r2, [r7, #14]
 8005bc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	4a4b      	ldr	r2, [pc, #300]	; (8005cfc <recv+0x2d8>)
 8005bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd2:	88ba      	ldrh	r2, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d904      	bls.n	8005be2 <recv+0x1be>
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	4a48      	ldr	r2, [pc, #288]	; (8005cfc <recv+0x2d8>)
 8005bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be0:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 8005be2:	88bb      	ldrh	r3, [r7, #4]
 8005be4:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <recv+0x2e0>)
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01d      	beq.n	8005c30 <recv+0x20c>
   {
      *buf = sock_remained_byte[sn];
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	4a44      	ldr	r2, [pc, #272]	; (8005d08 <recv+0x2e4>)
 8005bf8:	5cd2      	ldrb	r2, [r2, r3]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
      buf++;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	4a3f      	ldr	r2, [pc, #252]	; (8005d04 <recv+0x2e0>)
 8005c08:	5cd2      	ldrb	r2, [r2, r3]
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	f022 0202 	bic.w	r2, r2, #2
 8005c10:	b2d1      	uxtb	r1, r2
 8005c12:	4a3c      	ldr	r2, [pc, #240]	; (8005d04 <recv+0x2e0>)
 8005c14:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <recv+0x2d8>)
 8005c20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	3a01      	subs	r2, #1
 8005c28:	b291      	uxth	r1, r2
 8005c2a:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <recv+0x2d8>)
 8005c2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01d      	beq.n	8005c72 <recv+0x24e>
   {
      wiz_recv_data(sn, buf, recvsize);
 8005c36:	89fa      	ldrh	r2, [r7, #14]
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff facb 	bl	80051d8 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005c48:	3308      	adds	r3, #8
 8005c4a:	019b      	lsls	r3, r3, #6
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	2140      	movs	r1, #64	; 0x40
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff f925 	bl	8004ea0 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8005c56:	bf00      	nop
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005c5e:	3308      	adds	r3, #8
 8005c60:	019b      	lsls	r3, r3, #6
 8005c62:	3302      	adds	r3, #2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f939 	bl	8004edc <WIZCHIP_READ>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f2      	bne.n	8005c58 <recv+0x234>
   }
   sock_remained_size[sn] -= recvsize;
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <recv+0x2d8>)
 8005c76:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	89fa      	ldrh	r2, [r7, #14]
 8005c7e:	1a8a      	subs	r2, r1, r2
 8005c80:	b291      	uxth	r1, r2
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <recv+0x2d8>)
 8005c84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <recv+0x2d8>)
 8005c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <recv+0x2a0>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <recv+0x2e0>)
 8005c98:	5cd2      	ldrb	r2, [r2, r3]
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	b2d1      	uxtb	r1, r2
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <recv+0x2e0>)
 8005ca4:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <recv+0x2a8>
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <recv+0x2e0>)
 8005cb4:	5cd2      	ldrb	r2, [r2, r3]
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f042 0202 	orr.w	r2, r2, #2
 8005cbc:	b2d1      	uxtb	r1, r2
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <recv+0x2e0>)
 8005cc0:	54d1      	strb	r1, [r2, r3]
 8005cc2:	e003      	b.n	8005ccc <recv+0x2a8>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	4a0f      	ldr	r2, [pc, #60]	; (8005d04 <recv+0x2e0>)
 8005cc8:	2100      	movs	r1, #0
 8005cca:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff f900 	bl	8004edc <WIZCHIP_READ>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <recv+0x2cc>
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <recv+0x2d8>)
 8005cea:	2100      	movs	r1, #0
 8005cec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005cf0:	88bb      	ldrh	r3, [r7, #4]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2000615c 	.word	0x2000615c
 8005d00:	20006158 	.word	0x20006158
 8005d04:	2000616c 	.word	0x2000616c
 8005d08:	20006174 	.word	0x20006174

08005d0c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d902      	bls.n	8005d32 <sendto+0x26>
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d30:	e204      	b.n	800613c <sendto+0x430>
   switch(getSn_MR(sn) & 0x0F)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005d38:	3308      	adds	r3, #8
 8005d3a:	019b      	lsls	r3, r3, #6
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff f8cd 	bl	8004edc <WIZCHIP_READ>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	3b02      	subs	r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <sendto+0x48>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005d4e:	f06f 0304 	mvn.w	r3, #4
 8005d52:	e1f3      	b.n	800613c <sendto+0x430>
         break;
 8005d54:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005d56:	89bb      	ldrh	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <sendto+0x56>
 8005d5c:	f06f 030d 	mvn.w	r3, #13
 8005d60:	e1ec      	b.n	800613c <sendto+0x430>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	3201      	adds	r2, #1
 8005d70:	7812      	ldrb	r2, [r2, #0]
 8005d72:	4413      	add	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	3202      	adds	r2, #2
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	3203      	adds	r2, #3
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	4413      	add	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10f      	bne.n	8005db8 <sendto+0xac>
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005d9e:	3308      	adds	r3, #8
 8005da0:	019b      	lsls	r3, r3, #6
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff f89a 	bl	8004edc <WIZCHIP_READ>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d002      	beq.n	8005db8 <sendto+0xac>
 8005db2:	f06f 030b 	mvn.w	r3, #11
 8005db6:	e1c1      	b.n	800613c <sendto+0x430>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005db8:	8c3b      	ldrh	r3, [r7, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <sendto+0xd2>
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	019b      	lsls	r3, r3, #6
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff f887 	bl	8004edc <WIZCHIP_READ>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d002      	beq.n	8005dde <sendto+0xd2>
 8005dd8:	f06f 030a 	mvn.w	r3, #10
 8005ddc:	e1ae      	b.n	800613c <sendto+0x430>
   tmp = getSn_SR(sn);
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005de4:	3308      	adds	r3, #8
 8005de6:	019b      	lsls	r3, r3, #6
 8005de8:	3308      	adds	r3, #8
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff f876 	bl	8004edc <WIZCHIP_READ>
 8005df0:	4603      	mov	r3, r0
 8005df2:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b42      	cmp	r3, #66	; 0x42
 8005df8:	d008      	beq.n	8005e0c <sendto+0x100>
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	2b22      	cmp	r3, #34	; 0x22
 8005dfe:	d005      	beq.n	8005e0c <sendto+0x100>
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b32      	cmp	r3, #50	; 0x32
 8005e04:	d002      	beq.n	8005e0c <sendto+0x100>
 8005e06:	f06f 0306 	mvn.w	r3, #6
 8005e0a:	e197      	b.n	800613c <sendto+0x430>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005e12:	3308      	adds	r3, #8
 8005e14:	019b      	lsls	r3, r3, #6
 8005e16:	3314      	adds	r3, #20
 8005e18:	4618      	mov	r0, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4619      	mov	r1, r3
 8005e32:	f7ff f835 	bl	8004ea0 <WIZCHIP_WRITE>
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	019b      	lsls	r3, r3, #6
 8005e40:	3316      	adds	r3, #22
 8005e42:	4618      	mov	r0, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3302      	adds	r3, #2
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3303      	adds	r3, #3
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	4413      	add	r3, r2
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	f7ff f81f 	bl	8004ea0 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005e68:	3308      	adds	r3, #8
 8005e6a:	019b      	lsls	r3, r3, #6
 8005e6c:	3312      	adds	r3, #18
 8005e6e:	461a      	mov	r2, r3
 8005e70:	8c3b      	ldrh	r3, [r7, #32]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f7ff f813 	bl	8004ea0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff f888 	bl	8004f92 <getTMSR>
 8005e82:	4603      	mov	r3, r0
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005e8a:	89ba      	ldrh	r2, [r7, #12]
 8005e8c:	8abb      	ldrh	r3, [r7, #20]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d901      	bls.n	8005e96 <sendto+0x18a>
 8005e92:	8abb      	ldrh	r3, [r7, #20]
 8005e94:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff f905 	bl	80050a8 <getSn_TX_FSR>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	019b      	lsls	r3, r3, #6
 8005eac:	3308      	adds	r3, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff f814 	bl	8004edc <WIZCHIP_READ>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <sendto+0x1b6>
 8005ebc:	f06f 0303 	mvn.w	r3, #3
 8005ec0:	e13c      	b.n	800613c <sendto+0x430>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005ec2:	4ba0      	ldr	r3, [pc, #640]	; (8006144 <sendto+0x438>)
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	fa42 f303 	asr.w	r3, r2, r3
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <sendto+0x1d6>
 8005ed6:	89ba      	ldrh	r2, [r7, #12]
 8005ed8:	8abb      	ldrh	r3, [r7, #20]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d901      	bls.n	8005ee2 <sendto+0x1d6>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e12c      	b.n	800613c <sendto+0x430>
      if(len <= freesize) break;
 8005ee2:	89ba      	ldrh	r2, [r7, #12]
 8005ee4:	8abb      	ldrh	r3, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d900      	bls.n	8005eec <sendto+0x1e0>
      freesize = getSn_TX_FSR(sn);
 8005eea:	e7d4      	b.n	8005e96 <sendto+0x18a>
      if(len <= freesize) break;
 8005eec:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8005eee:	89ba      	ldrh	r2, [r7, #12]
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff f93b 	bl	8005170 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8005efa:	4893      	ldr	r0, [pc, #588]	; (8006148 <sendto+0x43c>)
 8005efc:	f7fe ffee 	bl	8004edc <WIZCHIP_READ>
 8005f00:	4603      	mov	r3, r0
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f107 0310 	add.w	r3, r7, #16
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	488e      	ldr	r0, [pc, #568]	; (8006148 <sendto+0x43c>)
 8005f10:	f7fe ffe4 	bl	8004edc <WIZCHIP_READ>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	f107 0310 	add.w	r3, r7, #16
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	488a      	ldr	r0, [pc, #552]	; (800614c <sendto+0x440>)
 8005f24:	f7fe ffda 	bl	8004edc <WIZCHIP_READ>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	3302      	adds	r3, #2
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	4884      	ldr	r0, [pc, #528]	; (800614c <sendto+0x440>)
 8005f3a:	f7fe ffcf 	bl	8004edc <WIZCHIP_READ>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	f107 0310 	add.w	r3, r7, #16
 8005f46:	3303      	adds	r3, #3
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d145      	bne.n	8005fde <sendto+0x2d2>
      {
         getSUBR((uint8_t*)&taddr);
 8005f52:	487f      	ldr	r0, [pc, #508]	; (8006150 <sendto+0x444>)
 8005f54:	f7fe ffc2 	bl	8004edc <WIZCHIP_READ>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f107 0310 	add.w	r3, r7, #16
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
 8005f66:	487a      	ldr	r0, [pc, #488]	; (8006150 <sendto+0x444>)
 8005f68:	f7fe ffb8 	bl	8004edc <WIZCHIP_READ>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f107 0310 	add.w	r3, r7, #16
 8005f74:	3301      	adds	r3, #1
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	4876      	ldr	r0, [pc, #472]	; (8006154 <sendto+0x448>)
 8005f7c:	f7fe ffae 	bl	8004edc <WIZCHIP_READ>
 8005f80:	4603      	mov	r3, r0
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	3302      	adds	r3, #2
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	4870      	ldr	r0, [pc, #448]	; (8006154 <sendto+0x448>)
 8005f92:	f7fe ffa3 	bl	8004edc <WIZCHIP_READ>
 8005f96:	4603      	mov	r3, r0
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f107 0310 	add.w	r3, r7, #16
 8005f9e:	3303      	adds	r3, #3
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8005fa4:	4b6c      	ldr	r3, [pc, #432]	; (8006158 <sendto+0x44c>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	4b6b      	ldr	r3, [pc, #428]	; (800615c <sendto+0x450>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4865      	ldr	r0, [pc, #404]	; (8006150 <sendto+0x444>)
 8005fbc:	f7fe ff70 	bl	8004ea0 <WIZCHIP_WRITE>
 8005fc0:	4b67      	ldr	r3, [pc, #412]	; (8006160 <sendto+0x454>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	4b66      	ldr	r3, [pc, #408]	; (8006164 <sendto+0x458>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	485f      	ldr	r0, [pc, #380]	; (8006154 <sendto+0x448>)
 8005fd8:	f7fe ff62 	bl	8004ea0 <WIZCHIP_WRITE>
 8005fdc:	e001      	b.n	8005fe2 <sendto+0x2d6>
      }
      else taddr = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005fe8:	3308      	adds	r3, #8
 8005fea:	019b      	lsls	r3, r3, #6
 8005fec:	3320      	adds	r3, #32
 8005fee:	461a      	mov	r2, r3
 8005ff0:	89bb      	ldrh	r3, [r7, #12]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe ff51 	bl	8004ea0 <WIZCHIP_WRITE>
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8006004:	3308      	adds	r3, #8
 8006006:	019b      	lsls	r3, r3, #6
 8006008:	3322      	adds	r3, #34	; 0x22
 800600a:	461a      	mov	r2, r3
 800600c:	89bb      	ldrh	r3, [r7, #12]
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f7fe ff45 	bl	8004ea0 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800601c:	3308      	adds	r3, #8
 800601e:	019b      	lsls	r3, r3, #6
 8006020:	3302      	adds	r3, #2
 8006022:	2120      	movs	r1, #32
 8006024:	4618      	mov	r0, r3
 8006026:	f7fe ff3b 	bl	8004ea0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800602a:	bf00      	nop
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8006032:	3308      	adds	r3, #8
 8006034:	019b      	lsls	r3, r3, #6
 8006036:	3302      	adds	r3, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe ff4f 	bl	8004edc <WIZCHIP_READ>
 800603e:	4603      	mov	r3, r0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f2      	bne.n	800602c <sendto+0x320>
   while(1)
   {
      tmp = getSn_IR(sn);
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800604c:	3308      	adds	r3, #8
 800604e:	019b      	lsls	r3, r3, #6
 8006050:	3306      	adds	r3, #6
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe ff42 	bl	8004edc <WIZCHIP_READ>
 8006058:	4603      	mov	r3, r0
 800605a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <sendto+0x378>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800606c:	3308      	adds	r3, #8
 800606e:	019b      	lsls	r3, r3, #6
 8006070:	3306      	adds	r3, #6
 8006072:	2110      	movs	r1, #16
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe ff13 	bl	8004ea0 <WIZCHIP_WRITE>
         break;
 800607a:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d05b      	beq.n	800613a <sendto+0x42e>
 8006082:	e037      	b.n	80060f4 <sendto+0x3e8>
      else if(tmp & Sn_IR_TIMEOUT)
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0db      	beq.n	8006046 <sendto+0x33a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8006094:	3308      	adds	r3, #8
 8006096:	019b      	lsls	r3, r3, #6
 8006098:	3306      	adds	r3, #6
 800609a:	2108      	movs	r1, #8
 800609c:	4618      	mov	r0, r3
 800609e:	f7fe feff 	bl	8004ea0 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d022      	beq.n	80060ee <sendto+0x3e2>
 80060a8:	f107 0310 	add.w	r3, r7, #16
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	3301      	adds	r3, #1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4413      	add	r3, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	4822      	ldr	r0, [pc, #136]	; (8006150 <sendto+0x444>)
 80060c6:	f7fe feeb 	bl	8004ea0 <WIZCHIP_WRITE>
 80060ca:	f107 0310 	add.w	r3, r7, #16
 80060ce:	3302      	adds	r3, #2
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f107 0310 	add.w	r3, r7, #16
 80060dc:	3303      	adds	r3, #3
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4413      	add	r3, r2
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	481a      	ldr	r0, [pc, #104]	; (8006154 <sendto+0x448>)
 80060ea:	f7fe fed9 	bl	8004ea0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80060ee:	f06f 030c 	mvn.w	r3, #12
 80060f2:	e023      	b.n	800613c <sendto+0x430>
      if(taddr) setSUBR((uint8_t*)&taddr);
 80060f4:	f107 0310 	add.w	r3, r7, #16
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f107 0310 	add.w	r3, r7, #16
 8006104:	3301      	adds	r3, #1
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	4413      	add	r3, r2
 800610c:	b29b      	uxth	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	480f      	ldr	r0, [pc, #60]	; (8006150 <sendto+0x444>)
 8006112:	f7fe fec5 	bl	8004ea0 <WIZCHIP_WRITE>
 8006116:	f107 0310 	add.w	r3, r7, #16
 800611a:	3302      	adds	r3, #2
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b29a      	uxth	r2, r3
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	3303      	adds	r3, #3
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	4413      	add	r3, r2
 8006130:	b29b      	uxth	r3, r3
 8006132:	4619      	mov	r1, r3
 8006134:	4807      	ldr	r0, [pc, #28]	; (8006154 <sendto+0x448>)
 8006136:	f7fe feb3 	bl	8004ea0 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800613a:	89bb      	ldrh	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20006158 	.word	0x20006158
 8006148:	34000018 	.word	0x34000018
 800614c:	3400001a 	.word	0x3400001a
 8006150:	34000014 	.word	0x34000014
 8006154:	34000016 	.word	0x34000016
 8006158:	08007fc0 	.word	0x08007fc0
 800615c:	08007fc1 	.word	0x08007fc1
 8006160:	08007fc2 	.word	0x08007fc2
 8006164:	08007fc3 	.word	0x08007fc3

08006168 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
 800616c:	bf00      	nop
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
 8006190:	bf00      	nop
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	807b      	strh	r3, [r7, #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <reg_wizchip_bus_cbfunc>:
}

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 80061d6:	bf00      	nop
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <reg_wizchip_bus_cbfunc+0x4c>)
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f9      	beq.n	80061d8 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <reg_wizchip_bus_cbfunc+0x24>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80061f0:	4b09      	ldr	r3, [pc, #36]	; (8006218 <reg_wizchip_bus_cbfunc+0x4c>)
 80061f2:	4a0a      	ldr	r2, [pc, #40]	; (800621c <reg_wizchip_bus_cbfunc+0x50>)
 80061f4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80061f6:	4b08      	ldr	r3, [pc, #32]	; (8006218 <reg_wizchip_bus_cbfunc+0x4c>)
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <reg_wizchip_bus_cbfunc+0x54>)
 80061fa:	621a      	str	r2, [r3, #32]
 80061fc:	e006      	b.n	800620c <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 80061fe:	4a06      	ldr	r2, [pc, #24]	; (8006218 <reg_wizchip_bus_cbfunc+0x4c>)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8006204:	4a04      	ldr	r2, [pc, #16]	; (8006218 <reg_wizchip_bus_cbfunc+0x4c>)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6213      	str	r3, [r2, #32]
   }
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	20000038 	.word	0x20000038
 800621c:	08006199 	.word	0x08006199
 8006220:	080061b1 	.word	0x080061b1

08006224 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
   uint8_t i;
   switch(cwtype)
 8006238:	79fb      	ldrb	r3, [r7, #7]
 800623a:	2b08      	cmp	r3, #8
 800623c:	f200 808e 	bhi.w	800635c <ctlwizchip+0x138>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <ctlwizchip+0x24>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800626d 	.word	0x0800626d
 800624c:	08006273 	.word	0x08006273
 8006250:	080062fb 	.word	0x080062fb
 8006254:	080062ef 	.word	0x080062ef
 8006258:	08006309 	.word	0x08006309
 800625c:	08006315 	.word	0x08006315
 8006260:	0800635d 	.word	0x0800635d
 8006264:	0800635d 	.word	0x0800635d
 8006268:	08006323 	.word	0x08006323
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800626c:	f000 f8c6 	bl	80063fc <wizchip_sw_reset>
         break;
 8006270:	e077      	b.n	8006362 <ctlwizchip+0x13e>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <ctlwizchip+0x5e>
         {
            ptmp[0] = (uint8_t*)arg;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3308      	adds	r3, #8
 8006280:	613b      	str	r3, [r7, #16]
         }
         printf("tx mem: ");
 8006282:	483a      	ldr	r0, [pc, #232]	; (800636c <ctlwizchip+0x148>)
 8006284:	f000 fdb0 	bl	8006de8 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8006288:	2300      	movs	r3, #0
 800628a:	75fb      	strb	r3, [r7, #23]
 800628c:	e00a      	b.n	80062a4 <ctlwizchip+0x80>
         {
        	 printf("%d,", ptmp[0][i]);
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	4413      	add	r3, r2
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4835      	ldr	r0, [pc, #212]	; (8006370 <ctlwizchip+0x14c>)
 800629a:	f000 fda5 	bl	8006de8 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	3301      	adds	r3, #1
 80062a2:	75fb      	strb	r3, [r7, #23]
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b07      	cmp	r3, #7
 80062a8:	d9f1      	bls.n	800628e <ctlwizchip+0x6a>
         }
         printf("\r\n");
 80062aa:	4832      	ldr	r0, [pc, #200]	; (8006374 <ctlwizchip+0x150>)
 80062ac:	f000 fe22 	bl	8006ef4 <puts>
         printf("rx mem: ");
 80062b0:	4831      	ldr	r0, [pc, #196]	; (8006378 <ctlwizchip+0x154>)
 80062b2:	f000 fd99 	bl	8006de8 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 80062b6:	2300      	movs	r3, #0
 80062b8:	75fb      	strb	r3, [r7, #23]
 80062ba:	e00a      	b.n	80062d2 <ctlwizchip+0xae>
         {
        	 printf("%d,", ptmp[1][i]);
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	4413      	add	r3, r2
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4619      	mov	r1, r3
 80062c6:	482a      	ldr	r0, [pc, #168]	; (8006370 <ctlwizchip+0x14c>)
 80062c8:	f000 fd8e 	bl	8006de8 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	3301      	adds	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	2b07      	cmp	r3, #7
 80062d6:	d9f1      	bls.n	80062bc <ctlwizchip+0x98>
         }
         printf("\r\n");
 80062d8:	4826      	ldr	r0, [pc, #152]	; (8006374 <ctlwizchip+0x150>)
 80062da:	f000 fe0b 	bl	8006ef4 <puts>
         return wizchip_init(ptmp[0], ptmp[1]);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f995 	bl	8006614 <wizchip_init>
 80062ea:	4603      	mov	r3, r0
 80062ec:	e03a      	b.n	8006364 <ctlwizchip+0x140>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 fa24 	bl	8006740 <wizchip_clrinterrupt>
         break;
 80062f8:	e033      	b.n	8006362 <ctlwizchip+0x13e>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80062fa:	f000 fa45 	bl	8006788 <wizchip_getinterrupt>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	801a      	strh	r2, [r3, #0]
         break;
 8006306:	e02c      	b.n	8006362 <ctlwizchip+0x13e>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fa61 	bl	80067d4 <wizchip_setinterruptmask>
         break;         
 8006312:	e026      	b.n	8006362 <ctlwizchip+0x13e>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8006314:	f000 fa82 	bl	800681c <wizchip_getinterruptmask>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	801a      	strh	r2, [r3, #0]
         break;
 8006320:	e01f      	b.n	8006362 <ctlwizchip+0x13e>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <ctlwizchip+0x158>)
 8006324:	789a      	ldrb	r2, [r3, #2]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	3301      	adds	r3, #1
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <ctlwizchip+0x158>)
 8006330:	78d2      	ldrb	r2, [r2, #3]
 8006332:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	3302      	adds	r3, #2
 8006338:	4a10      	ldr	r2, [pc, #64]	; (800637c <ctlwizchip+0x158>)
 800633a:	7912      	ldrb	r2, [r2, #4]
 800633c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	3303      	adds	r3, #3
 8006342:	4a0e      	ldr	r2, [pc, #56]	; (800637c <ctlwizchip+0x158>)
 8006344:	7952      	ldrb	r2, [r2, #5]
 8006346:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	3304      	adds	r3, #4
 800634c:	4a0b      	ldr	r2, [pc, #44]	; (800637c <ctlwizchip+0x158>)
 800634e:	7992      	ldrb	r2, [r2, #6]
 8006350:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3305      	adds	r3, #5
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
         break;
 800635a:	e002      	b.n	8006362 <ctlwizchip+0x13e>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 800635c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006360:	e000      	b.n	8006364 <ctlwizchip+0x140>
   }
   return 0;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	08007fc8 	.word	0x08007fc8
 8006370:	08007fd4 	.word	0x08007fd4
 8006374:	08007fd8 	.word	0x08007fd8
 8006378:	08007fdc 	.word	0x08007fdc
 800637c:	20000038 	.word	0x20000038

08006380 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	2b05      	cmp	r3, #5
 8006390:	d82c      	bhi.n	80063ec <ctlnetwork+0x6c>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <ctlnetwork+0x18>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063c1 	.word	0x080063c1
 80063a4:	080063cf 	.word	0x080063cf
 80063a8:	080063dd 	.word	0x080063dd
 80063ac:	080063e5 	.word	0x080063e5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80063b0:	6838      	ldr	r0, [r7, #0]
 80063b2:	f000 fa5d 	bl	8006870 <wizchip_setnetinfo>
         break;
 80063b6:	e01c      	b.n	80063f2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80063b8:	6838      	ldr	r0, [r7, #0]
 80063ba:	f000 fb09 	bl	80069d0 <wizchip_getnetinfo>
         break;
 80063be:	e018      	b.n	80063f2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 fbc5 	bl	8006b54 <wizchip_setnetmode>
 80063ca:	4603      	mov	r3, r0
 80063cc:	e012      	b.n	80063f4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 80063ce:	f000 fbe6 	bl	8006b9e <wizchip_getnetmode>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	701a      	strb	r2, [r3, #0]
         break;
 80063da:	e00a      	b.n	80063f2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80063dc:	6838      	ldr	r0, [r7, #0]
 80063de:	f000 fbe9 	bl	8006bb4 <wizchip_settimeout>
         break;
 80063e2:	e006      	b.n	80063f2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80063e4:	6838      	ldr	r0, [r7, #0]
 80063e6:	f000 fbff 	bl	8006be8 <wizchip_gettimeout>
         break;
 80063ea:	e002      	b.n	80063f2 <ctlnetwork+0x72>
      default:
         return -1;
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	e000      	b.n	80063f4 <ctlnetwork+0x74>
   }
   return 0;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8006402:	487b      	ldr	r0, [pc, #492]	; (80065f0 <wizchip_sw_reset+0x1f4>)
 8006404:	f7fe fd6a 	bl	8004edc <WIZCHIP_READ>
 8006408:	4603      	mov	r3, r0
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	b29b      	uxth	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	713b      	strb	r3, [r7, #4]
 8006412:	4877      	ldr	r0, [pc, #476]	; (80065f0 <wizchip_sw_reset+0x1f4>)
 8006414:	f7fe fd62 	bl	8004edc <WIZCHIP_READ>
 8006418:	4603      	mov	r3, r0
 800641a:	b2db      	uxtb	r3, r3
 800641c:	717b      	strb	r3, [r7, #5]
 800641e:	4875      	ldr	r0, [pc, #468]	; (80065f4 <wizchip_sw_reset+0x1f8>)
 8006420:	f7fe fd5c 	bl	8004edc <WIZCHIP_READ>
 8006424:	4603      	mov	r3, r0
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	b2db      	uxtb	r3, r3
 800642c:	71bb      	strb	r3, [r7, #6]
 800642e:	4871      	ldr	r0, [pc, #452]	; (80065f4 <wizchip_sw_reset+0x1f8>)
 8006430:	f7fe fd54 	bl	8004edc <WIZCHIP_READ>
 8006434:	4603      	mov	r3, r0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	486f      	ldr	r0, [pc, #444]	; (80065f8 <wizchip_sw_reset+0x1fc>)
 800643c:	f7fe fd4e 	bl	8004edc <WIZCHIP_READ>
 8006440:	4603      	mov	r3, r0
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b29b      	uxth	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	723b      	strb	r3, [r7, #8]
 800644a:	486b      	ldr	r0, [pc, #428]	; (80065f8 <wizchip_sw_reset+0x1fc>)
 800644c:	f7fe fd46 	bl	8004edc <WIZCHIP_READ>
 8006450:	4603      	mov	r3, r0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	727b      	strb	r3, [r7, #9]
   getSIPR(sip);
 8006456:	4869      	ldr	r0, [pc, #420]	; (80065fc <wizchip_sw_reset+0x200>)
 8006458:	f7fe fd40 	bl	8004edc <WIZCHIP_READ>
 800645c:	4603      	mov	r3, r0
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	b29b      	uxth	r3, r3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	733b      	strb	r3, [r7, #12]
 8006466:	4865      	ldr	r0, [pc, #404]	; (80065fc <wizchip_sw_reset+0x200>)
 8006468:	f7fe fd38 	bl	8004edc <WIZCHIP_READ>
 800646c:	4603      	mov	r3, r0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	737b      	strb	r3, [r7, #13]
 8006472:	4863      	ldr	r0, [pc, #396]	; (8006600 <wizchip_sw_reset+0x204>)
 8006474:	f7fe fd32 	bl	8004edc <WIZCHIP_READ>
 8006478:	4603      	mov	r3, r0
 800647a:	0a1b      	lsrs	r3, r3, #8
 800647c:	b29b      	uxth	r3, r3
 800647e:	b2db      	uxtb	r3, r3
 8006480:	73bb      	strb	r3, [r7, #14]
 8006482:	485f      	ldr	r0, [pc, #380]	; (8006600 <wizchip_sw_reset+0x204>)
 8006484:	f7fe fd2a 	bl	8004edc <WIZCHIP_READ>
 8006488:	4603      	mov	r3, r0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	73fb      	strb	r3, [r7, #15]
   getGAR(gw);
 800648e:	485d      	ldr	r0, [pc, #372]	; (8006604 <wizchip_sw_reset+0x208>)
 8006490:	f7fe fd24 	bl	8004edc <WIZCHIP_READ>
 8006494:	4603      	mov	r3, r0
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b29b      	uxth	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	753b      	strb	r3, [r7, #20]
 800649e:	4859      	ldr	r0, [pc, #356]	; (8006604 <wizchip_sw_reset+0x208>)
 80064a0:	f7fe fd1c 	bl	8004edc <WIZCHIP_READ>
 80064a4:	4603      	mov	r3, r0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	757b      	strb	r3, [r7, #21]
 80064aa:	4857      	ldr	r0, [pc, #348]	; (8006608 <wizchip_sw_reset+0x20c>)
 80064ac:	f7fe fd16 	bl	8004edc <WIZCHIP_READ>
 80064b0:	4603      	mov	r3, r0
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	75bb      	strb	r3, [r7, #22]
 80064ba:	4853      	ldr	r0, [pc, #332]	; (8006608 <wizchip_sw_reset+0x20c>)
 80064bc:	f7fe fd0e 	bl	8004edc <WIZCHIP_READ>
 80064c0:	4603      	mov	r3, r0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	75fb      	strb	r3, [r7, #23]
   getSUBR(sn);
 80064c6:	4851      	ldr	r0, [pc, #324]	; (800660c <wizchip_sw_reset+0x210>)
 80064c8:	f7fe fd08 	bl	8004edc <WIZCHIP_READ>
 80064cc:	4603      	mov	r3, r0
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	743b      	strb	r3, [r7, #16]
 80064d6:	484d      	ldr	r0, [pc, #308]	; (800660c <wizchip_sw_reset+0x210>)
 80064d8:	f7fe fd00 	bl	8004edc <WIZCHIP_READ>
 80064dc:	4603      	mov	r3, r0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	747b      	strb	r3, [r7, #17]
 80064e2:	484b      	ldr	r0, [pc, #300]	; (8006610 <wizchip_sw_reset+0x214>)
 80064e4:	f7fe fcfa 	bl	8004edc <WIZCHIP_READ>
 80064e8:	4603      	mov	r3, r0
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	74bb      	strb	r3, [r7, #18]
 80064f2:	4847      	ldr	r0, [pc, #284]	; (8006610 <wizchip_sw_reset+0x214>)
 80064f4:	f7fe fcf2 	bl	8004edc <WIZCHIP_READ>
 80064f8:	4603      	mov	r3, r0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	74fb      	strb	r3, [r7, #19]
   setMR(MR_RST);
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8006504:	f7fe fccc 	bl	8004ea0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006508:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 800650c:	f7fe fce6 	bl	8004edc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8006510:	793b      	ldrb	r3, [r7, #4]
 8006512:	b29b      	uxth	r3, r3
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	b29a      	uxth	r2, r3
 8006518:	797b      	ldrb	r3, [r7, #5]
 800651a:	b29b      	uxth	r3, r3
 800651c:	4413      	add	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	4619      	mov	r1, r3
 8006522:	4833      	ldr	r0, [pc, #204]	; (80065f0 <wizchip_sw_reset+0x1f4>)
 8006524:	f7fe fcbc 	bl	8004ea0 <WIZCHIP_WRITE>
 8006528:	79bb      	ldrb	r3, [r7, #6]
 800652a:	b29b      	uxth	r3, r3
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	b29a      	uxth	r2, r3
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	b29b      	uxth	r3, r3
 8006534:	4413      	add	r3, r2
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	482e      	ldr	r0, [pc, #184]	; (80065f4 <wizchip_sw_reset+0x1f8>)
 800653c:	f7fe fcb0 	bl	8004ea0 <WIZCHIP_WRITE>
 8006540:	7a3b      	ldrb	r3, [r7, #8]
 8006542:	b29b      	uxth	r3, r3
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	b29a      	uxth	r2, r3
 8006548:	7a7b      	ldrb	r3, [r7, #9]
 800654a:	b29b      	uxth	r3, r3
 800654c:	4413      	add	r3, r2
 800654e:	b29b      	uxth	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	4829      	ldr	r0, [pc, #164]	; (80065f8 <wizchip_sw_reset+0x1fc>)
 8006554:	f7fe fca4 	bl	8004ea0 <WIZCHIP_WRITE>
   setGAR(gw);
 8006558:	7d3b      	ldrb	r3, [r7, #20]
 800655a:	b29b      	uxth	r3, r3
 800655c:	021b      	lsls	r3, r3, #8
 800655e:	b29a      	uxth	r2, r3
 8006560:	7d7b      	ldrb	r3, [r7, #21]
 8006562:	b29b      	uxth	r3, r3
 8006564:	4413      	add	r3, r2
 8006566:	b29b      	uxth	r3, r3
 8006568:	4619      	mov	r1, r3
 800656a:	4826      	ldr	r0, [pc, #152]	; (8006604 <wizchip_sw_reset+0x208>)
 800656c:	f7fe fc98 	bl	8004ea0 <WIZCHIP_WRITE>
 8006570:	7dbb      	ldrb	r3, [r7, #22]
 8006572:	b29b      	uxth	r3, r3
 8006574:	021b      	lsls	r3, r3, #8
 8006576:	b29a      	uxth	r2, r3
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	b29b      	uxth	r3, r3
 800657c:	4413      	add	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	4619      	mov	r1, r3
 8006582:	4821      	ldr	r0, [pc, #132]	; (8006608 <wizchip_sw_reset+0x20c>)
 8006584:	f7fe fc8c 	bl	8004ea0 <WIZCHIP_WRITE>
   setSUBR(sn);
 8006588:	7c3b      	ldrb	r3, [r7, #16]
 800658a:	b29b      	uxth	r3, r3
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b29a      	uxth	r2, r3
 8006590:	7c7b      	ldrb	r3, [r7, #17]
 8006592:	b29b      	uxth	r3, r3
 8006594:	4413      	add	r3, r2
 8006596:	b29b      	uxth	r3, r3
 8006598:	4619      	mov	r1, r3
 800659a:	481c      	ldr	r0, [pc, #112]	; (800660c <wizchip_sw_reset+0x210>)
 800659c:	f7fe fc80 	bl	8004ea0 <WIZCHIP_WRITE>
 80065a0:	7cbb      	ldrb	r3, [r7, #18]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	7cfb      	ldrb	r3, [r7, #19]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	4817      	ldr	r0, [pc, #92]	; (8006610 <wizchip_sw_reset+0x214>)
 80065b4:	f7fe fc74 	bl	8004ea0 <WIZCHIP_WRITE>
   setSIPR(sip);
 80065b8:	7b3b      	ldrb	r3, [r7, #12]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	b29a      	uxth	r2, r3
 80065c0:	7b7b      	ldrb	r3, [r7, #13]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4413      	add	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4619      	mov	r1, r3
 80065ca:	480c      	ldr	r0, [pc, #48]	; (80065fc <wizchip_sw_reset+0x200>)
 80065cc:	f7fe fc68 	bl	8004ea0 <WIZCHIP_WRITE>
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4413      	add	r3, r2
 80065de:	b29b      	uxth	r3, r3
 80065e0:	4619      	mov	r1, r3
 80065e2:	4807      	ldr	r0, [pc, #28]	; (8006600 <wizchip_sw_reset+0x204>)
 80065e4:	f7fe fc5c 	bl	8004ea0 <WIZCHIP_WRITE>
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	34000008 	.word	0x34000008
 80065f4:	3400000a 	.word	0x3400000a
 80065f8:	3400000c 	.word	0x3400000c
 80065fc:	34000018 	.word	0x34000018
 8006600:	3400001a 	.word	0x3400001a
 8006604:	34000010 	.word	0x34000010
 8006608:	34000012 	.word	0x34000012
 800660c:	34000014 	.word	0x34000014
 8006610:	34000016 	.word	0x34000016

08006614 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006622:	f7ff feeb 	bl	80063fc <wizchip_sw_reset>
   if(txsize)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d040      	beq.n	80066ae <wizchip_init+0x9a>
   {
      tmp = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e018      	b.n	8006668 <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b3f      	cmp	r3, #63	; 0x3f
 8006642:	d902      	bls.n	800664a <wizchip_init+0x36>
 8006644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006648:	e076      	b.n	8006738 <wizchip_init+0x124>
			tmp += txsize[i];
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	4413      	add	r3, r2
 8006658:	b2db      	uxtb	r3, r3
 800665a:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800665c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	3301      	adds	r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800666c:	2b07      	cmp	r3, #7
 800666e:	dde2      	ble.n	8006636 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <wizchip_init+0x6e>
 800667c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006680:	e05a      	b.n	8006738 <wizchip_init+0x124>
		#else
			if(tmp > 16) return -1;
		#endif
		}
	#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	e00e      	b.n	80066a6 <wizchip_init+0x92>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8006688:	7bf8      	ldrb	r0, [r7, #15]
 800668a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4619      	mov	r1, r3
 8006696:	f7fe fc3f 	bl	8004f18 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800669a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	73fb      	strb	r3, [r7, #15]
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	2b07      	cmp	r3, #7
 80066ac:	ddec      	ble.n	8006688 <wizchip_init+0x74>
		#endif
		}

   }

   if(rxsize)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d040      	beq.n	8006736 <wizchip_init+0x122>
   {
      tmp = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e018      	b.n	80066f0 <wizchip_init+0xdc>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80066be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b3f      	cmp	r3, #63	; 0x3f
 80066ca:	d902      	bls.n	80066d2 <wizchip_init+0xbe>
 80066cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066d0:	e032      	b.n	8006738 <wizchip_init+0x124>
			tmp += rxsize[i];
 80066d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4413      	add	r3, r2
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	4413      	add	r3, r2
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80066e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	3301      	adds	r3, #1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	73fb      	strb	r3, [r7, #15]
 80066f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f4:	2b07      	cmp	r3, #7
 80066f6:	dde2      	ble.n	80066be <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <wizchip_init+0xf6>
 8006704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006708:	e016      	b.n	8006738 <wizchip_init+0x124>
			if(tmp > 16) return -1;
		#endif
		}
	#endif

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]
 800670e:	e00e      	b.n	800672e <wizchip_init+0x11a>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8006710:	7bf8      	ldrb	r0, [r7, #15]
 8006712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	4413      	add	r3, r2
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	4619      	mov	r1, r3
 800671e:	f7fe fc5f 	bl	8004fe0 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	3301      	adds	r3, #1
 800672a:	b2db      	uxtb	r3, r3
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006732:	2b07      	cmp	r3, #7
 8006734:	ddec      	ble.n	8006710 <wizchip_init+0xfc>
		#endif
		}
   }
   return 0;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	b29b      	uxth	r3, r3
 8006754:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	f043 0310 	orr.w	r3, r3, #16
 800675c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	b21a      	sxth	r2, r3
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	b21b      	sxth	r3, r3
 8006768:	4313      	orrs	r3, r2
 800676a:	b21b      	sxth	r3, r3
 800676c:	b29b      	uxth	r3, r3
 800676e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006772:	b29b      	uxth	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	4803      	ldr	r0, [pc, #12]	; (8006784 <wizchip_clrinterrupt+0x44>)
 8006778:	f7fe fb92 	bl	8004ea0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	34000002 	.word	0x34000002

08006788 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 800679a:	480d      	ldr	r0, [pc, #52]	; (80067d0 <wizchip_getinterrupt+0x48>)
 800679c:	f7fe fb9e 	bl	8004edc <WIZCHIP_READ>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067a6:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80067a8:	88bb      	ldrh	r3, [r7, #4]
 80067aa:	0a1b      	lsrs	r3, r3, #8
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80067b0:	88bb      	ldrh	r3, [r7, #4]
 80067b2:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80067b4:	79bb      	ldrb	r3, [r7, #6]
 80067b6:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80067b8:	88bb      	ldrh	r3, [r7, #4]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	b29a      	uxth	r2, r3
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80067c6:	88bb      	ldrh	r3, [r7, #4]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	34000002 	.word	0x34000002

080067d4 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	f023 0310 	bic.w	r3, r3, #16
 80067f0:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	b21a      	sxth	r2, r3
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	4313      	orrs	r3, r2
 80067fe:	b21b      	sxth	r3, r3
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006806:	b29b      	uxth	r3, r3
 8006808:	4619      	mov	r1, r3
 800680a:	4803      	ldr	r0, [pc, #12]	; (8006818 <wizchip_setinterruptmask+0x44>)
 800680c:	f7fe fb48 	bl	8004ea0 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	34000004 	.word	0x34000004

0800681c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800682e:	480f      	ldr	r0, [pc, #60]	; (800686c <wizchip_getinterruptmask+0x50>)
 8006830:	f7fe fb54 	bl	8004edc <WIZCHIP_READ>
 8006834:	4603      	mov	r3, r0
 8006836:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800683a:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 800683c:	88bb      	ldrh	r3, [r7, #4]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	b29b      	uxth	r3, r3
 8006842:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8006844:	88bb      	ldrh	r3, [r7, #4]
 8006846:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	f023 0310 	bic.w	r3, r3, #16
 800684e:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8006850:	79bb      	ldrb	r3, [r7, #6]
 8006852:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006854:	88bb      	ldrh	r3, [r7, #4]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	b29a      	uxth	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	b29b      	uxth	r3, r3
 800685e:	4413      	add	r3, r2
 8006860:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006862:	88bb      	ldrh	r3, [r7, #4]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	34000004 	.word	0x34000004

08006870 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	785b      	ldrb	r3, [r3, #1]
 8006886:	b29b      	uxth	r3, r3
 8006888:	4413      	add	r3, r2
 800688a:	b29b      	uxth	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	4845      	ldr	r0, [pc, #276]	; (80069a4 <wizchip_setnetinfo+0x134>)
 8006890:	f7fe fb06 	bl	8004ea0 <WIZCHIP_WRITE>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	789b      	ldrb	r3, [r3, #2]
 8006898:	b29b      	uxth	r3, r3
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4413      	add	r3, r2
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	483f      	ldr	r0, [pc, #252]	; (80069a8 <wizchip_setnetinfo+0x138>)
 80068ac:	f7fe faf8 	bl	8004ea0 <WIZCHIP_WRITE>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	791b      	ldrb	r3, [r3, #4]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	795b      	ldrb	r3, [r3, #5]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	4839      	ldr	r0, [pc, #228]	; (80069ac <wizchip_setnetinfo+0x13c>)
 80068c8:	f7fe faea 	bl	8004ea0 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	7b9b      	ldrb	r3, [r3, #14]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	7bdb      	ldrb	r3, [r3, #15]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	4413      	add	r3, r2
 80068de:	b29b      	uxth	r3, r3
 80068e0:	4619      	mov	r1, r3
 80068e2:	4833      	ldr	r0, [pc, #204]	; (80069b0 <wizchip_setnetinfo+0x140>)
 80068e4:	f7fe fadc 	bl	8004ea0 <WIZCHIP_WRITE>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7c1b      	ldrb	r3, [r3, #16]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	7c5b      	ldrb	r3, [r3, #17]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4619      	mov	r1, r3
 80068fe:	482d      	ldr	r0, [pc, #180]	; (80069b4 <wizchip_setnetinfo+0x144>)
 8006900:	f7fe face 	bl	8004ea0 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7a9b      	ldrb	r3, [r3, #10]
 8006908:	b29b      	uxth	r3, r3
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	7adb      	ldrb	r3, [r3, #11]
 8006912:	b29b      	uxth	r3, r3
 8006914:	4413      	add	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	4619      	mov	r1, r3
 800691a:	4827      	ldr	r0, [pc, #156]	; (80069b8 <wizchip_setnetinfo+0x148>)
 800691c:	f7fe fac0 	bl	8004ea0 <WIZCHIP_WRITE>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	b29b      	uxth	r3, r3
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	b29a      	uxth	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	7b5b      	ldrb	r3, [r3, #13]
 800692e:	b29b      	uxth	r3, r3
 8006930:	4413      	add	r3, r2
 8006932:	b29b      	uxth	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	4821      	ldr	r0, [pc, #132]	; (80069bc <wizchip_setnetinfo+0x14c>)
 8006938:	f7fe fab2 	bl	8004ea0 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	799b      	ldrb	r3, [r3, #6]
 8006940:	b29b      	uxth	r3, r3
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	79db      	ldrb	r3, [r3, #7]
 800694a:	b29b      	uxth	r3, r3
 800694c:	4413      	add	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	481b      	ldr	r0, [pc, #108]	; (80069c0 <wizchip_setnetinfo+0x150>)
 8006954:	f7fe faa4 	bl	8004ea0 <WIZCHIP_WRITE>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7a1b      	ldrb	r3, [r3, #8]
 800695c:	b29b      	uxth	r3, r3
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7a5b      	ldrb	r3, [r3, #9]
 8006966:	b29b      	uxth	r3, r3
 8006968:	4413      	add	r3, r2
 800696a:	b29b      	uxth	r3, r3
 800696c:	4619      	mov	r1, r3
 800696e:	4815      	ldr	r0, [pc, #84]	; (80069c4 <wizchip_setnetinfo+0x154>)
 8006970:	f7fe fa96 	bl	8004ea0 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7c9a      	ldrb	r2, [r3, #18]
 8006978:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <wizchip_setnetinfo+0x158>)
 800697a:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7cda      	ldrb	r2, [r3, #19]
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <wizchip_setnetinfo+0x158>)
 8006982:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	7d1a      	ldrb	r2, [r3, #20]
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <wizchip_setnetinfo+0x158>)
 800698a:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	7d5a      	ldrb	r2, [r3, #21]
 8006990:	4b0d      	ldr	r3, [pc, #52]	; (80069c8 <wizchip_setnetinfo+0x158>)
 8006992:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	7d9a      	ldrb	r2, [r3, #22]
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <wizchip_setnetinfo+0x15c>)
 800699a:	701a      	strb	r2, [r3, #0]
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	34000008 	.word	0x34000008
 80069a8:	3400000a 	.word	0x3400000a
 80069ac:	3400000c 	.word	0x3400000c
 80069b0:	34000010 	.word	0x34000010
 80069b4:	34000012 	.word	0x34000012
 80069b8:	34000014 	.word	0x34000014
 80069bc:	34000016 	.word	0x34000016
 80069c0:	34000018 	.word	0x34000018
 80069c4:	3400001a 	.word	0x3400001a
 80069c8:	2000617c 	.word	0x2000617c
 80069cc:	20006180 	.word	0x20006180

080069d0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80069d8:	4853      	ldr	r0, [pc, #332]	; (8006b28 <wizchip_getnetinfo+0x158>)
 80069da:	f7fe fa7f 	bl	8004edc <WIZCHIP_READ>
 80069de:	4603      	mov	r3, r0
 80069e0:	0a1b      	lsrs	r3, r3, #8
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	484f      	ldr	r0, [pc, #316]	; (8006b28 <wizchip_getnetinfo+0x158>)
 80069ec:	f7fe fa76 	bl	8004edc <WIZCHIP_READ>
 80069f0:	4603      	mov	r3, r0
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	705a      	strb	r2, [r3, #1]
 80069f8:	484c      	ldr	r0, [pc, #304]	; (8006b2c <wizchip_getnetinfo+0x15c>)
 80069fa:	f7fe fa6f 	bl	8004edc <WIZCHIP_READ>
 80069fe:	4603      	mov	r3, r0
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	709a      	strb	r2, [r3, #2]
 8006a0a:	4848      	ldr	r0, [pc, #288]	; (8006b2c <wizchip_getnetinfo+0x15c>)
 8006a0c:	f7fe fa66 	bl	8004edc <WIZCHIP_READ>
 8006a10:	4603      	mov	r3, r0
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	70da      	strb	r2, [r3, #3]
 8006a18:	4845      	ldr	r0, [pc, #276]	; (8006b30 <wizchip_getnetinfo+0x160>)
 8006a1a:	f7fe fa5f 	bl	8004edc <WIZCHIP_READ>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	711a      	strb	r2, [r3, #4]
 8006a2a:	4841      	ldr	r0, [pc, #260]	; (8006b30 <wizchip_getnetinfo+0x160>)
 8006a2c:	f7fe fa56 	bl	8004edc <WIZCHIP_READ>
 8006a30:	4603      	mov	r3, r0
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8006a38:	483e      	ldr	r0, [pc, #248]	; (8006b34 <wizchip_getnetinfo+0x164>)
 8006a3a:	f7fe fa4f 	bl	8004edc <WIZCHIP_READ>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	0a1b      	lsrs	r3, r3, #8
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	739a      	strb	r2, [r3, #14]
 8006a4a:	483a      	ldr	r0, [pc, #232]	; (8006b34 <wizchip_getnetinfo+0x164>)
 8006a4c:	f7fe fa46 	bl	8004edc <WIZCHIP_READ>
 8006a50:	4603      	mov	r3, r0
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	73da      	strb	r2, [r3, #15]
 8006a58:	4837      	ldr	r0, [pc, #220]	; (8006b38 <wizchip_getnetinfo+0x168>)
 8006a5a:	f7fe fa3f 	bl	8004edc <WIZCHIP_READ>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	741a      	strb	r2, [r3, #16]
 8006a6a:	4833      	ldr	r0, [pc, #204]	; (8006b38 <wizchip_getnetinfo+0x168>)
 8006a6c:	f7fe fa36 	bl	8004edc <WIZCHIP_READ>
 8006a70:	4603      	mov	r3, r0
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 8006a78:	4830      	ldr	r0, [pc, #192]	; (8006b3c <wizchip_getnetinfo+0x16c>)
 8006a7a:	f7fe fa2f 	bl	8004edc <WIZCHIP_READ>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	0a1b      	lsrs	r3, r3, #8
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	729a      	strb	r2, [r3, #10]
 8006a8a:	482c      	ldr	r0, [pc, #176]	; (8006b3c <wizchip_getnetinfo+0x16c>)
 8006a8c:	f7fe fa26 	bl	8004edc <WIZCHIP_READ>
 8006a90:	4603      	mov	r3, r0
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	72da      	strb	r2, [r3, #11]
 8006a98:	4829      	ldr	r0, [pc, #164]	; (8006b40 <wizchip_getnetinfo+0x170>)
 8006a9a:	f7fe fa1f 	bl	8004edc <WIZCHIP_READ>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	731a      	strb	r2, [r3, #12]
 8006aaa:	4825      	ldr	r0, [pc, #148]	; (8006b40 <wizchip_getnetinfo+0x170>)
 8006aac:	f7fe fa16 	bl	8004edc <WIZCHIP_READ>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 8006ab8:	4822      	ldr	r0, [pc, #136]	; (8006b44 <wizchip_getnetinfo+0x174>)
 8006aba:	f7fe fa0f 	bl	8004edc <WIZCHIP_READ>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	719a      	strb	r2, [r3, #6]
 8006aca:	481e      	ldr	r0, [pc, #120]	; (8006b44 <wizchip_getnetinfo+0x174>)
 8006acc:	f7fe fa06 	bl	8004edc <WIZCHIP_READ>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	71da      	strb	r2, [r3, #7]
 8006ad8:	481b      	ldr	r0, [pc, #108]	; (8006b48 <wizchip_getnetinfo+0x178>)
 8006ada:	f7fe f9ff 	bl	8004edc <WIZCHIP_READ>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	721a      	strb	r2, [r3, #8]
 8006aea:	4817      	ldr	r0, [pc, #92]	; (8006b48 <wizchip_getnetinfo+0x178>)
 8006aec:	f7fe f9f6 	bl	8004edc <WIZCHIP_READ>
 8006af0:	4603      	mov	r3, r0
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8006af8:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <wizchip_getnetinfo+0x17c>)
 8006afa:	781a      	ldrb	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8006b00:	4b12      	ldr	r3, [pc, #72]	; (8006b4c <wizchip_getnetinfo+0x17c>)
 8006b02:	785a      	ldrb	r2, [r3, #1]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006b08:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <wizchip_getnetinfo+0x17c>)
 8006b0a:	789a      	ldrb	r2, [r3, #2]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <wizchip_getnetinfo+0x17c>)
 8006b12:	78da      	ldrb	r2, [r3, #3]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <wizchip_getnetinfo+0x180>)
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	759a      	strb	r2, [r3, #22]
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	34000008 	.word	0x34000008
 8006b2c:	3400000a 	.word	0x3400000a
 8006b30:	3400000c 	.word	0x3400000c
 8006b34:	34000010 	.word	0x34000010
 8006b38:	34000012 	.word	0x34000012
 8006b3c:	34000014 	.word	0x34000014
 8006b40:	34000016 	.word	0x34000016
 8006b44:	34000018 	.word	0x34000018
 8006b48:	3400001a 	.word	0x3400001a
 8006b4c:	2000617c 	.word	0x2000617c
 8006b50:	20006180 	.word	0x20006180

08006b54 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <wizchip_setnetmode+0x1e>
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b70:	e011      	b.n	8006b96 <wizchip_setnetmode+0x42>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 8006b72:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8006b76:	f7fe f9b1 	bl	8004edc <WIZCHIP_READ>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8006b7e:	7bfa      	ldrb	r2, [r7, #15]
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8006b90:	f7fe f986 	bl	8004ea0 <WIZCHIP_WRITE>
   return 0;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8006ba2:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8006ba6:	f7fe f999 	bl	8004edc <WIZCHIP_READ>
 8006baa:	4603      	mov	r3, r0
 8006bac:	b2db      	uxtb	r3, r3
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4806      	ldr	r0, [pc, #24]	; (8006be0 <wizchip_settimeout+0x2c>)
 8006bc6:	f7fe f96b 	bl	8004ea0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4804      	ldr	r0, [pc, #16]	; (8006be4 <wizchip_settimeout+0x30>)
 8006bd2:	f7fe f965 	bl	8004ea0 <WIZCHIP_WRITE>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	3400001e 	.word	0x3400001e
 8006be4:	3400001c 	.word	0x3400001c

08006be8 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8006bf0:	4808      	ldr	r0, [pc, #32]	; (8006c14 <wizchip_gettimeout+0x2c>)
 8006bf2:	f7fe f973 	bl	8004edc <WIZCHIP_READ>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8006bfe:	4806      	ldr	r0, [pc, #24]	; (8006c18 <wizchip_gettimeout+0x30>)
 8006c00:	f7fe f96c 	bl	8004edc <WIZCHIP_READ>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	805a      	strh	r2, [r3, #2]
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	3400001e 	.word	0x3400001e
 8006c18:	3400001c 	.word	0x3400001c

08006c1c <__errno>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	; (8006c24 <__errno+0x8>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	20000064 	.word	0x20000064

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	4d0c      	ldr	r5, [pc, #48]	; (8006c60 <__libc_init_array+0x38>)
 8006c2e:	4c0d      	ldr	r4, [pc, #52]	; (8006c64 <__libc_init_array+0x3c>)
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	f001 f806 	bl	8007c48 <_init>
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	4d0a      	ldr	r5, [pc, #40]	; (8006c68 <__libc_init_array+0x40>)
 8006c40:	4c0a      	ldr	r4, [pc, #40]	; (8006c6c <__libc_init_array+0x44>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	08008098 	.word	0x08008098
 8006c64:	08008098 	.word	0x08008098
 8006c68:	08008098 	.word	0x08008098
 8006c6c:	0800809c 	.word	0x0800809c

08006c70 <memcpy>:
 8006c70:	440a      	add	r2, r1
 8006c72:	4291      	cmp	r1, r2
 8006c74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c78:	d100      	bne.n	8006c7c <memcpy+0xc>
 8006c7a:	4770      	bx	lr
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c82:	4291      	cmp	r1, r2
 8006c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c88:	d1f9      	bne.n	8006c7e <memcpy+0xe>
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <memset>:
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	4402      	add	r2, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d100      	bne.n	8006c96 <memset+0xa>
 8006c94:	4770      	bx	lr
 8006c96:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9a:	e7f9      	b.n	8006c90 <memset+0x4>

08006c9c <_free_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d043      	beq.n	8006d2c <_free_r+0x90>
 8006ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca8:	1f0c      	subs	r4, r1, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfb8      	it	lt
 8006cae:	18e4      	addlt	r4, r4, r3
 8006cb0:	f000 fc8e 	bl	80075d0 <__malloc_lock>
 8006cb4:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <_free_r+0x94>)
 8006cb6:	6813      	ldr	r3, [r2, #0]
 8006cb8:	4610      	mov	r0, r2
 8006cba:	b933      	cbnz	r3, 8006cca <_free_r+0x2e>
 8006cbc:	6063      	str	r3, [r4, #4]
 8006cbe:	6014      	str	r4, [r2, #0]
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc6:	f000 bc89 	b.w	80075dc <__malloc_unlock>
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	d90a      	bls.n	8006ce4 <_free_r+0x48>
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	1862      	adds	r2, r4, r1
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	bf01      	itttt	eq
 8006cd6:	681a      	ldreq	r2, [r3, #0]
 8006cd8:	685b      	ldreq	r3, [r3, #4]
 8006cda:	1852      	addeq	r2, r2, r1
 8006cdc:	6022      	streq	r2, [r4, #0]
 8006cde:	6063      	str	r3, [r4, #4]
 8006ce0:	6004      	str	r4, [r0, #0]
 8006ce2:	e7ed      	b.n	8006cc0 <_free_r+0x24>
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	b10b      	cbz	r3, 8006cee <_free_r+0x52>
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	d9fa      	bls.n	8006ce4 <_free_r+0x48>
 8006cee:	6811      	ldr	r1, [r2, #0]
 8006cf0:	1850      	adds	r0, r2, r1
 8006cf2:	42a0      	cmp	r0, r4
 8006cf4:	d10b      	bne.n	8006d0e <_free_r+0x72>
 8006cf6:	6820      	ldr	r0, [r4, #0]
 8006cf8:	4401      	add	r1, r0
 8006cfa:	1850      	adds	r0, r2, r1
 8006cfc:	4283      	cmp	r3, r0
 8006cfe:	6011      	str	r1, [r2, #0]
 8006d00:	d1de      	bne.n	8006cc0 <_free_r+0x24>
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4401      	add	r1, r0
 8006d08:	6011      	str	r1, [r2, #0]
 8006d0a:	6053      	str	r3, [r2, #4]
 8006d0c:	e7d8      	b.n	8006cc0 <_free_r+0x24>
 8006d0e:	d902      	bls.n	8006d16 <_free_r+0x7a>
 8006d10:	230c      	movs	r3, #12
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	e7d4      	b.n	8006cc0 <_free_r+0x24>
 8006d16:	6820      	ldr	r0, [r4, #0]
 8006d18:	1821      	adds	r1, r4, r0
 8006d1a:	428b      	cmp	r3, r1
 8006d1c:	bf01      	itttt	eq
 8006d1e:	6819      	ldreq	r1, [r3, #0]
 8006d20:	685b      	ldreq	r3, [r3, #4]
 8006d22:	1809      	addeq	r1, r1, r0
 8006d24:	6021      	streq	r1, [r4, #0]
 8006d26:	6063      	str	r3, [r4, #4]
 8006d28:	6054      	str	r4, [r2, #4]
 8006d2a:	e7c9      	b.n	8006cc0 <_free_r+0x24>
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	bf00      	nop
 8006d30:	20006184 	.word	0x20006184

08006d34 <_malloc_r>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	1ccd      	adds	r5, r1, #3
 8006d38:	f025 0503 	bic.w	r5, r5, #3
 8006d3c:	3508      	adds	r5, #8
 8006d3e:	2d0c      	cmp	r5, #12
 8006d40:	bf38      	it	cc
 8006d42:	250c      	movcc	r5, #12
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	4606      	mov	r6, r0
 8006d48:	db01      	blt.n	8006d4e <_malloc_r+0x1a>
 8006d4a:	42a9      	cmp	r1, r5
 8006d4c:	d903      	bls.n	8006d56 <_malloc_r+0x22>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	2000      	movs	r0, #0
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d56:	f000 fc3b 	bl	80075d0 <__malloc_lock>
 8006d5a:	4921      	ldr	r1, [pc, #132]	; (8006de0 <_malloc_r+0xac>)
 8006d5c:	680a      	ldr	r2, [r1, #0]
 8006d5e:	4614      	mov	r4, r2
 8006d60:	b99c      	cbnz	r4, 8006d8a <_malloc_r+0x56>
 8006d62:	4f20      	ldr	r7, [pc, #128]	; (8006de4 <_malloc_r+0xb0>)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	b923      	cbnz	r3, 8006d72 <_malloc_r+0x3e>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f8ca 	bl	8006f04 <_sbrk_r>
 8006d70:	6038      	str	r0, [r7, #0]
 8006d72:	4629      	mov	r1, r5
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 f8c5 	bl	8006f04 <_sbrk_r>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d123      	bne.n	8006dc6 <_malloc_r+0x92>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	4630      	mov	r0, r6
 8006d82:	6033      	str	r3, [r6, #0]
 8006d84:	f000 fc2a 	bl	80075dc <__malloc_unlock>
 8006d88:	e7e3      	b.n	8006d52 <_malloc_r+0x1e>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	1b5b      	subs	r3, r3, r5
 8006d8e:	d417      	bmi.n	8006dc0 <_malloc_r+0x8c>
 8006d90:	2b0b      	cmp	r3, #11
 8006d92:	d903      	bls.n	8006d9c <_malloc_r+0x68>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	441c      	add	r4, r3
 8006d98:	6025      	str	r5, [r4, #0]
 8006d9a:	e004      	b.n	8006da6 <_malloc_r+0x72>
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	42a2      	cmp	r2, r4
 8006da0:	bf0c      	ite	eq
 8006da2:	600b      	streq	r3, [r1, #0]
 8006da4:	6053      	strne	r3, [r2, #4]
 8006da6:	4630      	mov	r0, r6
 8006da8:	f000 fc18 	bl	80075dc <__malloc_unlock>
 8006dac:	f104 000b 	add.w	r0, r4, #11
 8006db0:	1d23      	adds	r3, r4, #4
 8006db2:	f020 0007 	bic.w	r0, r0, #7
 8006db6:	1ac2      	subs	r2, r0, r3
 8006db8:	d0cc      	beq.n	8006d54 <_malloc_r+0x20>
 8006dba:	1a1b      	subs	r3, r3, r0
 8006dbc:	50a3      	str	r3, [r4, r2]
 8006dbe:	e7c9      	b.n	8006d54 <_malloc_r+0x20>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	6864      	ldr	r4, [r4, #4]
 8006dc4:	e7cc      	b.n	8006d60 <_malloc_r+0x2c>
 8006dc6:	1cc4      	adds	r4, r0, #3
 8006dc8:	f024 0403 	bic.w	r4, r4, #3
 8006dcc:	42a0      	cmp	r0, r4
 8006dce:	d0e3      	beq.n	8006d98 <_malloc_r+0x64>
 8006dd0:	1a21      	subs	r1, r4, r0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 f896 	bl	8006f04 <_sbrk_r>
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d1dd      	bne.n	8006d98 <_malloc_r+0x64>
 8006ddc:	e7cf      	b.n	8006d7e <_malloc_r+0x4a>
 8006dde:	bf00      	nop
 8006de0:	20006184 	.word	0x20006184
 8006de4:	20006188 	.word	0x20006188

08006de8 <iprintf>:
 8006de8:	b40f      	push	{r0, r1, r2, r3}
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <iprintf+0x2c>)
 8006dec:	b513      	push	{r0, r1, r4, lr}
 8006dee:	681c      	ldr	r4, [r3, #0]
 8006df0:	b124      	cbz	r4, 8006dfc <iprintf+0x14>
 8006df2:	69a3      	ldr	r3, [r4, #24]
 8006df4:	b913      	cbnz	r3, 8006dfc <iprintf+0x14>
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 fad4 	bl	80073a4 <__sinit>
 8006dfc:	ab05      	add	r3, sp, #20
 8006dfe:	4620      	mov	r0, r4
 8006e00:	9a04      	ldr	r2, [sp, #16]
 8006e02:	68a1      	ldr	r1, [r4, #8]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	f000 fc17 	bl	8007638 <_vfiprintf_r>
 8006e0a:	b002      	add	sp, #8
 8006e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e10:	b004      	add	sp, #16
 8006e12:	4770      	bx	lr
 8006e14:	20000064 	.word	0x20000064

08006e18 <_puts_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b118      	cbz	r0, 8006e28 <_puts_r+0x10>
 8006e20:	6983      	ldr	r3, [r0, #24]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_puts_r+0x10>
 8006e24:	f000 fabe 	bl	80073a4 <__sinit>
 8006e28:	69ab      	ldr	r3, [r5, #24]
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	b913      	cbnz	r3, 8006e34 <_puts_r+0x1c>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 fab8 	bl	80073a4 <__sinit>
 8006e34:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <_puts_r+0xd0>)
 8006e36:	429c      	cmp	r4, r3
 8006e38:	d120      	bne.n	8006e7c <_puts_r+0x64>
 8006e3a:	686c      	ldr	r4, [r5, #4]
 8006e3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e3e:	07db      	lsls	r3, r3, #31
 8006e40:	d405      	bmi.n	8006e4e <_puts_r+0x36>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	0598      	lsls	r0, r3, #22
 8006e46:	d402      	bmi.n	8006e4e <_puts_r+0x36>
 8006e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e4a:	f000 fb49 	bl	80074e0 <__retarget_lock_acquire_recursive>
 8006e4e:	89a3      	ldrh	r3, [r4, #12]
 8006e50:	0719      	lsls	r1, r3, #28
 8006e52:	d51d      	bpl.n	8006e90 <_puts_r+0x78>
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b1db      	cbz	r3, 8006e90 <_puts_r+0x78>
 8006e58:	3e01      	subs	r6, #1
 8006e5a:	68a3      	ldr	r3, [r4, #8]
 8006e5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e60:	3b01      	subs	r3, #1
 8006e62:	60a3      	str	r3, [r4, #8]
 8006e64:	bb39      	cbnz	r1, 8006eb6 <_puts_r+0x9e>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da38      	bge.n	8006edc <_puts_r+0xc4>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	210a      	movs	r1, #10
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f89c 	bl	8006fac <__swbuf_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d011      	beq.n	8006e9c <_puts_r+0x84>
 8006e78:	250a      	movs	r5, #10
 8006e7a:	e011      	b.n	8006ea0 <_puts_r+0x88>
 8006e7c:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <_puts_r+0xd4>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <_puts_r+0x6e>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7da      	b.n	8006e3c <_puts_r+0x24>
 8006e86:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <_puts_r+0xd8>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7d5      	b.n	8006e3c <_puts_r+0x24>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f8ee 	bl	8007074 <__swsetup_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0dd      	beq.n	8006e58 <_puts_r+0x40>
 8006e9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d405      	bmi.n	8006eb2 <_puts_r+0x9a>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	059b      	lsls	r3, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_puts_r+0x9a>
 8006eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eae:	f000 fb18 	bl	80074e2 <__retarget_lock_release_recursive>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da04      	bge.n	8006ec4 <_puts_r+0xac>
 8006eba:	69a2      	ldr	r2, [r4, #24]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	dc06      	bgt.n	8006ece <_puts_r+0xb6>
 8006ec0:	290a      	cmp	r1, #10
 8006ec2:	d004      	beq.n	8006ece <_puts_r+0xb6>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	7019      	strb	r1, [r3, #0]
 8006ecc:	e7c5      	b.n	8006e5a <_puts_r+0x42>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f86b 	bl	8006fac <__swbuf_r>
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d1bf      	bne.n	8006e5a <_puts_r+0x42>
 8006eda:	e7df      	b.n	8006e9c <_puts_r+0x84>
 8006edc:	250a      	movs	r5, #10
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	701d      	strb	r5, [r3, #0]
 8006ee6:	e7db      	b.n	8006ea0 <_puts_r+0x88>
 8006ee8:	08008024 	.word	0x08008024
 8006eec:	08008044 	.word	0x08008044
 8006ef0:	08008004 	.word	0x08008004

08006ef4 <puts>:
 8006ef4:	4b02      	ldr	r3, [pc, #8]	; (8006f00 <puts+0xc>)
 8006ef6:	4601      	mov	r1, r0
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f7ff bf8d 	b.w	8006e18 <_puts_r>
 8006efe:	bf00      	nop
 8006f00:	20000064 	.word	0x20000064

08006f04 <_sbrk_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	2300      	movs	r3, #0
 8006f08:	4d05      	ldr	r5, [pc, #20]	; (8006f20 <_sbrk_r+0x1c>)
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7fb f92c 	bl	800216c <_sbrk>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_sbrk_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_sbrk_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	20007684 	.word	0x20007684

08006f24 <__sread>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	460c      	mov	r4, r1
 8006f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f2c:	f000 fe4a 	bl	8007bc4 <_read_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	bfab      	itete	ge
 8006f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f36:	89a3      	ldrhlt	r3, [r4, #12]
 8006f38:	181b      	addge	r3, r3, r0
 8006f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f3e:	bfac      	ite	ge
 8006f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f42:	81a3      	strhlt	r3, [r4, #12]
 8006f44:	bd10      	pop	{r4, pc}

08006f46 <__swrite>:
 8006f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4a:	461f      	mov	r7, r3
 8006f4c:	898b      	ldrh	r3, [r1, #12]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	05db      	lsls	r3, r3, #23
 8006f52:	460c      	mov	r4, r1
 8006f54:	4616      	mov	r6, r2
 8006f56:	d505      	bpl.n	8006f64 <__swrite+0x1e>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 fac0 	bl	80074e4 <_lseek_r>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	4632      	mov	r2, r6
 8006f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	4628      	mov	r0, r5
 8006f70:	463b      	mov	r3, r7
 8006f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	f000 b869 	b.w	8007050 <_write_r>

08006f7e <__sseek>:
 8006f7e:	b510      	push	{r4, lr}
 8006f80:	460c      	mov	r4, r1
 8006f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f86:	f000 faad 	bl	80074e4 <_lseek_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	89a3      	ldrh	r3, [r4, #12]
 8006f8e:	bf15      	itete	ne
 8006f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f9a:	81a3      	strheq	r3, [r4, #12]
 8006f9c:	bf18      	it	ne
 8006f9e:	81a3      	strhne	r3, [r4, #12]
 8006fa0:	bd10      	pop	{r4, pc}

08006fa2 <__sclose>:
 8006fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa6:	f000 b8d3 	b.w	8007150 <_close_r>
	...

08006fac <__swbuf_r>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	460e      	mov	r6, r1
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	b118      	cbz	r0, 8006fbe <__swbuf_r+0x12>
 8006fb6:	6983      	ldr	r3, [r0, #24]
 8006fb8:	b90b      	cbnz	r3, 8006fbe <__swbuf_r+0x12>
 8006fba:	f000 f9f3 	bl	80073a4 <__sinit>
 8006fbe:	4b21      	ldr	r3, [pc, #132]	; (8007044 <__swbuf_r+0x98>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	d12b      	bne.n	800701c <__swbuf_r+0x70>
 8006fc4:	686c      	ldr	r4, [r5, #4]
 8006fc6:	69a3      	ldr	r3, [r4, #24]
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	071a      	lsls	r2, r3, #28
 8006fce:	d52f      	bpl.n	8007030 <__swbuf_r+0x84>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b36b      	cbz	r3, 8007030 <__swbuf_r+0x84>
 8006fd4:	6923      	ldr	r3, [r4, #16]
 8006fd6:	6820      	ldr	r0, [r4, #0]
 8006fd8:	b2f6      	uxtb	r6, r6
 8006fda:	1ac0      	subs	r0, r0, r3
 8006fdc:	6963      	ldr	r3, [r4, #20]
 8006fde:	4637      	mov	r7, r6
 8006fe0:	4283      	cmp	r3, r0
 8006fe2:	dc04      	bgt.n	8006fee <__swbuf_r+0x42>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f948 	bl	800727c <_fflush_r>
 8006fec:	bb30      	cbnz	r0, 800703c <__swbuf_r+0x90>
 8006fee:	68a3      	ldr	r3, [r4, #8]
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60a3      	str	r3, [r4, #8]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	6022      	str	r2, [r4, #0]
 8006ffc:	701e      	strb	r6, [r3, #0]
 8006ffe:	6963      	ldr	r3, [r4, #20]
 8007000:	4283      	cmp	r3, r0
 8007002:	d004      	beq.n	800700e <__swbuf_r+0x62>
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	07db      	lsls	r3, r3, #31
 8007008:	d506      	bpl.n	8007018 <__swbuf_r+0x6c>
 800700a:	2e0a      	cmp	r6, #10
 800700c:	d104      	bne.n	8007018 <__swbuf_r+0x6c>
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 f933 	bl	800727c <_fflush_r>
 8007016:	b988      	cbnz	r0, 800703c <__swbuf_r+0x90>
 8007018:	4638      	mov	r0, r7
 800701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800701c:	4b0a      	ldr	r3, [pc, #40]	; (8007048 <__swbuf_r+0x9c>)
 800701e:	429c      	cmp	r4, r3
 8007020:	d101      	bne.n	8007026 <__swbuf_r+0x7a>
 8007022:	68ac      	ldr	r4, [r5, #8]
 8007024:	e7cf      	b.n	8006fc6 <__swbuf_r+0x1a>
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <__swbuf_r+0xa0>)
 8007028:	429c      	cmp	r4, r3
 800702a:	bf08      	it	eq
 800702c:	68ec      	ldreq	r4, [r5, #12]
 800702e:	e7ca      	b.n	8006fc6 <__swbuf_r+0x1a>
 8007030:	4621      	mov	r1, r4
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f81e 	bl	8007074 <__swsetup_r>
 8007038:	2800      	cmp	r0, #0
 800703a:	d0cb      	beq.n	8006fd4 <__swbuf_r+0x28>
 800703c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007040:	e7ea      	b.n	8007018 <__swbuf_r+0x6c>
 8007042:	bf00      	nop
 8007044:	08008024 	.word	0x08008024
 8007048:	08008044 	.word	0x08008044
 800704c:	08008004 	.word	0x08008004

08007050 <_write_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	2200      	movs	r2, #0
 800705a:	4d05      	ldr	r5, [pc, #20]	; (8007070 <_write_r+0x20>)
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f7f9 f928 	bl	80002b4 <_write>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_write_r+0x1e>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_write_r+0x1e>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	20007684 	.word	0x20007684

08007074 <__swsetup_r>:
 8007074:	4b32      	ldr	r3, [pc, #200]	; (8007140 <__swsetup_r+0xcc>)
 8007076:	b570      	push	{r4, r5, r6, lr}
 8007078:	681d      	ldr	r5, [r3, #0]
 800707a:	4606      	mov	r6, r0
 800707c:	460c      	mov	r4, r1
 800707e:	b125      	cbz	r5, 800708a <__swsetup_r+0x16>
 8007080:	69ab      	ldr	r3, [r5, #24]
 8007082:	b913      	cbnz	r3, 800708a <__swsetup_r+0x16>
 8007084:	4628      	mov	r0, r5
 8007086:	f000 f98d 	bl	80073a4 <__sinit>
 800708a:	4b2e      	ldr	r3, [pc, #184]	; (8007144 <__swsetup_r+0xd0>)
 800708c:	429c      	cmp	r4, r3
 800708e:	d10f      	bne.n	80070b0 <__swsetup_r+0x3c>
 8007090:	686c      	ldr	r4, [r5, #4]
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007098:	0719      	lsls	r1, r3, #28
 800709a:	d42c      	bmi.n	80070f6 <__swsetup_r+0x82>
 800709c:	06dd      	lsls	r5, r3, #27
 800709e:	d411      	bmi.n	80070c4 <__swsetup_r+0x50>
 80070a0:	2309      	movs	r3, #9
 80070a2:	6033      	str	r3, [r6, #0]
 80070a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e03e      	b.n	800712e <__swsetup_r+0xba>
 80070b0:	4b25      	ldr	r3, [pc, #148]	; (8007148 <__swsetup_r+0xd4>)
 80070b2:	429c      	cmp	r4, r3
 80070b4:	d101      	bne.n	80070ba <__swsetup_r+0x46>
 80070b6:	68ac      	ldr	r4, [r5, #8]
 80070b8:	e7eb      	b.n	8007092 <__swsetup_r+0x1e>
 80070ba:	4b24      	ldr	r3, [pc, #144]	; (800714c <__swsetup_r+0xd8>)
 80070bc:	429c      	cmp	r4, r3
 80070be:	bf08      	it	eq
 80070c0:	68ec      	ldreq	r4, [r5, #12]
 80070c2:	e7e6      	b.n	8007092 <__swsetup_r+0x1e>
 80070c4:	0758      	lsls	r0, r3, #29
 80070c6:	d512      	bpl.n	80070ee <__swsetup_r+0x7a>
 80070c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ca:	b141      	cbz	r1, 80070de <__swsetup_r+0x6a>
 80070cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d002      	beq.n	80070da <__swsetup_r+0x66>
 80070d4:	4630      	mov	r0, r6
 80070d6:	f7ff fde1 	bl	8006c9c <_free_r>
 80070da:	2300      	movs	r3, #0
 80070dc:	6363      	str	r3, [r4, #52]	; 0x34
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	2300      	movs	r3, #0
 80070e8:	6063      	str	r3, [r4, #4]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f043 0308 	orr.w	r3, r3, #8
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	6923      	ldr	r3, [r4, #16]
 80070f8:	b94b      	cbnz	r3, 800710e <__swsetup_r+0x9a>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007104:	d003      	beq.n	800710e <__swsetup_r+0x9a>
 8007106:	4621      	mov	r1, r4
 8007108:	4630      	mov	r0, r6
 800710a:	f000 fa21 	bl	8007550 <__smakebuf_r>
 800710e:	89a0      	ldrh	r0, [r4, #12]
 8007110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007114:	f010 0301 	ands.w	r3, r0, #1
 8007118:	d00a      	beq.n	8007130 <__swsetup_r+0xbc>
 800711a:	2300      	movs	r3, #0
 800711c:	60a3      	str	r3, [r4, #8]
 800711e:	6963      	ldr	r3, [r4, #20]
 8007120:	425b      	negs	r3, r3
 8007122:	61a3      	str	r3, [r4, #24]
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	b943      	cbnz	r3, 800713a <__swsetup_r+0xc6>
 8007128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800712c:	d1ba      	bne.n	80070a4 <__swsetup_r+0x30>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	0781      	lsls	r1, r0, #30
 8007132:	bf58      	it	pl
 8007134:	6963      	ldrpl	r3, [r4, #20]
 8007136:	60a3      	str	r3, [r4, #8]
 8007138:	e7f4      	b.n	8007124 <__swsetup_r+0xb0>
 800713a:	2000      	movs	r0, #0
 800713c:	e7f7      	b.n	800712e <__swsetup_r+0xba>
 800713e:	bf00      	nop
 8007140:	20000064 	.word	0x20000064
 8007144:	08008024 	.word	0x08008024
 8007148:	08008044 	.word	0x08008044
 800714c:	08008004 	.word	0x08008004

08007150 <_close_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	2300      	movs	r3, #0
 8007154:	4d05      	ldr	r5, [pc, #20]	; (800716c <_close_r+0x1c>)
 8007156:	4604      	mov	r4, r0
 8007158:	4608      	mov	r0, r1
 800715a:	602b      	str	r3, [r5, #0]
 800715c:	f7fa ffd5 	bl	800210a <_close>
 8007160:	1c43      	adds	r3, r0, #1
 8007162:	d102      	bne.n	800716a <_close_r+0x1a>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	b103      	cbz	r3, 800716a <_close_r+0x1a>
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	20007684 	.word	0x20007684

08007170 <__sflush_r>:
 8007170:	898a      	ldrh	r2, [r1, #12]
 8007172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	4605      	mov	r5, r0
 8007178:	0710      	lsls	r0, r2, #28
 800717a:	460c      	mov	r4, r1
 800717c:	d458      	bmi.n	8007230 <__sflush_r+0xc0>
 800717e:	684b      	ldr	r3, [r1, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	dc05      	bgt.n	8007190 <__sflush_r+0x20>
 8007184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	dc02      	bgt.n	8007190 <__sflush_r+0x20>
 800718a:	2000      	movs	r0, #0
 800718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007192:	2e00      	cmp	r6, #0
 8007194:	d0f9      	beq.n	800718a <__sflush_r+0x1a>
 8007196:	2300      	movs	r3, #0
 8007198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800719c:	682f      	ldr	r7, [r5, #0]
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	d032      	beq.n	8007208 <__sflush_r+0x98>
 80071a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	075a      	lsls	r2, r3, #29
 80071a8:	d505      	bpl.n	80071b6 <__sflush_r+0x46>
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	1ac0      	subs	r0, r0, r3
 80071ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071b0:	b10b      	cbz	r3, 80071b6 <__sflush_r+0x46>
 80071b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071b4:	1ac0      	subs	r0, r0, r3
 80071b6:	2300      	movs	r3, #0
 80071b8:	4602      	mov	r2, r0
 80071ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071bc:	4628      	mov	r0, r5
 80071be:	6a21      	ldr	r1, [r4, #32]
 80071c0:	47b0      	blx	r6
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	d106      	bne.n	80071d6 <__sflush_r+0x66>
 80071c8:	6829      	ldr	r1, [r5, #0]
 80071ca:	291d      	cmp	r1, #29
 80071cc:	d82c      	bhi.n	8007228 <__sflush_r+0xb8>
 80071ce:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <__sflush_r+0x108>)
 80071d0:	40ca      	lsrs	r2, r1
 80071d2:	07d6      	lsls	r6, r2, #31
 80071d4:	d528      	bpl.n	8007228 <__sflush_r+0xb8>
 80071d6:	2200      	movs	r2, #0
 80071d8:	6062      	str	r2, [r4, #4]
 80071da:	6922      	ldr	r2, [r4, #16]
 80071dc:	04d9      	lsls	r1, r3, #19
 80071de:	6022      	str	r2, [r4, #0]
 80071e0:	d504      	bpl.n	80071ec <__sflush_r+0x7c>
 80071e2:	1c42      	adds	r2, r0, #1
 80071e4:	d101      	bne.n	80071ea <__sflush_r+0x7a>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b903      	cbnz	r3, 80071ec <__sflush_r+0x7c>
 80071ea:	6560      	str	r0, [r4, #84]	; 0x54
 80071ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ee:	602f      	str	r7, [r5, #0]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d0ca      	beq.n	800718a <__sflush_r+0x1a>
 80071f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f8:	4299      	cmp	r1, r3
 80071fa:	d002      	beq.n	8007202 <__sflush_r+0x92>
 80071fc:	4628      	mov	r0, r5
 80071fe:	f7ff fd4d 	bl	8006c9c <_free_r>
 8007202:	2000      	movs	r0, #0
 8007204:	6360      	str	r0, [r4, #52]	; 0x34
 8007206:	e7c1      	b.n	800718c <__sflush_r+0x1c>
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	2301      	movs	r3, #1
 800720c:	4628      	mov	r0, r5
 800720e:	47b0      	blx	r6
 8007210:	1c41      	adds	r1, r0, #1
 8007212:	d1c7      	bne.n	80071a4 <__sflush_r+0x34>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0c4      	beq.n	80071a4 <__sflush_r+0x34>
 800721a:	2b1d      	cmp	r3, #29
 800721c:	d001      	beq.n	8007222 <__sflush_r+0xb2>
 800721e:	2b16      	cmp	r3, #22
 8007220:	d101      	bne.n	8007226 <__sflush_r+0xb6>
 8007222:	602f      	str	r7, [r5, #0]
 8007224:	e7b1      	b.n	800718a <__sflush_r+0x1a>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	e7ad      	b.n	800718c <__sflush_r+0x1c>
 8007230:	690f      	ldr	r7, [r1, #16]
 8007232:	2f00      	cmp	r7, #0
 8007234:	d0a9      	beq.n	800718a <__sflush_r+0x1a>
 8007236:	0793      	lsls	r3, r2, #30
 8007238:	bf18      	it	ne
 800723a:	2300      	movne	r3, #0
 800723c:	680e      	ldr	r6, [r1, #0]
 800723e:	bf08      	it	eq
 8007240:	694b      	ldreq	r3, [r1, #20]
 8007242:	eba6 0807 	sub.w	r8, r6, r7
 8007246:	600f      	str	r7, [r1, #0]
 8007248:	608b      	str	r3, [r1, #8]
 800724a:	f1b8 0f00 	cmp.w	r8, #0
 800724e:	dd9c      	ble.n	800718a <__sflush_r+0x1a>
 8007250:	4643      	mov	r3, r8
 8007252:	463a      	mov	r2, r7
 8007254:	4628      	mov	r0, r5
 8007256:	6a21      	ldr	r1, [r4, #32]
 8007258:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800725a:	47b0      	blx	r6
 800725c:	2800      	cmp	r0, #0
 800725e:	dc06      	bgt.n	800726e <__sflush_r+0xfe>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	e78e      	b.n	800718c <__sflush_r+0x1c>
 800726e:	4407      	add	r7, r0
 8007270:	eba8 0800 	sub.w	r8, r8, r0
 8007274:	e7e9      	b.n	800724a <__sflush_r+0xda>
 8007276:	bf00      	nop
 8007278:	20400001 	.word	0x20400001

0800727c <_fflush_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	690b      	ldr	r3, [r1, #16]
 8007280:	4605      	mov	r5, r0
 8007282:	460c      	mov	r4, r1
 8007284:	b913      	cbnz	r3, 800728c <_fflush_r+0x10>
 8007286:	2500      	movs	r5, #0
 8007288:	4628      	mov	r0, r5
 800728a:	bd38      	pop	{r3, r4, r5, pc}
 800728c:	b118      	cbz	r0, 8007296 <_fflush_r+0x1a>
 800728e:	6983      	ldr	r3, [r0, #24]
 8007290:	b90b      	cbnz	r3, 8007296 <_fflush_r+0x1a>
 8007292:	f000 f887 	bl	80073a4 <__sinit>
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <_fflush_r+0x6c>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d11b      	bne.n	80072d4 <_fflush_r+0x58>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0ef      	beq.n	8007286 <_fflush_r+0xa>
 80072a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072a8:	07d0      	lsls	r0, r2, #31
 80072aa:	d404      	bmi.n	80072b6 <_fflush_r+0x3a>
 80072ac:	0599      	lsls	r1, r3, #22
 80072ae:	d402      	bmi.n	80072b6 <_fflush_r+0x3a>
 80072b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072b2:	f000 f915 	bl	80074e0 <__retarget_lock_acquire_recursive>
 80072b6:	4628      	mov	r0, r5
 80072b8:	4621      	mov	r1, r4
 80072ba:	f7ff ff59 	bl	8007170 <__sflush_r>
 80072be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c0:	4605      	mov	r5, r0
 80072c2:	07da      	lsls	r2, r3, #31
 80072c4:	d4e0      	bmi.n	8007288 <_fflush_r+0xc>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	059b      	lsls	r3, r3, #22
 80072ca:	d4dd      	bmi.n	8007288 <_fflush_r+0xc>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f000 f908 	bl	80074e2 <__retarget_lock_release_recursive>
 80072d2:	e7d9      	b.n	8007288 <_fflush_r+0xc>
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <_fflush_r+0x70>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d101      	bne.n	80072de <_fflush_r+0x62>
 80072da:	68ac      	ldr	r4, [r5, #8]
 80072dc:	e7df      	b.n	800729e <_fflush_r+0x22>
 80072de:	4b04      	ldr	r3, [pc, #16]	; (80072f0 <_fflush_r+0x74>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	bf08      	it	eq
 80072e4:	68ec      	ldreq	r4, [r5, #12]
 80072e6:	e7da      	b.n	800729e <_fflush_r+0x22>
 80072e8:	08008024 	.word	0x08008024
 80072ec:	08008044 	.word	0x08008044
 80072f0:	08008004 	.word	0x08008004

080072f4 <std>:
 80072f4:	2300      	movs	r3, #0
 80072f6:	b510      	push	{r4, lr}
 80072f8:	4604      	mov	r4, r0
 80072fa:	e9c0 3300 	strd	r3, r3, [r0]
 80072fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007302:	6083      	str	r3, [r0, #8]
 8007304:	8181      	strh	r1, [r0, #12]
 8007306:	6643      	str	r3, [r0, #100]	; 0x64
 8007308:	81c2      	strh	r2, [r0, #14]
 800730a:	6183      	str	r3, [r0, #24]
 800730c:	4619      	mov	r1, r3
 800730e:	2208      	movs	r2, #8
 8007310:	305c      	adds	r0, #92	; 0x5c
 8007312:	f7ff fcbb 	bl	8006c8c <memset>
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <std+0x38>)
 8007318:	6224      	str	r4, [r4, #32]
 800731a:	6263      	str	r3, [r4, #36]	; 0x24
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <std+0x3c>)
 800731e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007320:	4b04      	ldr	r3, [pc, #16]	; (8007334 <std+0x40>)
 8007322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <std+0x44>)
 8007326:	6323      	str	r3, [r4, #48]	; 0x30
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08006f25 	.word	0x08006f25
 8007330:	08006f47 	.word	0x08006f47
 8007334:	08006f7f 	.word	0x08006f7f
 8007338:	08006fa3 	.word	0x08006fa3

0800733c <_cleanup_r>:
 800733c:	4901      	ldr	r1, [pc, #4]	; (8007344 <_cleanup_r+0x8>)
 800733e:	f000 b8af 	b.w	80074a0 <_fwalk_reent>
 8007342:	bf00      	nop
 8007344:	0800727d 	.word	0x0800727d

08007348 <__sfmoreglue>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	2568      	movs	r5, #104	; 0x68
 800734c:	1e4a      	subs	r2, r1, #1
 800734e:	4355      	muls	r5, r2
 8007350:	460e      	mov	r6, r1
 8007352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007356:	f7ff fced 	bl	8006d34 <_malloc_r>
 800735a:	4604      	mov	r4, r0
 800735c:	b140      	cbz	r0, 8007370 <__sfmoreglue+0x28>
 800735e:	2100      	movs	r1, #0
 8007360:	e9c0 1600 	strd	r1, r6, [r0]
 8007364:	300c      	adds	r0, #12
 8007366:	60a0      	str	r0, [r4, #8]
 8007368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800736c:	f7ff fc8e 	bl	8006c8c <memset>
 8007370:	4620      	mov	r0, r4
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__sfp_lock_acquire>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__sfp_lock_acquire+0x8>)
 8007376:	f000 b8b3 	b.w	80074e0 <__retarget_lock_acquire_recursive>
 800737a:	bf00      	nop
 800737c:	20007680 	.word	0x20007680

08007380 <__sfp_lock_release>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__sfp_lock_release+0x8>)
 8007382:	f000 b8ae 	b.w	80074e2 <__retarget_lock_release_recursive>
 8007386:	bf00      	nop
 8007388:	20007680 	.word	0x20007680

0800738c <__sinit_lock_acquire>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__sinit_lock_acquire+0x8>)
 800738e:	f000 b8a7 	b.w	80074e0 <__retarget_lock_acquire_recursive>
 8007392:	bf00      	nop
 8007394:	2000767b 	.word	0x2000767b

08007398 <__sinit_lock_release>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__sinit_lock_release+0x8>)
 800739a:	f000 b8a2 	b.w	80074e2 <__retarget_lock_release_recursive>
 800739e:	bf00      	nop
 80073a0:	2000767b 	.word	0x2000767b

080073a4 <__sinit>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	4604      	mov	r4, r0
 80073a8:	f7ff fff0 	bl	800738c <__sinit_lock_acquire>
 80073ac:	69a3      	ldr	r3, [r4, #24]
 80073ae:	b11b      	cbz	r3, 80073b8 <__sinit+0x14>
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f7ff bff0 	b.w	8007398 <__sinit_lock_release>
 80073b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073bc:	6523      	str	r3, [r4, #80]	; 0x50
 80073be:	4b13      	ldr	r3, [pc, #76]	; (800740c <__sinit+0x68>)
 80073c0:	4a13      	ldr	r2, [pc, #76]	; (8007410 <__sinit+0x6c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	bf08      	it	eq
 80073ca:	2301      	moveq	r3, #1
 80073cc:	4620      	mov	r0, r4
 80073ce:	bf08      	it	eq
 80073d0:	61a3      	streq	r3, [r4, #24]
 80073d2:	f000 f81f 	bl	8007414 <__sfp>
 80073d6:	6060      	str	r0, [r4, #4]
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 f81b 	bl	8007414 <__sfp>
 80073de:	60a0      	str	r0, [r4, #8]
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 f817 	bl	8007414 <__sfp>
 80073e6:	2200      	movs	r2, #0
 80073e8:	2104      	movs	r1, #4
 80073ea:	60e0      	str	r0, [r4, #12]
 80073ec:	6860      	ldr	r0, [r4, #4]
 80073ee:	f7ff ff81 	bl	80072f4 <std>
 80073f2:	2201      	movs	r2, #1
 80073f4:	2109      	movs	r1, #9
 80073f6:	68a0      	ldr	r0, [r4, #8]
 80073f8:	f7ff ff7c 	bl	80072f4 <std>
 80073fc:	2202      	movs	r2, #2
 80073fe:	2112      	movs	r1, #18
 8007400:	68e0      	ldr	r0, [r4, #12]
 8007402:	f7ff ff77 	bl	80072f4 <std>
 8007406:	2301      	movs	r3, #1
 8007408:	61a3      	str	r3, [r4, #24]
 800740a:	e7d1      	b.n	80073b0 <__sinit+0xc>
 800740c:	08008000 	.word	0x08008000
 8007410:	0800733d 	.word	0x0800733d

08007414 <__sfp>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	4607      	mov	r7, r0
 8007418:	f7ff ffac 	bl	8007374 <__sfp_lock_acquire>
 800741c:	4b1e      	ldr	r3, [pc, #120]	; (8007498 <__sfp+0x84>)
 800741e:	681e      	ldr	r6, [r3, #0]
 8007420:	69b3      	ldr	r3, [r6, #24]
 8007422:	b913      	cbnz	r3, 800742a <__sfp+0x16>
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff ffbd 	bl	80073a4 <__sinit>
 800742a:	3648      	adds	r6, #72	; 0x48
 800742c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	d503      	bpl.n	800743c <__sfp+0x28>
 8007434:	6833      	ldr	r3, [r6, #0]
 8007436:	b30b      	cbz	r3, 800747c <__sfp+0x68>
 8007438:	6836      	ldr	r6, [r6, #0]
 800743a:	e7f7      	b.n	800742c <__sfp+0x18>
 800743c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007440:	b9d5      	cbnz	r5, 8007478 <__sfp+0x64>
 8007442:	4b16      	ldr	r3, [pc, #88]	; (800749c <__sfp+0x88>)
 8007444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007448:	60e3      	str	r3, [r4, #12]
 800744a:	6665      	str	r5, [r4, #100]	; 0x64
 800744c:	f000 f847 	bl	80074de <__retarget_lock_init_recursive>
 8007450:	f7ff ff96 	bl	8007380 <__sfp_lock_release>
 8007454:	2208      	movs	r2, #8
 8007456:	4629      	mov	r1, r5
 8007458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800745c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007460:	6025      	str	r5, [r4, #0]
 8007462:	61a5      	str	r5, [r4, #24]
 8007464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007468:	f7ff fc10 	bl	8006c8c <memset>
 800746c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007474:	4620      	mov	r0, r4
 8007476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007478:	3468      	adds	r4, #104	; 0x68
 800747a:	e7d9      	b.n	8007430 <__sfp+0x1c>
 800747c:	2104      	movs	r1, #4
 800747e:	4638      	mov	r0, r7
 8007480:	f7ff ff62 	bl	8007348 <__sfmoreglue>
 8007484:	4604      	mov	r4, r0
 8007486:	6030      	str	r0, [r6, #0]
 8007488:	2800      	cmp	r0, #0
 800748a:	d1d5      	bne.n	8007438 <__sfp+0x24>
 800748c:	f7ff ff78 	bl	8007380 <__sfp_lock_release>
 8007490:	230c      	movs	r3, #12
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	e7ee      	b.n	8007474 <__sfp+0x60>
 8007496:	bf00      	nop
 8007498:	08008000 	.word	0x08008000
 800749c:	ffff0001 	.word	0xffff0001

080074a0 <_fwalk_reent>:
 80074a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a4:	4606      	mov	r6, r0
 80074a6:	4688      	mov	r8, r1
 80074a8:	2700      	movs	r7, #0
 80074aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074b2:	f1b9 0901 	subs.w	r9, r9, #1
 80074b6:	d505      	bpl.n	80074c4 <_fwalk_reent+0x24>
 80074b8:	6824      	ldr	r4, [r4, #0]
 80074ba:	2c00      	cmp	r4, #0
 80074bc:	d1f7      	bne.n	80074ae <_fwalk_reent+0xe>
 80074be:	4638      	mov	r0, r7
 80074c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c4:	89ab      	ldrh	r3, [r5, #12]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d907      	bls.n	80074da <_fwalk_reent+0x3a>
 80074ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ce:	3301      	adds	r3, #1
 80074d0:	d003      	beq.n	80074da <_fwalk_reent+0x3a>
 80074d2:	4629      	mov	r1, r5
 80074d4:	4630      	mov	r0, r6
 80074d6:	47c0      	blx	r8
 80074d8:	4307      	orrs	r7, r0
 80074da:	3568      	adds	r5, #104	; 0x68
 80074dc:	e7e9      	b.n	80074b2 <_fwalk_reent+0x12>

080074de <__retarget_lock_init_recursive>:
 80074de:	4770      	bx	lr

080074e0 <__retarget_lock_acquire_recursive>:
 80074e0:	4770      	bx	lr

080074e2 <__retarget_lock_release_recursive>:
 80074e2:	4770      	bx	lr

080074e4 <_lseek_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	2200      	movs	r2, #0
 80074ee:	4d05      	ldr	r5, [pc, #20]	; (8007504 <_lseek_r+0x20>)
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fa fe2d 	bl	8002152 <_lseek>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_lseek_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_lseek_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20007684 	.word	0x20007684

08007508 <__swhatbuf_r>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	460e      	mov	r6, r1
 800750c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007510:	4614      	mov	r4, r2
 8007512:	2900      	cmp	r1, #0
 8007514:	461d      	mov	r5, r3
 8007516:	b096      	sub	sp, #88	; 0x58
 8007518:	da07      	bge.n	800752a <__swhatbuf_r+0x22>
 800751a:	2300      	movs	r3, #0
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	89b3      	ldrh	r3, [r6, #12]
 8007520:	061a      	lsls	r2, r3, #24
 8007522:	d410      	bmi.n	8007546 <__swhatbuf_r+0x3e>
 8007524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007528:	e00e      	b.n	8007548 <__swhatbuf_r+0x40>
 800752a:	466a      	mov	r2, sp
 800752c:	f000 fb5c 	bl	8007be8 <_fstat_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	dbf2      	blt.n	800751a <__swhatbuf_r+0x12>
 8007534:	9a01      	ldr	r2, [sp, #4]
 8007536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800753a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800753e:	425a      	negs	r2, r3
 8007540:	415a      	adcs	r2, r3
 8007542:	602a      	str	r2, [r5, #0]
 8007544:	e7ee      	b.n	8007524 <__swhatbuf_r+0x1c>
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2000      	movs	r0, #0
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	b016      	add	sp, #88	; 0x58
 800754e:	bd70      	pop	{r4, r5, r6, pc}

08007550 <__smakebuf_r>:
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007554:	079d      	lsls	r5, r3, #30
 8007556:	4606      	mov	r6, r0
 8007558:	460c      	mov	r4, r1
 800755a:	d507      	bpl.n	800756c <__smakebuf_r+0x1c>
 800755c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	6123      	str	r3, [r4, #16]
 8007564:	2301      	movs	r3, #1
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	b002      	add	sp, #8
 800756a:	bd70      	pop	{r4, r5, r6, pc}
 800756c:	466a      	mov	r2, sp
 800756e:	ab01      	add	r3, sp, #4
 8007570:	f7ff ffca 	bl	8007508 <__swhatbuf_r>
 8007574:	9900      	ldr	r1, [sp, #0]
 8007576:	4605      	mov	r5, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fbdb 	bl	8006d34 <_malloc_r>
 800757e:	b948      	cbnz	r0, 8007594 <__smakebuf_r+0x44>
 8007580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007584:	059a      	lsls	r2, r3, #22
 8007586:	d4ef      	bmi.n	8007568 <__smakebuf_r+0x18>
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7e3      	b.n	800755c <__smakebuf_r+0xc>
 8007594:	4b0d      	ldr	r3, [pc, #52]	; (80075cc <__smakebuf_r+0x7c>)
 8007596:	62b3      	str	r3, [r6, #40]	; 0x28
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a0:	81a3      	strh	r3, [r4, #12]
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	6120      	str	r0, [r4, #16]
 80075a6:	6163      	str	r3, [r4, #20]
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	b15b      	cbz	r3, 80075c4 <__smakebuf_r+0x74>
 80075ac:	4630      	mov	r0, r6
 80075ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075b2:	f000 fb2b 	bl	8007c0c <_isatty_r>
 80075b6:	b128      	cbz	r0, 80075c4 <__smakebuf_r+0x74>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	f023 0303 	bic.w	r3, r3, #3
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	89a0      	ldrh	r0, [r4, #12]
 80075c6:	4305      	orrs	r5, r0
 80075c8:	81a5      	strh	r5, [r4, #12]
 80075ca:	e7cd      	b.n	8007568 <__smakebuf_r+0x18>
 80075cc:	0800733d 	.word	0x0800733d

080075d0 <__malloc_lock>:
 80075d0:	4801      	ldr	r0, [pc, #4]	; (80075d8 <__malloc_lock+0x8>)
 80075d2:	f7ff bf85 	b.w	80074e0 <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	2000767c 	.word	0x2000767c

080075dc <__malloc_unlock>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__malloc_unlock+0x8>)
 80075de:	f7ff bf80 	b.w	80074e2 <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	2000767c 	.word	0x2000767c

080075e8 <__sfputc_r>:
 80075e8:	6893      	ldr	r3, [r2, #8]
 80075ea:	b410      	push	{r4}
 80075ec:	3b01      	subs	r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	6093      	str	r3, [r2, #8]
 80075f2:	da07      	bge.n	8007604 <__sfputc_r+0x1c>
 80075f4:	6994      	ldr	r4, [r2, #24]
 80075f6:	42a3      	cmp	r3, r4
 80075f8:	db01      	blt.n	80075fe <__sfputc_r+0x16>
 80075fa:	290a      	cmp	r1, #10
 80075fc:	d102      	bne.n	8007604 <__sfputc_r+0x1c>
 80075fe:	bc10      	pop	{r4}
 8007600:	f7ff bcd4 	b.w	8006fac <__swbuf_r>
 8007604:	6813      	ldr	r3, [r2, #0]
 8007606:	1c58      	adds	r0, r3, #1
 8007608:	6010      	str	r0, [r2, #0]
 800760a:	7019      	strb	r1, [r3, #0]
 800760c:	4608      	mov	r0, r1
 800760e:	bc10      	pop	{r4}
 8007610:	4770      	bx	lr

08007612 <__sfputs_r>:
 8007612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	4614      	mov	r4, r2
 800761a:	18d5      	adds	r5, r2, r3
 800761c:	42ac      	cmp	r4, r5
 800761e:	d101      	bne.n	8007624 <__sfputs_r+0x12>
 8007620:	2000      	movs	r0, #0
 8007622:	e007      	b.n	8007634 <__sfputs_r+0x22>
 8007624:	463a      	mov	r2, r7
 8007626:	4630      	mov	r0, r6
 8007628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800762c:	f7ff ffdc 	bl	80075e8 <__sfputc_r>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d1f3      	bne.n	800761c <__sfputs_r+0xa>
 8007634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007638 <_vfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	460d      	mov	r5, r1
 800763e:	4614      	mov	r4, r2
 8007640:	4698      	mov	r8, r3
 8007642:	4606      	mov	r6, r0
 8007644:	b09d      	sub	sp, #116	; 0x74
 8007646:	b118      	cbz	r0, 8007650 <_vfiprintf_r+0x18>
 8007648:	6983      	ldr	r3, [r0, #24]
 800764a:	b90b      	cbnz	r3, 8007650 <_vfiprintf_r+0x18>
 800764c:	f7ff feaa 	bl	80073a4 <__sinit>
 8007650:	4b89      	ldr	r3, [pc, #548]	; (8007878 <_vfiprintf_r+0x240>)
 8007652:	429d      	cmp	r5, r3
 8007654:	d11b      	bne.n	800768e <_vfiprintf_r+0x56>
 8007656:	6875      	ldr	r5, [r6, #4]
 8007658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	d405      	bmi.n	800766a <_vfiprintf_r+0x32>
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	059a      	lsls	r2, r3, #22
 8007662:	d402      	bmi.n	800766a <_vfiprintf_r+0x32>
 8007664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007666:	f7ff ff3b 	bl	80074e0 <__retarget_lock_acquire_recursive>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	071b      	lsls	r3, r3, #28
 800766e:	d501      	bpl.n	8007674 <_vfiprintf_r+0x3c>
 8007670:	692b      	ldr	r3, [r5, #16]
 8007672:	b9eb      	cbnz	r3, 80076b0 <_vfiprintf_r+0x78>
 8007674:	4629      	mov	r1, r5
 8007676:	4630      	mov	r0, r6
 8007678:	f7ff fcfc 	bl	8007074 <__swsetup_r>
 800767c:	b1c0      	cbz	r0, 80076b0 <_vfiprintf_r+0x78>
 800767e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007680:	07dc      	lsls	r4, r3, #31
 8007682:	d50e      	bpl.n	80076a2 <_vfiprintf_r+0x6a>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007688:	b01d      	add	sp, #116	; 0x74
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	4b7b      	ldr	r3, [pc, #492]	; (800787c <_vfiprintf_r+0x244>)
 8007690:	429d      	cmp	r5, r3
 8007692:	d101      	bne.n	8007698 <_vfiprintf_r+0x60>
 8007694:	68b5      	ldr	r5, [r6, #8]
 8007696:	e7df      	b.n	8007658 <_vfiprintf_r+0x20>
 8007698:	4b79      	ldr	r3, [pc, #484]	; (8007880 <_vfiprintf_r+0x248>)
 800769a:	429d      	cmp	r5, r3
 800769c:	bf08      	it	eq
 800769e:	68f5      	ldreq	r5, [r6, #12]
 80076a0:	e7da      	b.n	8007658 <_vfiprintf_r+0x20>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	0598      	lsls	r0, r3, #22
 80076a6:	d4ed      	bmi.n	8007684 <_vfiprintf_r+0x4c>
 80076a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076aa:	f7ff ff1a 	bl	80074e2 <__retarget_lock_release_recursive>
 80076ae:	e7e9      	b.n	8007684 <_vfiprintf_r+0x4c>
 80076b0:	2300      	movs	r3, #0
 80076b2:	9309      	str	r3, [sp, #36]	; 0x24
 80076b4:	2320      	movs	r3, #32
 80076b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ba:	2330      	movs	r3, #48	; 0x30
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80076c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007884 <_vfiprintf_r+0x24c>
 80076c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076cc:	4623      	mov	r3, r4
 80076ce:	469a      	mov	sl, r3
 80076d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d4:	b10a      	cbz	r2, 80076da <_vfiprintf_r+0xa2>
 80076d6:	2a25      	cmp	r2, #37	; 0x25
 80076d8:	d1f9      	bne.n	80076ce <_vfiprintf_r+0x96>
 80076da:	ebba 0b04 	subs.w	fp, sl, r4
 80076de:	d00b      	beq.n	80076f8 <_vfiprintf_r+0xc0>
 80076e0:	465b      	mov	r3, fp
 80076e2:	4622      	mov	r2, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f7ff ff93 	bl	8007612 <__sfputs_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	f000 80aa 	beq.w	8007846 <_vfiprintf_r+0x20e>
 80076f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f4:	445a      	add	r2, fp
 80076f6:	9209      	str	r2, [sp, #36]	; 0x24
 80076f8:	f89a 3000 	ldrb.w	r3, [sl]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 80a2 	beq.w	8007846 <_vfiprintf_r+0x20e>
 8007702:	2300      	movs	r3, #0
 8007704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800770c:	f10a 0a01 	add.w	sl, sl, #1
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	9307      	str	r3, [sp, #28]
 8007714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007718:	931a      	str	r3, [sp, #104]	; 0x68
 800771a:	4654      	mov	r4, sl
 800771c:	2205      	movs	r2, #5
 800771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007722:	4858      	ldr	r0, [pc, #352]	; (8007884 <_vfiprintf_r+0x24c>)
 8007724:	f000 fa82 	bl	8007c2c <memchr>
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	b9d8      	cbnz	r0, 8007764 <_vfiprintf_r+0x12c>
 800772c:	06d1      	lsls	r1, r2, #27
 800772e:	bf44      	itt	mi
 8007730:	2320      	movmi	r3, #32
 8007732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007736:	0713      	lsls	r3, r2, #28
 8007738:	bf44      	itt	mi
 800773a:	232b      	movmi	r3, #43	; 0x2b
 800773c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007740:	f89a 3000 	ldrb.w	r3, [sl]
 8007744:	2b2a      	cmp	r3, #42	; 0x2a
 8007746:	d015      	beq.n	8007774 <_vfiprintf_r+0x13c>
 8007748:	4654      	mov	r4, sl
 800774a:	2000      	movs	r0, #0
 800774c:	f04f 0c0a 	mov.w	ip, #10
 8007750:	9a07      	ldr	r2, [sp, #28]
 8007752:	4621      	mov	r1, r4
 8007754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007758:	3b30      	subs	r3, #48	; 0x30
 800775a:	2b09      	cmp	r3, #9
 800775c:	d94e      	bls.n	80077fc <_vfiprintf_r+0x1c4>
 800775e:	b1b0      	cbz	r0, 800778e <_vfiprintf_r+0x156>
 8007760:	9207      	str	r2, [sp, #28]
 8007762:	e014      	b.n	800778e <_vfiprintf_r+0x156>
 8007764:	eba0 0308 	sub.w	r3, r0, r8
 8007768:	fa09 f303 	lsl.w	r3, r9, r3
 800776c:	4313      	orrs	r3, r2
 800776e:	46a2      	mov	sl, r4
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	e7d2      	b.n	800771a <_vfiprintf_r+0xe2>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	1d19      	adds	r1, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	9103      	str	r1, [sp, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfbb      	ittet	lt
 8007780:	425b      	neglt	r3, r3
 8007782:	f042 0202 	orrlt.w	r2, r2, #2
 8007786:	9307      	strge	r3, [sp, #28]
 8007788:	9307      	strlt	r3, [sp, #28]
 800778a:	bfb8      	it	lt
 800778c:	9204      	strlt	r2, [sp, #16]
 800778e:	7823      	ldrb	r3, [r4, #0]
 8007790:	2b2e      	cmp	r3, #46	; 0x2e
 8007792:	d10c      	bne.n	80077ae <_vfiprintf_r+0x176>
 8007794:	7863      	ldrb	r3, [r4, #1]
 8007796:	2b2a      	cmp	r3, #42	; 0x2a
 8007798:	d135      	bne.n	8007806 <_vfiprintf_r+0x1ce>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	3402      	adds	r4, #2
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	9203      	str	r2, [sp, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	bfb8      	it	lt
 80077a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007894 <_vfiprintf_r+0x25c>
 80077b2:	2203      	movs	r2, #3
 80077b4:	4650      	mov	r0, sl
 80077b6:	7821      	ldrb	r1, [r4, #0]
 80077b8:	f000 fa38 	bl	8007c2c <memchr>
 80077bc:	b140      	cbz	r0, 80077d0 <_vfiprintf_r+0x198>
 80077be:	2340      	movs	r3, #64	; 0x40
 80077c0:	eba0 000a 	sub.w	r0, r0, sl
 80077c4:	fa03 f000 	lsl.w	r0, r3, r0
 80077c8:	9b04      	ldr	r3, [sp, #16]
 80077ca:	3401      	adds	r4, #1
 80077cc:	4303      	orrs	r3, r0
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	2206      	movs	r2, #6
 80077d6:	482c      	ldr	r0, [pc, #176]	; (8007888 <_vfiprintf_r+0x250>)
 80077d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077dc:	f000 fa26 	bl	8007c2c <memchr>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d03f      	beq.n	8007864 <_vfiprintf_r+0x22c>
 80077e4:	4b29      	ldr	r3, [pc, #164]	; (800788c <_vfiprintf_r+0x254>)
 80077e6:	bb1b      	cbnz	r3, 8007830 <_vfiprintf_r+0x1f8>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	3307      	adds	r3, #7
 80077ec:	f023 0307 	bic.w	r3, r3, #7
 80077f0:	3308      	adds	r3, #8
 80077f2:	9303      	str	r3, [sp, #12]
 80077f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f6:	443b      	add	r3, r7
 80077f8:	9309      	str	r3, [sp, #36]	; 0x24
 80077fa:	e767      	b.n	80076cc <_vfiprintf_r+0x94>
 80077fc:	460c      	mov	r4, r1
 80077fe:	2001      	movs	r0, #1
 8007800:	fb0c 3202 	mla	r2, ip, r2, r3
 8007804:	e7a5      	b.n	8007752 <_vfiprintf_r+0x11a>
 8007806:	2300      	movs	r3, #0
 8007808:	f04f 0c0a 	mov.w	ip, #10
 800780c:	4619      	mov	r1, r3
 800780e:	3401      	adds	r4, #1
 8007810:	9305      	str	r3, [sp, #20]
 8007812:	4620      	mov	r0, r4
 8007814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007818:	3a30      	subs	r2, #48	; 0x30
 800781a:	2a09      	cmp	r2, #9
 800781c:	d903      	bls.n	8007826 <_vfiprintf_r+0x1ee>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0c5      	beq.n	80077ae <_vfiprintf_r+0x176>
 8007822:	9105      	str	r1, [sp, #20]
 8007824:	e7c3      	b.n	80077ae <_vfiprintf_r+0x176>
 8007826:	4604      	mov	r4, r0
 8007828:	2301      	movs	r3, #1
 800782a:	fb0c 2101 	mla	r1, ip, r1, r2
 800782e:	e7f0      	b.n	8007812 <_vfiprintf_r+0x1da>
 8007830:	ab03      	add	r3, sp, #12
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	462a      	mov	r2, r5
 8007836:	4630      	mov	r0, r6
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <_vfiprintf_r+0x258>)
 800783a:	a904      	add	r1, sp, #16
 800783c:	f3af 8000 	nop.w
 8007840:	4607      	mov	r7, r0
 8007842:	1c78      	adds	r0, r7, #1
 8007844:	d1d6      	bne.n	80077f4 <_vfiprintf_r+0x1bc>
 8007846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007848:	07d9      	lsls	r1, r3, #31
 800784a:	d405      	bmi.n	8007858 <_vfiprintf_r+0x220>
 800784c:	89ab      	ldrh	r3, [r5, #12]
 800784e:	059a      	lsls	r2, r3, #22
 8007850:	d402      	bmi.n	8007858 <_vfiprintf_r+0x220>
 8007852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007854:	f7ff fe45 	bl	80074e2 <__retarget_lock_release_recursive>
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	065b      	lsls	r3, r3, #25
 800785c:	f53f af12 	bmi.w	8007684 <_vfiprintf_r+0x4c>
 8007860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007862:	e711      	b.n	8007688 <_vfiprintf_r+0x50>
 8007864:	ab03      	add	r3, sp, #12
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	462a      	mov	r2, r5
 800786a:	4630      	mov	r0, r6
 800786c:	4b08      	ldr	r3, [pc, #32]	; (8007890 <_vfiprintf_r+0x258>)
 800786e:	a904      	add	r1, sp, #16
 8007870:	f000 f882 	bl	8007978 <_printf_i>
 8007874:	e7e4      	b.n	8007840 <_vfiprintf_r+0x208>
 8007876:	bf00      	nop
 8007878:	08008024 	.word	0x08008024
 800787c:	08008044 	.word	0x08008044
 8007880:	08008004 	.word	0x08008004
 8007884:	08008064 	.word	0x08008064
 8007888:	0800806e 	.word	0x0800806e
 800788c:	00000000 	.word	0x00000000
 8007890:	08007613 	.word	0x08007613
 8007894:	0800806a 	.word	0x0800806a

08007898 <_printf_common>:
 8007898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	4699      	mov	r9, r3
 80078a0:	688a      	ldr	r2, [r1, #8]
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	4607      	mov	r7, r0
 80078a6:	4293      	cmp	r3, r2
 80078a8:	bfb8      	it	lt
 80078aa:	4613      	movlt	r3, r2
 80078ac:	6033      	str	r3, [r6, #0]
 80078ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b2:	460c      	mov	r4, r1
 80078b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078b8:	b10a      	cbz	r2, 80078be <_printf_common+0x26>
 80078ba:	3301      	adds	r3, #1
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	0699      	lsls	r1, r3, #26
 80078c2:	bf42      	ittt	mi
 80078c4:	6833      	ldrmi	r3, [r6, #0]
 80078c6:	3302      	addmi	r3, #2
 80078c8:	6033      	strmi	r3, [r6, #0]
 80078ca:	6825      	ldr	r5, [r4, #0]
 80078cc:	f015 0506 	ands.w	r5, r5, #6
 80078d0:	d106      	bne.n	80078e0 <_printf_common+0x48>
 80078d2:	f104 0a19 	add.w	sl, r4, #25
 80078d6:	68e3      	ldr	r3, [r4, #12]
 80078d8:	6832      	ldr	r2, [r6, #0]
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	42ab      	cmp	r3, r5
 80078de:	dc28      	bgt.n	8007932 <_printf_common+0x9a>
 80078e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e4:	1e13      	subs	r3, r2, #0
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	bf18      	it	ne
 80078ea:	2301      	movne	r3, #1
 80078ec:	0692      	lsls	r2, r2, #26
 80078ee:	d42d      	bmi.n	800794c <_printf_common+0xb4>
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f8:	47c0      	blx	r8
 80078fa:	3001      	adds	r0, #1
 80078fc:	d020      	beq.n	8007940 <_printf_common+0xa8>
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	68e5      	ldr	r5, [r4, #12]
 8007902:	f003 0306 	and.w	r3, r3, #6
 8007906:	2b04      	cmp	r3, #4
 8007908:	bf18      	it	ne
 800790a:	2500      	movne	r5, #0
 800790c:	6832      	ldr	r2, [r6, #0]
 800790e:	f04f 0600 	mov.w	r6, #0
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	bf08      	it	eq
 8007916:	1aad      	subeq	r5, r5, r2
 8007918:	6922      	ldr	r2, [r4, #16]
 800791a:	bf08      	it	eq
 800791c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007920:	4293      	cmp	r3, r2
 8007922:	bfc4      	itt	gt
 8007924:	1a9b      	subgt	r3, r3, r2
 8007926:	18ed      	addgt	r5, r5, r3
 8007928:	341a      	adds	r4, #26
 800792a:	42b5      	cmp	r5, r6
 800792c:	d11a      	bne.n	8007964 <_printf_common+0xcc>
 800792e:	2000      	movs	r0, #0
 8007930:	e008      	b.n	8007944 <_printf_common+0xac>
 8007932:	2301      	movs	r3, #1
 8007934:	4652      	mov	r2, sl
 8007936:	4649      	mov	r1, r9
 8007938:	4638      	mov	r0, r7
 800793a:	47c0      	blx	r8
 800793c:	3001      	adds	r0, #1
 800793e:	d103      	bne.n	8007948 <_printf_common+0xb0>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007948:	3501      	adds	r5, #1
 800794a:	e7c4      	b.n	80078d6 <_printf_common+0x3e>
 800794c:	2030      	movs	r0, #48	; 0x30
 800794e:	18e1      	adds	r1, r4, r3
 8007950:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800795a:	4422      	add	r2, r4
 800795c:	3302      	adds	r3, #2
 800795e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007962:	e7c5      	b.n	80078f0 <_printf_common+0x58>
 8007964:	2301      	movs	r3, #1
 8007966:	4622      	mov	r2, r4
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d0e6      	beq.n	8007940 <_printf_common+0xa8>
 8007972:	3601      	adds	r6, #1
 8007974:	e7d9      	b.n	800792a <_printf_common+0x92>
	...

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	7e27      	ldrb	r7, [r4, #24]
 8007980:	4691      	mov	r9, r2
 8007982:	2f78      	cmp	r7, #120	; 0x78
 8007984:	4680      	mov	r8, r0
 8007986:	469a      	mov	sl, r3
 8007988:	990c      	ldr	r1, [sp, #48]	; 0x30
 800798a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	; 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d9 	beq.w	8007b4c <_printf_i+0x1d4>
 800799a:	2f58      	cmp	r7, #88	; 0x58
 800799c:	f000 80a4 	beq.w	8007ae8 <_printf_i+0x170>
 80079a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a001      	add	r0, pc, #4	; (adr r0, 80079b8 <_printf_i+0x40>)
 80079b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b33 	.word	0x08007b33
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007b15 	.word	0x08007b15
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b55 	.word	0x08007b55
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007b1d 	.word	0x08007b1d
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a16:	1d1a      	adds	r2, r3, #4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	600a      	str	r2, [r1, #0]
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0a4      	b.n	8007b6e <_printf_i+0x1f6>
 8007a24:	6825      	ldr	r5, [r4, #0]
 8007a26:	6808      	ldr	r0, [r1, #0]
 8007a28:	062e      	lsls	r6, r5, #24
 8007a2a:	f100 0304 	add.w	r3, r0, #4
 8007a2e:	d50a      	bpl.n	8007a46 <_printf_i+0xce>
 8007a30:	6805      	ldr	r5, [r0, #0]
 8007a32:	600b      	str	r3, [r1, #0]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xc8>
 8007a38:	232d      	movs	r3, #45	; 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a40:	230a      	movs	r3, #10
 8007a42:	485e      	ldr	r0, [pc, #376]	; (8007bbc <_printf_i+0x244>)
 8007a44:	e019      	b.n	8007a7a <_printf_i+0x102>
 8007a46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a4a:	6805      	ldr	r5, [r0, #0]
 8007a4c:	600b      	str	r3, [r1, #0]
 8007a4e:	bf18      	it	ne
 8007a50:	b22d      	sxthne	r5, r5
 8007a52:	e7ef      	b.n	8007a34 <_printf_i+0xbc>
 8007a54:	680b      	ldr	r3, [r1, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	1d18      	adds	r0, r3, #4
 8007a5a:	6008      	str	r0, [r1, #0]
 8007a5c:	0628      	lsls	r0, r5, #24
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0xec>
 8007a60:	681d      	ldr	r5, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0xf2>
 8007a64:	0669      	lsls	r1, r5, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0xe8>
 8007a68:	881d      	ldrh	r5, [r3, #0]
 8007a6a:	2f6f      	cmp	r7, #111	; 0x6f
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2308      	moveq	r3, #8
 8007a70:	230a      	movne	r3, #10
 8007a72:	4852      	ldr	r0, [pc, #328]	; (8007bbc <_printf_i+0x244>)
 8007a74:	2100      	movs	r1, #0
 8007a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7a:	6866      	ldr	r6, [r4, #4]
 8007a7c:	2e00      	cmp	r6, #0
 8007a7e:	bfa8      	it	ge
 8007a80:	6821      	ldrge	r1, [r4, #0]
 8007a82:	60a6      	str	r6, [r4, #8]
 8007a84:	bfa4      	itt	ge
 8007a86:	f021 0104 	bicge.w	r1, r1, #4
 8007a8a:	6021      	strge	r1, [r4, #0]
 8007a8c:	b90d      	cbnz	r5, 8007a92 <_printf_i+0x11a>
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d04d      	beq.n	8007b2e <_printf_i+0x1b6>
 8007a92:	4616      	mov	r6, r2
 8007a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a98:	fb03 5711 	mls	r7, r3, r1, r5
 8007a9c:	5dc7      	ldrb	r7, [r0, r7]
 8007a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007aa2:	462f      	mov	r7, r5
 8007aa4:	42bb      	cmp	r3, r7
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	d9f4      	bls.n	8007a94 <_printf_i+0x11c>
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d10b      	bne.n	8007ac6 <_printf_i+0x14e>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	07df      	lsls	r7, r3, #31
 8007ab2:	d508      	bpl.n	8007ac6 <_printf_i+0x14e>
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	6861      	ldr	r1, [r4, #4]
 8007ab8:	4299      	cmp	r1, r3
 8007aba:	bfde      	ittt	le
 8007abc:	2330      	movle	r3, #48	; 0x30
 8007abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ac2:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007ac6:	1b92      	subs	r2, r2, r6
 8007ac8:	6122      	str	r2, [r4, #16]
 8007aca:	464b      	mov	r3, r9
 8007acc:	4621      	mov	r1, r4
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f8cd a000 	str.w	sl, [sp]
 8007ad4:	aa03      	add	r2, sp, #12
 8007ad6:	f7ff fedf 	bl	8007898 <_printf_common>
 8007ada:	3001      	adds	r0, #1
 8007adc:	d14c      	bne.n	8007b78 <_printf_i+0x200>
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae2:	b004      	add	sp, #16
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	4834      	ldr	r0, [pc, #208]	; (8007bbc <_printf_i+0x244>)
 8007aea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007aee:	680e      	ldr	r6, [r1, #0]
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007af6:	061f      	lsls	r7, r3, #24
 8007af8:	600e      	str	r6, [r1, #0]
 8007afa:	d514      	bpl.n	8007b26 <_printf_i+0x1ae>
 8007afc:	07d9      	lsls	r1, r3, #31
 8007afe:	bf44      	itt	mi
 8007b00:	f043 0320 	orrmi.w	r3, r3, #32
 8007b04:	6023      	strmi	r3, [r4, #0]
 8007b06:	b91d      	cbnz	r5, 8007b10 <_printf_i+0x198>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	2310      	movs	r3, #16
 8007b12:	e7af      	b.n	8007a74 <_printf_i+0xfc>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	f043 0320 	orr.w	r3, r3, #32
 8007b1a:	6023      	str	r3, [r4, #0]
 8007b1c:	2378      	movs	r3, #120	; 0x78
 8007b1e:	4828      	ldr	r0, [pc, #160]	; (8007bc0 <_printf_i+0x248>)
 8007b20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b24:	e7e3      	b.n	8007aee <_printf_i+0x176>
 8007b26:	065e      	lsls	r6, r3, #25
 8007b28:	bf48      	it	mi
 8007b2a:	b2ad      	uxthmi	r5, r5
 8007b2c:	e7e6      	b.n	8007afc <_printf_i+0x184>
 8007b2e:	4616      	mov	r6, r2
 8007b30:	e7bb      	b.n	8007aaa <_printf_i+0x132>
 8007b32:	680b      	ldr	r3, [r1, #0]
 8007b34:	6826      	ldr	r6, [r4, #0]
 8007b36:	1d1d      	adds	r5, r3, #4
 8007b38:	6960      	ldr	r0, [r4, #20]
 8007b3a:	600d      	str	r5, [r1, #0]
 8007b3c:	0635      	lsls	r5, r6, #24
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	d501      	bpl.n	8007b46 <_printf_i+0x1ce>
 8007b42:	6018      	str	r0, [r3, #0]
 8007b44:	e002      	b.n	8007b4c <_printf_i+0x1d4>
 8007b46:	0671      	lsls	r1, r6, #25
 8007b48:	d5fb      	bpl.n	8007b42 <_printf_i+0x1ca>
 8007b4a:	8018      	strh	r0, [r3, #0]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4616      	mov	r6, r2
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	e7ba      	b.n	8007aca <_printf_i+0x152>
 8007b54:	680b      	ldr	r3, [r1, #0]
 8007b56:	1d1a      	adds	r2, r3, #4
 8007b58:	600a      	str	r2, [r1, #0]
 8007b5a:	681e      	ldr	r6, [r3, #0]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	6862      	ldr	r2, [r4, #4]
 8007b62:	f000 f863 	bl	8007c2c <memchr>
 8007b66:	b108      	cbz	r0, 8007b6c <_printf_i+0x1f4>
 8007b68:	1b80      	subs	r0, r0, r6
 8007b6a:	6060      	str	r0, [r4, #4]
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	6123      	str	r3, [r4, #16]
 8007b70:	2300      	movs	r3, #0
 8007b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b76:	e7a8      	b.n	8007aca <_printf_i+0x152>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	47d0      	blx	sl
 8007b82:	3001      	adds	r0, #1
 8007b84:	d0ab      	beq.n	8007ade <_printf_i+0x166>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	079b      	lsls	r3, r3, #30
 8007b8a:	d413      	bmi.n	8007bb4 <_printf_i+0x23c>
 8007b8c:	68e0      	ldr	r0, [r4, #12]
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	4298      	cmp	r0, r3
 8007b92:	bfb8      	it	lt
 8007b94:	4618      	movlt	r0, r3
 8007b96:	e7a4      	b.n	8007ae2 <_printf_i+0x16a>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	47d0      	blx	sl
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d09b      	beq.n	8007ade <_printf_i+0x166>
 8007ba6:	3501      	adds	r5, #1
 8007ba8:	68e3      	ldr	r3, [r4, #12]
 8007baa:	9903      	ldr	r1, [sp, #12]
 8007bac:	1a5b      	subs	r3, r3, r1
 8007bae:	42ab      	cmp	r3, r5
 8007bb0:	dcf2      	bgt.n	8007b98 <_printf_i+0x220>
 8007bb2:	e7eb      	b.n	8007b8c <_printf_i+0x214>
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	f104 0619 	add.w	r6, r4, #25
 8007bba:	e7f5      	b.n	8007ba8 <_printf_i+0x230>
 8007bbc:	08008075 	.word	0x08008075
 8007bc0:	08008086 	.word	0x08008086

08007bc4 <_read_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4611      	mov	r1, r2
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4d05      	ldr	r5, [pc, #20]	; (8007be4 <_read_r+0x20>)
 8007bd0:	602a      	str	r2, [r5, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f7fa fa7c 	bl	80020d0 <_read>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_read_r+0x1e>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_read_r+0x1e>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20007684 	.word	0x20007684

08007be8 <_fstat_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	2300      	movs	r3, #0
 8007bec:	4d06      	ldr	r5, [pc, #24]	; (8007c08 <_fstat_r+0x20>)
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	602b      	str	r3, [r5, #0]
 8007bf6:	f7fa fa93 	bl	8002120 <_fstat>
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	d102      	bne.n	8007c04 <_fstat_r+0x1c>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	b103      	cbz	r3, 8007c04 <_fstat_r+0x1c>
 8007c02:	6023      	str	r3, [r4, #0]
 8007c04:	bd38      	pop	{r3, r4, r5, pc}
 8007c06:	bf00      	nop
 8007c08:	20007684 	.word	0x20007684

08007c0c <_isatty_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4d05      	ldr	r5, [pc, #20]	; (8007c28 <_isatty_r+0x1c>)
 8007c12:	4604      	mov	r4, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	602b      	str	r3, [r5, #0]
 8007c18:	f7fa fa91 	bl	800213e <_isatty>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_isatty_r+0x1a>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_isatty_r+0x1a>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20007684 	.word	0x20007684

08007c2c <memchr>:
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	b2c9      	uxtb	r1, r1
 8007c32:	4402      	add	r2, r0
 8007c34:	4293      	cmp	r3, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	d101      	bne.n	8007c3e <memchr+0x12>
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	e003      	b.n	8007c46 <memchr+0x1a>
 8007c3e:	7804      	ldrb	r4, [r0, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	428c      	cmp	r4, r1
 8007c44:	d1f6      	bne.n	8007c34 <memchr+0x8>
 8007c46:	bd10      	pop	{r4, pc}

08007c48 <_init>:
 8007c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4a:	bf00      	nop
 8007c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c4e:	bc08      	pop	{r3}
 8007c50:	469e      	mov	lr, r3
 8007c52:	4770      	bx	lr

08007c54 <_fini>:
 8007c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c56:	bf00      	nop
 8007c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5a:	bc08      	pop	{r3}
 8007c5c:	469e      	mov	lr, r3
 8007c5e:	4770      	bx	lr
