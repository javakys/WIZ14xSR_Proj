
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004718  08004718  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004718  08004718  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000009c  080047bc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  080047bc  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee6e  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f7  00000000  00000000  0002ef33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00031430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  000323a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bb5e  00000000  00000000  000331e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5a7  00000000  00000000  0004ed46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a038d  00000000  00000000  0005b2ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb67a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c0  00000000  00000000  000fb6f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000009c 	.word	0x2000009c
 8000200:	00000000 	.word	0x00000000
 8000204:	080045d0 	.word	0x080045d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000a0 	.word	0x200000a0
 8000220:	080045d0 	.word	0x080045d0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Reset_W5300>:

#include "main.h"
#include "W5300BasicFunctions.h"

void Reset_W5300()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <Reset_W5300+0x28>)
 800023e:	f001 fb07 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f000 ff62 	bl	800110c <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <Reset_W5300+0x28>)
 800024e:	f001 faff 	bl	8001850 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000252:	2064      	movs	r0, #100	; 0x64
 8000254:	f000 ff5a 	bl	800110c <HAL_Delay>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40011c00 	.word	0x40011c00

08000260 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
	*((uint16_t*)(addr << 1)) = wd;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	461a      	mov	r2, r3
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	8013      	strh	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	return *((uint16_t*)(addr << 1));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	881b      	ldrh	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	230a      	movs	r3, #10
 80002aa:	68b9      	ldr	r1, [r7, #8]
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <_write+0x24>)
 80002ae:	f002 fbd8 	bl	8002a62 <HAL_UART_Transmit>
	return len;
 80002b2:	687b      	ldr	r3, [r7, #4]
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	200002c8 	.word	0x200002c8

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 fec0 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f8b2 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 fa14 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002d0:	f000 f9be 	bl	8000650 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80002d4:	f000 f8f2 	bl	80004bc <MX_TIM2_Init>
  MX_UART4_Init();
 80002d8:	f000 f93c 	bl	8000554 <MX_UART4_Init>
  MX_UART5_Init();
 80002dc:	f000 f964 	bl	80005a8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80002e0:	f000 f98c 	bl	80005fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80002e4:	f000 f9de 	bl	80006a4 <MX_USART3_UART_Init>
  MX_FSMC_Init();
 80002e8:	f000 faec 	bl	80008c4 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002ec:	483f      	ldr	r0, [pc, #252]	; (80003ec <main+0x12c>)
 80002ee:	f001 ff99 	bl	8002224 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Reset_W5300();
 80002f2:	f7ff ff9f 	bl	8000234 <Reset_W5300>

  reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 80002f6:	493e      	ldr	r1, [pc, #248]	; (80003f0 <main+0x130>)
 80002f8:	483e      	ldr	r0, [pc, #248]	; (80003f4 <main+0x134>)
 80002fa:	f003 f859 	bl	80033b0 <reg_wizchip_bus_cbfunc>

  printf("GetMR()=%04X\r\n", getMR());
 80002fe:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	483c      	ldr	r0, [pc, #240]	; (80003f8 <main+0x138>)
 8000308:	f003 f960 	bl	80035cc <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 800030c:	4b3b      	ldr	r3, [pc, #236]	; (80003fc <main+0x13c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0fb      	beq.n	800030c <main+0x4c>
	  {
		  onesecondElapsed = 0;
 8000314:	4b39      	ldr	r3, [pc, #228]	; (80003fc <main+0x13c>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 800031a:	4b39      	ldr	r3, [pc, #228]	; (8000400 <main+0x140>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b37      	ldr	r3, [pc, #220]	; (8000400 <main+0x140>)
 8000324:	701a      	strb	r2, [r3, #0]
		  printf("count: %d\r\n", count);	// print count
 8000326:	4b36      	ldr	r3, [pc, #216]	; (8000400 <main+0x140>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	4619      	mov	r1, r3
 800032c:	4835      	ldr	r0, [pc, #212]	; (8000404 <main+0x144>)
 800032e:	f003 f94d 	bl	80035cc <iprintf>
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000332:	2180      	movs	r1, #128	; 0x80
 8000334:	4834      	ldr	r0, [pc, #208]	; (8000408 <main+0x148>)
 8000336:	f001 faa3 	bl	8001880 <HAL_GPIO_TogglePin>
		  memset(msg, 0, 100);
 800033a:	2264      	movs	r2, #100	; 0x64
 800033c:	2100      	movs	r1, #0
 800033e:	4833      	ldr	r0, [pc, #204]	; (800040c <main+0x14c>)
 8000340:	f003 f895 	bl	800346e <memset>
		  sprintf((char *)msg, "UART1, count: %d\r\n", count);
 8000344:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <main+0x140>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	4931      	ldr	r1, [pc, #196]	; (8000410 <main+0x150>)
 800034c:	482f      	ldr	r0, [pc, #188]	; (800040c <main+0x14c>)
 800034e:	f003 f965 	bl	800361c <siprintf>
		  HAL_UART_Transmit(&huart1, msg, strlen((const char*)msg), 10);
 8000352:	482e      	ldr	r0, [pc, #184]	; (800040c <main+0x14c>)
 8000354:	f7ff ff66 	bl	8000224 <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	b29a      	uxth	r2, r3
 800035c:	230a      	movs	r3, #10
 800035e:	492b      	ldr	r1, [pc, #172]	; (800040c <main+0x14c>)
 8000360:	482c      	ldr	r0, [pc, #176]	; (8000414 <main+0x154>)
 8000362:	f002 fb7e 	bl	8002a62 <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000366:	2264      	movs	r2, #100	; 0x64
 8000368:	2100      	movs	r1, #0
 800036a:	4828      	ldr	r0, [pc, #160]	; (800040c <main+0x14c>)
 800036c:	f003 f87f 	bl	800346e <memset>
		  sprintf((char *)msg, "UART3, count: %d\r\n", count);
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <main+0x140>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	4928      	ldr	r1, [pc, #160]	; (8000418 <main+0x158>)
 8000378:	4824      	ldr	r0, [pc, #144]	; (800040c <main+0x14c>)
 800037a:	f003 f94f 	bl	800361c <siprintf>
		  HAL_UART_Transmit(&huart3, msg, strlen((const char*)msg), 10);
 800037e:	4823      	ldr	r0, [pc, #140]	; (800040c <main+0x14c>)
 8000380:	f7ff ff50 	bl	8000224 <strlen>
 8000384:	4603      	mov	r3, r0
 8000386:	b29a      	uxth	r2, r3
 8000388:	230a      	movs	r3, #10
 800038a:	4920      	ldr	r1, [pc, #128]	; (800040c <main+0x14c>)
 800038c:	4823      	ldr	r0, [pc, #140]	; (800041c <main+0x15c>)
 800038e:	f002 fb68 	bl	8002a62 <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000392:	2264      	movs	r2, #100	; 0x64
 8000394:	2100      	movs	r1, #0
 8000396:	481d      	ldr	r0, [pc, #116]	; (800040c <main+0x14c>)
 8000398:	f003 f869 	bl	800346e <memset>
		  sprintf((char *)msg, "UART4, count: %d\r\n", count);
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <main+0x140>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	491f      	ldr	r1, [pc, #124]	; (8000420 <main+0x160>)
 80003a4:	4819      	ldr	r0, [pc, #100]	; (800040c <main+0x14c>)
 80003a6:	f003 f939 	bl	800361c <siprintf>
		  HAL_UART_Transmit(&huart4, msg, strlen((const char*)msg), 10);
 80003aa:	4818      	ldr	r0, [pc, #96]	; (800040c <main+0x14c>)
 80003ac:	f7ff ff3a 	bl	8000224 <strlen>
 80003b0:	4603      	mov	r3, r0
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	230a      	movs	r3, #10
 80003b6:	4915      	ldr	r1, [pc, #84]	; (800040c <main+0x14c>)
 80003b8:	481a      	ldr	r0, [pc, #104]	; (8000424 <main+0x164>)
 80003ba:	f002 fb52 	bl	8002a62 <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 80003be:	2264      	movs	r2, #100	; 0x64
 80003c0:	2100      	movs	r1, #0
 80003c2:	4812      	ldr	r0, [pc, #72]	; (800040c <main+0x14c>)
 80003c4:	f003 f853 	bl	800346e <memset>
		  sprintf((char *)msg, "UART5, count: %d\r\n", count);
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <main+0x140>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4916      	ldr	r1, [pc, #88]	; (8000428 <main+0x168>)
 80003d0:	480e      	ldr	r0, [pc, #56]	; (800040c <main+0x14c>)
 80003d2:	f003 f923 	bl	800361c <siprintf>
		  HAL_UART_Transmit(&huart5, msg, strlen((const char*)msg), 10);
 80003d6:	480d      	ldr	r0, [pc, #52]	; (800040c <main+0x14c>)
 80003d8:	f7ff ff24 	bl	8000224 <strlen>
 80003dc:	4603      	mov	r3, r0
 80003de:	b29a      	uxth	r2, r3
 80003e0:	230a      	movs	r3, #10
 80003e2:	490a      	ldr	r1, [pc, #40]	; (800040c <main+0x14c>)
 80003e4:	4811      	ldr	r0, [pc, #68]	; (800042c <main+0x16c>)
 80003e6:	f002 fb3c 	bl	8002a62 <HAL_UART_Transmit>
	  if(onesecondElapsed)
 80003ea:	e78f      	b.n	800030c <main+0x4c>
 80003ec:	20000280 	.word	0x20000280
 80003f0:	08000261 	.word	0x08000261
 80003f4:	08000281 	.word	0x08000281
 80003f8:	080045e8 	.word	0x080045e8
 80003fc:	200000bc 	.word	0x200000bc
 8000400:	200000b8 	.word	0x200000b8
 8000404:	080045f8 	.word	0x080045f8
 8000408:	40011c00 	.word	0x40011c00
 800040c:	20000158 	.word	0x20000158
 8000410:	08004604 	.word	0x08004604
 8000414:	200001fc 	.word	0x200001fc
 8000418:	08004618 	.word	0x08004618
 800041c:	200000d0 	.word	0x200000d0
 8000420:	0800462c 	.word	0x0800462c
 8000424:	20000240 	.word	0x20000240
 8000428:	08004640 	.word	0x08004640
 800042c:	200001bc 	.word	0x200001bc

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	; 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2228      	movs	r2, #40	; 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f003 f815 	bl	800346e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800045a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000472:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fa1b 	bl	80018b4 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000484:	f000 faa8 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2302      	movs	r3, #2
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fc86 	bl	8001db4 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ae:	f000 fa93 	bl	80009d8 <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3740      	adds	r7, #64	; 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0308 	add.w	r3, r7, #8
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	463b      	mov	r3, r7
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_TIM2_Init+0x94>)
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM2_Init+0x94>)
 80004e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <MX_TIM2_Init+0x94>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_TIM2_Init+0x94>)
 80004f0:	2248      	movs	r2, #72	; 0x48
 80004f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_TIM2_Init+0x94>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MX_TIM2_Init+0x94>)
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_TIM2_Init+0x94>)
 8000502:	f001 fe40 	bl	8002186 <HAL_TIM_Base_Init>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800050c:	f000 fa64 	bl	80009d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000514:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	4619      	mov	r1, r3
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <MX_TIM2_Init+0x94>)
 800051e:	f001 ffe9 	bl	80024f4 <HAL_TIM_ConfigClockSource>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000528:	f000 fa56 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_TIM2_Init+0x94>)
 800053a:	f002 f9c7 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000544:	f000 fa48 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3718      	adds	r7, #24
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000280 	.word	0x20000280

08000554 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_UART4_Init+0x4c>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <MX_UART4_Init+0x50>)
 800055c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_UART4_Init+0x4c>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_UART4_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_UART4_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_UART4_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_UART4_Init+0x4c>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_UART4_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_UART4_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_UART4_Init+0x4c>)
 800058c:	f002 fa1c 	bl	80029c8 <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000596:	f000 fa1f 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000240 	.word	0x20000240
 80005a4:	40004c00 	.word	0x40004c00

080005a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_UART5_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_UART5_Init+0x4c>)
 80005e0:	f002 f9f2 	bl	80029c8 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80005ea:	f000 f9f5 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001bc 	.word	0x200001bc
 80005f8:	40005000 	.word	0x40005000

080005fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000634:	f002 f9c8 	bl	80029c8 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f9cb 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200001fc 	.word	0x200001fc
 800064c:	40013800 	.word	0x40013800

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f002 f99e 	bl	80029c8 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f9a1 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200002c8 	.word	0x200002c8
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_USART3_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_USART3_UART_Init+0x4c>)
 80006dc:	f002 f974 	bl	80029c8 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f977 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000d0 	.word	0x200000d0
 80006f4:	40004800 	.word	0x40004800

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08c      	sub	sp, #48	; 0x30
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b68      	ldr	r3, [pc, #416]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a67      	ldr	r2, [pc, #412]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	61fb      	str	r3, [r7, #28]
 8000722:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000724:	4b62      	ldr	r3, [pc, #392]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a61      	ldr	r2, [pc, #388]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800072a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000738:	61bb      	str	r3, [r7, #24]
 800073a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b5c      	ldr	r3, [pc, #368]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a5b      	ldr	r2, [pc, #364]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b59      	ldr	r3, [pc, #356]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a55      	ldr	r2, [pc, #340]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b53      	ldr	r3, [pc, #332]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076c:	4b50      	ldr	r3, [pc, #320]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b4d      	ldr	r3, [pc, #308]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b4a      	ldr	r3, [pc, #296]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a49      	ldr	r2, [pc, #292]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b47      	ldr	r3, [pc, #284]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <MX_GPIO_Init+0x1b8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	21c0      	movs	r1, #192	; 0xc0
 80007b8:	483e      	ldr	r0, [pc, #248]	; (80008b4 <MX_GPIO_Init+0x1bc>)
 80007ba:	f001 f849 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80007c4:	483c      	ldr	r0, [pc, #240]	; (80008b8 <MX_GPIO_Init+0x1c0>)
 80007c6:	f001 f843 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007ca:	2200      	movs	r2, #0
 80007cc:	f244 11e0 	movw	r1, #16864	; 0x41e0
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <MX_GPIO_Init+0x1c4>)
 80007d2:	f001 f83d 	bl	8001850 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007dc:	4838      	ldr	r0, [pc, #224]	; (80008c0 <MX_GPIO_Init+0x1c8>)
 80007de:	f001 f837 	bl	8001850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80007e2:	f242 130f 	movw	r3, #8463	; 0x210f
 80007e6:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4619      	mov	r1, r3
 80007f6:	4830      	ldr	r0, [pc, #192]	; (80008b8 <MX_GPIO_Init+0x1c0>)
 80007f8:	f000 fec0 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fc:	23c0      	movs	r3, #192	; 0xc0
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2302      	movs	r3, #2
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4619      	mov	r1, r3
 8000812:	4828      	ldr	r0, [pc, #160]	; (80008b4 <MX_GPIO_Init+0x1bc>)
 8000814:	f000 feb2 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000818:	f44f 7304 	mov.w	r3, #528	; 0x210
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2302      	movs	r3, #2
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0320 	add.w	r3, r7, #32
 800082e:	4619      	mov	r1, r3
 8000830:	4821      	ldr	r0, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x1c0>)
 8000832:	f000 fea3 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000836:	f242 0301 	movw	r3, #8193	; 0x2001
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <MX_GPIO_Init+0x1c4>)
 800084c:	f000 fe96 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000850:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000854:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2302      	movs	r3, #2
 8000860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4619      	mov	r1, r3
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <MX_GPIO_Init+0x1c4>)
 800086a:	f000 fe87 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800086e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4619      	mov	r1, r3
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_GPIO_Init+0x1c8>)
 8000884:	f000 fe7a 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2302      	movs	r3, #2
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_GPIO_Init+0x1c8>)
 80008a2:	f000 fe6b 	bl	800157c <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40011c00 	.word	0x40011c00
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010c00 	.word	0x40010c00
 80008c0:	40010800 	.word	0x40010800

080008c4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008de:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80008e2:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_FSMC_Init+0xc0>)
 80008e8:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_FSMC_Init+0xbc>)
 80008fe:	2210      	movs	r2, #16
 8000900:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <MX_FSMC_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_FSMC_Init+0xbc>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_FSMC_Init+0xbc>)
 800092e:	2200      	movs	r2, #0
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_FSMC_Init+0xbc>)
 8000934:	2200      	movs	r2, #0
 8000936:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8000940:	2305      	movs	r3, #5
 8000942:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_FSMC_Init+0xbc>)
 800095c:	f001 fbc6 	bl	80020ec <HAL_SRAM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_FSMC_Init+0xa6>
  {
    Error_Handler( );
 8000966:	f000 f837 	bl	80009d8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_FSMC_Init+0xc4>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <MX_FSMC_Init+0xc4>)
 8000970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000974:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000976:	bf00      	nop
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000110 	.word	0x20000110
 8000984:	a0000104 	.word	0xa0000104
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d110      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		ms_count++;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009aa:	801a      	strh	r2, [r3, #0]

		if(ms_count >= 1000)
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b4:	d305      	bcc.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			onesecondElapsed = 1;
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80009be:	2200      	movs	r2, #0
 80009c0:	801a      	strh	r2, [r3, #0]
		}
		/* Toggle LEDs */
	}
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000280 	.word	0x20000280
 80009d0:	200000ba 	.word	0x200000ba
 80009d4:	200000bc 	.word	0x200000bc

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_MspInit+0x5c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_MspInit+0x5c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x5c>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_MspInit+0x60>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <HAL_MspInit+0x60>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000

08000a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a58:	d113      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <HAL_TIM_Base_MspInit+0x44>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201c      	movs	r0, #28
 8000a78:	f000 fc41 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f000 fc5a 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b092      	sub	sp, #72	; 0x48
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4aa1      	ldr	r2, [pc, #644]	; (8000d30 <HAL_UART_MspInit+0x2a0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d13a      	bne.n	8000b26 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ab0:	4ba0      	ldr	r3, [pc, #640]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	4a9f      	ldr	r2, [pc, #636]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000ab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aba:	61d3      	str	r3, [r2, #28]
 8000abc:	4b9d      	ldr	r3, [pc, #628]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b9a      	ldr	r3, [pc, #616]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a99      	ldr	r2, [pc, #612]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000ace:	f043 0310 	orr.w	r3, r3, #16
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b97      	ldr	r3, [pc, #604]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000af2:	4619      	mov	r1, r3
 8000af4:	4890      	ldr	r0, [pc, #576]	; (8000d38 <HAL_UART_MspInit+0x2a8>)
 8000af6:	f000 fd41 	bl	800157c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000afa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000afe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	488a      	ldr	r0, [pc, #552]	; (8000d38 <HAL_UART_MspInit+0x2a8>)
 8000b10:	f000 fd34 	bl	800157c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	2034      	movs	r0, #52	; 0x34
 8000b1a:	f000 fbf0 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b1e:	2034      	movs	r0, #52	; 0x34
 8000b20:	f000 fc09 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b24:	e0ff      	b.n	8000d26 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a84      	ldr	r2, [pc, #528]	; (8000d3c <HAL_UART_MspInit+0x2ac>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d145      	bne.n	8000bbc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b30:	4b80      	ldr	r3, [pc, #512]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	4a7f      	ldr	r2, [pc, #508]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b3a:	61d3      	str	r3, [r2, #28]
 8000b3c:	4b7d      	ldr	r3, [pc, #500]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b7a      	ldr	r3, [pc, #488]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a79      	ldr	r2, [pc, #484]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b77      	ldr	r3, [pc, #476]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b60:	4b74      	ldr	r3, [pc, #464]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a73      	ldr	r2, [pc, #460]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b71      	ldr	r3, [pc, #452]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	486a      	ldr	r0, [pc, #424]	; (8000d38 <HAL_UART_MspInit+0x2a8>)
 8000b8e:	f000 fcf5 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b92:	2304      	movs	r3, #4
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4866      	ldr	r0, [pc, #408]	; (8000d40 <HAL_UART_MspInit+0x2b0>)
 8000ba6:	f000 fce9 	bl	800157c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2035      	movs	r0, #53	; 0x35
 8000bb0:	f000 fba5 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000bb4:	2035      	movs	r0, #53	; 0x35
 8000bb6:	f000 fbbe 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000bba:	e0b4      	b.n	8000d26 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <HAL_UART_MspInit+0x2b4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d13a      	bne.n	8000c3c <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc6:	4b5b      	ldr	r3, [pc, #364]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b58      	ldr	r3, [pc, #352]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b55      	ldr	r3, [pc, #340]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a54      	ldr	r2, [pc, #336]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c08:	4619      	mov	r1, r3
 8000c0a:	484f      	ldr	r0, [pc, #316]	; (8000d48 <HAL_UART_MspInit+0x2b8>)
 8000c0c:	f000 fcb6 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c22:	4619      	mov	r1, r3
 8000c24:	4848      	ldr	r0, [pc, #288]	; (8000d48 <HAL_UART_MspInit+0x2b8>)
 8000c26:	f000 fca9 	bl	800157c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2025      	movs	r0, #37	; 0x25
 8000c30:	f000 fb65 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c34:	2025      	movs	r0, #37	; 0x25
 8000c36:	f000 fb7e 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000c3a:	e074      	b.n	8000d26 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <HAL_UART_MspInit+0x2bc>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d130      	bne.n	8000ca8 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c46:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a3a      	ldr	r2, [pc, #232]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c76:	2304      	movs	r3, #4
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c86:	4619      	mov	r1, r3
 8000c88:	482f      	ldr	r0, [pc, #188]	; (8000d48 <HAL_UART_MspInit+0x2b8>)
 8000c8a:	f000 fc77 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4829      	ldr	r0, [pc, #164]	; (8000d48 <HAL_UART_MspInit+0x2b8>)
 8000ca2:	f000 fc6b 	bl	800157c <HAL_GPIO_Init>
}
 8000ca6:	e03e      	b.n	8000d26 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART3)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <HAL_UART_MspInit+0x2c0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d139      	bne.n	8000d26 <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0x2a4>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x2c4>)
 8000cf8:	f000 fc40 	bl	800157c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4810      	ldr	r0, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0x2c4>)
 8000d12:	f000 fc33 	bl	800157c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2027      	movs	r0, #39	; 0x27
 8000d1c:	f000 faef 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d20:	2027      	movs	r0, #39	; 0x27
 8000d22:	f000 fb08 	bl	8001336 <HAL_NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3748      	adds	r7, #72	; 0x48
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004c00 	.word	0x40004c00
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40011000 	.word	0x40011000
 8000d3c:	40005000 	.word	0x40005000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40004800 	.word	0x40004800
 8000d54:	40010c00 	.word	0x40010c00

08000d58 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000d6c:	4b25      	ldr	r3, [pc, #148]	; (8000e04 <HAL_FSMC_MspInit+0xac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d143      	bne.n	8000dfc <HAL_FSMC_MspInit+0xa4>
    return;
  }
  FSMC_Initialized = 1;
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_FSMC_MspInit+0xac>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_FSMC_MspInit+0xb0>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_FSMC_MspInit+0xb0>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6153      	str	r3, [r2, #20]
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_FSMC_MspInit+0xb0>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d92:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000d96:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	4819      	ldr	r0, [pc, #100]	; (8000e0c <HAL_FSMC_MspInit+0xb4>)
 8000da8:	f000 fbe8 	bl	800157c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000dac:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000db0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <HAL_FSMC_MspInit+0xb8>)
 8000dc2:	f000 fbdb 	bl	800157c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000dc6:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000dca:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480e      	ldr	r0, [pc, #56]	; (8000e14 <HAL_FSMC_MspInit+0xbc>)
 8000ddc:	f000 fbce 	bl	800157c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <HAL_FSMC_MspInit+0xc0>)
 8000df6:	f000 fbc1 	bl	800157c <HAL_GPIO_Init>
 8000dfa:	e000      	b.n	8000dfe <HAL_FSMC_MspInit+0xa6>
    return;
 8000dfc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000c0 	.word	0x200000c0
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40011c00 	.word	0x40011c00
 8000e10:	40011800 	.word	0x40011800
 8000e14:	40011400 	.word	0x40011400
 8000e18:	40012000 	.word	0x40012000

08000e1c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e24:	f7ff ff98 	bl	8000d58 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <HardFault_Handler+0x4>

08000e42 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <BusFault_Handler+0x4>

08000e4e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <UsageFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f92a 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM2_IRQHandler+0x10>)
 8000e8a:	f001 fa2b 	bl	80022e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000280 	.word	0x20000280

08000e98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <USART1_IRQHandler+0x10>)
 8000e9e:	f001 fe73 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001fc 	.word	0x200001fc

08000eac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <USART3_IRQHandler+0x10>)
 8000eb2:	f001 fe69 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000d0 	.word	0x200000d0

08000ec0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <UART4_IRQHandler+0x10>)
 8000ec6:	f001 fe5f 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000240 	.word	0x20000240

08000ed4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <UART5_IRQHandler+0x10>)
 8000eda:	f001 fe55 	bl	8002b88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001bc 	.word	0x200001bc

08000ee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e00a      	b.n	8000f10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000efa:	f3af 8000 	nop.w
 8000efe:	4601      	mov	r1, r0
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	b2ca      	uxtb	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf0      	blt.n	8000efa <_read+0x12>
	}

return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f48:	605a      	str	r2, [r3, #4]
	return 0;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <_isatty>:

int _isatty(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
	return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f002 fa26 	bl	8003404 <__errno>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	230c      	movs	r3, #12
 8000fbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20010000 	.word	0x20010000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200000c4 	.word	0x200000c4
 8000fec:	20000310 	.word	0x20000310

08000ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ffc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ffe:	e003      	b.n	8001008 <LoopCopyDataInit>

08001000 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001000:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001002:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001004:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001006:	3104      	adds	r1, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800100c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001010:	d3f6      	bcc.n	8001000 <CopyDataInit>
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001014:	e002      	b.n	800101c <LoopFillZerobss>

08001016 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001018:	f842 3b04 	str.w	r3, [r2], #4

0800101c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800101e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001020:	d3f9      	bcc.n	8001016 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001022:	f7ff ffe5 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f002 f9f3 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102a:	f7ff f949 	bl	80002c0 <main>
  bx lr
 800102e:	4770      	bx	lr
  ldr r3, =_sidata
 8001030:	08004720 	.word	0x08004720
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001038:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 800103c:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8001040:	20000310 	.word	0x20000310

08001044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x28>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x28>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f945 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fcbe 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f95d 	bl	8001352 <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b0:	f000 f925 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000008 	.word	0x20000008
 80010d0:	20000004 	.word	0x20000004

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x20>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000308 	.word	0x20000308

080010f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000308 	.word	0x20000308

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff fff0 	bl	80010f8 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001124:	d005      	beq.n	8001132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_Delay+0x40>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001132:	bf00      	nop
 8001134:	f7ff ffe0 	bl	80010f8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8f7      	bhi.n	8001134 <HAL_Delay+0x28>
  {
  }
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4906      	ldr	r1, [pc, #24]	; (80011e8 <__NVIC_EnableIRQ+0x34>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c8:	f7ff ff90 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff2d 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff42 	bl	8001198 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff35 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800137e:	2b02      	cmp	r3, #2
 8001380:	d005      	beq.n	800138e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2204      	movs	r2, #4
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e0d6      	b.n	800153c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 020e 	bic.w	r2, r2, #14
 800139c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0201 	bic.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b64      	ldr	r3, [pc, #400]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d958      	bls.n	800146c <HAL_DMA_Abort_IT+0x100>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a63      	ldr	r2, [pc, #396]	; (800154c <HAL_DMA_Abort_IT+0x1e0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04f      	beq.n	8001464 <HAL_DMA_Abort_IT+0xf8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a61      	ldr	r2, [pc, #388]	; (8001550 <HAL_DMA_Abort_IT+0x1e4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d048      	beq.n	8001460 <HAL_DMA_Abort_IT+0xf4>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a60      	ldr	r2, [pc, #384]	; (8001554 <HAL_DMA_Abort_IT+0x1e8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d040      	beq.n	800145a <HAL_DMA_Abort_IT+0xee>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_DMA_Abort_IT+0x1ec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d038      	beq.n	8001454 <HAL_DMA_Abort_IT+0xe8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a5d      	ldr	r2, [pc, #372]	; (800155c <HAL_DMA_Abort_IT+0x1f0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d030      	beq.n	800144e <HAL_DMA_Abort_IT+0xe2>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_DMA_Abort_IT+0x1f4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d028      	beq.n	8001448 <HAL_DMA_Abort_IT+0xdc>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a53      	ldr	r2, [pc, #332]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d020      	beq.n	8001442 <HAL_DMA_Abort_IT+0xd6>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_DMA_Abort_IT+0x1f8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_DMA_Abort_IT+0xd2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_DMA_Abort_IT+0x1fc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d012      	beq.n	800143a <HAL_DMA_Abort_IT+0xce>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a54      	ldr	r2, [pc, #336]	; (800156c <HAL_DMA_Abort_IT+0x200>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00a      	beq.n	8001434 <HAL_DMA_Abort_IT+0xc8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a53      	ldr	r2, [pc, #332]	; (8001570 <HAL_DMA_Abort_IT+0x204>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_DMA_Abort_IT+0xc2>
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	e01b      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 800142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001432:	e018      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001438:	e015      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 800143a:	2310      	movs	r3, #16
 800143c:	e013      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 800143e:	2301      	movs	r3, #1
 8001440:	e011      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001442:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001446:	e00e      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001448:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800144c:	e00b      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001452:	e008      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	e005      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 800145a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145e:	e002      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001460:	2310      	movs	r3, #16
 8001462:	e000      	b.n	8001466 <HAL_DMA_Abort_IT+0xfa>
 8001464:	2301      	movs	r3, #1
 8001466:	4a43      	ldr	r2, [pc, #268]	; (8001574 <HAL_DMA_Abort_IT+0x208>)
 8001468:	6053      	str	r3, [r2, #4]
 800146a:	e057      	b.n	800151c <HAL_DMA_Abort_IT+0x1b0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_DMA_Abort_IT+0x1e0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d04f      	beq.n	8001516 <HAL_DMA_Abort_IT+0x1aa>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a35      	ldr	r2, [pc, #212]	; (8001550 <HAL_DMA_Abort_IT+0x1e4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d048      	beq.n	8001512 <HAL_DMA_Abort_IT+0x1a6>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a33      	ldr	r2, [pc, #204]	; (8001554 <HAL_DMA_Abort_IT+0x1e8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d040      	beq.n	800150c <HAL_DMA_Abort_IT+0x1a0>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_DMA_Abort_IT+0x1ec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d038      	beq.n	8001506 <HAL_DMA_Abort_IT+0x19a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_DMA_Abort_IT+0x1f0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d030      	beq.n	8001500 <HAL_DMA_Abort_IT+0x194>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2f      	ldr	r2, [pc, #188]	; (8001560 <HAL_DMA_Abort_IT+0x1f4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d028      	beq.n	80014fa <HAL_DMA_Abort_IT+0x18e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_DMA_Abort_IT+0x1dc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d020      	beq.n	80014f4 <HAL_DMA_Abort_IT+0x188>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_DMA_Abort_IT+0x1f8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d019      	beq.n	80014f0 <HAL_DMA_Abort_IT+0x184>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_DMA_Abort_IT+0x1fc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d012      	beq.n	80014ec <HAL_DMA_Abort_IT+0x180>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_DMA_Abort_IT+0x200>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00a      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x17a>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <HAL_DMA_Abort_IT+0x204>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d102      	bne.n	80014e0 <HAL_DMA_Abort_IT+0x174>
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	e01b      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	e018      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ea:	e015      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014ec:	2310      	movs	r3, #16
 80014ee:	e013      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e011      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 80014fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fe:	e00b      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	e008      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	e005      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 800150c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001510:	e002      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 8001512:	2310      	movs	r3, #16
 8001514:	e000      	b.n	8001518 <HAL_DMA_Abort_IT+0x1ac>
 8001516:	2301      	movs	r3, #1
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_DMA_Abort_IT+0x20c>)
 800151a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
    } 
  }
  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020080 	.word	0x40020080
 800154c:	40020008 	.word	0x40020008
 8001550:	4002001c 	.word	0x4002001c
 8001554:	40020030 	.word	0x40020030
 8001558:	40020044 	.word	0x40020044
 800155c:	40020058 	.word	0x40020058
 8001560:	4002006c 	.word	0x4002006c
 8001564:	40020408 	.word	0x40020408
 8001568:	4002041c 	.word	0x4002041c
 800156c:	40020430 	.word	0x40020430
 8001570:	40020444 	.word	0x40020444
 8001574:	40020400 	.word	0x40020400
 8001578:	40020000 	.word	0x40020000

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158e:	e133      	b.n	80017f8 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001590:	2201      	movs	r2, #1
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8122 	bne.w	80017f2 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d034      	beq.n	8001620 <HAL_GPIO_Init+0xa4>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d80d      	bhi.n	80015d6 <HAL_GPIO_Init+0x5a>
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d02b      	beq.n	8001616 <HAL_GPIO_Init+0x9a>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d804      	bhi.n	80015cc <HAL_GPIO_Init+0x50>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d031      	beq.n	800162a <HAL_GPIO_Init+0xae>
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d01c      	beq.n	8001604 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ca:	e048      	b.n	800165e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d043      	beq.n	8001658 <HAL_GPIO_Init+0xdc>
 80015d0:	2b11      	cmp	r3, #17
 80015d2:	d01b      	beq.n	800160c <HAL_GPIO_Init+0x90>
          break;
 80015d4:	e043      	b.n	800165e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015d6:	4a8f      	ldr	r2, [pc, #572]	; (8001814 <HAL_GPIO_Init+0x298>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d026      	beq.n	800162a <HAL_GPIO_Init+0xae>
 80015dc:	4a8d      	ldr	r2, [pc, #564]	; (8001814 <HAL_GPIO_Init+0x298>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d806      	bhi.n	80015f0 <HAL_GPIO_Init+0x74>
 80015e2:	4a8d      	ldr	r2, [pc, #564]	; (8001818 <HAL_GPIO_Init+0x29c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d020      	beq.n	800162a <HAL_GPIO_Init+0xae>
 80015e8:	4a8c      	ldr	r2, [pc, #560]	; (800181c <HAL_GPIO_Init+0x2a0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01d      	beq.n	800162a <HAL_GPIO_Init+0xae>
          break;
 80015ee:	e036      	b.n	800165e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80015f0:	4a8b      	ldr	r2, [pc, #556]	; (8001820 <HAL_GPIO_Init+0x2a4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0xae>
 80015f6:	4a8b      	ldr	r2, [pc, #556]	; (8001824 <HAL_GPIO_Init+0x2a8>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d016      	beq.n	800162a <HAL_GPIO_Init+0xae>
 80015fc:	4a8a      	ldr	r2, [pc, #552]	; (8001828 <HAL_GPIO_Init+0x2ac>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xae>
          break;
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e028      	b.n	800165e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e023      	b.n	800165e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01e      	b.n	800165e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e019      	b.n	800165e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e012      	b.n	800165e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e008      	b.n	800165e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2bff      	cmp	r3, #255	; 0xff
 8001662:	d801      	bhi.n	8001668 <HAL_GPIO_Init+0xec>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	e001      	b.n	800166c <HAL_GPIO_Init+0xf0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3304      	adds	r3, #4
 800166c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2bff      	cmp	r3, #255	; 0xff
 8001672:	d802      	bhi.n	800167a <HAL_GPIO_Init+0xfe>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x104>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	3b08      	subs	r3, #8
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	210f      	movs	r1, #15
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	401a      	ands	r2, r3
 8001692:	6a39      	ldr	r1, [r7, #32]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a2 	beq.w	80017f2 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_GPIO_Init+0x2b0>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a5e      	ldr	r2, [pc, #376]	; (800182c <HAL_GPIO_Init+0x2b0>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_GPIO_Init+0x2b0>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c6:	4a5a      	ldr	r2, [pc, #360]	; (8001830 <HAL_GPIO_Init+0x2b4>)
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01f      	beq.n	8001732 <HAL_GPIO_Init+0x1b6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_GPIO_Init+0x2bc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x1b2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4f      	ldr	r2, [pc, #316]	; (800183c <HAL_GPIO_Init+0x2c0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x1ae>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <HAL_GPIO_Init+0x2c4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x1aa>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4d      	ldr	r2, [pc, #308]	; (8001844 <HAL_GPIO_Init+0x2c8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x1a6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_GPIO_Init+0x2cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x1a2>
 800171a:	2305      	movs	r3, #5
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 800171e:	2306      	movs	r3, #6
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x1b8>
 8001732:	2300      	movs	r3, #0
 8001734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001744:	493a      	ldr	r1, [pc, #232]	; (8001830 <HAL_GPIO_Init+0x2b4>)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	493a      	ldr	r1, [pc, #232]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
 800176a:	e006      	b.n	800177a <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <HAL_GPIO_Init+0x2d0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	4930      	ldr	r1, [pc, #192]	; (800184c <HAL_GPIO_Init+0x2d0>)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	604b      	str	r3, [r1, #4]
 8001792:	e006      	b.n	80017a2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_GPIO_Init+0x2d0>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	43db      	mvns	r3, r3
 800179c:	492b      	ldr	r1, [pc, #172]	; (800184c <HAL_GPIO_Init+0x2d0>)
 800179e:	4013      	ands	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ae:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	4926      	ldr	r1, [pc, #152]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017bc:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4921      	ldr	r1, [pc, #132]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	491c      	ldr	r1, [pc, #112]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60cb      	str	r3, [r1, #12]
 80017e2:	e006      	b.n	80017f2 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4917      	ldr	r1, [pc, #92]	; (800184c <HAL_GPIO_Init+0x2d0>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	f47f aec4 	bne.w	8001590 <HAL_GPIO_Init+0x14>
  }
}
 8001808:	bf00      	nop
 800180a:	372c      	adds	r7, #44	; 0x2c
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	10210000 	.word	0x10210000
 8001818:	10110000 	.word	0x10110000
 800181c:	10120000 	.word	0x10120000
 8001820:	10310000 	.word	0x10310000
 8001824:	10320000 	.word	0x10320000
 8001828:	10220000 	.word	0x10220000
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000
 8001834:	40010800 	.word	0x40010800
 8001838:	40010c00 	.word	0x40010c00
 800183c:	40011000 	.word	0x40011000
 8001840:	40011400 	.word	0x40011400
 8001844:	40011800 	.word	0x40011800
 8001848:	40011c00 	.word	0x40011c00
 800184c:	40010400 	.word	0x40010400

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	611a      	str	r2, [r3, #16]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43d9      	mvns	r1, r3
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	400b      	ands	r3, r1
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e26c      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e246      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fbb2 	bl	80010f8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fbae 	bl	80010f8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1fa      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb9e 	bl	80010f8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fb9a 	bl	80010f8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1e6      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1ba      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb53 	bl	80010f8 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb4f 	bl	80010f8 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e19b      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb32 	bl	80010f8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fb2e 	bl	80010f8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e17a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fb12 	bl	80010f8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fb0e 	bl	80010f8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e15a      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fada 	bl	80020b0 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff faf8 	bl	80010f8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff faf4 	bl	80010f8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e140      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b97      	ldr	r3, [pc, #604]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a93      	ldr	r2, [pc, #588]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8a      	ldr	r2, [pc, #552]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fab5 	bl	80010f8 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fab1 	bl	80010f8 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0fd      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b81      	ldr	r3, [pc, #516]	; (8001dac <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a6c      	ldr	r2, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a63      	ldr	r2, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa65 	bl	80010f8 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fa61 	bl	80010f8 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0ab      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa4f 	bl	80010f8 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fa4b 	bl	80010f8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e095      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a47      	ldr	r2, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8081 	beq.w	8001d9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa1f 	bl	80010f8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fa1b 	bl	80010f8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e067      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	492d      	ldr	r1, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff f9ef 	bl	80010f8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f9eb 	bl	80010f8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e037      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e02f      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_RCC_OscConfig+0x4fc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff f9d8 	bl	80010f8 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f9d4 	bl	80010f8 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e020      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e013      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40007000 	.word	0x40007000
 8001db0:	42420060 	.word	0x42420060

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d0      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d910      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4965      	ldr	r1, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d040      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d115      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e073      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3d      	ldr	r3, [pc, #244]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e06b      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4936      	ldr	r1, [pc, #216]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f928 	bl	80010f8 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff f924 	bl	80010f8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e053      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d210      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	fa21 f303 	lsr.w	r3, r1, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1cc>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1d0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f886 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08004668 	.word	0x08004668
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b490      	push	{r4, r7}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f90:	1d3c      	adds	r4, r7, #4
 8001f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x46>
 8001fc6:	e02d      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fca:	623b      	str	r3, [r7, #32]
      break;
 8001fcc:	e02d      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fda:	4413      	add	r3, r2
 8001fdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	0c5b      	lsrs	r3, r3, #17
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002000:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002006:	fb02 f203 	mul.w	r2, r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	623b      	str	r3, [r7, #32]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	6a3b      	ldr	r3, [r7, #32]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc90      	pop	{r4, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	08004654 	.word	0x08004654
 800203c:	08004664 	.word	0x08004664
 8002040:	40021000 	.word	0x40021000
 8002044:	007a1200 	.word	0x007a1200
 8002048:	003d0900 	.word	0x003d0900

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08004678 	.word	0x08004678

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffde 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002090:	4601      	mov	r1, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08004678 	.word	0x08004678

080020b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <RCC_Delay+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <RCC_Delay+0x38>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020cc:	bf00      	nop
  }
  while (Delay --);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <RCC_Delay+0x1c>
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_SRAM_Init+0x1c>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002106:	d101      	bne.n	800210c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e038      	b.n	800217e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7fe fe7b 	bl	8000e1c <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3308      	adds	r3, #8
 800212e:	4619      	mov	r1, r3
 8002130:	4610      	mov	r0, r2
 8002132:	f001 f835 	bl	80031a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	461a      	mov	r2, r3
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	f001 f897 	bl	8003274 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6858      	ldr	r0, [r3, #4]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	f001 f8c2 	bl	80032dc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	6892      	ldr	r2, [r2, #8]
 8002160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	6892      	ldr	r2, [r2, #8]
 800216c:	f041 0101 	orr.w	r1, r1, #1
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e041      	b.n	800221c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fc4b 	bl	8000a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3304      	adds	r3, #4
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f000 fa71 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d001      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e044      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1d      	ldr	r2, [pc, #116]	; (80022d0 <HAL_TIM_Base_Start_IT+0xac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d018      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a18      	ldr	r2, [pc, #96]	; (80022d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_TIM_Base_Start_IT+0xb8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x6c>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d010      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40013400 	.word	0x40013400
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40000c00 	.word	0x40000c00

080022e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d122      	bne.n	8002340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b02      	cmp	r3, #2
 8002306:	d11b      	bne.n	8002340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0202 	mvn.w	r2, #2
 8002310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9a4 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f997 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f9a6 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b04      	cmp	r3, #4
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0204 	mvn.w	r2, #4
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f97a 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f96d 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f97c 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0208 	mvn.w	r2, #8
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2204      	movs	r2, #4
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f950 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f943 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f952 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b10      	cmp	r3, #16
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0210 	mvn.w	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2208      	movs	r2, #8
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f926 	bl	8002674 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f919 	bl	8002662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f928 	bl	8002686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b01      	cmp	r3, #1
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0201 	mvn.w	r2, #1
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fa92 	bl	800098c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002472:	2b80      	cmp	r3, #128	; 0x80
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b80      	cmp	r3, #128	; 0x80
 8002482:	d107      	bne.n	8002494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fa91 	bl	80029b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f8ec 	bl	8002698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0220 	mvn.w	r2, #32
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa5c 	bl	80029a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIM_ConfigClockSource+0x18>
 8002508:	2302      	movs	r3, #2
 800250a:	e0a6      	b.n	800265a <HAL_TIM_ConfigClockSource+0x166>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800252a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002532:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d067      	beq.n	8002614 <HAL_TIM_ConfigClockSource+0x120>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d80b      	bhi.n	8002560 <HAL_TIM_ConfigClockSource+0x6c>
 8002548:	2b10      	cmp	r3, #16
 800254a:	d073      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x140>
 800254c:	2b10      	cmp	r3, #16
 800254e:	d802      	bhi.n	8002556 <HAL_TIM_ConfigClockSource+0x62>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d06f      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002554:	e078      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002556:	2b20      	cmp	r3, #32
 8002558:	d06c      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x140>
 800255a:	2b30      	cmp	r3, #48	; 0x30
 800255c:	d06a      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800255e:	e073      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002560:	2b70      	cmp	r3, #112	; 0x70
 8002562:	d00d      	beq.n	8002580 <HAL_TIM_ConfigClockSource+0x8c>
 8002564:	2b70      	cmp	r3, #112	; 0x70
 8002566:	d804      	bhi.n	8002572 <HAL_TIM_ConfigClockSource+0x7e>
 8002568:	2b50      	cmp	r3, #80	; 0x50
 800256a:	d033      	beq.n	80025d4 <HAL_TIM_ConfigClockSource+0xe0>
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d041      	beq.n	80025f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002570:	e06a      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	d066      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x152>
 8002578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257c:	d017      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800257e:	e063      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f000 f97d 	bl	800288e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]
      break;
 80025ac:	e04c      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f000 f966 	bl	800288e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d0:	609a      	str	r2, [r3, #8]
      break;
 80025d2:	e039      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f000 f8dd 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2150      	movs	r1, #80	; 0x50
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f934 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 80025f2:	e029      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	461a      	mov	r2, r3
 8002602:	f000 f8fb 	bl	80027fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2160      	movs	r1, #96	; 0x60
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f924 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002612:	e019      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	461a      	mov	r2, r3
 8002622:	f000 f8bd 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2140      	movs	r1, #64	; 0x40
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f914 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002632:	e009      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f000 f90b 	bl	800285a <TIM_ITRx_SetConfig>
        break;
 8002644:	e000      	b.n	8002648 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
	...

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <TIM_Base_SetConfig+0xe0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00f      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d00b      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <TIM_Base_SetConfig+0xec>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <TIM_Base_SetConfig+0xf0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <TIM_Base_SetConfig+0xe0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <TIM_Base_SetConfig+0xec>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <TIM_Base_SetConfig+0xf0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <TIM_Base_SetConfig+0xe0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0xc8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00

080027a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f023 0201 	bic.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 030a 	bic.w	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 0210 	bic.w	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002826:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	031b      	lsls	r3, r3, #12
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	f043 0307 	orr.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e050      	b.n	8002986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d00e      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10c      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40013400 	.word	0x40013400
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00

080029a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03f      	b.n	8002a5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe f84e 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fb39 	bl	8003084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08a      	sub	sp, #40	; 0x28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d17c      	bne.n	8002b7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_UART_Transmit+0x2c>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e075      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Transmit+0x3e>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e06e      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fb1f 	bl	80010f8 <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002af4:	e02a      	b.n	8002b4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f95c 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e036      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	e007      	b.n	8002b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1cf      	bne.n	8002af6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f92c 	bl	8002dbe <UART_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e006      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3720      	adds	r7, #32
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_UART_IRQHandler+0x52>
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9d5 	bl	8002f82 <UART_Receive_IT>
      return;
 8002bd8:	e0d1      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80b0 	beq.w	8002d42 <HAL_UART_IRQHandler+0x1ba>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x70>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a5 	beq.w	8002d42 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <HAL_UART_IRQHandler+0x90>
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_UART_IRQHandler+0xb0>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_UART_IRQHandler+0xd0>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00f      	beq.n	8002c82 <HAL_UART_IRQHandler+0xfa>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_UART_IRQHandler+0xee>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	f043 0208 	orr.w	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d078      	beq.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x11c>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f96f 	bl	8002f82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_UART_IRQHandler+0x144>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d031      	beq.n	8002d30 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8c0 	bl	8002e52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_UART_IRQHandler+0x1fc>)
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fb31 	bl	800136c <HAL_DMA_Abort_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1e:	e00e      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f843 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d26:	e00a      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f83f 	bl	8002dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2e:	e006      	b.n	8002d3e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f83b 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d3c:	e01e      	b.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	bf00      	nop
    return;
 8002d40:	e01c      	b.n	8002d7c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1d6>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8ac 	bl	8002eb4 <UART_Transmit_IT>
    return;
 8002d5c:	e00f      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8ed 	bl	8002f52 <UART_EndTransmit_IT>
    return;
 8002d78:	bf00      	nop
 8002d7a:	e000      	b.n	8002d7e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d7c:	bf00      	nop
  }
}
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	08002e8d 	.word	0x08002e8d

08002d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	e02c      	b.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d028      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x30>
 8002dde:	f7fe f98b 	bl	80010f8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d21d      	bcs.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dfc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e00f      	b.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d0c3      	beq.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff ff80 	bl	8002dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b21      	cmp	r3, #33	; 0x21
 8002ec6:	d13e      	bne.n	8002f46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d114      	bne.n	8002efc <UART_Transmit_IT+0x48>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d110      	bne.n	8002efc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	621a      	str	r2, [r3, #32]
 8002efa:	e008      	b.n	8002f0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	1c59      	adds	r1, r3, #1
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6211      	str	r1, [r2, #32]
 8002f06:	781a      	ldrb	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff08 	bl	8002d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b22      	cmp	r3, #34	; 0x22
 8002f94:	d170      	bne.n	8003078 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d117      	bne.n	8002fd0 <UART_Receive_IT+0x4e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d113      	bne.n	8002fd0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8002fce:	e026      	b.n	800301e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe2:	d007      	beq.n	8002ff4 <UART_Receive_IT+0x72>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <UART_Receive_IT+0x80>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e008      	b.n	8003014 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29b      	uxth	r3, r3
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4619      	mov	r1, r3
 800302c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800302e:	2b00      	cmp	r3, #0
 8003030:	d120      	bne.n	8003074 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0220 	bic.w	r2, r2, #32
 8003040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003050:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe95 	bl	8002d9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e002      	b.n	800307a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	e000      	b.n	800307a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
  }
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
	...

08003084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030be:	f023 030c 	bic.w	r3, r3, #12
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <UART_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ec:	f7fe ffcc 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	e002      	b.n	80030fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7fe ffb4 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80030f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <UART_SetConfig+0x118>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	0119      	lsls	r1, r3, #4
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003130:	4b1a      	ldr	r3, [pc, #104]	; (800319c <UART_SetConfig+0x118>)
 8003132:	fba3 0302 	umull	r0, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2064      	movs	r0, #100	; 0x64
 800313a:	fb00 f303 	mul.w	r3, r0, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <UART_SetConfig+0x118>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	4419      	add	r1, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	440a      	add	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40013800 	.word	0x40013800
 800319c:	51eb851f 	.word	0x51eb851f

080031a0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f023 0101 	bic.w	r1, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d102      	bne.n	80031d0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80031ca:	2340      	movs	r3, #64	; 0x40
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e001      	b.n	80031d4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80031e0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80031e6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80031ec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80031f2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80031f8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80031fe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003204:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800320a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003210:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <FSMC_NORSRAM_Init+0xd0>)
 8003230:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003238:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003240:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	ea02 0103 	and.w	r1, r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4319      	orrs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	0008fb7f 	.word	0x0008fb7f

08003274 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	431a      	orrs	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	051b      	lsls	r3, r3, #20
 80032b2:	431a      	orrs	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	3b02      	subs	r3, #2
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	431a      	orrs	r2, r3
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	3201      	adds	r2, #1
 80032c8:	4319      	orrs	r1, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f0:	d11d      	bne.n	800332e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	6811      	ldr	r1, [r2, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	4311      	orrs	r1, r2
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	6892      	ldr	r2, [r2, #8]
 800330e:	0212      	lsls	r2, r2, #8
 8003310:	4311      	orrs	r1, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	6992      	ldr	r2, [r2, #24]
 8003316:	4311      	orrs	r1, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68d2      	ldr	r2, [r2, #12]
 800331c:	0412      	lsls	r2, r2, #16
 800331e:	430a      	orrs	r2, r1
 8003320:	ea43 0102 	orr.w	r1, r3, r2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800332c:	e005      	b.n	800333a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	cff00000 	.word	0xcff00000

0800334c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <reg_wizchip_bus_cbfunc>:
}

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 80033ba:	bf00      	nop
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <reg_wizchip_bus_cbfunc+0x48>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f9      	beq.n	80033bc <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <reg_wizchip_bus_cbfunc+0x24>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <reg_wizchip_bus_cbfunc+0x48>)
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <reg_wizchip_bus_cbfunc+0x4c>)
 80033d8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 80033da:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <reg_wizchip_bus_cbfunc+0x48>)
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <reg_wizchip_bus_cbfunc+0x50>)
 80033de:	621a      	str	r2, [r3, #32]
 80033e0:	e005      	b.n	80033ee <reg_wizchip_bus_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 80033e2:	4a05      	ldr	r2, [pc, #20]	; (80033f8 <reg_wizchip_bus_cbfunc+0x48>)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <reg_wizchip_bus_cbfunc+0x48>)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6213      	str	r3, [r2, #32]
   }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	0800337d 	.word	0x0800337d
 8003400:	08003395 	.word	0x08003395

08003404 <__errno>:
 8003404:	4b01      	ldr	r3, [pc, #4]	; (800340c <__errno+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000038 	.word	0x20000038

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	2500      	movs	r5, #0
 8003414:	4e0c      	ldr	r6, [pc, #48]	; (8003448 <__libc_init_array+0x38>)
 8003416:	4c0d      	ldr	r4, [pc, #52]	; (800344c <__libc_init_array+0x3c>)
 8003418:	1ba4      	subs	r4, r4, r6
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	42a5      	cmp	r5, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	f001 f8d6 	bl	80045d0 <_init>
 8003424:	2500      	movs	r5, #0
 8003426:	4e0a      	ldr	r6, [pc, #40]	; (8003450 <__libc_init_array+0x40>)
 8003428:	4c0a      	ldr	r4, [pc, #40]	; (8003454 <__libc_init_array+0x44>)
 800342a:	1ba4      	subs	r4, r4, r6
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	42a5      	cmp	r5, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003438:	4798      	blx	r3
 800343a:	3501      	adds	r5, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003442:	4798      	blx	r3
 8003444:	3501      	adds	r5, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	08004718 	.word	0x08004718
 800344c:	08004718 	.word	0x08004718
 8003450:	08004718 	.word	0x08004718
 8003454:	0800471c 	.word	0x0800471c

08003458 <memcpy>:
 8003458:	b510      	push	{r4, lr}
 800345a:	1e43      	subs	r3, r0, #1
 800345c:	440a      	add	r2, r1
 800345e:	4291      	cmp	r1, r2
 8003460:	d100      	bne.n	8003464 <memcpy+0xc>
 8003462:	bd10      	pop	{r4, pc}
 8003464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800346c:	e7f7      	b.n	800345e <memcpy+0x6>

0800346e <memset>:
 800346e:	4603      	mov	r3, r0
 8003470:	4402      	add	r2, r0
 8003472:	4293      	cmp	r3, r2
 8003474:	d100      	bne.n	8003478 <memset+0xa>
 8003476:	4770      	bx	lr
 8003478:	f803 1b01 	strb.w	r1, [r3], #1
 800347c:	e7f9      	b.n	8003472 <memset+0x4>
	...

08003480 <_free_r>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4605      	mov	r5, r0
 8003484:	2900      	cmp	r1, #0
 8003486:	d043      	beq.n	8003510 <_free_r+0x90>
 8003488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800348c:	1f0c      	subs	r4, r1, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	bfb8      	it	lt
 8003492:	18e4      	addlt	r4, r4, r3
 8003494:	f000 fbf8 	bl	8003c88 <__malloc_lock>
 8003498:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <_free_r+0x94>)
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	4610      	mov	r0, r2
 800349e:	b933      	cbnz	r3, 80034ae <_free_r+0x2e>
 80034a0:	6063      	str	r3, [r4, #4]
 80034a2:	6014      	str	r4, [r2, #0]
 80034a4:	4628      	mov	r0, r5
 80034a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034aa:	f000 bbee 	b.w	8003c8a <__malloc_unlock>
 80034ae:	42a3      	cmp	r3, r4
 80034b0:	d90b      	bls.n	80034ca <_free_r+0x4a>
 80034b2:	6821      	ldr	r1, [r4, #0]
 80034b4:	1862      	adds	r2, r4, r1
 80034b6:	4293      	cmp	r3, r2
 80034b8:	bf01      	itttt	eq
 80034ba:	681a      	ldreq	r2, [r3, #0]
 80034bc:	685b      	ldreq	r3, [r3, #4]
 80034be:	1852      	addeq	r2, r2, r1
 80034c0:	6022      	streq	r2, [r4, #0]
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	6004      	str	r4, [r0, #0]
 80034c6:	e7ed      	b.n	80034a4 <_free_r+0x24>
 80034c8:	4613      	mov	r3, r2
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	b10a      	cbz	r2, 80034d2 <_free_r+0x52>
 80034ce:	42a2      	cmp	r2, r4
 80034d0:	d9fa      	bls.n	80034c8 <_free_r+0x48>
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	1858      	adds	r0, r3, r1
 80034d6:	42a0      	cmp	r0, r4
 80034d8:	d10b      	bne.n	80034f2 <_free_r+0x72>
 80034da:	6820      	ldr	r0, [r4, #0]
 80034dc:	4401      	add	r1, r0
 80034de:	1858      	adds	r0, r3, r1
 80034e0:	4282      	cmp	r2, r0
 80034e2:	6019      	str	r1, [r3, #0]
 80034e4:	d1de      	bne.n	80034a4 <_free_r+0x24>
 80034e6:	6810      	ldr	r0, [r2, #0]
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	4401      	add	r1, r0
 80034ec:	6019      	str	r1, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	e7d8      	b.n	80034a4 <_free_r+0x24>
 80034f2:	d902      	bls.n	80034fa <_free_r+0x7a>
 80034f4:	230c      	movs	r3, #12
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	e7d4      	b.n	80034a4 <_free_r+0x24>
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1821      	adds	r1, r4, r0
 80034fe:	428a      	cmp	r2, r1
 8003500:	bf01      	itttt	eq
 8003502:	6811      	ldreq	r1, [r2, #0]
 8003504:	6852      	ldreq	r2, [r2, #4]
 8003506:	1809      	addeq	r1, r1, r0
 8003508:	6021      	streq	r1, [r4, #0]
 800350a:	6062      	str	r2, [r4, #4]
 800350c:	605c      	str	r4, [r3, #4]
 800350e:	e7c9      	b.n	80034a4 <_free_r+0x24>
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	200000c8 	.word	0x200000c8

08003518 <_malloc_r>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	1ccd      	adds	r5, r1, #3
 800351c:	f025 0503 	bic.w	r5, r5, #3
 8003520:	3508      	adds	r5, #8
 8003522:	2d0c      	cmp	r5, #12
 8003524:	bf38      	it	cc
 8003526:	250c      	movcc	r5, #12
 8003528:	2d00      	cmp	r5, #0
 800352a:	4606      	mov	r6, r0
 800352c:	db01      	blt.n	8003532 <_malloc_r+0x1a>
 800352e:	42a9      	cmp	r1, r5
 8003530:	d903      	bls.n	800353a <_malloc_r+0x22>
 8003532:	230c      	movs	r3, #12
 8003534:	6033      	str	r3, [r6, #0]
 8003536:	2000      	movs	r0, #0
 8003538:	bd70      	pop	{r4, r5, r6, pc}
 800353a:	f000 fba5 	bl	8003c88 <__malloc_lock>
 800353e:	4a21      	ldr	r2, [pc, #132]	; (80035c4 <_malloc_r+0xac>)
 8003540:	6814      	ldr	r4, [r2, #0]
 8003542:	4621      	mov	r1, r4
 8003544:	b991      	cbnz	r1, 800356c <_malloc_r+0x54>
 8003546:	4c20      	ldr	r4, [pc, #128]	; (80035c8 <_malloc_r+0xb0>)
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	b91b      	cbnz	r3, 8003554 <_malloc_r+0x3c>
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f855 	bl	80035fc <_sbrk_r>
 8003552:	6020      	str	r0, [r4, #0]
 8003554:	4629      	mov	r1, r5
 8003556:	4630      	mov	r0, r6
 8003558:	f000 f850 	bl	80035fc <_sbrk_r>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d124      	bne.n	80035aa <_malloc_r+0x92>
 8003560:	230c      	movs	r3, #12
 8003562:	4630      	mov	r0, r6
 8003564:	6033      	str	r3, [r6, #0]
 8003566:	f000 fb90 	bl	8003c8a <__malloc_unlock>
 800356a:	e7e4      	b.n	8003536 <_malloc_r+0x1e>
 800356c:	680b      	ldr	r3, [r1, #0]
 800356e:	1b5b      	subs	r3, r3, r5
 8003570:	d418      	bmi.n	80035a4 <_malloc_r+0x8c>
 8003572:	2b0b      	cmp	r3, #11
 8003574:	d90f      	bls.n	8003596 <_malloc_r+0x7e>
 8003576:	600b      	str	r3, [r1, #0]
 8003578:	18cc      	adds	r4, r1, r3
 800357a:	50cd      	str	r5, [r1, r3]
 800357c:	4630      	mov	r0, r6
 800357e:	f000 fb84 	bl	8003c8a <__malloc_unlock>
 8003582:	f104 000b 	add.w	r0, r4, #11
 8003586:	1d23      	adds	r3, r4, #4
 8003588:	f020 0007 	bic.w	r0, r0, #7
 800358c:	1ac3      	subs	r3, r0, r3
 800358e:	d0d3      	beq.n	8003538 <_malloc_r+0x20>
 8003590:	425a      	negs	r2, r3
 8003592:	50e2      	str	r2, [r4, r3]
 8003594:	e7d0      	b.n	8003538 <_malloc_r+0x20>
 8003596:	684b      	ldr	r3, [r1, #4]
 8003598:	428c      	cmp	r4, r1
 800359a:	bf16      	itet	ne
 800359c:	6063      	strne	r3, [r4, #4]
 800359e:	6013      	streq	r3, [r2, #0]
 80035a0:	460c      	movne	r4, r1
 80035a2:	e7eb      	b.n	800357c <_malloc_r+0x64>
 80035a4:	460c      	mov	r4, r1
 80035a6:	6849      	ldr	r1, [r1, #4]
 80035a8:	e7cc      	b.n	8003544 <_malloc_r+0x2c>
 80035aa:	1cc4      	adds	r4, r0, #3
 80035ac:	f024 0403 	bic.w	r4, r4, #3
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d005      	beq.n	80035c0 <_malloc_r+0xa8>
 80035b4:	1a21      	subs	r1, r4, r0
 80035b6:	4630      	mov	r0, r6
 80035b8:	f000 f820 	bl	80035fc <_sbrk_r>
 80035bc:	3001      	adds	r0, #1
 80035be:	d0cf      	beq.n	8003560 <_malloc_r+0x48>
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	e7db      	b.n	800357c <_malloc_r+0x64>
 80035c4:	200000c8 	.word	0x200000c8
 80035c8:	200000cc 	.word	0x200000cc

080035cc <iprintf>:
 80035cc:	b40f      	push	{r0, r1, r2, r3}
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <iprintf+0x2c>)
 80035d0:	b513      	push	{r0, r1, r4, lr}
 80035d2:	681c      	ldr	r4, [r3, #0]
 80035d4:	b124      	cbz	r4, 80035e0 <iprintf+0x14>
 80035d6:	69a3      	ldr	r3, [r4, #24]
 80035d8:	b913      	cbnz	r3, 80035e0 <iprintf+0x14>
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fa54 	bl	8003a88 <__sinit>
 80035e0:	ab05      	add	r3, sp, #20
 80035e2:	9a04      	ldr	r2, [sp, #16]
 80035e4:	68a1      	ldr	r1, [r4, #8]
 80035e6:	4620      	mov	r0, r4
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	f000 fcc9 	bl	8003f80 <_vfiprintf_r>
 80035ee:	b002      	add	sp, #8
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	b004      	add	sp, #16
 80035f6:	4770      	bx	lr
 80035f8:	20000038 	.word	0x20000038

080035fc <_sbrk_r>:
 80035fc:	b538      	push	{r3, r4, r5, lr}
 80035fe:	2300      	movs	r3, #0
 8003600:	4c05      	ldr	r4, [pc, #20]	; (8003618 <_sbrk_r+0x1c>)
 8003602:	4605      	mov	r5, r0
 8003604:	4608      	mov	r0, r1
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	f7fd fcbc 	bl	8000f84 <_sbrk>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	d102      	bne.n	8003616 <_sbrk_r+0x1a>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	b103      	cbz	r3, 8003616 <_sbrk_r+0x1a>
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	2000030c 	.word	0x2000030c

0800361c <siprintf>:
 800361c:	b40e      	push	{r1, r2, r3}
 800361e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003622:	b500      	push	{lr}
 8003624:	b09c      	sub	sp, #112	; 0x70
 8003626:	ab1d      	add	r3, sp, #116	; 0x74
 8003628:	9002      	str	r0, [sp, #8]
 800362a:	9006      	str	r0, [sp, #24]
 800362c:	9107      	str	r1, [sp, #28]
 800362e:	9104      	str	r1, [sp, #16]
 8003630:	4808      	ldr	r0, [pc, #32]	; (8003654 <siprintf+0x38>)
 8003632:	4909      	ldr	r1, [pc, #36]	; (8003658 <siprintf+0x3c>)
 8003634:	f853 2b04 	ldr.w	r2, [r3], #4
 8003638:	9105      	str	r1, [sp, #20]
 800363a:	6800      	ldr	r0, [r0, #0]
 800363c:	a902      	add	r1, sp, #8
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	f000 fb7e 	bl	8003d40 <_svfiprintf_r>
 8003644:	2200      	movs	r2, #0
 8003646:	9b02      	ldr	r3, [sp, #8]
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	b01c      	add	sp, #112	; 0x70
 800364c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003650:	b003      	add	sp, #12
 8003652:	4770      	bx	lr
 8003654:	20000038 	.word	0x20000038
 8003658:	ffff0208 	.word	0xffff0208

0800365c <__sread>:
 800365c:	b510      	push	{r4, lr}
 800365e:	460c      	mov	r4, r1
 8003660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003664:	f000 ff2a 	bl	80044bc <_read_r>
 8003668:	2800      	cmp	r0, #0
 800366a:	bfab      	itete	ge
 800366c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800366e:	89a3      	ldrhlt	r3, [r4, #12]
 8003670:	181b      	addge	r3, r3, r0
 8003672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003676:	bfac      	ite	ge
 8003678:	6563      	strge	r3, [r4, #84]	; 0x54
 800367a:	81a3      	strhlt	r3, [r4, #12]
 800367c:	bd10      	pop	{r4, pc}

0800367e <__swrite>:
 800367e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003682:	461f      	mov	r7, r3
 8003684:	898b      	ldrh	r3, [r1, #12]
 8003686:	4605      	mov	r5, r0
 8003688:	05db      	lsls	r3, r3, #23
 800368a:	460c      	mov	r4, r1
 800368c:	4616      	mov	r6, r2
 800368e:	d505      	bpl.n	800369c <__swrite+0x1e>
 8003690:	2302      	movs	r3, #2
 8003692:	2200      	movs	r2, #0
 8003694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003698:	f000 fa80 	bl	8003b9c <_lseek_r>
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	4632      	mov	r2, r6
 80036a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036aa:	463b      	mov	r3, r7
 80036ac:	4628      	mov	r0, r5
 80036ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b2:	f000 b869 	b.w	8003788 <_write_r>

080036b6 <__sseek>:
 80036b6:	b510      	push	{r4, lr}
 80036b8:	460c      	mov	r4, r1
 80036ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036be:	f000 fa6d 	bl	8003b9c <_lseek_r>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	bf15      	itete	ne
 80036c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036d2:	81a3      	strheq	r3, [r4, #12]
 80036d4:	bf18      	it	ne
 80036d6:	81a3      	strhne	r3, [r4, #12]
 80036d8:	bd10      	pop	{r4, pc}

080036da <__sclose>:
 80036da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036de:	f000 b8d3 	b.w	8003888 <_close_r>
	...

080036e4 <__swbuf_r>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	460e      	mov	r6, r1
 80036e8:	4614      	mov	r4, r2
 80036ea:	4605      	mov	r5, r0
 80036ec:	b118      	cbz	r0, 80036f6 <__swbuf_r+0x12>
 80036ee:	6983      	ldr	r3, [r0, #24]
 80036f0:	b90b      	cbnz	r3, 80036f6 <__swbuf_r+0x12>
 80036f2:	f000 f9c9 	bl	8003a88 <__sinit>
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <__swbuf_r+0x98>)
 80036f8:	429c      	cmp	r4, r3
 80036fa:	d12a      	bne.n	8003752 <__swbuf_r+0x6e>
 80036fc:	686c      	ldr	r4, [r5, #4]
 80036fe:	69a3      	ldr	r3, [r4, #24]
 8003700:	60a3      	str	r3, [r4, #8]
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	071a      	lsls	r2, r3, #28
 8003706:	d52e      	bpl.n	8003766 <__swbuf_r+0x82>
 8003708:	6923      	ldr	r3, [r4, #16]
 800370a:	b363      	cbz	r3, 8003766 <__swbuf_r+0x82>
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	b2f6      	uxtb	r6, r6
 8003712:	1ac0      	subs	r0, r0, r3
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	4637      	mov	r7, r6
 8003718:	4283      	cmp	r3, r0
 800371a:	dc04      	bgt.n	8003726 <__swbuf_r+0x42>
 800371c:	4621      	mov	r1, r4
 800371e:	4628      	mov	r0, r5
 8003720:	f000 f948 	bl	80039b4 <_fflush_r>
 8003724:	bb28      	cbnz	r0, 8003772 <__swbuf_r+0x8e>
 8003726:	68a3      	ldr	r3, [r4, #8]
 8003728:	3001      	adds	r0, #1
 800372a:	3b01      	subs	r3, #1
 800372c:	60a3      	str	r3, [r4, #8]
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	6022      	str	r2, [r4, #0]
 8003734:	701e      	strb	r6, [r3, #0]
 8003736:	6963      	ldr	r3, [r4, #20]
 8003738:	4283      	cmp	r3, r0
 800373a:	d004      	beq.n	8003746 <__swbuf_r+0x62>
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	07db      	lsls	r3, r3, #31
 8003740:	d519      	bpl.n	8003776 <__swbuf_r+0x92>
 8003742:	2e0a      	cmp	r6, #10
 8003744:	d117      	bne.n	8003776 <__swbuf_r+0x92>
 8003746:	4621      	mov	r1, r4
 8003748:	4628      	mov	r0, r5
 800374a:	f000 f933 	bl	80039b4 <_fflush_r>
 800374e:	b190      	cbz	r0, 8003776 <__swbuf_r+0x92>
 8003750:	e00f      	b.n	8003772 <__swbuf_r+0x8e>
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <__swbuf_r+0x9c>)
 8003754:	429c      	cmp	r4, r3
 8003756:	d101      	bne.n	800375c <__swbuf_r+0x78>
 8003758:	68ac      	ldr	r4, [r5, #8]
 800375a:	e7d0      	b.n	80036fe <__swbuf_r+0x1a>
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <__swbuf_r+0xa0>)
 800375e:	429c      	cmp	r4, r3
 8003760:	bf08      	it	eq
 8003762:	68ec      	ldreq	r4, [r5, #12]
 8003764:	e7cb      	b.n	80036fe <__swbuf_r+0x1a>
 8003766:	4621      	mov	r1, r4
 8003768:	4628      	mov	r0, r5
 800376a:	f000 f81f 	bl	80037ac <__swsetup_r>
 800376e:	2800      	cmp	r0, #0
 8003770:	d0cc      	beq.n	800370c <__swbuf_r+0x28>
 8003772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003776:	4638      	mov	r0, r7
 8003778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800377a:	bf00      	nop
 800377c:	080046a4 	.word	0x080046a4
 8003780:	080046c4 	.word	0x080046c4
 8003784:	08004684 	.word	0x08004684

08003788 <_write_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4605      	mov	r5, r0
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	2200      	movs	r2, #0
 8003792:	4c05      	ldr	r4, [pc, #20]	; (80037a8 <_write_r+0x20>)
 8003794:	6022      	str	r2, [r4, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f7fc fd7e 	bl	8000298 <_write>
 800379c:	1c43      	adds	r3, r0, #1
 800379e:	d102      	bne.n	80037a6 <_write_r+0x1e>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	b103      	cbz	r3, 80037a6 <_write_r+0x1e>
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	bd38      	pop	{r3, r4, r5, pc}
 80037a8:	2000030c 	.word	0x2000030c

080037ac <__swsetup_r>:
 80037ac:	4b32      	ldr	r3, [pc, #200]	; (8003878 <__swsetup_r+0xcc>)
 80037ae:	b570      	push	{r4, r5, r6, lr}
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	4606      	mov	r6, r0
 80037b4:	460c      	mov	r4, r1
 80037b6:	b125      	cbz	r5, 80037c2 <__swsetup_r+0x16>
 80037b8:	69ab      	ldr	r3, [r5, #24]
 80037ba:	b913      	cbnz	r3, 80037c2 <__swsetup_r+0x16>
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 f963 	bl	8003a88 <__sinit>
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <__swsetup_r+0xd0>)
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d10f      	bne.n	80037e8 <__swsetup_r+0x3c>
 80037c8:	686c      	ldr	r4, [r5, #4]
 80037ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	0715      	lsls	r5, r2, #28
 80037d2:	d42c      	bmi.n	800382e <__swsetup_r+0x82>
 80037d4:	06d0      	lsls	r0, r2, #27
 80037d6:	d411      	bmi.n	80037fc <__swsetup_r+0x50>
 80037d8:	2209      	movs	r2, #9
 80037da:	6032      	str	r2, [r6, #0]
 80037dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e0:	81a3      	strh	r3, [r4, #12]
 80037e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037e6:	e03e      	b.n	8003866 <__swsetup_r+0xba>
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <__swsetup_r+0xd4>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	d101      	bne.n	80037f2 <__swsetup_r+0x46>
 80037ee:	68ac      	ldr	r4, [r5, #8]
 80037f0:	e7eb      	b.n	80037ca <__swsetup_r+0x1e>
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <__swsetup_r+0xd8>)
 80037f4:	429c      	cmp	r4, r3
 80037f6:	bf08      	it	eq
 80037f8:	68ec      	ldreq	r4, [r5, #12]
 80037fa:	e7e6      	b.n	80037ca <__swsetup_r+0x1e>
 80037fc:	0751      	lsls	r1, r2, #29
 80037fe:	d512      	bpl.n	8003826 <__swsetup_r+0x7a>
 8003800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003802:	b141      	cbz	r1, 8003816 <__swsetup_r+0x6a>
 8003804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003808:	4299      	cmp	r1, r3
 800380a:	d002      	beq.n	8003812 <__swsetup_r+0x66>
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff fe37 	bl	8003480 <_free_r>
 8003812:	2300      	movs	r3, #0
 8003814:	6363      	str	r3, [r4, #52]	; 0x34
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	2300      	movs	r3, #0
 8003820:	6063      	str	r3, [r4, #4]
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	6923      	ldr	r3, [r4, #16]
 8003830:	b94b      	cbnz	r3, 8003846 <__swsetup_r+0x9a>
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383c:	d003      	beq.n	8003846 <__swsetup_r+0x9a>
 800383e:	4621      	mov	r1, r4
 8003840:	4630      	mov	r0, r6
 8003842:	f000 f9e1 	bl	8003c08 <__smakebuf_r>
 8003846:	89a2      	ldrh	r2, [r4, #12]
 8003848:	f012 0301 	ands.w	r3, r2, #1
 800384c:	d00c      	beq.n	8003868 <__swsetup_r+0xbc>
 800384e:	2300      	movs	r3, #0
 8003850:	60a3      	str	r3, [r4, #8]
 8003852:	6963      	ldr	r3, [r4, #20]
 8003854:	425b      	negs	r3, r3
 8003856:	61a3      	str	r3, [r4, #24]
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	b953      	cbnz	r3, 8003872 <__swsetup_r+0xc6>
 800385c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003860:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003864:	d1ba      	bne.n	80037dc <__swsetup_r+0x30>
 8003866:	bd70      	pop	{r4, r5, r6, pc}
 8003868:	0792      	lsls	r2, r2, #30
 800386a:	bf58      	it	pl
 800386c:	6963      	ldrpl	r3, [r4, #20]
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	e7f2      	b.n	8003858 <__swsetup_r+0xac>
 8003872:	2000      	movs	r0, #0
 8003874:	e7f7      	b.n	8003866 <__swsetup_r+0xba>
 8003876:	bf00      	nop
 8003878:	20000038 	.word	0x20000038
 800387c:	080046a4 	.word	0x080046a4
 8003880:	080046c4 	.word	0x080046c4
 8003884:	08004684 	.word	0x08004684

08003888 <_close_r>:
 8003888:	b538      	push	{r3, r4, r5, lr}
 800388a:	2300      	movs	r3, #0
 800388c:	4c05      	ldr	r4, [pc, #20]	; (80038a4 <_close_r+0x1c>)
 800388e:	4605      	mov	r5, r0
 8003890:	4608      	mov	r0, r1
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	f7fd fb45 	bl	8000f22 <_close>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d102      	bne.n	80038a2 <_close_r+0x1a>
 800389c:	6823      	ldr	r3, [r4, #0]
 800389e:	b103      	cbz	r3, 80038a2 <_close_r+0x1a>
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	bd38      	pop	{r3, r4, r5, pc}
 80038a4:	2000030c 	.word	0x2000030c

080038a8 <__sflush_r>:
 80038a8:	898a      	ldrh	r2, [r1, #12]
 80038aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ae:	4605      	mov	r5, r0
 80038b0:	0710      	lsls	r0, r2, #28
 80038b2:	460c      	mov	r4, r1
 80038b4:	d458      	bmi.n	8003968 <__sflush_r+0xc0>
 80038b6:	684b      	ldr	r3, [r1, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dc05      	bgt.n	80038c8 <__sflush_r+0x20>
 80038bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dc02      	bgt.n	80038c8 <__sflush_r+0x20>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ca:	2e00      	cmp	r6, #0
 80038cc:	d0f9      	beq.n	80038c2 <__sflush_r+0x1a>
 80038ce:	2300      	movs	r3, #0
 80038d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038d4:	682f      	ldr	r7, [r5, #0]
 80038d6:	6a21      	ldr	r1, [r4, #32]
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	d032      	beq.n	8003942 <__sflush_r+0x9a>
 80038dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	075a      	lsls	r2, r3, #29
 80038e2:	d505      	bpl.n	80038f0 <__sflush_r+0x48>
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	1ac0      	subs	r0, r0, r3
 80038e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038ea:	b10b      	cbz	r3, 80038f0 <__sflush_r+0x48>
 80038ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038ee:	1ac0      	subs	r0, r0, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	4602      	mov	r2, r0
 80038f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038f6:	6a21      	ldr	r1, [r4, #32]
 80038f8:	4628      	mov	r0, r5
 80038fa:	47b0      	blx	r6
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	d106      	bne.n	8003910 <__sflush_r+0x68>
 8003902:	6829      	ldr	r1, [r5, #0]
 8003904:	291d      	cmp	r1, #29
 8003906:	d848      	bhi.n	800399a <__sflush_r+0xf2>
 8003908:	4a29      	ldr	r2, [pc, #164]	; (80039b0 <__sflush_r+0x108>)
 800390a:	40ca      	lsrs	r2, r1
 800390c:	07d6      	lsls	r6, r2, #31
 800390e:	d544      	bpl.n	800399a <__sflush_r+0xf2>
 8003910:	2200      	movs	r2, #0
 8003912:	6062      	str	r2, [r4, #4]
 8003914:	6922      	ldr	r2, [r4, #16]
 8003916:	04d9      	lsls	r1, r3, #19
 8003918:	6022      	str	r2, [r4, #0]
 800391a:	d504      	bpl.n	8003926 <__sflush_r+0x7e>
 800391c:	1c42      	adds	r2, r0, #1
 800391e:	d101      	bne.n	8003924 <__sflush_r+0x7c>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b903      	cbnz	r3, 8003926 <__sflush_r+0x7e>
 8003924:	6560      	str	r0, [r4, #84]	; 0x54
 8003926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003928:	602f      	str	r7, [r5, #0]
 800392a:	2900      	cmp	r1, #0
 800392c:	d0c9      	beq.n	80038c2 <__sflush_r+0x1a>
 800392e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003932:	4299      	cmp	r1, r3
 8003934:	d002      	beq.n	800393c <__sflush_r+0x94>
 8003936:	4628      	mov	r0, r5
 8003938:	f7ff fda2 	bl	8003480 <_free_r>
 800393c:	2000      	movs	r0, #0
 800393e:	6360      	str	r0, [r4, #52]	; 0x34
 8003940:	e7c0      	b.n	80038c4 <__sflush_r+0x1c>
 8003942:	2301      	movs	r3, #1
 8003944:	4628      	mov	r0, r5
 8003946:	47b0      	blx	r6
 8003948:	1c41      	adds	r1, r0, #1
 800394a:	d1c8      	bne.n	80038de <__sflush_r+0x36>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0c5      	beq.n	80038de <__sflush_r+0x36>
 8003952:	2b1d      	cmp	r3, #29
 8003954:	d001      	beq.n	800395a <__sflush_r+0xb2>
 8003956:	2b16      	cmp	r3, #22
 8003958:	d101      	bne.n	800395e <__sflush_r+0xb6>
 800395a:	602f      	str	r7, [r5, #0]
 800395c:	e7b1      	b.n	80038c2 <__sflush_r+0x1a>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	e7ad      	b.n	80038c4 <__sflush_r+0x1c>
 8003968:	690f      	ldr	r7, [r1, #16]
 800396a:	2f00      	cmp	r7, #0
 800396c:	d0a9      	beq.n	80038c2 <__sflush_r+0x1a>
 800396e:	0793      	lsls	r3, r2, #30
 8003970:	bf18      	it	ne
 8003972:	2300      	movne	r3, #0
 8003974:	680e      	ldr	r6, [r1, #0]
 8003976:	bf08      	it	eq
 8003978:	694b      	ldreq	r3, [r1, #20]
 800397a:	eba6 0807 	sub.w	r8, r6, r7
 800397e:	600f      	str	r7, [r1, #0]
 8003980:	608b      	str	r3, [r1, #8]
 8003982:	f1b8 0f00 	cmp.w	r8, #0
 8003986:	dd9c      	ble.n	80038c2 <__sflush_r+0x1a>
 8003988:	4643      	mov	r3, r8
 800398a:	463a      	mov	r2, r7
 800398c:	6a21      	ldr	r1, [r4, #32]
 800398e:	4628      	mov	r0, r5
 8003990:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003992:	47b0      	blx	r6
 8003994:	2800      	cmp	r0, #0
 8003996:	dc06      	bgt.n	80039a6 <__sflush_r+0xfe>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a4:	e78e      	b.n	80038c4 <__sflush_r+0x1c>
 80039a6:	4407      	add	r7, r0
 80039a8:	eba8 0800 	sub.w	r8, r8, r0
 80039ac:	e7e9      	b.n	8003982 <__sflush_r+0xda>
 80039ae:	bf00      	nop
 80039b0:	20400001 	.word	0x20400001

080039b4 <_fflush_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	690b      	ldr	r3, [r1, #16]
 80039b8:	4605      	mov	r5, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	b1db      	cbz	r3, 80039f6 <_fflush_r+0x42>
 80039be:	b118      	cbz	r0, 80039c8 <_fflush_r+0x14>
 80039c0:	6983      	ldr	r3, [r0, #24]
 80039c2:	b90b      	cbnz	r3, 80039c8 <_fflush_r+0x14>
 80039c4:	f000 f860 	bl	8003a88 <__sinit>
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <_fflush_r+0x48>)
 80039ca:	429c      	cmp	r4, r3
 80039cc:	d109      	bne.n	80039e2 <_fflush_r+0x2e>
 80039ce:	686c      	ldr	r4, [r5, #4]
 80039d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d4:	b17b      	cbz	r3, 80039f6 <_fflush_r+0x42>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039de:	f7ff bf63 	b.w	80038a8 <__sflush_r>
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <_fflush_r+0x4c>)
 80039e4:	429c      	cmp	r4, r3
 80039e6:	d101      	bne.n	80039ec <_fflush_r+0x38>
 80039e8:	68ac      	ldr	r4, [r5, #8]
 80039ea:	e7f1      	b.n	80039d0 <_fflush_r+0x1c>
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <_fflush_r+0x50>)
 80039ee:	429c      	cmp	r4, r3
 80039f0:	bf08      	it	eq
 80039f2:	68ec      	ldreq	r4, [r5, #12]
 80039f4:	e7ec      	b.n	80039d0 <_fflush_r+0x1c>
 80039f6:	2000      	movs	r0, #0
 80039f8:	bd38      	pop	{r3, r4, r5, pc}
 80039fa:	bf00      	nop
 80039fc:	080046a4 	.word	0x080046a4
 8003a00:	080046c4 	.word	0x080046c4
 8003a04:	08004684 	.word	0x08004684

08003a08 <std>:
 8003a08:	2300      	movs	r3, #0
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	4604      	mov	r4, r0
 8003a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003a12:	6083      	str	r3, [r0, #8]
 8003a14:	8181      	strh	r1, [r0, #12]
 8003a16:	6643      	str	r3, [r0, #100]	; 0x64
 8003a18:	81c2      	strh	r2, [r0, #14]
 8003a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a1e:	6183      	str	r3, [r0, #24]
 8003a20:	4619      	mov	r1, r3
 8003a22:	2208      	movs	r2, #8
 8003a24:	305c      	adds	r0, #92	; 0x5c
 8003a26:	f7ff fd22 	bl	800346e <memset>
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <std+0x38>)
 8003a2c:	6224      	str	r4, [r4, #32]
 8003a2e:	6263      	str	r3, [r4, #36]	; 0x24
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <std+0x3c>)
 8003a32:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <std+0x40>)
 8003a36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <std+0x44>)
 8003a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	bf00      	nop
 8003a40:	0800365d 	.word	0x0800365d
 8003a44:	0800367f 	.word	0x0800367f
 8003a48:	080036b7 	.word	0x080036b7
 8003a4c:	080036db 	.word	0x080036db

08003a50 <_cleanup_r>:
 8003a50:	4901      	ldr	r1, [pc, #4]	; (8003a58 <_cleanup_r+0x8>)
 8003a52:	f000 b885 	b.w	8003b60 <_fwalk_reent>
 8003a56:	bf00      	nop
 8003a58:	080039b5 	.word	0x080039b5

08003a5c <__sfmoreglue>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	2568      	movs	r5, #104	; 0x68
 8003a60:	1e4a      	subs	r2, r1, #1
 8003a62:	4355      	muls	r5, r2
 8003a64:	460e      	mov	r6, r1
 8003a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a6a:	f7ff fd55 	bl	8003518 <_malloc_r>
 8003a6e:	4604      	mov	r4, r0
 8003a70:	b140      	cbz	r0, 8003a84 <__sfmoreglue+0x28>
 8003a72:	2100      	movs	r1, #0
 8003a74:	e9c0 1600 	strd	r1, r6, [r0]
 8003a78:	300c      	adds	r0, #12
 8003a7a:	60a0      	str	r0, [r4, #8]
 8003a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a80:	f7ff fcf5 	bl	800346e <memset>
 8003a84:	4620      	mov	r0, r4
 8003a86:	bd70      	pop	{r4, r5, r6, pc}

08003a88 <__sinit>:
 8003a88:	6983      	ldr	r3, [r0, #24]
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	bb33      	cbnz	r3, 8003ade <__sinit+0x56>
 8003a90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003a94:	6503      	str	r3, [r0, #80]	; 0x50
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <__sinit+0x58>)
 8003a98:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <__sinit+0x5c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6282      	str	r2, [r0, #40]	; 0x28
 8003a9e:	4298      	cmp	r0, r3
 8003aa0:	bf04      	itt	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	6183      	streq	r3, [r0, #24]
 8003aa6:	f000 f81f 	bl	8003ae8 <__sfp>
 8003aaa:	6060      	str	r0, [r4, #4]
 8003aac:	4620      	mov	r0, r4
 8003aae:	f000 f81b 	bl	8003ae8 <__sfp>
 8003ab2:	60a0      	str	r0, [r4, #8]
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f000 f817 	bl	8003ae8 <__sfp>
 8003aba:	2200      	movs	r2, #0
 8003abc:	60e0      	str	r0, [r4, #12]
 8003abe:	2104      	movs	r1, #4
 8003ac0:	6860      	ldr	r0, [r4, #4]
 8003ac2:	f7ff ffa1 	bl	8003a08 <std>
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	2109      	movs	r1, #9
 8003aca:	68a0      	ldr	r0, [r4, #8]
 8003acc:	f7ff ff9c 	bl	8003a08 <std>
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	2112      	movs	r1, #18
 8003ad4:	68e0      	ldr	r0, [r4, #12]
 8003ad6:	f7ff ff97 	bl	8003a08 <std>
 8003ada:	2301      	movs	r3, #1
 8003adc:	61a3      	str	r3, [r4, #24]
 8003ade:	bd10      	pop	{r4, pc}
 8003ae0:	08004680 	.word	0x08004680
 8003ae4:	08003a51 	.word	0x08003a51

08003ae8 <__sfp>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <__sfp+0x70>)
 8003aec:	4607      	mov	r7, r0
 8003aee:	681e      	ldr	r6, [r3, #0]
 8003af0:	69b3      	ldr	r3, [r6, #24]
 8003af2:	b913      	cbnz	r3, 8003afa <__sfp+0x12>
 8003af4:	4630      	mov	r0, r6
 8003af6:	f7ff ffc7 	bl	8003a88 <__sinit>
 8003afa:	3648      	adds	r6, #72	; 0x48
 8003afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	d503      	bpl.n	8003b0c <__sfp+0x24>
 8003b04:	6833      	ldr	r3, [r6, #0]
 8003b06:	b133      	cbz	r3, 8003b16 <__sfp+0x2e>
 8003b08:	6836      	ldr	r6, [r6, #0]
 8003b0a:	e7f7      	b.n	8003afc <__sfp+0x14>
 8003b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b10:	b16d      	cbz	r5, 8003b2e <__sfp+0x46>
 8003b12:	3468      	adds	r4, #104	; 0x68
 8003b14:	e7f4      	b.n	8003b00 <__sfp+0x18>
 8003b16:	2104      	movs	r1, #4
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f7ff ff9f 	bl	8003a5c <__sfmoreglue>
 8003b1e:	6030      	str	r0, [r6, #0]
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d1f1      	bne.n	8003b08 <__sfp+0x20>
 8003b24:	230c      	movs	r3, #12
 8003b26:	4604      	mov	r4, r0
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <__sfp+0x74>)
 8003b30:	6665      	str	r5, [r4, #100]	; 0x64
 8003b32:	e9c4 5500 	strd	r5, r5, [r4]
 8003b36:	60a5      	str	r5, [r4, #8]
 8003b38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003b3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003b40:	2208      	movs	r2, #8
 8003b42:	4629      	mov	r1, r5
 8003b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b48:	f7ff fc91 	bl	800346e <memset>
 8003b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b54:	e7e9      	b.n	8003b2a <__sfp+0x42>
 8003b56:	bf00      	nop
 8003b58:	08004680 	.word	0x08004680
 8003b5c:	ffff0001 	.word	0xffff0001

08003b60 <_fwalk_reent>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	4680      	mov	r8, r0
 8003b66:	4689      	mov	r9, r1
 8003b68:	2600      	movs	r6, #0
 8003b6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b6e:	b914      	cbnz	r4, 8003b76 <_fwalk_reent+0x16>
 8003b70:	4630      	mov	r0, r6
 8003b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003b7a:	3f01      	subs	r7, #1
 8003b7c:	d501      	bpl.n	8003b82 <_fwalk_reent+0x22>
 8003b7e:	6824      	ldr	r4, [r4, #0]
 8003b80:	e7f5      	b.n	8003b6e <_fwalk_reent+0xe>
 8003b82:	89ab      	ldrh	r3, [r5, #12]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d907      	bls.n	8003b98 <_fwalk_reent+0x38>
 8003b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	d003      	beq.n	8003b98 <_fwalk_reent+0x38>
 8003b90:	4629      	mov	r1, r5
 8003b92:	4640      	mov	r0, r8
 8003b94:	47c8      	blx	r9
 8003b96:	4306      	orrs	r6, r0
 8003b98:	3568      	adds	r5, #104	; 0x68
 8003b9a:	e7ee      	b.n	8003b7a <_fwalk_reent+0x1a>

08003b9c <_lseek_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4605      	mov	r5, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4c05      	ldr	r4, [pc, #20]	; (8003bbc <_lseek_r+0x20>)
 8003ba8:	6022      	str	r2, [r4, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fd f9dd 	bl	8000f6a <_lseek>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_lseek_r+0x1e>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_lseek_r+0x1e>
 8003bb8:	602b      	str	r3, [r5, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	2000030c 	.word	0x2000030c

08003bc0 <__swhatbuf_r>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	460e      	mov	r6, r1
 8003bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc8:	b096      	sub	sp, #88	; 0x58
 8003bca:	2900      	cmp	r1, #0
 8003bcc:	4614      	mov	r4, r2
 8003bce:	461d      	mov	r5, r3
 8003bd0:	da07      	bge.n	8003be2 <__swhatbuf_r+0x22>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	89b3      	ldrh	r3, [r6, #12]
 8003bd8:	061a      	lsls	r2, r3, #24
 8003bda:	d410      	bmi.n	8003bfe <__swhatbuf_r+0x3e>
 8003bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003be0:	e00e      	b.n	8003c00 <__swhatbuf_r+0x40>
 8003be2:	466a      	mov	r2, sp
 8003be4:	f000 fc7c 	bl	80044e0 <_fstat_r>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	dbf2      	blt.n	8003bd2 <__swhatbuf_r+0x12>
 8003bec:	9a01      	ldr	r2, [sp, #4]
 8003bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bf6:	425a      	negs	r2, r3
 8003bf8:	415a      	adcs	r2, r3
 8003bfa:	602a      	str	r2, [r5, #0]
 8003bfc:	e7ee      	b.n	8003bdc <__swhatbuf_r+0x1c>
 8003bfe:	2340      	movs	r3, #64	; 0x40
 8003c00:	2000      	movs	r0, #0
 8003c02:	6023      	str	r3, [r4, #0]
 8003c04:	b016      	add	sp, #88	; 0x58
 8003c06:	bd70      	pop	{r4, r5, r6, pc}

08003c08 <__smakebuf_r>:
 8003c08:	898b      	ldrh	r3, [r1, #12]
 8003c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c0c:	079d      	lsls	r5, r3, #30
 8003c0e:	4606      	mov	r6, r0
 8003c10:	460c      	mov	r4, r1
 8003c12:	d507      	bpl.n	8003c24 <__smakebuf_r+0x1c>
 8003c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	6123      	str	r3, [r4, #16]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	6163      	str	r3, [r4, #20]
 8003c20:	b002      	add	sp, #8
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	ab01      	add	r3, sp, #4
 8003c26:	466a      	mov	r2, sp
 8003c28:	f7ff ffca 	bl	8003bc0 <__swhatbuf_r>
 8003c2c:	9900      	ldr	r1, [sp, #0]
 8003c2e:	4605      	mov	r5, r0
 8003c30:	4630      	mov	r0, r6
 8003c32:	f7ff fc71 	bl	8003518 <_malloc_r>
 8003c36:	b948      	cbnz	r0, 8003c4c <__smakebuf_r+0x44>
 8003c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c3c:	059a      	lsls	r2, r3, #22
 8003c3e:	d4ef      	bmi.n	8003c20 <__smakebuf_r+0x18>
 8003c40:	f023 0303 	bic.w	r3, r3, #3
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	81a3      	strh	r3, [r4, #12]
 8003c4a:	e7e3      	b.n	8003c14 <__smakebuf_r+0xc>
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <__smakebuf_r+0x7c>)
 8003c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	6020      	str	r0, [r4, #0]
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	81a3      	strh	r3, [r4, #12]
 8003c5a:	9b00      	ldr	r3, [sp, #0]
 8003c5c:	6120      	str	r0, [r4, #16]
 8003c5e:	6163      	str	r3, [r4, #20]
 8003c60:	9b01      	ldr	r3, [sp, #4]
 8003c62:	b15b      	cbz	r3, 8003c7c <__smakebuf_r+0x74>
 8003c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f000 fc4b 	bl	8004504 <_isatty_r>
 8003c6e:	b128      	cbz	r0, 8003c7c <__smakebuf_r+0x74>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	431d      	orrs	r5, r3
 8003c80:	81a5      	strh	r5, [r4, #12]
 8003c82:	e7cd      	b.n	8003c20 <__smakebuf_r+0x18>
 8003c84:	08003a51 	.word	0x08003a51

08003c88 <__malloc_lock>:
 8003c88:	4770      	bx	lr

08003c8a <__malloc_unlock>:
 8003c8a:	4770      	bx	lr

08003c8c <__ssputs_r>:
 8003c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c90:	688e      	ldr	r6, [r1, #8]
 8003c92:	4682      	mov	sl, r0
 8003c94:	429e      	cmp	r6, r3
 8003c96:	460c      	mov	r4, r1
 8003c98:	4690      	mov	r8, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	d837      	bhi.n	8003d0e <__ssputs_r+0x82>
 8003c9e:	898a      	ldrh	r2, [r1, #12]
 8003ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ca4:	d031      	beq.n	8003d0a <__ssputs_r+0x7e>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	6825      	ldr	r5, [r4, #0]
 8003caa:	6909      	ldr	r1, [r1, #16]
 8003cac:	1a6f      	subs	r7, r5, r1
 8003cae:	6965      	ldr	r5, [r4, #20]
 8003cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cb8:	f109 0301 	add.w	r3, r9, #1
 8003cbc:	443b      	add	r3, r7
 8003cbe:	429d      	cmp	r5, r3
 8003cc0:	bf38      	it	cc
 8003cc2:	461d      	movcc	r5, r3
 8003cc4:	0553      	lsls	r3, r2, #21
 8003cc6:	d530      	bpl.n	8003d2a <__ssputs_r+0x9e>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7ff fc25 	bl	8003518 <_malloc_r>
 8003cce:	4606      	mov	r6, r0
 8003cd0:	b950      	cbnz	r0, 8003ce8 <__ssputs_r+0x5c>
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce2:	81a3      	strh	r3, [r4, #12]
 8003ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce8:	463a      	mov	r2, r7
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f7ff fbb4 	bl	8003458 <memcpy>
 8003cf0:	89a3      	ldrh	r3, [r4, #12]
 8003cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfa:	81a3      	strh	r3, [r4, #12]
 8003cfc:	6126      	str	r6, [r4, #16]
 8003cfe:	443e      	add	r6, r7
 8003d00:	6026      	str	r6, [r4, #0]
 8003d02:	464e      	mov	r6, r9
 8003d04:	6165      	str	r5, [r4, #20]
 8003d06:	1bed      	subs	r5, r5, r7
 8003d08:	60a5      	str	r5, [r4, #8]
 8003d0a:	454e      	cmp	r6, r9
 8003d0c:	d900      	bls.n	8003d10 <__ssputs_r+0x84>
 8003d0e:	464e      	mov	r6, r9
 8003d10:	4632      	mov	r2, r6
 8003d12:	4641      	mov	r1, r8
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	f000 fc13 	bl	8004540 <memmove>
 8003d1a:	68a3      	ldr	r3, [r4, #8]
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	1b9b      	subs	r3, r3, r6
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	441e      	add	r6, r3
 8003d26:	6026      	str	r6, [r4, #0]
 8003d28:	e7dc      	b.n	8003ce4 <__ssputs_r+0x58>
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	f000 fc21 	bl	8004572 <_realloc_r>
 8003d30:	4606      	mov	r6, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1e2      	bne.n	8003cfc <__ssputs_r+0x70>
 8003d36:	6921      	ldr	r1, [r4, #16]
 8003d38:	4650      	mov	r0, sl
 8003d3a:	f7ff fba1 	bl	8003480 <_free_r>
 8003d3e:	e7c8      	b.n	8003cd2 <__ssputs_r+0x46>

08003d40 <_svfiprintf_r>:
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d44:	461d      	mov	r5, r3
 8003d46:	898b      	ldrh	r3, [r1, #12]
 8003d48:	b09d      	sub	sp, #116	; 0x74
 8003d4a:	061f      	lsls	r7, r3, #24
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4616      	mov	r6, r2
 8003d52:	d50f      	bpl.n	8003d74 <_svfiprintf_r+0x34>
 8003d54:	690b      	ldr	r3, [r1, #16]
 8003d56:	b96b      	cbnz	r3, 8003d74 <_svfiprintf_r+0x34>
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	f7ff fbdd 	bl	8003518 <_malloc_r>
 8003d5e:	6020      	str	r0, [r4, #0]
 8003d60:	6120      	str	r0, [r4, #16]
 8003d62:	b928      	cbnz	r0, 8003d70 <_svfiprintf_r+0x30>
 8003d64:	230c      	movs	r3, #12
 8003d66:	f8c8 3000 	str.w	r3, [r8]
 8003d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d6e:	e0c8      	b.n	8003f02 <_svfiprintf_r+0x1c2>
 8003d70:	2340      	movs	r3, #64	; 0x40
 8003d72:	6163      	str	r3, [r4, #20]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9309      	str	r3, [sp, #36]	; 0x24
 8003d78:	2320      	movs	r3, #32
 8003d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d7e:	2330      	movs	r3, #48	; 0x30
 8003d80:	f04f 0b01 	mov.w	fp, #1
 8003d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d88:	9503      	str	r5, [sp, #12]
 8003d8a:	4637      	mov	r7, r6
 8003d8c:	463d      	mov	r5, r7
 8003d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d92:	b10b      	cbz	r3, 8003d98 <_svfiprintf_r+0x58>
 8003d94:	2b25      	cmp	r3, #37	; 0x25
 8003d96:	d13e      	bne.n	8003e16 <_svfiprintf_r+0xd6>
 8003d98:	ebb7 0a06 	subs.w	sl, r7, r6
 8003d9c:	d00b      	beq.n	8003db6 <_svfiprintf_r+0x76>
 8003d9e:	4653      	mov	r3, sl
 8003da0:	4632      	mov	r2, r6
 8003da2:	4621      	mov	r1, r4
 8003da4:	4640      	mov	r0, r8
 8003da6:	f7ff ff71 	bl	8003c8c <__ssputs_r>
 8003daa:	3001      	adds	r0, #1
 8003dac:	f000 80a4 	beq.w	8003ef8 <_svfiprintf_r+0x1b8>
 8003db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db2:	4453      	add	r3, sl
 8003db4:	9309      	str	r3, [sp, #36]	; 0x24
 8003db6:	783b      	ldrb	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 809d 	beq.w	8003ef8 <_svfiprintf_r+0x1b8>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9307      	str	r3, [sp, #28]
 8003dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8003dd2:	462f      	mov	r7, r5
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003dda:	4850      	ldr	r0, [pc, #320]	; (8003f1c <_svfiprintf_r+0x1dc>)
 8003ddc:	f000 fba2 	bl	8004524 <memchr>
 8003de0:	9b04      	ldr	r3, [sp, #16]
 8003de2:	b9d0      	cbnz	r0, 8003e1a <_svfiprintf_r+0xda>
 8003de4:	06d9      	lsls	r1, r3, #27
 8003de6:	bf44      	itt	mi
 8003de8:	2220      	movmi	r2, #32
 8003dea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003dee:	071a      	lsls	r2, r3, #28
 8003df0:	bf44      	itt	mi
 8003df2:	222b      	movmi	r2, #43	; 0x2b
 8003df4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df8:	782a      	ldrb	r2, [r5, #0]
 8003dfa:	2a2a      	cmp	r2, #42	; 0x2a
 8003dfc:	d015      	beq.n	8003e2a <_svfiprintf_r+0xea>
 8003dfe:	462f      	mov	r7, r5
 8003e00:	2000      	movs	r0, #0
 8003e02:	250a      	movs	r5, #10
 8003e04:	9a07      	ldr	r2, [sp, #28]
 8003e06:	4639      	mov	r1, r7
 8003e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e0c:	3b30      	subs	r3, #48	; 0x30
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	d94d      	bls.n	8003eae <_svfiprintf_r+0x16e>
 8003e12:	b1b8      	cbz	r0, 8003e44 <_svfiprintf_r+0x104>
 8003e14:	e00f      	b.n	8003e36 <_svfiprintf_r+0xf6>
 8003e16:	462f      	mov	r7, r5
 8003e18:	e7b8      	b.n	8003d8c <_svfiprintf_r+0x4c>
 8003e1a:	4a40      	ldr	r2, [pc, #256]	; (8003f1c <_svfiprintf_r+0x1dc>)
 8003e1c:	463d      	mov	r5, r7
 8003e1e:	1a80      	subs	r0, r0, r2
 8003e20:	fa0b f000 	lsl.w	r0, fp, r0
 8003e24:	4318      	orrs	r0, r3
 8003e26:	9004      	str	r0, [sp, #16]
 8003e28:	e7d3      	b.n	8003dd2 <_svfiprintf_r+0x92>
 8003e2a:	9a03      	ldr	r2, [sp, #12]
 8003e2c:	1d11      	adds	r1, r2, #4
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	9103      	str	r1, [sp, #12]
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	db01      	blt.n	8003e3a <_svfiprintf_r+0xfa>
 8003e36:	9207      	str	r2, [sp, #28]
 8003e38:	e004      	b.n	8003e44 <_svfiprintf_r+0x104>
 8003e3a:	4252      	negs	r2, r2
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	9207      	str	r2, [sp, #28]
 8003e42:	9304      	str	r3, [sp, #16]
 8003e44:	783b      	ldrb	r3, [r7, #0]
 8003e46:	2b2e      	cmp	r3, #46	; 0x2e
 8003e48:	d10c      	bne.n	8003e64 <_svfiprintf_r+0x124>
 8003e4a:	787b      	ldrb	r3, [r7, #1]
 8003e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e4e:	d133      	bne.n	8003eb8 <_svfiprintf_r+0x178>
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	3702      	adds	r7, #2
 8003e54:	1d1a      	adds	r2, r3, #4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	9203      	str	r2, [sp, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfb8      	it	lt
 8003e5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e62:	9305      	str	r3, [sp, #20]
 8003e64:	4d2e      	ldr	r5, [pc, #184]	; (8003f20 <_svfiprintf_r+0x1e0>)
 8003e66:	2203      	movs	r2, #3
 8003e68:	7839      	ldrb	r1, [r7, #0]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 fb5a 	bl	8004524 <memchr>
 8003e70:	b138      	cbz	r0, 8003e82 <_svfiprintf_r+0x142>
 8003e72:	2340      	movs	r3, #64	; 0x40
 8003e74:	1b40      	subs	r0, r0, r5
 8003e76:	fa03 f000 	lsl.w	r0, r3, r0
 8003e7a:	9b04      	ldr	r3, [sp, #16]
 8003e7c:	3701      	adds	r7, #1
 8003e7e:	4303      	orrs	r3, r0
 8003e80:	9304      	str	r3, [sp, #16]
 8003e82:	7839      	ldrb	r1, [r7, #0]
 8003e84:	2206      	movs	r2, #6
 8003e86:	4827      	ldr	r0, [pc, #156]	; (8003f24 <_svfiprintf_r+0x1e4>)
 8003e88:	1c7e      	adds	r6, r7, #1
 8003e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e8e:	f000 fb49 	bl	8004524 <memchr>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	d038      	beq.n	8003f08 <_svfiprintf_r+0x1c8>
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <_svfiprintf_r+0x1e8>)
 8003e98:	bb13      	cbnz	r3, 8003ee0 <_svfiprintf_r+0x1a0>
 8003e9a:	9b03      	ldr	r3, [sp, #12]
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea8:	444b      	add	r3, r9
 8003eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003eac:	e76d      	b.n	8003d8a <_svfiprintf_r+0x4a>
 8003eae:	fb05 3202 	mla	r2, r5, r2, r3
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	460f      	mov	r7, r1
 8003eb6:	e7a6      	b.n	8003e06 <_svfiprintf_r+0xc6>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	250a      	movs	r5, #10
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	3701      	adds	r7, #1
 8003ec0:	9305      	str	r3, [sp, #20]
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec8:	3a30      	subs	r2, #48	; 0x30
 8003eca:	2a09      	cmp	r2, #9
 8003ecc:	d903      	bls.n	8003ed6 <_svfiprintf_r+0x196>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0c8      	beq.n	8003e64 <_svfiprintf_r+0x124>
 8003ed2:	9105      	str	r1, [sp, #20]
 8003ed4:	e7c6      	b.n	8003e64 <_svfiprintf_r+0x124>
 8003ed6:	fb05 2101 	mla	r1, r5, r1, r2
 8003eda:	2301      	movs	r3, #1
 8003edc:	4607      	mov	r7, r0
 8003ede:	e7f0      	b.n	8003ec2 <_svfiprintf_r+0x182>
 8003ee0:	ab03      	add	r3, sp, #12
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003ee8:	a904      	add	r1, sp, #16
 8003eea:	4640      	mov	r0, r8
 8003eec:	f3af 8000 	nop.w
 8003ef0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ef4:	4681      	mov	r9, r0
 8003ef6:	d1d6      	bne.n	8003ea6 <_svfiprintf_r+0x166>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	065b      	lsls	r3, r3, #25
 8003efc:	f53f af35 	bmi.w	8003d6a <_svfiprintf_r+0x2a>
 8003f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f02:	b01d      	add	sp, #116	; 0x74
 8003f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f08:	ab03      	add	r3, sp, #12
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <_svfiprintf_r+0x1ec>)
 8003f10:	a904      	add	r1, sp, #16
 8003f12:	4640      	mov	r0, r8
 8003f14:	f000 f9c0 	bl	8004298 <_printf_i>
 8003f18:	e7ea      	b.n	8003ef0 <_svfiprintf_r+0x1b0>
 8003f1a:	bf00      	nop
 8003f1c:	080046e4 	.word	0x080046e4
 8003f20:	080046ea 	.word	0x080046ea
 8003f24:	080046ee 	.word	0x080046ee
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	08003c8d 	.word	0x08003c8d

08003f30 <__sfputc_r>:
 8003f30:	6893      	ldr	r3, [r2, #8]
 8003f32:	b410      	push	{r4}
 8003f34:	3b01      	subs	r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	da07      	bge.n	8003f4c <__sfputc_r+0x1c>
 8003f3c:	6994      	ldr	r4, [r2, #24]
 8003f3e:	42a3      	cmp	r3, r4
 8003f40:	db01      	blt.n	8003f46 <__sfputc_r+0x16>
 8003f42:	290a      	cmp	r1, #10
 8003f44:	d102      	bne.n	8003f4c <__sfputc_r+0x1c>
 8003f46:	bc10      	pop	{r4}
 8003f48:	f7ff bbcc 	b.w	80036e4 <__swbuf_r>
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	1c58      	adds	r0, r3, #1
 8003f50:	6010      	str	r0, [r2, #0]
 8003f52:	7019      	strb	r1, [r3, #0]
 8003f54:	4608      	mov	r0, r1
 8003f56:	bc10      	pop	{r4}
 8003f58:	4770      	bx	lr

08003f5a <__sfputs_r>:
 8003f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	460f      	mov	r7, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	18d5      	adds	r5, r2, r3
 8003f64:	42ac      	cmp	r4, r5
 8003f66:	d101      	bne.n	8003f6c <__sfputs_r+0x12>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	e007      	b.n	8003f7c <__sfputs_r+0x22>
 8003f6c:	463a      	mov	r2, r7
 8003f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f72:	4630      	mov	r0, r6
 8003f74:	f7ff ffdc 	bl	8003f30 <__sfputc_r>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d1f3      	bne.n	8003f64 <__sfputs_r+0xa>
 8003f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f80 <_vfiprintf_r>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	460c      	mov	r4, r1
 8003f86:	b09d      	sub	sp, #116	; 0x74
 8003f88:	4617      	mov	r7, r2
 8003f8a:	461d      	mov	r5, r3
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	b118      	cbz	r0, 8003f98 <_vfiprintf_r+0x18>
 8003f90:	6983      	ldr	r3, [r0, #24]
 8003f92:	b90b      	cbnz	r3, 8003f98 <_vfiprintf_r+0x18>
 8003f94:	f7ff fd78 	bl	8003a88 <__sinit>
 8003f98:	4b7c      	ldr	r3, [pc, #496]	; (800418c <_vfiprintf_r+0x20c>)
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d158      	bne.n	8004050 <_vfiprintf_r+0xd0>
 8003f9e:	6874      	ldr	r4, [r6, #4]
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	0718      	lsls	r0, r3, #28
 8003fa4:	d55e      	bpl.n	8004064 <_vfiprintf_r+0xe4>
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05b      	beq.n	8004064 <_vfiprintf_r+0xe4>
 8003fac:	2300      	movs	r3, #0
 8003fae:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fb6:	2330      	movs	r3, #48	; 0x30
 8003fb8:	f04f 0b01 	mov.w	fp, #1
 8003fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fc0:	9503      	str	r5, [sp, #12]
 8003fc2:	46b8      	mov	r8, r7
 8003fc4:	4645      	mov	r5, r8
 8003fc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003fca:	b10b      	cbz	r3, 8003fd0 <_vfiprintf_r+0x50>
 8003fcc:	2b25      	cmp	r3, #37	; 0x25
 8003fce:	d154      	bne.n	800407a <_vfiprintf_r+0xfa>
 8003fd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8003fd4:	d00b      	beq.n	8003fee <_vfiprintf_r+0x6e>
 8003fd6:	4653      	mov	r3, sl
 8003fd8:	463a      	mov	r2, r7
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f7ff ffbc 	bl	8003f5a <__sfputs_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f000 80c2 	beq.w	800416c <_vfiprintf_r+0x1ec>
 8003fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fea:	4453      	add	r3, sl
 8003fec:	9309      	str	r3, [sp, #36]	; 0x24
 8003fee:	f898 3000 	ldrb.w	r3, [r8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80ba 	beq.w	800416c <_vfiprintf_r+0x1ec>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004002:	9304      	str	r3, [sp, #16]
 8004004:	9307      	str	r3, [sp, #28]
 8004006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800400a:	931a      	str	r3, [sp, #104]	; 0x68
 800400c:	46a8      	mov	r8, r5
 800400e:	2205      	movs	r2, #5
 8004010:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004014:	485e      	ldr	r0, [pc, #376]	; (8004190 <_vfiprintf_r+0x210>)
 8004016:	f000 fa85 	bl	8004524 <memchr>
 800401a:	9b04      	ldr	r3, [sp, #16]
 800401c:	bb78      	cbnz	r0, 800407e <_vfiprintf_r+0xfe>
 800401e:	06d9      	lsls	r1, r3, #27
 8004020:	bf44      	itt	mi
 8004022:	2220      	movmi	r2, #32
 8004024:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004028:	071a      	lsls	r2, r3, #28
 800402a:	bf44      	itt	mi
 800402c:	222b      	movmi	r2, #43	; 0x2b
 800402e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004032:	782a      	ldrb	r2, [r5, #0]
 8004034:	2a2a      	cmp	r2, #42	; 0x2a
 8004036:	d02a      	beq.n	800408e <_vfiprintf_r+0x10e>
 8004038:	46a8      	mov	r8, r5
 800403a:	2000      	movs	r0, #0
 800403c:	250a      	movs	r5, #10
 800403e:	9a07      	ldr	r2, [sp, #28]
 8004040:	4641      	mov	r1, r8
 8004042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004046:	3b30      	subs	r3, #48	; 0x30
 8004048:	2b09      	cmp	r3, #9
 800404a:	d969      	bls.n	8004120 <_vfiprintf_r+0x1a0>
 800404c:	b360      	cbz	r0, 80040a8 <_vfiprintf_r+0x128>
 800404e:	e024      	b.n	800409a <_vfiprintf_r+0x11a>
 8004050:	4b50      	ldr	r3, [pc, #320]	; (8004194 <_vfiprintf_r+0x214>)
 8004052:	429c      	cmp	r4, r3
 8004054:	d101      	bne.n	800405a <_vfiprintf_r+0xda>
 8004056:	68b4      	ldr	r4, [r6, #8]
 8004058:	e7a2      	b.n	8003fa0 <_vfiprintf_r+0x20>
 800405a:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <_vfiprintf_r+0x218>)
 800405c:	429c      	cmp	r4, r3
 800405e:	bf08      	it	eq
 8004060:	68f4      	ldreq	r4, [r6, #12]
 8004062:	e79d      	b.n	8003fa0 <_vfiprintf_r+0x20>
 8004064:	4621      	mov	r1, r4
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff fba0 	bl	80037ac <__swsetup_r>
 800406c:	2800      	cmp	r0, #0
 800406e:	d09d      	beq.n	8003fac <_vfiprintf_r+0x2c>
 8004070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004074:	b01d      	add	sp, #116	; 0x74
 8004076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407a:	46a8      	mov	r8, r5
 800407c:	e7a2      	b.n	8003fc4 <_vfiprintf_r+0x44>
 800407e:	4a44      	ldr	r2, [pc, #272]	; (8004190 <_vfiprintf_r+0x210>)
 8004080:	4645      	mov	r5, r8
 8004082:	1a80      	subs	r0, r0, r2
 8004084:	fa0b f000 	lsl.w	r0, fp, r0
 8004088:	4318      	orrs	r0, r3
 800408a:	9004      	str	r0, [sp, #16]
 800408c:	e7be      	b.n	800400c <_vfiprintf_r+0x8c>
 800408e:	9a03      	ldr	r2, [sp, #12]
 8004090:	1d11      	adds	r1, r2, #4
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	9103      	str	r1, [sp, #12]
 8004096:	2a00      	cmp	r2, #0
 8004098:	db01      	blt.n	800409e <_vfiprintf_r+0x11e>
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	e004      	b.n	80040a8 <_vfiprintf_r+0x128>
 800409e:	4252      	negs	r2, r2
 80040a0:	f043 0302 	orr.w	r3, r3, #2
 80040a4:	9207      	str	r2, [sp, #28]
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	f898 3000 	ldrb.w	r3, [r8]
 80040ac:	2b2e      	cmp	r3, #46	; 0x2e
 80040ae:	d10e      	bne.n	80040ce <_vfiprintf_r+0x14e>
 80040b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80040b4:	2b2a      	cmp	r3, #42	; 0x2a
 80040b6:	d138      	bne.n	800412a <_vfiprintf_r+0x1aa>
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	f108 0802 	add.w	r8, r8, #2
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	9203      	str	r2, [sp, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bfb8      	it	lt
 80040c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	4d33      	ldr	r5, [pc, #204]	; (800419c <_vfiprintf_r+0x21c>)
 80040d0:	2203      	movs	r2, #3
 80040d2:	f898 1000 	ldrb.w	r1, [r8]
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 fa24 	bl	8004524 <memchr>
 80040dc:	b140      	cbz	r0, 80040f0 <_vfiprintf_r+0x170>
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	fa03 f000 	lsl.w	r0, r3, r0
 80040e6:	9b04      	ldr	r3, [sp, #16]
 80040e8:	f108 0801 	add.w	r8, r8, #1
 80040ec:	4303      	orrs	r3, r0
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	f898 1000 	ldrb.w	r1, [r8]
 80040f4:	2206      	movs	r2, #6
 80040f6:	482a      	ldr	r0, [pc, #168]	; (80041a0 <_vfiprintf_r+0x220>)
 80040f8:	f108 0701 	add.w	r7, r8, #1
 80040fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004100:	f000 fa10 	bl	8004524 <memchr>
 8004104:	2800      	cmp	r0, #0
 8004106:	d037      	beq.n	8004178 <_vfiprintf_r+0x1f8>
 8004108:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <_vfiprintf_r+0x224>)
 800410a:	bb1b      	cbnz	r3, 8004154 <_vfiprintf_r+0x1d4>
 800410c:	9b03      	ldr	r3, [sp, #12]
 800410e:	3307      	adds	r3, #7
 8004110:	f023 0307 	bic.w	r3, r3, #7
 8004114:	3308      	adds	r3, #8
 8004116:	9303      	str	r3, [sp, #12]
 8004118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800411a:	444b      	add	r3, r9
 800411c:	9309      	str	r3, [sp, #36]	; 0x24
 800411e:	e750      	b.n	8003fc2 <_vfiprintf_r+0x42>
 8004120:	fb05 3202 	mla	r2, r5, r2, r3
 8004124:	2001      	movs	r0, #1
 8004126:	4688      	mov	r8, r1
 8004128:	e78a      	b.n	8004040 <_vfiprintf_r+0xc0>
 800412a:	2300      	movs	r3, #0
 800412c:	250a      	movs	r5, #10
 800412e:	4619      	mov	r1, r3
 8004130:	f108 0801 	add.w	r8, r8, #1
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	4640      	mov	r0, r8
 8004138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800413c:	3a30      	subs	r2, #48	; 0x30
 800413e:	2a09      	cmp	r2, #9
 8004140:	d903      	bls.n	800414a <_vfiprintf_r+0x1ca>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0c3      	beq.n	80040ce <_vfiprintf_r+0x14e>
 8004146:	9105      	str	r1, [sp, #20]
 8004148:	e7c1      	b.n	80040ce <_vfiprintf_r+0x14e>
 800414a:	fb05 2101 	mla	r1, r5, r1, r2
 800414e:	2301      	movs	r3, #1
 8004150:	4680      	mov	r8, r0
 8004152:	e7f0      	b.n	8004136 <_vfiprintf_r+0x1b6>
 8004154:	ab03      	add	r3, sp, #12
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	4622      	mov	r2, r4
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <_vfiprintf_r+0x228>)
 800415c:	a904      	add	r1, sp, #16
 800415e:	4630      	mov	r0, r6
 8004160:	f3af 8000 	nop.w
 8004164:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004168:	4681      	mov	r9, r0
 800416a:	d1d5      	bne.n	8004118 <_vfiprintf_r+0x198>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	065b      	lsls	r3, r3, #25
 8004170:	f53f af7e 	bmi.w	8004070 <_vfiprintf_r+0xf0>
 8004174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004176:	e77d      	b.n	8004074 <_vfiprintf_r+0xf4>
 8004178:	ab03      	add	r3, sp, #12
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	4622      	mov	r2, r4
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <_vfiprintf_r+0x228>)
 8004180:	a904      	add	r1, sp, #16
 8004182:	4630      	mov	r0, r6
 8004184:	f000 f888 	bl	8004298 <_printf_i>
 8004188:	e7ec      	b.n	8004164 <_vfiprintf_r+0x1e4>
 800418a:	bf00      	nop
 800418c:	080046a4 	.word	0x080046a4
 8004190:	080046e4 	.word	0x080046e4
 8004194:	080046c4 	.word	0x080046c4
 8004198:	08004684 	.word	0x08004684
 800419c:	080046ea 	.word	0x080046ea
 80041a0:	080046ee 	.word	0x080046ee
 80041a4:	00000000 	.word	0x00000000
 80041a8:	08003f5b 	.word	0x08003f5b

080041ac <_printf_common>:
 80041ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b0:	4691      	mov	r9, r2
 80041b2:	461f      	mov	r7, r3
 80041b4:	688a      	ldr	r2, [r1, #8]
 80041b6:	690b      	ldr	r3, [r1, #16]
 80041b8:	4606      	mov	r6, r0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfb8      	it	lt
 80041be:	4613      	movlt	r3, r2
 80041c0:	f8c9 3000 	str.w	r3, [r9]
 80041c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041c8:	460c      	mov	r4, r1
 80041ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041ce:	b112      	cbz	r2, 80041d6 <_printf_common+0x2a>
 80041d0:	3301      	adds	r3, #1
 80041d2:	f8c9 3000 	str.w	r3, [r9]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	0699      	lsls	r1, r3, #26
 80041da:	bf42      	ittt	mi
 80041dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80041e0:	3302      	addmi	r3, #2
 80041e2:	f8c9 3000 	strmi.w	r3, [r9]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d107      	bne.n	80041fe <_printf_common+0x52>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	f8d9 2000 	ldr.w	r2, [r9]
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	42ab      	cmp	r3, r5
 80041fc:	dc29      	bgt.n	8004252 <_printf_common+0xa6>
 80041fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	3300      	adds	r3, #0
 8004206:	bf18      	it	ne
 8004208:	2301      	movne	r3, #1
 800420a:	0692      	lsls	r2, r2, #26
 800420c:	d42e      	bmi.n	800426c <_printf_common+0xc0>
 800420e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004212:	4639      	mov	r1, r7
 8004214:	4630      	mov	r0, r6
 8004216:	47c0      	blx	r8
 8004218:	3001      	adds	r0, #1
 800421a:	d021      	beq.n	8004260 <_printf_common+0xb4>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	68e5      	ldr	r5, [r4, #12]
 8004220:	f003 0306 	and.w	r3, r3, #6
 8004224:	2b04      	cmp	r3, #4
 8004226:	bf18      	it	ne
 8004228:	2500      	movne	r5, #0
 800422a:	f8d9 2000 	ldr.w	r2, [r9]
 800422e:	f04f 0900 	mov.w	r9, #0
 8004232:	bf08      	it	eq
 8004234:	1aad      	subeq	r5, r5, r2
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	bf08      	it	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	4293      	cmp	r3, r2
 8004242:	bfc4      	itt	gt
 8004244:	1a9b      	subgt	r3, r3, r2
 8004246:	18ed      	addgt	r5, r5, r3
 8004248:	341a      	adds	r4, #26
 800424a:	454d      	cmp	r5, r9
 800424c:	d11a      	bne.n	8004284 <_printf_common+0xd8>
 800424e:	2000      	movs	r0, #0
 8004250:	e008      	b.n	8004264 <_printf_common+0xb8>
 8004252:	2301      	movs	r3, #1
 8004254:	4652      	mov	r2, sl
 8004256:	4639      	mov	r1, r7
 8004258:	4630      	mov	r0, r6
 800425a:	47c0      	blx	r8
 800425c:	3001      	adds	r0, #1
 800425e:	d103      	bne.n	8004268 <_printf_common+0xbc>
 8004260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004268:	3501      	adds	r5, #1
 800426a:	e7c2      	b.n	80041f2 <_printf_common+0x46>
 800426c:	2030      	movs	r0, #48	; 0x30
 800426e:	18e1      	adds	r1, r4, r3
 8004270:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800427a:	4422      	add	r2, r4
 800427c:	3302      	adds	r3, #2
 800427e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004282:	e7c4      	b.n	800420e <_printf_common+0x62>
 8004284:	2301      	movs	r3, #1
 8004286:	4622      	mov	r2, r4
 8004288:	4639      	mov	r1, r7
 800428a:	4630      	mov	r0, r6
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d0e6      	beq.n	8004260 <_printf_common+0xb4>
 8004292:	f109 0901 	add.w	r9, r9, #1
 8004296:	e7d8      	b.n	800424a <_printf_common+0x9e>

08004298 <_printf_i>:
 8004298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800429c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042a0:	460c      	mov	r4, r1
 80042a2:	7e09      	ldrb	r1, [r1, #24]
 80042a4:	b085      	sub	sp, #20
 80042a6:	296e      	cmp	r1, #110	; 0x6e
 80042a8:	4617      	mov	r7, r2
 80042aa:	4606      	mov	r6, r0
 80042ac:	4698      	mov	r8, r3
 80042ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042b0:	f000 80b3 	beq.w	800441a <_printf_i+0x182>
 80042b4:	d822      	bhi.n	80042fc <_printf_i+0x64>
 80042b6:	2963      	cmp	r1, #99	; 0x63
 80042b8:	d036      	beq.n	8004328 <_printf_i+0x90>
 80042ba:	d80a      	bhi.n	80042d2 <_printf_i+0x3a>
 80042bc:	2900      	cmp	r1, #0
 80042be:	f000 80b9 	beq.w	8004434 <_printf_i+0x19c>
 80042c2:	2958      	cmp	r1, #88	; 0x58
 80042c4:	f000 8083 	beq.w	80043ce <_printf_i+0x136>
 80042c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80042d0:	e032      	b.n	8004338 <_printf_i+0xa0>
 80042d2:	2964      	cmp	r1, #100	; 0x64
 80042d4:	d001      	beq.n	80042da <_printf_i+0x42>
 80042d6:	2969      	cmp	r1, #105	; 0x69
 80042d8:	d1f6      	bne.n	80042c8 <_printf_i+0x30>
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	6813      	ldr	r3, [r2, #0]
 80042de:	0605      	lsls	r5, r0, #24
 80042e0:	f103 0104 	add.w	r1, r3, #4
 80042e4:	d52a      	bpl.n	800433c <_printf_i+0xa4>
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da03      	bge.n	80042f6 <_printf_i+0x5e>
 80042ee:	222d      	movs	r2, #45	; 0x2d
 80042f0:	425b      	negs	r3, r3
 80042f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80042f6:	486f      	ldr	r0, [pc, #444]	; (80044b4 <_printf_i+0x21c>)
 80042f8:	220a      	movs	r2, #10
 80042fa:	e039      	b.n	8004370 <_printf_i+0xd8>
 80042fc:	2973      	cmp	r1, #115	; 0x73
 80042fe:	f000 809d 	beq.w	800443c <_printf_i+0x1a4>
 8004302:	d808      	bhi.n	8004316 <_printf_i+0x7e>
 8004304:	296f      	cmp	r1, #111	; 0x6f
 8004306:	d020      	beq.n	800434a <_printf_i+0xb2>
 8004308:	2970      	cmp	r1, #112	; 0x70
 800430a:	d1dd      	bne.n	80042c8 <_printf_i+0x30>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	f043 0320 	orr.w	r3, r3, #32
 8004312:	6023      	str	r3, [r4, #0]
 8004314:	e003      	b.n	800431e <_printf_i+0x86>
 8004316:	2975      	cmp	r1, #117	; 0x75
 8004318:	d017      	beq.n	800434a <_printf_i+0xb2>
 800431a:	2978      	cmp	r1, #120	; 0x78
 800431c:	d1d4      	bne.n	80042c8 <_printf_i+0x30>
 800431e:	2378      	movs	r3, #120	; 0x78
 8004320:	4865      	ldr	r0, [pc, #404]	; (80044b8 <_printf_i+0x220>)
 8004322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004326:	e055      	b.n	80043d4 <_printf_i+0x13c>
 8004328:	6813      	ldr	r3, [r2, #0]
 800432a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432e:	1d19      	adds	r1, r3, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6011      	str	r1, [r2, #0]
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e08c      	b.n	8004456 <_printf_i+0x1be>
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004342:	6011      	str	r1, [r2, #0]
 8004344:	bf18      	it	ne
 8004346:	b21b      	sxthne	r3, r3
 8004348:	e7cf      	b.n	80042ea <_printf_i+0x52>
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	6825      	ldr	r5, [r4, #0]
 800434e:	1d18      	adds	r0, r3, #4
 8004350:	6010      	str	r0, [r2, #0]
 8004352:	0628      	lsls	r0, r5, #24
 8004354:	d501      	bpl.n	800435a <_printf_i+0xc2>
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	e002      	b.n	8004360 <_printf_i+0xc8>
 800435a:	0668      	lsls	r0, r5, #25
 800435c:	d5fb      	bpl.n	8004356 <_printf_i+0xbe>
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	296f      	cmp	r1, #111	; 0x6f
 8004362:	bf14      	ite	ne
 8004364:	220a      	movne	r2, #10
 8004366:	2208      	moveq	r2, #8
 8004368:	4852      	ldr	r0, [pc, #328]	; (80044b4 <_printf_i+0x21c>)
 800436a:	2100      	movs	r1, #0
 800436c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004370:	6865      	ldr	r5, [r4, #4]
 8004372:	2d00      	cmp	r5, #0
 8004374:	60a5      	str	r5, [r4, #8]
 8004376:	f2c0 8095 	blt.w	80044a4 <_printf_i+0x20c>
 800437a:	6821      	ldr	r1, [r4, #0]
 800437c:	f021 0104 	bic.w	r1, r1, #4
 8004380:	6021      	str	r1, [r4, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d13d      	bne.n	8004402 <_printf_i+0x16a>
 8004386:	2d00      	cmp	r5, #0
 8004388:	f040 808e 	bne.w	80044a8 <_printf_i+0x210>
 800438c:	4665      	mov	r5, ip
 800438e:	2a08      	cmp	r2, #8
 8004390:	d10b      	bne.n	80043aa <_printf_i+0x112>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	07db      	lsls	r3, r3, #31
 8004396:	d508      	bpl.n	80043aa <_printf_i+0x112>
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	bfde      	ittt	le
 80043a0:	2330      	movle	r3, #48	; 0x30
 80043a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80043aa:	ebac 0305 	sub.w	r3, ip, r5
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	f8cd 8000 	str.w	r8, [sp]
 80043b4:	463b      	mov	r3, r7
 80043b6:	aa03      	add	r2, sp, #12
 80043b8:	4621      	mov	r1, r4
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff fef6 	bl	80041ac <_printf_common>
 80043c0:	3001      	adds	r0, #1
 80043c2:	d14d      	bne.n	8004460 <_printf_i+0x1c8>
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043c8:	b005      	add	sp, #20
 80043ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043ce:	4839      	ldr	r0, [pc, #228]	; (80044b4 <_printf_i+0x21c>)
 80043d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	1d1d      	adds	r5, r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6015      	str	r5, [r2, #0]
 80043de:	060a      	lsls	r2, r1, #24
 80043e0:	d50b      	bpl.n	80043fa <_printf_i+0x162>
 80043e2:	07ca      	lsls	r2, r1, #31
 80043e4:	bf44      	itt	mi
 80043e6:	f041 0120 	orrmi.w	r1, r1, #32
 80043ea:	6021      	strmi	r1, [r4, #0]
 80043ec:	b91b      	cbnz	r3, 80043f6 <_printf_i+0x15e>
 80043ee:	6822      	ldr	r2, [r4, #0]
 80043f0:	f022 0220 	bic.w	r2, r2, #32
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	2210      	movs	r2, #16
 80043f8:	e7b7      	b.n	800436a <_printf_i+0xd2>
 80043fa:	064d      	lsls	r5, r1, #25
 80043fc:	bf48      	it	mi
 80043fe:	b29b      	uxthmi	r3, r3
 8004400:	e7ef      	b.n	80043e2 <_printf_i+0x14a>
 8004402:	4665      	mov	r5, ip
 8004404:	fbb3 f1f2 	udiv	r1, r3, r2
 8004408:	fb02 3311 	mls	r3, r2, r1, r3
 800440c:	5cc3      	ldrb	r3, [r0, r3]
 800440e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004412:	460b      	mov	r3, r1
 8004414:	2900      	cmp	r1, #0
 8004416:	d1f5      	bne.n	8004404 <_printf_i+0x16c>
 8004418:	e7b9      	b.n	800438e <_printf_i+0xf6>
 800441a:	6813      	ldr	r3, [r2, #0]
 800441c:	6825      	ldr	r5, [r4, #0]
 800441e:	1d18      	adds	r0, r3, #4
 8004420:	6961      	ldr	r1, [r4, #20]
 8004422:	6010      	str	r0, [r2, #0]
 8004424:	0628      	lsls	r0, r5, #24
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	d501      	bpl.n	800442e <_printf_i+0x196>
 800442a:	6019      	str	r1, [r3, #0]
 800442c:	e002      	b.n	8004434 <_printf_i+0x19c>
 800442e:	066a      	lsls	r2, r5, #25
 8004430:	d5fb      	bpl.n	800442a <_printf_i+0x192>
 8004432:	8019      	strh	r1, [r3, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	4665      	mov	r5, ip
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	e7b9      	b.n	80043b0 <_printf_i+0x118>
 800443c:	6813      	ldr	r3, [r2, #0]
 800443e:	1d19      	adds	r1, r3, #4
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	681d      	ldr	r5, [r3, #0]
 8004444:	6862      	ldr	r2, [r4, #4]
 8004446:	2100      	movs	r1, #0
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f86b 	bl	8004524 <memchr>
 800444e:	b108      	cbz	r0, 8004454 <_printf_i+0x1bc>
 8004450:	1b40      	subs	r0, r0, r5
 8004452:	6060      	str	r0, [r4, #4]
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	6123      	str	r3, [r4, #16]
 8004458:	2300      	movs	r3, #0
 800445a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800445e:	e7a7      	b.n	80043b0 <_printf_i+0x118>
 8004460:	6923      	ldr	r3, [r4, #16]
 8004462:	462a      	mov	r2, r5
 8004464:	4639      	mov	r1, r7
 8004466:	4630      	mov	r0, r6
 8004468:	47c0      	blx	r8
 800446a:	3001      	adds	r0, #1
 800446c:	d0aa      	beq.n	80043c4 <_printf_i+0x12c>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	079b      	lsls	r3, r3, #30
 8004472:	d413      	bmi.n	800449c <_printf_i+0x204>
 8004474:	68e0      	ldr	r0, [r4, #12]
 8004476:	9b03      	ldr	r3, [sp, #12]
 8004478:	4298      	cmp	r0, r3
 800447a:	bfb8      	it	lt
 800447c:	4618      	movlt	r0, r3
 800447e:	e7a3      	b.n	80043c8 <_printf_i+0x130>
 8004480:	2301      	movs	r3, #1
 8004482:	464a      	mov	r2, r9
 8004484:	4639      	mov	r1, r7
 8004486:	4630      	mov	r0, r6
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d09a      	beq.n	80043c4 <_printf_i+0x12c>
 800448e:	3501      	adds	r5, #1
 8004490:	68e3      	ldr	r3, [r4, #12]
 8004492:	9a03      	ldr	r2, [sp, #12]
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	42ab      	cmp	r3, r5
 8004498:	dcf2      	bgt.n	8004480 <_printf_i+0x1e8>
 800449a:	e7eb      	b.n	8004474 <_printf_i+0x1dc>
 800449c:	2500      	movs	r5, #0
 800449e:	f104 0919 	add.w	r9, r4, #25
 80044a2:	e7f5      	b.n	8004490 <_printf_i+0x1f8>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1ac      	bne.n	8004402 <_printf_i+0x16a>
 80044a8:	7803      	ldrb	r3, [r0, #0]
 80044aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b2:	e76c      	b.n	800438e <_printf_i+0xf6>
 80044b4:	080046f5 	.word	0x080046f5
 80044b8:	08004706 	.word	0x08004706

080044bc <_read_r>:
 80044bc:	b538      	push	{r3, r4, r5, lr}
 80044be:	4605      	mov	r5, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	2200      	movs	r2, #0
 80044c6:	4c05      	ldr	r4, [pc, #20]	; (80044dc <_read_r+0x20>)
 80044c8:	6022      	str	r2, [r4, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f7fc fd0c 	bl	8000ee8 <_read>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_read_r+0x1e>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	b103      	cbz	r3, 80044da <_read_r+0x1e>
 80044d8:	602b      	str	r3, [r5, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	2000030c 	.word	0x2000030c

080044e0 <_fstat_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	2300      	movs	r3, #0
 80044e4:	4c06      	ldr	r4, [pc, #24]	; (8004500 <_fstat_r+0x20>)
 80044e6:	4605      	mov	r5, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	6023      	str	r3, [r4, #0]
 80044ee:	f7fc fd23 	bl	8000f38 <_fstat>
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	d102      	bne.n	80044fc <_fstat_r+0x1c>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	b103      	cbz	r3, 80044fc <_fstat_r+0x1c>
 80044fa:	602b      	str	r3, [r5, #0]
 80044fc:	bd38      	pop	{r3, r4, r5, pc}
 80044fe:	bf00      	nop
 8004500:	2000030c 	.word	0x2000030c

08004504 <_isatty_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	2300      	movs	r3, #0
 8004508:	4c05      	ldr	r4, [pc, #20]	; (8004520 <_isatty_r+0x1c>)
 800450a:	4605      	mov	r5, r0
 800450c:	4608      	mov	r0, r1
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	f7fc fd21 	bl	8000f56 <_isatty>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_isatty_r+0x1a>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	b103      	cbz	r3, 800451e <_isatty_r+0x1a>
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	2000030c 	.word	0x2000030c

08004524 <memchr>:
 8004524:	b510      	push	{r4, lr}
 8004526:	b2c9      	uxtb	r1, r1
 8004528:	4402      	add	r2, r0
 800452a:	4290      	cmp	r0, r2
 800452c:	4603      	mov	r3, r0
 800452e:	d101      	bne.n	8004534 <memchr+0x10>
 8004530:	2300      	movs	r3, #0
 8004532:	e003      	b.n	800453c <memchr+0x18>
 8004534:	781c      	ldrb	r4, [r3, #0]
 8004536:	3001      	adds	r0, #1
 8004538:	428c      	cmp	r4, r1
 800453a:	d1f6      	bne.n	800452a <memchr+0x6>
 800453c:	4618      	mov	r0, r3
 800453e:	bd10      	pop	{r4, pc}

08004540 <memmove>:
 8004540:	4288      	cmp	r0, r1
 8004542:	b510      	push	{r4, lr}
 8004544:	eb01 0302 	add.w	r3, r1, r2
 8004548:	d807      	bhi.n	800455a <memmove+0x1a>
 800454a:	1e42      	subs	r2, r0, #1
 800454c:	4299      	cmp	r1, r3
 800454e:	d00a      	beq.n	8004566 <memmove+0x26>
 8004550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004554:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004558:	e7f8      	b.n	800454c <memmove+0xc>
 800455a:	4283      	cmp	r3, r0
 800455c:	d9f5      	bls.n	800454a <memmove+0xa>
 800455e:	1881      	adds	r1, r0, r2
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	42d3      	cmn	r3, r2
 8004564:	d100      	bne.n	8004568 <memmove+0x28>
 8004566:	bd10      	pop	{r4, pc}
 8004568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800456c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004570:	e7f7      	b.n	8004562 <memmove+0x22>

08004572 <_realloc_r>:
 8004572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004574:	4607      	mov	r7, r0
 8004576:	4614      	mov	r4, r2
 8004578:	460e      	mov	r6, r1
 800457a:	b921      	cbnz	r1, 8004586 <_realloc_r+0x14>
 800457c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004580:	4611      	mov	r1, r2
 8004582:	f7fe bfc9 	b.w	8003518 <_malloc_r>
 8004586:	b922      	cbnz	r2, 8004592 <_realloc_r+0x20>
 8004588:	f7fe ff7a 	bl	8003480 <_free_r>
 800458c:	4625      	mov	r5, r4
 800458e:	4628      	mov	r0, r5
 8004590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004592:	f000 f814 	bl	80045be <_malloc_usable_size_r>
 8004596:	42a0      	cmp	r0, r4
 8004598:	d20f      	bcs.n	80045ba <_realloc_r+0x48>
 800459a:	4621      	mov	r1, r4
 800459c:	4638      	mov	r0, r7
 800459e:	f7fe ffbb 	bl	8003518 <_malloc_r>
 80045a2:	4605      	mov	r5, r0
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d0f2      	beq.n	800458e <_realloc_r+0x1c>
 80045a8:	4631      	mov	r1, r6
 80045aa:	4622      	mov	r2, r4
 80045ac:	f7fe ff54 	bl	8003458 <memcpy>
 80045b0:	4631      	mov	r1, r6
 80045b2:	4638      	mov	r0, r7
 80045b4:	f7fe ff64 	bl	8003480 <_free_r>
 80045b8:	e7e9      	b.n	800458e <_realloc_r+0x1c>
 80045ba:	4635      	mov	r5, r6
 80045bc:	e7e7      	b.n	800458e <_realloc_r+0x1c>

080045be <_malloc_usable_size_r>:
 80045be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c2:	1f18      	subs	r0, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bfbc      	itt	lt
 80045c8:	580b      	ldrlt	r3, [r1, r0]
 80045ca:	18c0      	addlt	r0, r0, r3
 80045cc:	4770      	bx	lr
	...

080045d0 <_init>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr

080045dc <_fini>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr
