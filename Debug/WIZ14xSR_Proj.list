
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002410  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c4  080026c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080026c4  080026c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c4  080026c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c4  080026c4  000126c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080026cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000070  0800273c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  0800273c  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000697d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014da  00000000  00000000  00026a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00027ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  00028578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019862  00000000  00000000  00028b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000058ea  00000000  00000000  000423aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090edd  00000000  00000000  00047c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8b71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ff0  00000000  00000000  000d8bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080025dc 	.word	0x080025dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080025dc 	.word	0x080025dc

08000224 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b29a      	uxth	r2, r3
 8000234:	230a      	movs	r3, #10
 8000236:	68b9      	ldr	r1, [r7, #8]
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <_write+0x24>)
 800023a:	f001 f944 	bl	80014c6 <HAL_UART_Transmit>
	return len;
 800023e:	687b      	ldr	r3, [r7, #4]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000009c 	.word	0x2000009c

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 f9fe 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f81a 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 f888 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800025c:	f000 f85c 	bl	8000318 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	count++;	// increment count
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <main+0x38>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	b2da      	uxtb	r2, r3
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <main+0x38>)
 800026a:	701a      	strb	r2, [r3, #0]
	printf("count: %d\r\n", count);	// print count
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <main+0x38>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4619      	mov	r1, r3
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <main+0x3c>)
 8000274:	f001 fac4 	bl	8001800 <iprintf>
	HAL_Delay(1000);	// 1000 ms delay
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 fa4a 	bl	8000714 <HAL_Delay>
	count++;	// increment count
 8000280:	e7ee      	b.n	8000260 <main+0x14>
 8000282:	bf00      	nop
 8000284:	2000008c 	.word	0x2000008c
 8000288:	080025f4 	.word	0x080025f4

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f001 faa8 	bl	80017f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fc8d 	bl	8000bf4 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e0:	f000 f85a 	bl	8000398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	2302      	movs	r3, #2
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 fef8 	bl	80010f4 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030a:	f000 f845 	bl	8000398 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_USART2_UART_Init+0x50>)
 8000320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 8000324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART2_UART_Init+0x4c>)
 8000350:	f001 f86c 	bl	800142c <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800035a:	f000 f81d 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000009c 	.word	0x2000009c
 8000368:	40004400 	.word	0x40004400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_GPIO_Init+0x28>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a07      	ldr	r2, [pc, #28]	; (8000394 <MX_GPIO_Init+0x28>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <MX_GPIO_Init+0x28>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_MspInit+0x5c>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a14      	ldr	r2, [pc, #80]	; (8000400 <HAL_MspInit+0x5c>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <HAL_MspInit+0x5c>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <HAL_MspInit+0x5c>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <HAL_MspInit+0x60>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_MspInit+0x60>)
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000
 8000404:	40010000 	.word	0x40010000

08000408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <HAL_UART_MspInit+0x88>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d12f      	bne.n	8000488 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <HAL_UART_MspInit+0x8c>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <HAL_UART_MspInit+0x8c>)
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	61d3      	str	r3, [r2, #28]
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_UART_MspInit+0x8c>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x8c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a13      	ldr	r2, [pc, #76]	; (8000494 <HAL_UART_MspInit+0x8c>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_UART_MspInit+0x8c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0304 	and.w	r3, r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000458:	2304      	movs	r3, #4
 800045a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045c:	2302      	movs	r3, #2
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000460:	2303      	movs	r3, #3
 8000462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	480b      	ldr	r0, [pc, #44]	; (8000498 <HAL_UART_MspInit+0x90>)
 800046c:	f000 fa58 	bl	8000920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000470:	2308      	movs	r3, #8
 8000472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	4619      	mov	r1, r3
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x90>)
 8000484:	f000 fa4c 	bl	8000920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40004400 	.word	0x40004400
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <HardFault_Handler+0x4>

080004ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <MemManage_Handler+0x4>

080004b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <BusFault_Handler+0x4>

080004ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f8f8 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	e00a      	b.n	8000518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000502:	f3af 8000 	nop.w
 8000506:	4601      	mov	r1, r0
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	60ba      	str	r2, [r7, #8]
 800050e:	b2ca      	uxtb	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	3301      	adds	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	dbf0      	blt.n	8000502 <_read+0x12>
	}

return len;
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <_close>:
	}
	return len;
}

int _close(int file)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	return -1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000550:	605a      	str	r2, [r3, #4]
	return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_isatty>:

int _isatty(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
	return 1;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f001 f8ee 	bl	800179c <__errno>
 80005c0:	4602      	mov	r2, r0
 80005c2:	230c      	movs	r3, #12
 80005c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20010000 	.word	0x20010000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	20000090 	.word	0x20000090
 80005f4:	200000e8 	.word	0x200000e8

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062a:	f7ff ffe5 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f001 f8bb 	bl	80017a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fe0b 	bl	800024c <main>
  bx lr
 8000636:	4770      	bx	lr
  ldr r3, =_sidata
 8000638:	080026cc 	.word	0x080026cc
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000640:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000644:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000648:	200000e4 	.word	0x200000e4

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f929 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff fe9a 	bl	80003a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f933 	bl	8000906 <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006b8:	f000 f909 	bl	80008ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <HAL_IncTick+0x20>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000008 	.word	0x20000008
 80006fc:	200000dc 	.word	0x200000dc

08000700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000dc 	.word	0x200000dc

08000714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff0 	bl	8000700 <HAL_GetTick>
 8000720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800072c:	d005      	beq.n	800073a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_Delay+0x40>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073a:	bf00      	nop
 800073c:	f7ff ffe0 	bl	8000700 <HAL_GetTick>
 8000740:	4602      	mov	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8f7      	bhi.n	800073c <HAL_Delay+0x28>
  {
  }
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000008 	.word	0x20000008

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000898:	f7ff ff90 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff49 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff5e 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff90 	bl	8000810 <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5f 	bl	80007bc <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ffb0 	bl	8000874 <SysTick_Config>
 8000914:	4603      	mov	r3, r0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b08b      	sub	sp, #44	; 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000932:	e133      	b.n	8000b9c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000934:	2201      	movs	r2, #1
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	429a      	cmp	r2, r3
 800094e:	f040 8122 	bne.w	8000b96 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d034      	beq.n	80009c4 <HAL_GPIO_Init+0xa4>
 800095a:	2b12      	cmp	r3, #18
 800095c:	d80d      	bhi.n	800097a <HAL_GPIO_Init+0x5a>
 800095e:	2b02      	cmp	r3, #2
 8000960:	d02b      	beq.n	80009ba <HAL_GPIO_Init+0x9a>
 8000962:	2b02      	cmp	r3, #2
 8000964:	d804      	bhi.n	8000970 <HAL_GPIO_Init+0x50>
 8000966:	2b00      	cmp	r3, #0
 8000968:	d031      	beq.n	80009ce <HAL_GPIO_Init+0xae>
 800096a:	2b01      	cmp	r3, #1
 800096c:	d01c      	beq.n	80009a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800096e:	e048      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000970:	2b03      	cmp	r3, #3
 8000972:	d043      	beq.n	80009fc <HAL_GPIO_Init+0xdc>
 8000974:	2b11      	cmp	r3, #17
 8000976:	d01b      	beq.n	80009b0 <HAL_GPIO_Init+0x90>
          break;
 8000978:	e043      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800097a:	4a8f      	ldr	r2, [pc, #572]	; (8000bb8 <HAL_GPIO_Init+0x298>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d026      	beq.n	80009ce <HAL_GPIO_Init+0xae>
 8000980:	4a8d      	ldr	r2, [pc, #564]	; (8000bb8 <HAL_GPIO_Init+0x298>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d806      	bhi.n	8000994 <HAL_GPIO_Init+0x74>
 8000986:	4a8d      	ldr	r2, [pc, #564]	; (8000bbc <HAL_GPIO_Init+0x29c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d020      	beq.n	80009ce <HAL_GPIO_Init+0xae>
 800098c:	4a8c      	ldr	r2, [pc, #560]	; (8000bc0 <HAL_GPIO_Init+0x2a0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d01d      	beq.n	80009ce <HAL_GPIO_Init+0xae>
          break;
 8000992:	e036      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000994:	4a8b      	ldr	r2, [pc, #556]	; (8000bc4 <HAL_GPIO_Init+0x2a4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d019      	beq.n	80009ce <HAL_GPIO_Init+0xae>
 800099a:	4a8b      	ldr	r2, [pc, #556]	; (8000bc8 <HAL_GPIO_Init+0x2a8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d016      	beq.n	80009ce <HAL_GPIO_Init+0xae>
 80009a0:	4a8a      	ldr	r2, [pc, #552]	; (8000bcc <HAL_GPIO_Init+0x2ac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d013      	beq.n	80009ce <HAL_GPIO_Init+0xae>
          break;
 80009a6:	e02c      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e028      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	3304      	adds	r3, #4
 80009b6:	623b      	str	r3, [r7, #32]
          break;
 80009b8:	e023      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	3308      	adds	r3, #8
 80009c0:	623b      	str	r3, [r7, #32]
          break;
 80009c2:	e01e      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	330c      	adds	r3, #12
 80009ca:	623b      	str	r3, [r7, #32]
          break;
 80009cc:	e019      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d102      	bne.n	80009dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d6:	2304      	movs	r3, #4
 80009d8:	623b      	str	r3, [r7, #32]
          break;
 80009da:	e012      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d105      	bne.n	80009f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e4:	2308      	movs	r3, #8
 80009e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	69fa      	ldr	r2, [r7, #28]
 80009ec:	611a      	str	r2, [r3, #16]
          break;
 80009ee:	e008      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	615a      	str	r2, [r3, #20]
          break;
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	2bff      	cmp	r3, #255	; 0xff
 8000a06:	d801      	bhi.n	8000a0c <HAL_GPIO_Init+0xec>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	e001      	b.n	8000a10 <HAL_GPIO_Init+0xf0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	2bff      	cmp	r3, #255	; 0xff
 8000a16:	d802      	bhi.n	8000a1e <HAL_GPIO_Init+0xfe>
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	e002      	b.n	8000a24 <HAL_GPIO_Init+0x104>
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	3b08      	subs	r3, #8
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	401a      	ands	r2, r3
 8000a36:	6a39      	ldr	r1, [r7, #32]
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 80a2 	beq.w	8000b96 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <HAL_GPIO_Init+0x2b0>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a5e      	ldr	r2, [pc, #376]	; (8000bd0 <HAL_GPIO_Init+0x2b0>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b5c      	ldr	r3, [pc, #368]	; (8000bd0 <HAL_GPIO_Init+0x2b0>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a6a:	4a5a      	ldr	r2, [pc, #360]	; (8000bd4 <HAL_GPIO_Init+0x2b4>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3302      	adds	r3, #2
 8000a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	f003 0303 	and.w	r3, r3, #3
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	220f      	movs	r2, #15
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a51      	ldr	r2, [pc, #324]	; (8000bd8 <HAL_GPIO_Init+0x2b8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d01f      	beq.n	8000ad6 <HAL_GPIO_Init+0x1b6>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_GPIO_Init+0x2bc>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d019      	beq.n	8000ad2 <HAL_GPIO_Init+0x1b2>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4f      	ldr	r2, [pc, #316]	; (8000be0 <HAL_GPIO_Init+0x2c0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d013      	beq.n	8000ace <HAL_GPIO_Init+0x1ae>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	; (8000be4 <HAL_GPIO_Init+0x2c4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d00d      	beq.n	8000aca <HAL_GPIO_Init+0x1aa>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <HAL_GPIO_Init+0x2c8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d007      	beq.n	8000ac6 <HAL_GPIO_Init+0x1a6>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <HAL_GPIO_Init+0x2cc>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_GPIO_Init+0x1a2>
 8000abe:	2305      	movs	r3, #5
 8000ac0:	e00a      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	e008      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000aca:	2303      	movs	r3, #3
 8000acc:	e004      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <HAL_GPIO_Init+0x1b8>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ada:	f002 0203 	and.w	r2, r2, #3
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	4093      	lsls	r3, r2
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae8:	493a      	ldr	r1, [pc, #232]	; (8000bd4 <HAL_GPIO_Init+0x2b4>)
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b02:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	493a      	ldr	r1, [pc, #232]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b10:	4b37      	ldr	r3, [pc, #220]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4935      	ldr	r1, [pc, #212]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d006      	beq.n	8000b38 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	4930      	ldr	r1, [pc, #192]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	604b      	str	r3, [r1, #4]
 8000b36:	e006      	b.n	8000b46 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b38:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	492b      	ldr	r1, [pc, #172]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b52:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	4926      	ldr	r1, [pc, #152]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	608b      	str	r3, [r1, #8]
 8000b5e:	e006      	b.n	8000b6e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	4921      	ldr	r1, [pc, #132]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d006      	beq.n	8000b88 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	491c      	ldr	r1, [pc, #112]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60cb      	str	r3, [r1, #12]
 8000b86:	e006      	b.n	8000b96 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4917      	ldr	r1, [pc, #92]	; (8000bf0 <HAL_GPIO_Init+0x2d0>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	3301      	adds	r3, #1
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f47f aec4 	bne.w	8000934 <HAL_GPIO_Init+0x14>
  }
}
 8000bac:	bf00      	nop
 8000bae:	372c      	adds	r7, #44	; 0x2c
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	10210000 	.word	0x10210000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	10120000 	.word	0x10120000
 8000bc4:	10310000 	.word	0x10310000
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40011400 	.word	0x40011400
 8000be8:	40011800 	.word	0x40011800
 8000bec:	40011c00 	.word	0x40011c00
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e26c      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	f000 8087 	beq.w	8000d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c14:	4b92      	ldr	r3, [pc, #584]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 030c 	and.w	r3, r3, #12
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d00c      	beq.n	8000c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c20:	4b8f      	ldr	r3, [pc, #572]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 030c 	and.w	r3, r3, #12
 8000c28:	2b08      	cmp	r3, #8
 8000c2a:	d112      	bne.n	8000c52 <HAL_RCC_OscConfig+0x5e>
 8000c2c:	4b8c      	ldr	r3, [pc, #560]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c38:	d10b      	bne.n	8000c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3a:	4b89      	ldr	r3, [pc, #548]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d06c      	beq.n	8000d20 <HAL_RCC_OscConfig+0x12c>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d168      	bne.n	8000d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e246      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5a:	d106      	bne.n	8000c6a <HAL_RCC_OscConfig+0x76>
 8000c5c:	4b80      	ldr	r3, [pc, #512]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a7f      	ldr	r2, [pc, #508]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e02e      	b.n	8000cc8 <HAL_RCC_OscConfig+0xd4>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d10c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x98>
 8000c72:	4b7b      	ldr	r3, [pc, #492]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a7a      	ldr	r2, [pc, #488]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	4b78      	ldr	r3, [pc, #480]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a77      	ldr	r2, [pc, #476]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	e01d      	b.n	8000cc8 <HAL_RCC_OscConfig+0xd4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c94:	d10c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0xbc>
 8000c96:	4b72      	ldr	r3, [pc, #456]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a71      	ldr	r2, [pc, #452]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4b6f      	ldr	r3, [pc, #444]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a6e      	ldr	r2, [pc, #440]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e00b      	b.n	8000cc8 <HAL_RCC_OscConfig+0xd4>
 8000cb0:	4b6b      	ldr	r3, [pc, #428]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a6a      	ldr	r2, [pc, #424]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b68      	ldr	r3, [pc, #416]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a67      	ldr	r2, [pc, #412]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d013      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fd16 	bl	8000700 <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd8:	f7ff fd12 	bl	8000700 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b64      	cmp	r3, #100	; 0x64
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e1fa      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cea:	4b5d      	ldr	r3, [pc, #372]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f0      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xe4>
 8000cf6:	e014      	b.n	8000d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fd02 	bl	8000700 <HAL_GetTick>
 8000cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d00:	f7ff fcfe 	bl	8000700 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b64      	cmp	r3, #100	; 0x64
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e1e6      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d12:	4b53      	ldr	r3, [pc, #332]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f0      	bne.n	8000d00 <HAL_RCC_OscConfig+0x10c>
 8000d1e:	e000      	b.n	8000d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d063      	beq.n	8000df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d2e:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00b      	beq.n	8000d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d3a:	4b49      	ldr	r3, [pc, #292]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d11c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x18c>
 8000d46:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d116      	bne.n	8000d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d52:	4b43      	ldr	r3, [pc, #268]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d005      	beq.n	8000d6a <HAL_RCC_OscConfig+0x176>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	691b      	ldr	r3, [r3, #16]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d001      	beq.n	8000d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e1ba      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6a:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4939      	ldr	r1, [pc, #228]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7e:	e03a      	b.n	8000df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d020      	beq.n	8000dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d88:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fcb7 	bl	8000700 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d96:	f7ff fcb3 	bl	8000700 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e19b      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	4927      	ldr	r1, [pc, #156]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_RCC_OscConfig+0x270>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fc96 	bl	8000700 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fc92 	bl	8000700 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e17a      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f0      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d03a      	beq.n	8000e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d019      	beq.n	8000e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc76 	bl	8000700 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc72 	bl	8000700 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e15a      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f000 fada 	bl	80013f0 <RCC_Delay>
 8000e3c:	e01c      	b.n	8000e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_RCC_OscConfig+0x274>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e44:	f7ff fc5c 	bl	8000700 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4a:	e00f      	b.n	8000e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e4c:	f7ff fc58 	bl	8000700 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d908      	bls.n	8000e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e140      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000
 8000e64:	42420000 	.word	0x42420000
 8000e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6c:	4b9e      	ldr	r3, [pc, #632]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1e9      	bne.n	8000e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80a6 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8a:	4b97      	ldr	r3, [pc, #604]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10d      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b94      	ldr	r3, [pc, #592]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a93      	ldr	r2, [pc, #588]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b91      	ldr	r3, [pc, #580]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	4b8e      	ldr	r3, [pc, #568]	; (80010ec <HAL_RCC_OscConfig+0x4f8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d118      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ebe:	4b8b      	ldr	r3, [pc, #556]	; (80010ec <HAL_RCC_OscConfig+0x4f8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a8a      	ldr	r2, [pc, #552]	; (80010ec <HAL_RCC_OscConfig+0x4f8>)
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fc19 	bl	8000700 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed2:	f7ff fc15 	bl	8000700 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e0fd      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	4b81      	ldr	r3, [pc, #516]	; (80010ec <HAL_RCC_OscConfig+0x4f8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0f0      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x312>
 8000ef8:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a7a      	ldr	r2, [pc, #488]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	e02d      	b.n	8000f62 <HAL_RCC_OscConfig+0x36e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x334>
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	4a75      	ldr	r2, [pc, #468]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	f023 0301 	bic.w	r3, r3, #1
 8000f18:	6213      	str	r3, [r2, #32]
 8000f1a:	4b73      	ldr	r3, [pc, #460]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a72      	ldr	r2, [pc, #456]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	f023 0304 	bic.w	r3, r3, #4
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	e01c      	b.n	8000f62 <HAL_RCC_OscConfig+0x36e>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b05      	cmp	r3, #5
 8000f2e:	d10c      	bne.n	8000f4a <HAL_RCC_OscConfig+0x356>
 8000f30:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a6c      	ldr	r2, [pc, #432]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	4b6a      	ldr	r3, [pc, #424]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a69      	ldr	r2, [pc, #420]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e00b      	b.n	8000f62 <HAL_RCC_OscConfig+0x36e>
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a66      	ldr	r2, [pc, #408]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a63      	ldr	r2, [pc, #396]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d015      	beq.n	8000f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fbc9 	bl	8000700 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f72:	f7ff fbc5 	bl	8000700 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e0ab      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0ee      	beq.n	8000f72 <HAL_RCC_OscConfig+0x37e>
 8000f94:	e014      	b.n	8000fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f96:	f7ff fbb3 	bl	8000700 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9c:	e00a      	b.n	8000fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f9e:	f7ff fbaf 	bl	8000700 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e095      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1ee      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d105      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a47      	ldr	r2, [pc, #284]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 8081 	beq.w	80010de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fdc:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 030c 	and.w	r3, r3, #12
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d061      	beq.n	80010ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d146      	bne.n	800107e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_RCC_OscConfig+0x4fc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fb83 	bl	8000700 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fb7f 	bl	8000700 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e067      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d108      	bne.n	8001038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	492d      	ldr	r1, [pc, #180]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001038:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a19      	ldr	r1, [r3, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	430b      	orrs	r3, r1
 800104a:	4927      	ldr	r1, [pc, #156]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_RCC_OscConfig+0x4fc>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fb53 	bl	8000700 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fb4f 	bl	8000700 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e037      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x46a>
 800107c:	e02f      	b.n	80010de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_RCC_OscConfig+0x4fc>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fb3c 	bl	8000700 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fb38 	bl	8000700 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e020      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x498>
 80010aa:	e018      	b.n	80010de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e013      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d106      	bne.n	80010da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40007000 	.word	0x40007000
 80010f0:	42420060 	.word	0x42420060

080010f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0d0      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001108:	4b6a      	ldr	r3, [pc, #424]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d910      	bls.n	8001138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b67      	ldr	r3, [pc, #412]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f023 0207 	bic.w	r2, r3, #7
 800111e:	4965      	ldr	r1, [pc, #404]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d001      	beq.n	8001138 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0b8      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d020      	beq.n	8001186 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001150:	4b59      	ldr	r3, [pc, #356]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800115a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0308 	and.w	r3, r3, #8
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001168:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001172:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001174:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	494d      	ldr	r1, [pc, #308]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d040      	beq.n	8001214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d115      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e07f      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b2:	4b41      	ldr	r3, [pc, #260]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e073      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06b      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f023 0203 	bic.w	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4936      	ldr	r1, [pc, #216]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fa8c 	bl	8000700 <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff fa88 	bl	8000700 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e053      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 020c 	and.w	r2, r3, #12
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d1eb      	bne.n	80011ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d210      	bcs.n	8001244 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f023 0207 	bic.w	r2, r3, #7
 800122a:	4922      	ldr	r1, [pc, #136]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e032      	b.n	80012aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d008      	beq.n	8001262 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	4916      	ldr	r1, [pc, #88]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	490e      	ldr	r1, [pc, #56]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001282:	f000 f821 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 8001286:	4601      	mov	r1, r0
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_RCC_ClockConfig+0x1c8>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	fa21 f303 	lsr.w	r3, r1, r3
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1cc>)
 800129c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_RCC_ClockConfig+0x1d0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f9ea 	bl	800067c <HAL_InitTick>

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40022000 	.word	0x40022000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	08002614 	.word	0x08002614
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c8:	b490      	push	{r4, r7}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012d0:	1d3c      	adds	r4, r7, #4
 80012d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012d8:	4b28      	ldr	r3, [pc, #160]	; (800137c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d002      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x40>
 8001302:	2b08      	cmp	r3, #8
 8001304:	d003      	beq.n	800130e <HAL_RCC_GetSysClockFreq+0x46>
 8001306:	e02d      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_RCC_GetSysClockFreq+0xbc>)
 800130a:	623b      	str	r3, [r7, #32]
      break;
 800130c:	e02d      	b.n	800136a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	0c9b      	lsrs	r3, r3, #18
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800131a:	4413      	add	r3, r2
 800131c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001320:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_RCC_GetSysClockFreq+0xb8>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	0c5b      	lsrs	r3, r3, #17
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800133a:	4413      	add	r3, r2
 800133c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001340:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001346:	fb02 f203 	mul.w	r2, r2, r3
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
 8001352:	e004      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	623b      	str	r3, [r7, #32]
      break;
 8001362:	e002      	b.n	800136a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001366:	623b      	str	r3, [r7, #32]
      break;
 8001368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800136a:	6a3b      	ldr	r3, [r7, #32]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	08002600 	.word	0x08002600
 800137c:	08002610 	.word	0x08002610
 8001380:	40021000 	.word	0x40021000
 8001384:	007a1200 	.word	0x007a1200
 8001388:	003d0900 	.word	0x003d0900

0800138c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <HAL_RCC_GetHCLKFreq+0x10>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	20000000 	.word	0x20000000

080013a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a4:	f7ff fff2 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013a8:	4601      	mov	r1, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	08002624 	.word	0x08002624

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013cc:	f7ff ffde 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013d0:	4601      	mov	r1, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0adb      	lsrs	r3, r3, #11
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	08002624 	.word	0x08002624

080013f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <RCC_Delay+0x34>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <RCC_Delay+0x38>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0a5b      	lsrs	r3, r3, #9
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800140c:	bf00      	nop
  }
  while (Delay --);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	60fa      	str	r2, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f9      	bne.n	800140c <RCC_Delay+0x1c>
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000000 	.word	0x20000000
 8001428:	10624dd3 	.word	0x10624dd3

0800142c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e03f      	b.n	80014be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7fe ffd8 	bl	8000408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800146e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f905 	bl	8001680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b08a      	sub	sp, #40	; 0x28
 80014ca:	af02      	add	r7, sp, #8
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	d17c      	bne.n	80015e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_UART_Transmit+0x2c>
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e075      	b.n	80015e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_UART_Transmit+0x3e>
 8001500:	2302      	movs	r3, #2
 8001502:	e06e      	b.n	80015e2 <HAL_UART_Transmit+0x11c>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2221      	movs	r2, #33	; 0x21
 8001516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800151a:	f7ff f8f1 	bl	8000700 <HAL_GetTick>
 800151e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	88fa      	ldrh	r2, [r7, #6]
 800152a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001534:	d108      	bne.n	8001548 <HAL_UART_Transmit+0x82>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d104      	bne.n	8001548 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	e003      	b.n	8001550 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001558:	e02a      	b.n	80015b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f840 	bl	80015ea <UART_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e036      	b.n	80015e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10b      	bne.n	8001592 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001588:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	3302      	adds	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	e007      	b.n	80015a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1cf      	bne.n	800155a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f810 	bl	80015ea <UART_WaitOnFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e006      	b.n	80015e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80015e0:	2302      	movs	r3, #2
  }
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4613      	mov	r3, r2
 80015f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015fa:	e02c      	b.n	8001656 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001602:	d028      	beq.n	8001656 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <UART_WaitOnFlagUntilTimeout+0x30>
 800160a:	f7ff f879 	bl	8000700 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	429a      	cmp	r2, r3
 8001618:	d21d      	bcs.n	8001656 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001628:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2220      	movs	r2, #32
 8001646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e00f      	b.n	8001676 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4013      	ands	r3, r2
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	429a      	cmp	r2, r3
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	429a      	cmp	r2, r3
 8001672:	d0c3      	beq.n	80015fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016ba:	f023 030c 	bic.w	r3, r3, #12
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	68b9      	ldr	r1, [r7, #8]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <UART_SetConfig+0x114>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d103      	bne.n	80016f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016e8:	f7ff fe6e 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	e002      	b.n	80016f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016f0:	f7ff fe56 	bl	80013a0 <HAL_RCC_GetPCLK1Freq>
 80016f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	009a      	lsls	r2, r3, #2
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	fbb2 f3f3 	udiv	r3, r2, r3
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <UART_SetConfig+0x118>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	0119      	lsls	r1, r3, #4
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	009a      	lsls	r2, r3, #2
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fbb2 f2f3 	udiv	r2, r2, r3
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <UART_SetConfig+0x118>)
 800172e:	fba3 0302 	umull	r0, r3, r3, r2
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2064      	movs	r0, #100	; 0x64
 8001736:	fb00 f303 	mul.w	r3, r0, r3
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	3332      	adds	r3, #50	; 0x32
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <UART_SetConfig+0x118>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174c:	4419      	add	r1, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	009a      	lsls	r2, r3, #2
 8001758:	441a      	add	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fbb2 f2f3 	udiv	r2, r2, r3
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <UART_SetConfig+0x118>)
 8001766:	fba3 0302 	umull	r0, r3, r3, r2
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2064      	movs	r0, #100	; 0x64
 800176e:	fb00 f303 	mul.w	r3, r0, r3
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	3332      	adds	r3, #50	; 0x32
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <UART_SetConfig+0x118>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	095b      	lsrs	r3, r3, #5
 8001780:	f003 020f 	and.w	r2, r3, #15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	440a      	add	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40013800 	.word	0x40013800
 8001798:	51eb851f 	.word	0x51eb851f

0800179c <__errno>:
 800179c:	4b01      	ldr	r3, [pc, #4]	; (80017a4 <__errno+0x8>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	2000000c 	.word	0x2000000c

080017a8 <__libc_init_array>:
 80017a8:	b570      	push	{r4, r5, r6, lr}
 80017aa:	2500      	movs	r5, #0
 80017ac:	4e0c      	ldr	r6, [pc, #48]	; (80017e0 <__libc_init_array+0x38>)
 80017ae:	4c0d      	ldr	r4, [pc, #52]	; (80017e4 <__libc_init_array+0x3c>)
 80017b0:	1ba4      	subs	r4, r4, r6
 80017b2:	10a4      	asrs	r4, r4, #2
 80017b4:	42a5      	cmp	r5, r4
 80017b6:	d109      	bne.n	80017cc <__libc_init_array+0x24>
 80017b8:	f000 ff10 	bl	80025dc <_init>
 80017bc:	2500      	movs	r5, #0
 80017be:	4e0a      	ldr	r6, [pc, #40]	; (80017e8 <__libc_init_array+0x40>)
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <__libc_init_array+0x44>)
 80017c2:	1ba4      	subs	r4, r4, r6
 80017c4:	10a4      	asrs	r4, r4, #2
 80017c6:	42a5      	cmp	r5, r4
 80017c8:	d105      	bne.n	80017d6 <__libc_init_array+0x2e>
 80017ca:	bd70      	pop	{r4, r5, r6, pc}
 80017cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d0:	4798      	blx	r3
 80017d2:	3501      	adds	r5, #1
 80017d4:	e7ee      	b.n	80017b4 <__libc_init_array+0xc>
 80017d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017da:	4798      	blx	r3
 80017dc:	3501      	adds	r5, #1
 80017de:	e7f2      	b.n	80017c6 <__libc_init_array+0x1e>
 80017e0:	080026c4 	.word	0x080026c4
 80017e4:	080026c4 	.word	0x080026c4
 80017e8:	080026c4 	.word	0x080026c4
 80017ec:	080026c8 	.word	0x080026c8

080017f0 <memset>:
 80017f0:	4603      	mov	r3, r0
 80017f2:	4402      	add	r2, r0
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d100      	bne.n	80017fa <memset+0xa>
 80017f8:	4770      	bx	lr
 80017fa:	f803 1b01 	strb.w	r1, [r3], #1
 80017fe:	e7f9      	b.n	80017f4 <memset+0x4>

08001800 <iprintf>:
 8001800:	b40f      	push	{r0, r1, r2, r3}
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <iprintf+0x2c>)
 8001804:	b513      	push	{r0, r1, r4, lr}
 8001806:	681c      	ldr	r4, [r3, #0]
 8001808:	b124      	cbz	r4, 8001814 <iprintf+0x14>
 800180a:	69a3      	ldr	r3, [r4, #24]
 800180c:	b913      	cbnz	r3, 8001814 <iprintf+0x14>
 800180e:	4620      	mov	r0, r4
 8001810:	f000 f84e 	bl	80018b0 <__sinit>
 8001814:	ab05      	add	r3, sp, #20
 8001816:	9a04      	ldr	r2, [sp, #16]
 8001818:	68a1      	ldr	r1, [r4, #8]
 800181a:	4620      	mov	r0, r4
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	f000 f953 	bl	8001ac8 <_vfiprintf_r>
 8001822:	b002      	add	sp, #8
 8001824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001828:	b004      	add	sp, #16
 800182a:	4770      	bx	lr
 800182c:	2000000c 	.word	0x2000000c

08001830 <std>:
 8001830:	2300      	movs	r3, #0
 8001832:	b510      	push	{r4, lr}
 8001834:	4604      	mov	r4, r0
 8001836:	e9c0 3300 	strd	r3, r3, [r0]
 800183a:	6083      	str	r3, [r0, #8]
 800183c:	8181      	strh	r1, [r0, #12]
 800183e:	6643      	str	r3, [r0, #100]	; 0x64
 8001840:	81c2      	strh	r2, [r0, #14]
 8001842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001846:	6183      	str	r3, [r0, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	2208      	movs	r2, #8
 800184c:	305c      	adds	r0, #92	; 0x5c
 800184e:	f7ff ffcf 	bl	80017f0 <memset>
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <std+0x38>)
 8001854:	6224      	str	r4, [r4, #32]
 8001856:	6263      	str	r3, [r4, #36]	; 0x24
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <std+0x3c>)
 800185a:	62a3      	str	r3, [r4, #40]	; 0x28
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <std+0x40>)
 800185e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <std+0x44>)
 8001862:	6323      	str	r3, [r4, #48]	; 0x30
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	08002025 	.word	0x08002025
 800186c:	08002047 	.word	0x08002047
 8001870:	0800207f 	.word	0x0800207f
 8001874:	080020a3 	.word	0x080020a3

08001878 <_cleanup_r>:
 8001878:	4901      	ldr	r1, [pc, #4]	; (8001880 <_cleanup_r+0x8>)
 800187a:	f000 b885 	b.w	8001988 <_fwalk_reent>
 800187e:	bf00      	nop
 8001880:	0800237d 	.word	0x0800237d

08001884 <__sfmoreglue>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	2568      	movs	r5, #104	; 0x68
 8001888:	1e4a      	subs	r2, r1, #1
 800188a:	4355      	muls	r5, r2
 800188c:	460e      	mov	r6, r1
 800188e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001892:	f000 f897 	bl	80019c4 <_malloc_r>
 8001896:	4604      	mov	r4, r0
 8001898:	b140      	cbz	r0, 80018ac <__sfmoreglue+0x28>
 800189a:	2100      	movs	r1, #0
 800189c:	e9c0 1600 	strd	r1, r6, [r0]
 80018a0:	300c      	adds	r0, #12
 80018a2:	60a0      	str	r0, [r4, #8]
 80018a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018a8:	f7ff ffa2 	bl	80017f0 <memset>
 80018ac:	4620      	mov	r0, r4
 80018ae:	bd70      	pop	{r4, r5, r6, pc}

080018b0 <__sinit>:
 80018b0:	6983      	ldr	r3, [r0, #24]
 80018b2:	b510      	push	{r4, lr}
 80018b4:	4604      	mov	r4, r0
 80018b6:	bb33      	cbnz	r3, 8001906 <__sinit+0x56>
 80018b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80018bc:	6503      	str	r3, [r0, #80]	; 0x50
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <__sinit+0x58>)
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <__sinit+0x5c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6282      	str	r2, [r0, #40]	; 0x28
 80018c6:	4298      	cmp	r0, r3
 80018c8:	bf04      	itt	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	6183      	streq	r3, [r0, #24]
 80018ce:	f000 f81f 	bl	8001910 <__sfp>
 80018d2:	6060      	str	r0, [r4, #4]
 80018d4:	4620      	mov	r0, r4
 80018d6:	f000 f81b 	bl	8001910 <__sfp>
 80018da:	60a0      	str	r0, [r4, #8]
 80018dc:	4620      	mov	r0, r4
 80018de:	f000 f817 	bl	8001910 <__sfp>
 80018e2:	2200      	movs	r2, #0
 80018e4:	60e0      	str	r0, [r4, #12]
 80018e6:	2104      	movs	r1, #4
 80018e8:	6860      	ldr	r0, [r4, #4]
 80018ea:	f7ff ffa1 	bl	8001830 <std>
 80018ee:	2201      	movs	r2, #1
 80018f0:	2109      	movs	r1, #9
 80018f2:	68a0      	ldr	r0, [r4, #8]
 80018f4:	f7ff ff9c 	bl	8001830 <std>
 80018f8:	2202      	movs	r2, #2
 80018fa:	2112      	movs	r1, #18
 80018fc:	68e0      	ldr	r0, [r4, #12]
 80018fe:	f7ff ff97 	bl	8001830 <std>
 8001902:	2301      	movs	r3, #1
 8001904:	61a3      	str	r3, [r4, #24]
 8001906:	bd10      	pop	{r4, pc}
 8001908:	0800262c 	.word	0x0800262c
 800190c:	08001879 	.word	0x08001879

08001910 <__sfp>:
 8001910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <__sfp+0x70>)
 8001914:	4607      	mov	r7, r0
 8001916:	681e      	ldr	r6, [r3, #0]
 8001918:	69b3      	ldr	r3, [r6, #24]
 800191a:	b913      	cbnz	r3, 8001922 <__sfp+0x12>
 800191c:	4630      	mov	r0, r6
 800191e:	f7ff ffc7 	bl	80018b0 <__sinit>
 8001922:	3648      	adds	r6, #72	; 0x48
 8001924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001928:	3b01      	subs	r3, #1
 800192a:	d503      	bpl.n	8001934 <__sfp+0x24>
 800192c:	6833      	ldr	r3, [r6, #0]
 800192e:	b133      	cbz	r3, 800193e <__sfp+0x2e>
 8001930:	6836      	ldr	r6, [r6, #0]
 8001932:	e7f7      	b.n	8001924 <__sfp+0x14>
 8001934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001938:	b16d      	cbz	r5, 8001956 <__sfp+0x46>
 800193a:	3468      	adds	r4, #104	; 0x68
 800193c:	e7f4      	b.n	8001928 <__sfp+0x18>
 800193e:	2104      	movs	r1, #4
 8001940:	4638      	mov	r0, r7
 8001942:	f7ff ff9f 	bl	8001884 <__sfmoreglue>
 8001946:	6030      	str	r0, [r6, #0]
 8001948:	2800      	cmp	r0, #0
 800194a:	d1f1      	bne.n	8001930 <__sfp+0x20>
 800194c:	230c      	movs	r3, #12
 800194e:	4604      	mov	r4, r0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4620      	mov	r0, r4
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <__sfp+0x74>)
 8001958:	6665      	str	r5, [r4, #100]	; 0x64
 800195a:	e9c4 5500 	strd	r5, r5, [r4]
 800195e:	60a5      	str	r5, [r4, #8]
 8001960:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001964:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001968:	2208      	movs	r2, #8
 800196a:	4629      	mov	r1, r5
 800196c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001970:	f7ff ff3e 	bl	80017f0 <memset>
 8001974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800197c:	e7e9      	b.n	8001952 <__sfp+0x42>
 800197e:	bf00      	nop
 8001980:	0800262c 	.word	0x0800262c
 8001984:	ffff0001 	.word	0xffff0001

08001988 <_fwalk_reent>:
 8001988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800198c:	4680      	mov	r8, r0
 800198e:	4689      	mov	r9, r1
 8001990:	2600      	movs	r6, #0
 8001992:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001996:	b914      	cbnz	r4, 800199e <_fwalk_reent+0x16>
 8001998:	4630      	mov	r0, r6
 800199a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800199e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80019a2:	3f01      	subs	r7, #1
 80019a4:	d501      	bpl.n	80019aa <_fwalk_reent+0x22>
 80019a6:	6824      	ldr	r4, [r4, #0]
 80019a8:	e7f5      	b.n	8001996 <_fwalk_reent+0xe>
 80019aa:	89ab      	ldrh	r3, [r5, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d907      	bls.n	80019c0 <_fwalk_reent+0x38>
 80019b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019b4:	3301      	adds	r3, #1
 80019b6:	d003      	beq.n	80019c0 <_fwalk_reent+0x38>
 80019b8:	4629      	mov	r1, r5
 80019ba:	4640      	mov	r0, r8
 80019bc:	47c8      	blx	r9
 80019be:	4306      	orrs	r6, r0
 80019c0:	3568      	adds	r5, #104	; 0x68
 80019c2:	e7ee      	b.n	80019a2 <_fwalk_reent+0x1a>

080019c4 <_malloc_r>:
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	1ccd      	adds	r5, r1, #3
 80019c8:	f025 0503 	bic.w	r5, r5, #3
 80019cc:	3508      	adds	r5, #8
 80019ce:	2d0c      	cmp	r5, #12
 80019d0:	bf38      	it	cc
 80019d2:	250c      	movcc	r5, #12
 80019d4:	2d00      	cmp	r5, #0
 80019d6:	4606      	mov	r6, r0
 80019d8:	db01      	blt.n	80019de <_malloc_r+0x1a>
 80019da:	42a9      	cmp	r1, r5
 80019dc:	d903      	bls.n	80019e6 <_malloc_r+0x22>
 80019de:	230c      	movs	r3, #12
 80019e0:	6033      	str	r3, [r6, #0]
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
 80019e6:	f000 fd77 	bl	80024d8 <__malloc_lock>
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <_malloc_r+0xac>)
 80019ec:	6814      	ldr	r4, [r2, #0]
 80019ee:	4621      	mov	r1, r4
 80019f0:	b991      	cbnz	r1, 8001a18 <_malloc_r+0x54>
 80019f2:	4c20      	ldr	r4, [pc, #128]	; (8001a74 <_malloc_r+0xb0>)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	b91b      	cbnz	r3, 8001a00 <_malloc_r+0x3c>
 80019f8:	4630      	mov	r0, r6
 80019fa:	f000 fb03 	bl	8002004 <_sbrk_r>
 80019fe:	6020      	str	r0, [r4, #0]
 8001a00:	4629      	mov	r1, r5
 8001a02:	4630      	mov	r0, r6
 8001a04:	f000 fafe 	bl	8002004 <_sbrk_r>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	d124      	bne.n	8001a56 <_malloc_r+0x92>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	4630      	mov	r0, r6
 8001a10:	6033      	str	r3, [r6, #0]
 8001a12:	f000 fd62 	bl	80024da <__malloc_unlock>
 8001a16:	e7e4      	b.n	80019e2 <_malloc_r+0x1e>
 8001a18:	680b      	ldr	r3, [r1, #0]
 8001a1a:	1b5b      	subs	r3, r3, r5
 8001a1c:	d418      	bmi.n	8001a50 <_malloc_r+0x8c>
 8001a1e:	2b0b      	cmp	r3, #11
 8001a20:	d90f      	bls.n	8001a42 <_malloc_r+0x7e>
 8001a22:	600b      	str	r3, [r1, #0]
 8001a24:	18cc      	adds	r4, r1, r3
 8001a26:	50cd      	str	r5, [r1, r3]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f000 fd56 	bl	80024da <__malloc_unlock>
 8001a2e:	f104 000b 	add.w	r0, r4, #11
 8001a32:	1d23      	adds	r3, r4, #4
 8001a34:	f020 0007 	bic.w	r0, r0, #7
 8001a38:	1ac3      	subs	r3, r0, r3
 8001a3a:	d0d3      	beq.n	80019e4 <_malloc_r+0x20>
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	50e2      	str	r2, [r4, r3]
 8001a40:	e7d0      	b.n	80019e4 <_malloc_r+0x20>
 8001a42:	684b      	ldr	r3, [r1, #4]
 8001a44:	428c      	cmp	r4, r1
 8001a46:	bf16      	itet	ne
 8001a48:	6063      	strne	r3, [r4, #4]
 8001a4a:	6013      	streq	r3, [r2, #0]
 8001a4c:	460c      	movne	r4, r1
 8001a4e:	e7eb      	b.n	8001a28 <_malloc_r+0x64>
 8001a50:	460c      	mov	r4, r1
 8001a52:	6849      	ldr	r1, [r1, #4]
 8001a54:	e7cc      	b.n	80019f0 <_malloc_r+0x2c>
 8001a56:	1cc4      	adds	r4, r0, #3
 8001a58:	f024 0403 	bic.w	r4, r4, #3
 8001a5c:	42a0      	cmp	r0, r4
 8001a5e:	d005      	beq.n	8001a6c <_malloc_r+0xa8>
 8001a60:	1a21      	subs	r1, r4, r0
 8001a62:	4630      	mov	r0, r6
 8001a64:	f000 face 	bl	8002004 <_sbrk_r>
 8001a68:	3001      	adds	r0, #1
 8001a6a:	d0cf      	beq.n	8001a0c <_malloc_r+0x48>
 8001a6c:	6025      	str	r5, [r4, #0]
 8001a6e:	e7db      	b.n	8001a28 <_malloc_r+0x64>
 8001a70:	20000094 	.word	0x20000094
 8001a74:	20000098 	.word	0x20000098

08001a78 <__sfputc_r>:
 8001a78:	6893      	ldr	r3, [r2, #8]
 8001a7a:	b410      	push	{r4}
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	6093      	str	r3, [r2, #8]
 8001a82:	da07      	bge.n	8001a94 <__sfputc_r+0x1c>
 8001a84:	6994      	ldr	r4, [r2, #24]
 8001a86:	42a3      	cmp	r3, r4
 8001a88:	db01      	blt.n	8001a8e <__sfputc_r+0x16>
 8001a8a:	290a      	cmp	r1, #10
 8001a8c:	d102      	bne.n	8001a94 <__sfputc_r+0x1c>
 8001a8e:	bc10      	pop	{r4}
 8001a90:	f000 bb0c 	b.w	80020ac <__swbuf_r>
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	1c58      	adds	r0, r3, #1
 8001a98:	6010      	str	r0, [r2, #0]
 8001a9a:	7019      	strb	r1, [r3, #0]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	bc10      	pop	{r4}
 8001aa0:	4770      	bx	lr

08001aa2 <__sfputs_r>:
 8001aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa4:	4606      	mov	r6, r0
 8001aa6:	460f      	mov	r7, r1
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	18d5      	adds	r5, r2, r3
 8001aac:	42ac      	cmp	r4, r5
 8001aae:	d101      	bne.n	8001ab4 <__sfputs_r+0x12>
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e007      	b.n	8001ac4 <__sfputs_r+0x22>
 8001ab4:	463a      	mov	r2, r7
 8001ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001aba:	4630      	mov	r0, r6
 8001abc:	f7ff ffdc 	bl	8001a78 <__sfputc_r>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	d1f3      	bne.n	8001aac <__sfputs_r+0xa>
 8001ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ac8 <_vfiprintf_r>:
 8001ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001acc:	460c      	mov	r4, r1
 8001ace:	b09d      	sub	sp, #116	; 0x74
 8001ad0:	4617      	mov	r7, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4606      	mov	r6, r0
 8001ad6:	b118      	cbz	r0, 8001ae0 <_vfiprintf_r+0x18>
 8001ad8:	6983      	ldr	r3, [r0, #24]
 8001ada:	b90b      	cbnz	r3, 8001ae0 <_vfiprintf_r+0x18>
 8001adc:	f7ff fee8 	bl	80018b0 <__sinit>
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <_vfiprintf_r+0x20c>)
 8001ae2:	429c      	cmp	r4, r3
 8001ae4:	d158      	bne.n	8001b98 <_vfiprintf_r+0xd0>
 8001ae6:	6874      	ldr	r4, [r6, #4]
 8001ae8:	89a3      	ldrh	r3, [r4, #12]
 8001aea:	0718      	lsls	r0, r3, #28
 8001aec:	d55e      	bpl.n	8001bac <_vfiprintf_r+0xe4>
 8001aee:	6923      	ldr	r3, [r4, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d05b      	beq.n	8001bac <_vfiprintf_r+0xe4>
 8001af4:	2300      	movs	r3, #0
 8001af6:	9309      	str	r3, [sp, #36]	; 0x24
 8001af8:	2320      	movs	r3, #32
 8001afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001afe:	2330      	movs	r3, #48	; 0x30
 8001b00:	f04f 0b01 	mov.w	fp, #1
 8001b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b08:	9503      	str	r5, [sp, #12]
 8001b0a:	46b8      	mov	r8, r7
 8001b0c:	4645      	mov	r5, r8
 8001b0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001b12:	b10b      	cbz	r3, 8001b18 <_vfiprintf_r+0x50>
 8001b14:	2b25      	cmp	r3, #37	; 0x25
 8001b16:	d154      	bne.n	8001bc2 <_vfiprintf_r+0xfa>
 8001b18:	ebb8 0a07 	subs.w	sl, r8, r7
 8001b1c:	d00b      	beq.n	8001b36 <_vfiprintf_r+0x6e>
 8001b1e:	4653      	mov	r3, sl
 8001b20:	463a      	mov	r2, r7
 8001b22:	4621      	mov	r1, r4
 8001b24:	4630      	mov	r0, r6
 8001b26:	f7ff ffbc 	bl	8001aa2 <__sfputs_r>
 8001b2a:	3001      	adds	r0, #1
 8001b2c:	f000 80c2 	beq.w	8001cb4 <_vfiprintf_r+0x1ec>
 8001b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b32:	4453      	add	r3, sl
 8001b34:	9309      	str	r3, [sp, #36]	; 0x24
 8001b36:	f898 3000 	ldrb.w	r3, [r8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80ba 	beq.w	8001cb4 <_vfiprintf_r+0x1ec>
 8001b40:	2300      	movs	r3, #0
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b4a:	9304      	str	r3, [sp, #16]
 8001b4c:	9307      	str	r3, [sp, #28]
 8001b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b52:	931a      	str	r3, [sp, #104]	; 0x68
 8001b54:	46a8      	mov	r8, r5
 8001b56:	2205      	movs	r2, #5
 8001b58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001b5c:	485e      	ldr	r0, [pc, #376]	; (8001cd8 <_vfiprintf_r+0x210>)
 8001b5e:	f000 fcad 	bl	80024bc <memchr>
 8001b62:	9b04      	ldr	r3, [sp, #16]
 8001b64:	bb78      	cbnz	r0, 8001bc6 <_vfiprintf_r+0xfe>
 8001b66:	06d9      	lsls	r1, r3, #27
 8001b68:	bf44      	itt	mi
 8001b6a:	2220      	movmi	r2, #32
 8001b6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b70:	071a      	lsls	r2, r3, #28
 8001b72:	bf44      	itt	mi
 8001b74:	222b      	movmi	r2, #43	; 0x2b
 8001b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001b7a:	782a      	ldrb	r2, [r5, #0]
 8001b7c:	2a2a      	cmp	r2, #42	; 0x2a
 8001b7e:	d02a      	beq.n	8001bd6 <_vfiprintf_r+0x10e>
 8001b80:	46a8      	mov	r8, r5
 8001b82:	2000      	movs	r0, #0
 8001b84:	250a      	movs	r5, #10
 8001b86:	9a07      	ldr	r2, [sp, #28]
 8001b88:	4641      	mov	r1, r8
 8001b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b8e:	3b30      	subs	r3, #48	; 0x30
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d969      	bls.n	8001c68 <_vfiprintf_r+0x1a0>
 8001b94:	b360      	cbz	r0, 8001bf0 <_vfiprintf_r+0x128>
 8001b96:	e024      	b.n	8001be2 <_vfiprintf_r+0x11a>
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <_vfiprintf_r+0x214>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <_vfiprintf_r+0xda>
 8001b9e:	68b4      	ldr	r4, [r6, #8]
 8001ba0:	e7a2      	b.n	8001ae8 <_vfiprintf_r+0x20>
 8001ba2:	4b4f      	ldr	r3, [pc, #316]	; (8001ce0 <_vfiprintf_r+0x218>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	68f4      	ldreq	r4, [r6, #12]
 8001baa:	e79d      	b.n	8001ae8 <_vfiprintf_r+0x20>
 8001bac:	4621      	mov	r1, r4
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f000 fae0 	bl	8002174 <__swsetup_r>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d09d      	beq.n	8001af4 <_vfiprintf_r+0x2c>
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bbc:	b01d      	add	sp, #116	; 0x74
 8001bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc2:	46a8      	mov	r8, r5
 8001bc4:	e7a2      	b.n	8001b0c <_vfiprintf_r+0x44>
 8001bc6:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <_vfiprintf_r+0x210>)
 8001bc8:	4645      	mov	r5, r8
 8001bca:	1a80      	subs	r0, r0, r2
 8001bcc:	fa0b f000 	lsl.w	r0, fp, r0
 8001bd0:	4318      	orrs	r0, r3
 8001bd2:	9004      	str	r0, [sp, #16]
 8001bd4:	e7be      	b.n	8001b54 <_vfiprintf_r+0x8c>
 8001bd6:	9a03      	ldr	r2, [sp, #12]
 8001bd8:	1d11      	adds	r1, r2, #4
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	9103      	str	r1, [sp, #12]
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	db01      	blt.n	8001be6 <_vfiprintf_r+0x11e>
 8001be2:	9207      	str	r2, [sp, #28]
 8001be4:	e004      	b.n	8001bf0 <_vfiprintf_r+0x128>
 8001be6:	4252      	negs	r2, r2
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	9207      	str	r2, [sp, #28]
 8001bee:	9304      	str	r3, [sp, #16]
 8001bf0:	f898 3000 	ldrb.w	r3, [r8]
 8001bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8001bf6:	d10e      	bne.n	8001c16 <_vfiprintf_r+0x14e>
 8001bf8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8001bfe:	d138      	bne.n	8001c72 <_vfiprintf_r+0x1aa>
 8001c00:	9b03      	ldr	r3, [sp, #12]
 8001c02:	f108 0802 	add.w	r8, r8, #2
 8001c06:	1d1a      	adds	r2, r3, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	9203      	str	r2, [sp, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bfb8      	it	lt
 8001c10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001c14:	9305      	str	r3, [sp, #20]
 8001c16:	4d33      	ldr	r5, [pc, #204]	; (8001ce4 <_vfiprintf_r+0x21c>)
 8001c18:	2203      	movs	r2, #3
 8001c1a:	f898 1000 	ldrb.w	r1, [r8]
 8001c1e:	4628      	mov	r0, r5
 8001c20:	f000 fc4c 	bl	80024bc <memchr>
 8001c24:	b140      	cbz	r0, 8001c38 <_vfiprintf_r+0x170>
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	fa03 f000 	lsl.w	r0, r3, r0
 8001c2e:	9b04      	ldr	r3, [sp, #16]
 8001c30:	f108 0801 	add.w	r8, r8, #1
 8001c34:	4303      	orrs	r3, r0
 8001c36:	9304      	str	r3, [sp, #16]
 8001c38:	f898 1000 	ldrb.w	r1, [r8]
 8001c3c:	2206      	movs	r2, #6
 8001c3e:	482a      	ldr	r0, [pc, #168]	; (8001ce8 <_vfiprintf_r+0x220>)
 8001c40:	f108 0701 	add.w	r7, r8, #1
 8001c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c48:	f000 fc38 	bl	80024bc <memchr>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d037      	beq.n	8001cc0 <_vfiprintf_r+0x1f8>
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <_vfiprintf_r+0x224>)
 8001c52:	bb1b      	cbnz	r3, 8001c9c <_vfiprintf_r+0x1d4>
 8001c54:	9b03      	ldr	r3, [sp, #12]
 8001c56:	3307      	adds	r3, #7
 8001c58:	f023 0307 	bic.w	r3, r3, #7
 8001c5c:	3308      	adds	r3, #8
 8001c5e:	9303      	str	r3, [sp, #12]
 8001c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c62:	444b      	add	r3, r9
 8001c64:	9309      	str	r3, [sp, #36]	; 0x24
 8001c66:	e750      	b.n	8001b0a <_vfiprintf_r+0x42>
 8001c68:	fb05 3202 	mla	r2, r5, r2, r3
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	4688      	mov	r8, r1
 8001c70:	e78a      	b.n	8001b88 <_vfiprintf_r+0xc0>
 8001c72:	2300      	movs	r3, #0
 8001c74:	250a      	movs	r5, #10
 8001c76:	4619      	mov	r1, r3
 8001c78:	f108 0801 	add.w	r8, r8, #1
 8001c7c:	9305      	str	r3, [sp, #20]
 8001c7e:	4640      	mov	r0, r8
 8001c80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c84:	3a30      	subs	r2, #48	; 0x30
 8001c86:	2a09      	cmp	r2, #9
 8001c88:	d903      	bls.n	8001c92 <_vfiprintf_r+0x1ca>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0c3      	beq.n	8001c16 <_vfiprintf_r+0x14e>
 8001c8e:	9105      	str	r1, [sp, #20]
 8001c90:	e7c1      	b.n	8001c16 <_vfiprintf_r+0x14e>
 8001c92:	fb05 2101 	mla	r1, r5, r1, r2
 8001c96:	2301      	movs	r3, #1
 8001c98:	4680      	mov	r8, r0
 8001c9a:	e7f0      	b.n	8001c7e <_vfiprintf_r+0x1b6>
 8001c9c:	ab03      	add	r3, sp, #12
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_vfiprintf_r+0x228>)
 8001ca4:	a904      	add	r1, sp, #16
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f3af 8000 	nop.w
 8001cac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001cb0:	4681      	mov	r9, r0
 8001cb2:	d1d5      	bne.n	8001c60 <_vfiprintf_r+0x198>
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	065b      	lsls	r3, r3, #25
 8001cb8:	f53f af7e 	bmi.w	8001bb8 <_vfiprintf_r+0xf0>
 8001cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001cbe:	e77d      	b.n	8001bbc <_vfiprintf_r+0xf4>
 8001cc0:	ab03      	add	r3, sp, #12
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <_vfiprintf_r+0x228>)
 8001cc8:	a904      	add	r1, sp, #16
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f000 f888 	bl	8001de0 <_printf_i>
 8001cd0:	e7ec      	b.n	8001cac <_vfiprintf_r+0x1e4>
 8001cd2:	bf00      	nop
 8001cd4:	08002650 	.word	0x08002650
 8001cd8:	08002690 	.word	0x08002690
 8001cdc:	08002670 	.word	0x08002670
 8001ce0:	08002630 	.word	0x08002630
 8001ce4:	08002696 	.word	0x08002696
 8001ce8:	0800269a 	.word	0x0800269a
 8001cec:	00000000 	.word	0x00000000
 8001cf0:	08001aa3 	.word	0x08001aa3

08001cf4 <_printf_common>:
 8001cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cf8:	4691      	mov	r9, r2
 8001cfa:	461f      	mov	r7, r3
 8001cfc:	688a      	ldr	r2, [r1, #8]
 8001cfe:	690b      	ldr	r3, [r1, #16]
 8001d00:	4606      	mov	r6, r0
 8001d02:	4293      	cmp	r3, r2
 8001d04:	bfb8      	it	lt
 8001d06:	4613      	movlt	r3, r2
 8001d08:	f8c9 3000 	str.w	r3, [r9]
 8001d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d10:	460c      	mov	r4, r1
 8001d12:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d16:	b112      	cbz	r2, 8001d1e <_printf_common+0x2a>
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c9 3000 	str.w	r3, [r9]
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	0699      	lsls	r1, r3, #26
 8001d22:	bf42      	ittt	mi
 8001d24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d28:	3302      	addmi	r3, #2
 8001d2a:	f8c9 3000 	strmi.w	r3, [r9]
 8001d2e:	6825      	ldr	r5, [r4, #0]
 8001d30:	f015 0506 	ands.w	r5, r5, #6
 8001d34:	d107      	bne.n	8001d46 <_printf_common+0x52>
 8001d36:	f104 0a19 	add.w	sl, r4, #25
 8001d3a:	68e3      	ldr	r3, [r4, #12]
 8001d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	42ab      	cmp	r3, r5
 8001d44:	dc29      	bgt.n	8001d9a <_printf_common+0xa6>
 8001d46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d4a:	6822      	ldr	r2, [r4, #0]
 8001d4c:	3300      	adds	r3, #0
 8001d4e:	bf18      	it	ne
 8001d50:	2301      	movne	r3, #1
 8001d52:	0692      	lsls	r2, r2, #26
 8001d54:	d42e      	bmi.n	8001db4 <_printf_common+0xc0>
 8001d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d5a:	4639      	mov	r1, r7
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	47c0      	blx	r8
 8001d60:	3001      	adds	r0, #1
 8001d62:	d021      	beq.n	8001da8 <_printf_common+0xb4>
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	68e5      	ldr	r5, [r4, #12]
 8001d68:	f003 0306 	and.w	r3, r3, #6
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	bf18      	it	ne
 8001d70:	2500      	movne	r5, #0
 8001d72:	f8d9 2000 	ldr.w	r2, [r9]
 8001d76:	f04f 0900 	mov.w	r9, #0
 8001d7a:	bf08      	it	eq
 8001d7c:	1aad      	subeq	r5, r5, r2
 8001d7e:	68a3      	ldr	r3, [r4, #8]
 8001d80:	6922      	ldr	r2, [r4, #16]
 8001d82:	bf08      	it	eq
 8001d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bfc4      	itt	gt
 8001d8c:	1a9b      	subgt	r3, r3, r2
 8001d8e:	18ed      	addgt	r5, r5, r3
 8001d90:	341a      	adds	r4, #26
 8001d92:	454d      	cmp	r5, r9
 8001d94:	d11a      	bne.n	8001dcc <_printf_common+0xd8>
 8001d96:	2000      	movs	r0, #0
 8001d98:	e008      	b.n	8001dac <_printf_common+0xb8>
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4652      	mov	r2, sl
 8001d9e:	4639      	mov	r1, r7
 8001da0:	4630      	mov	r0, r6
 8001da2:	47c0      	blx	r8
 8001da4:	3001      	adds	r0, #1
 8001da6:	d103      	bne.n	8001db0 <_printf_common+0xbc>
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001db0:	3501      	adds	r5, #1
 8001db2:	e7c2      	b.n	8001d3a <_printf_common+0x46>
 8001db4:	2030      	movs	r0, #48	; 0x30
 8001db6:	18e1      	adds	r1, r4, r3
 8001db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001dc2:	4422      	add	r2, r4
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001dca:	e7c4      	b.n	8001d56 <_printf_common+0x62>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	4622      	mov	r2, r4
 8001dd0:	4639      	mov	r1, r7
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	47c0      	blx	r8
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	d0e6      	beq.n	8001da8 <_printf_common+0xb4>
 8001dda:	f109 0901 	add.w	r9, r9, #1
 8001dde:	e7d8      	b.n	8001d92 <_printf_common+0x9e>

08001de0 <_printf_i>:
 8001de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001de4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001de8:	460c      	mov	r4, r1
 8001dea:	7e09      	ldrb	r1, [r1, #24]
 8001dec:	b085      	sub	sp, #20
 8001dee:	296e      	cmp	r1, #110	; 0x6e
 8001df0:	4617      	mov	r7, r2
 8001df2:	4606      	mov	r6, r0
 8001df4:	4698      	mov	r8, r3
 8001df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001df8:	f000 80b3 	beq.w	8001f62 <_printf_i+0x182>
 8001dfc:	d822      	bhi.n	8001e44 <_printf_i+0x64>
 8001dfe:	2963      	cmp	r1, #99	; 0x63
 8001e00:	d036      	beq.n	8001e70 <_printf_i+0x90>
 8001e02:	d80a      	bhi.n	8001e1a <_printf_i+0x3a>
 8001e04:	2900      	cmp	r1, #0
 8001e06:	f000 80b9 	beq.w	8001f7c <_printf_i+0x19c>
 8001e0a:	2958      	cmp	r1, #88	; 0x58
 8001e0c:	f000 8083 	beq.w	8001f16 <_printf_i+0x136>
 8001e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e18:	e032      	b.n	8001e80 <_printf_i+0xa0>
 8001e1a:	2964      	cmp	r1, #100	; 0x64
 8001e1c:	d001      	beq.n	8001e22 <_printf_i+0x42>
 8001e1e:	2969      	cmp	r1, #105	; 0x69
 8001e20:	d1f6      	bne.n	8001e10 <_printf_i+0x30>
 8001e22:	6820      	ldr	r0, [r4, #0]
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	0605      	lsls	r5, r0, #24
 8001e28:	f103 0104 	add.w	r1, r3, #4
 8001e2c:	d52a      	bpl.n	8001e84 <_printf_i+0xa4>
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6011      	str	r1, [r2, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da03      	bge.n	8001e3e <_printf_i+0x5e>
 8001e36:	222d      	movs	r2, #45	; 0x2d
 8001e38:	425b      	negs	r3, r3
 8001e3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001e3e:	486f      	ldr	r0, [pc, #444]	; (8001ffc <_printf_i+0x21c>)
 8001e40:	220a      	movs	r2, #10
 8001e42:	e039      	b.n	8001eb8 <_printf_i+0xd8>
 8001e44:	2973      	cmp	r1, #115	; 0x73
 8001e46:	f000 809d 	beq.w	8001f84 <_printf_i+0x1a4>
 8001e4a:	d808      	bhi.n	8001e5e <_printf_i+0x7e>
 8001e4c:	296f      	cmp	r1, #111	; 0x6f
 8001e4e:	d020      	beq.n	8001e92 <_printf_i+0xb2>
 8001e50:	2970      	cmp	r1, #112	; 0x70
 8001e52:	d1dd      	bne.n	8001e10 <_printf_i+0x30>
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	f043 0320 	orr.w	r3, r3, #32
 8001e5a:	6023      	str	r3, [r4, #0]
 8001e5c:	e003      	b.n	8001e66 <_printf_i+0x86>
 8001e5e:	2975      	cmp	r1, #117	; 0x75
 8001e60:	d017      	beq.n	8001e92 <_printf_i+0xb2>
 8001e62:	2978      	cmp	r1, #120	; 0x78
 8001e64:	d1d4      	bne.n	8001e10 <_printf_i+0x30>
 8001e66:	2378      	movs	r3, #120	; 0x78
 8001e68:	4865      	ldr	r0, [pc, #404]	; (8002000 <_printf_i+0x220>)
 8001e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e6e:	e055      	b.n	8001f1c <_printf_i+0x13c>
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e76:	1d19      	adds	r1, r3, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6011      	str	r1, [r2, #0]
 8001e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e80:	2301      	movs	r3, #1
 8001e82:	e08c      	b.n	8001f9e <_printf_i+0x1be>
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	bf18      	it	ne
 8001e8e:	b21b      	sxthne	r3, r3
 8001e90:	e7cf      	b.n	8001e32 <_printf_i+0x52>
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	6825      	ldr	r5, [r4, #0]
 8001e96:	1d18      	adds	r0, r3, #4
 8001e98:	6010      	str	r0, [r2, #0]
 8001e9a:	0628      	lsls	r0, r5, #24
 8001e9c:	d501      	bpl.n	8001ea2 <_printf_i+0xc2>
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e002      	b.n	8001ea8 <_printf_i+0xc8>
 8001ea2:	0668      	lsls	r0, r5, #25
 8001ea4:	d5fb      	bpl.n	8001e9e <_printf_i+0xbe>
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	296f      	cmp	r1, #111	; 0x6f
 8001eaa:	bf14      	ite	ne
 8001eac:	220a      	movne	r2, #10
 8001eae:	2208      	moveq	r2, #8
 8001eb0:	4852      	ldr	r0, [pc, #328]	; (8001ffc <_printf_i+0x21c>)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001eb8:	6865      	ldr	r5, [r4, #4]
 8001eba:	2d00      	cmp	r5, #0
 8001ebc:	60a5      	str	r5, [r4, #8]
 8001ebe:	f2c0 8095 	blt.w	8001fec <_printf_i+0x20c>
 8001ec2:	6821      	ldr	r1, [r4, #0]
 8001ec4:	f021 0104 	bic.w	r1, r1, #4
 8001ec8:	6021      	str	r1, [r4, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13d      	bne.n	8001f4a <_printf_i+0x16a>
 8001ece:	2d00      	cmp	r5, #0
 8001ed0:	f040 808e 	bne.w	8001ff0 <_printf_i+0x210>
 8001ed4:	4665      	mov	r5, ip
 8001ed6:	2a08      	cmp	r2, #8
 8001ed8:	d10b      	bne.n	8001ef2 <_printf_i+0x112>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	07db      	lsls	r3, r3, #31
 8001ede:	d508      	bpl.n	8001ef2 <_printf_i+0x112>
 8001ee0:	6923      	ldr	r3, [r4, #16]
 8001ee2:	6862      	ldr	r2, [r4, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	bfde      	ittt	le
 8001ee8:	2330      	movle	r3, #48	; 0x30
 8001eea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001eee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001ef2:	ebac 0305 	sub.w	r3, ip, r5
 8001ef6:	6123      	str	r3, [r4, #16]
 8001ef8:	f8cd 8000 	str.w	r8, [sp]
 8001efc:	463b      	mov	r3, r7
 8001efe:	aa03      	add	r2, sp, #12
 8001f00:	4621      	mov	r1, r4
 8001f02:	4630      	mov	r0, r6
 8001f04:	f7ff fef6 	bl	8001cf4 <_printf_common>
 8001f08:	3001      	adds	r0, #1
 8001f0a:	d14d      	bne.n	8001fa8 <_printf_i+0x1c8>
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f10:	b005      	add	sp, #20
 8001f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f16:	4839      	ldr	r0, [pc, #228]	; (8001ffc <_printf_i+0x21c>)
 8001f18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	6821      	ldr	r1, [r4, #0]
 8001f20:	1d1d      	adds	r5, r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6015      	str	r5, [r2, #0]
 8001f26:	060a      	lsls	r2, r1, #24
 8001f28:	d50b      	bpl.n	8001f42 <_printf_i+0x162>
 8001f2a:	07ca      	lsls	r2, r1, #31
 8001f2c:	bf44      	itt	mi
 8001f2e:	f041 0120 	orrmi.w	r1, r1, #32
 8001f32:	6021      	strmi	r1, [r4, #0]
 8001f34:	b91b      	cbnz	r3, 8001f3e <_printf_i+0x15e>
 8001f36:	6822      	ldr	r2, [r4, #0]
 8001f38:	f022 0220 	bic.w	r2, r2, #32
 8001f3c:	6022      	str	r2, [r4, #0]
 8001f3e:	2210      	movs	r2, #16
 8001f40:	e7b7      	b.n	8001eb2 <_printf_i+0xd2>
 8001f42:	064d      	lsls	r5, r1, #25
 8001f44:	bf48      	it	mi
 8001f46:	b29b      	uxthmi	r3, r3
 8001f48:	e7ef      	b.n	8001f2a <_printf_i+0x14a>
 8001f4a:	4665      	mov	r5, ip
 8001f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f50:	fb02 3311 	mls	r3, r2, r1, r3
 8001f54:	5cc3      	ldrb	r3, [r0, r3]
 8001f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	2900      	cmp	r1, #0
 8001f5e:	d1f5      	bne.n	8001f4c <_printf_i+0x16c>
 8001f60:	e7b9      	b.n	8001ed6 <_printf_i+0xf6>
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	6825      	ldr	r5, [r4, #0]
 8001f66:	1d18      	adds	r0, r3, #4
 8001f68:	6961      	ldr	r1, [r4, #20]
 8001f6a:	6010      	str	r0, [r2, #0]
 8001f6c:	0628      	lsls	r0, r5, #24
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	d501      	bpl.n	8001f76 <_printf_i+0x196>
 8001f72:	6019      	str	r1, [r3, #0]
 8001f74:	e002      	b.n	8001f7c <_printf_i+0x19c>
 8001f76:	066a      	lsls	r2, r5, #25
 8001f78:	d5fb      	bpl.n	8001f72 <_printf_i+0x192>
 8001f7a:	8019      	strh	r1, [r3, #0]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	4665      	mov	r5, ip
 8001f80:	6123      	str	r3, [r4, #16]
 8001f82:	e7b9      	b.n	8001ef8 <_printf_i+0x118>
 8001f84:	6813      	ldr	r3, [r2, #0]
 8001f86:	1d19      	adds	r1, r3, #4
 8001f88:	6011      	str	r1, [r2, #0]
 8001f8a:	681d      	ldr	r5, [r3, #0]
 8001f8c:	6862      	ldr	r2, [r4, #4]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4628      	mov	r0, r5
 8001f92:	f000 fa93 	bl	80024bc <memchr>
 8001f96:	b108      	cbz	r0, 8001f9c <_printf_i+0x1bc>
 8001f98:	1b40      	subs	r0, r0, r5
 8001f9a:	6060      	str	r0, [r4, #4]
 8001f9c:	6863      	ldr	r3, [r4, #4]
 8001f9e:	6123      	str	r3, [r4, #16]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fa6:	e7a7      	b.n	8001ef8 <_printf_i+0x118>
 8001fa8:	6923      	ldr	r3, [r4, #16]
 8001faa:	462a      	mov	r2, r5
 8001fac:	4639      	mov	r1, r7
 8001fae:	4630      	mov	r0, r6
 8001fb0:	47c0      	blx	r8
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d0aa      	beq.n	8001f0c <_printf_i+0x12c>
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	079b      	lsls	r3, r3, #30
 8001fba:	d413      	bmi.n	8001fe4 <_printf_i+0x204>
 8001fbc:	68e0      	ldr	r0, [r4, #12]
 8001fbe:	9b03      	ldr	r3, [sp, #12]
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	bfb8      	it	lt
 8001fc4:	4618      	movlt	r0, r3
 8001fc6:	e7a3      	b.n	8001f10 <_printf_i+0x130>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	464a      	mov	r2, r9
 8001fcc:	4639      	mov	r1, r7
 8001fce:	4630      	mov	r0, r6
 8001fd0:	47c0      	blx	r8
 8001fd2:	3001      	adds	r0, #1
 8001fd4:	d09a      	beq.n	8001f0c <_printf_i+0x12c>
 8001fd6:	3501      	adds	r5, #1
 8001fd8:	68e3      	ldr	r3, [r4, #12]
 8001fda:	9a03      	ldr	r2, [sp, #12]
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	dcf2      	bgt.n	8001fc8 <_printf_i+0x1e8>
 8001fe2:	e7eb      	b.n	8001fbc <_printf_i+0x1dc>
 8001fe4:	2500      	movs	r5, #0
 8001fe6:	f104 0919 	add.w	r9, r4, #25
 8001fea:	e7f5      	b.n	8001fd8 <_printf_i+0x1f8>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ac      	bne.n	8001f4a <_printf_i+0x16a>
 8001ff0:	7803      	ldrb	r3, [r0, #0]
 8001ff2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ff6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ffa:	e76c      	b.n	8001ed6 <_printf_i+0xf6>
 8001ffc:	080026a1 	.word	0x080026a1
 8002000:	080026b2 	.word	0x080026b2

08002004 <_sbrk_r>:
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	2300      	movs	r3, #0
 8002008:	4c05      	ldr	r4, [pc, #20]	; (8002020 <_sbrk_r+0x1c>)
 800200a:	4605      	mov	r5, r0
 800200c:	4608      	mov	r0, r1
 800200e:	6023      	str	r3, [r4, #0]
 8002010:	f7fe fabc 	bl	800058c <_sbrk>
 8002014:	1c43      	adds	r3, r0, #1
 8002016:	d102      	bne.n	800201e <_sbrk_r+0x1a>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	b103      	cbz	r3, 800201e <_sbrk_r+0x1a>
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	bd38      	pop	{r3, r4, r5, pc}
 8002020:	200000e0 	.word	0x200000e0

08002024 <__sread>:
 8002024:	b510      	push	{r4, lr}
 8002026:	460c      	mov	r4, r1
 8002028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202c:	f000 faa2 	bl	8002574 <_read_r>
 8002030:	2800      	cmp	r0, #0
 8002032:	bfab      	itete	ge
 8002034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002036:	89a3      	ldrhlt	r3, [r4, #12]
 8002038:	181b      	addge	r3, r3, r0
 800203a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800203e:	bfac      	ite	ge
 8002040:	6563      	strge	r3, [r4, #84]	; 0x54
 8002042:	81a3      	strhlt	r3, [r4, #12]
 8002044:	bd10      	pop	{r4, pc}

08002046 <__swrite>:
 8002046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800204a:	461f      	mov	r7, r3
 800204c:	898b      	ldrh	r3, [r1, #12]
 800204e:	4605      	mov	r5, r0
 8002050:	05db      	lsls	r3, r3, #23
 8002052:	460c      	mov	r4, r1
 8002054:	4616      	mov	r6, r2
 8002056:	d505      	bpl.n	8002064 <__swrite+0x1e>
 8002058:	2302      	movs	r3, #2
 800205a:	2200      	movs	r2, #0
 800205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002060:	f000 f9b6 	bl	80023d0 <_lseek_r>
 8002064:	89a3      	ldrh	r3, [r4, #12]
 8002066:	4632      	mov	r2, r6
 8002068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800206c:	81a3      	strh	r3, [r4, #12]
 800206e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002072:	463b      	mov	r3, r7
 8002074:	4628      	mov	r0, r5
 8002076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800207a:	f000 b869 	b.w	8002150 <_write_r>

0800207e <__sseek>:
 800207e:	b510      	push	{r4, lr}
 8002080:	460c      	mov	r4, r1
 8002082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002086:	f000 f9a3 	bl	80023d0 <_lseek_r>
 800208a:	1c43      	adds	r3, r0, #1
 800208c:	89a3      	ldrh	r3, [r4, #12]
 800208e:	bf15      	itete	ne
 8002090:	6560      	strne	r0, [r4, #84]	; 0x54
 8002092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800209a:	81a3      	strheq	r3, [r4, #12]
 800209c:	bf18      	it	ne
 800209e:	81a3      	strhne	r3, [r4, #12]
 80020a0:	bd10      	pop	{r4, pc}

080020a2 <__sclose>:
 80020a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a6:	f000 b8d3 	b.w	8002250 <_close_r>
	...

080020ac <__swbuf_r>:
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ae:	460e      	mov	r6, r1
 80020b0:	4614      	mov	r4, r2
 80020b2:	4605      	mov	r5, r0
 80020b4:	b118      	cbz	r0, 80020be <__swbuf_r+0x12>
 80020b6:	6983      	ldr	r3, [r0, #24]
 80020b8:	b90b      	cbnz	r3, 80020be <__swbuf_r+0x12>
 80020ba:	f7ff fbf9 	bl	80018b0 <__sinit>
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <__swbuf_r+0x98>)
 80020c0:	429c      	cmp	r4, r3
 80020c2:	d12a      	bne.n	800211a <__swbuf_r+0x6e>
 80020c4:	686c      	ldr	r4, [r5, #4]
 80020c6:	69a3      	ldr	r3, [r4, #24]
 80020c8:	60a3      	str	r3, [r4, #8]
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	071a      	lsls	r2, r3, #28
 80020ce:	d52e      	bpl.n	800212e <__swbuf_r+0x82>
 80020d0:	6923      	ldr	r3, [r4, #16]
 80020d2:	b363      	cbz	r3, 800212e <__swbuf_r+0x82>
 80020d4:	6923      	ldr	r3, [r4, #16]
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	b2f6      	uxtb	r6, r6
 80020da:	1ac0      	subs	r0, r0, r3
 80020dc:	6963      	ldr	r3, [r4, #20]
 80020de:	4637      	mov	r7, r6
 80020e0:	4283      	cmp	r3, r0
 80020e2:	dc04      	bgt.n	80020ee <__swbuf_r+0x42>
 80020e4:	4621      	mov	r1, r4
 80020e6:	4628      	mov	r0, r5
 80020e8:	f000 f948 	bl	800237c <_fflush_r>
 80020ec:	bb28      	cbnz	r0, 800213a <__swbuf_r+0x8e>
 80020ee:	68a3      	ldr	r3, [r4, #8]
 80020f0:	3001      	adds	r0, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	60a3      	str	r3, [r4, #8]
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	6022      	str	r2, [r4, #0]
 80020fc:	701e      	strb	r6, [r3, #0]
 80020fe:	6963      	ldr	r3, [r4, #20]
 8002100:	4283      	cmp	r3, r0
 8002102:	d004      	beq.n	800210e <__swbuf_r+0x62>
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	07db      	lsls	r3, r3, #31
 8002108:	d519      	bpl.n	800213e <__swbuf_r+0x92>
 800210a:	2e0a      	cmp	r6, #10
 800210c:	d117      	bne.n	800213e <__swbuf_r+0x92>
 800210e:	4621      	mov	r1, r4
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f933 	bl	800237c <_fflush_r>
 8002116:	b190      	cbz	r0, 800213e <__swbuf_r+0x92>
 8002118:	e00f      	b.n	800213a <__swbuf_r+0x8e>
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <__swbuf_r+0x9c>)
 800211c:	429c      	cmp	r4, r3
 800211e:	d101      	bne.n	8002124 <__swbuf_r+0x78>
 8002120:	68ac      	ldr	r4, [r5, #8]
 8002122:	e7d0      	b.n	80020c6 <__swbuf_r+0x1a>
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <__swbuf_r+0xa0>)
 8002126:	429c      	cmp	r4, r3
 8002128:	bf08      	it	eq
 800212a:	68ec      	ldreq	r4, [r5, #12]
 800212c:	e7cb      	b.n	80020c6 <__swbuf_r+0x1a>
 800212e:	4621      	mov	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	f000 f81f 	bl	8002174 <__swsetup_r>
 8002136:	2800      	cmp	r0, #0
 8002138:	d0cc      	beq.n	80020d4 <__swbuf_r+0x28>
 800213a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800213e:	4638      	mov	r0, r7
 8002140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002142:	bf00      	nop
 8002144:	08002650 	.word	0x08002650
 8002148:	08002670 	.word	0x08002670
 800214c:	08002630 	.word	0x08002630

08002150 <_write_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	4605      	mov	r5, r0
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	2200      	movs	r2, #0
 800215a:	4c05      	ldr	r4, [pc, #20]	; (8002170 <_write_r+0x20>)
 800215c:	6022      	str	r2, [r4, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f7fe f860 	bl	8000224 <_write>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d102      	bne.n	800216e <_write_r+0x1e>
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	b103      	cbz	r3, 800216e <_write_r+0x1e>
 800216c:	602b      	str	r3, [r5, #0]
 800216e:	bd38      	pop	{r3, r4, r5, pc}
 8002170:	200000e0 	.word	0x200000e0

08002174 <__swsetup_r>:
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <__swsetup_r+0xcc>)
 8002176:	b570      	push	{r4, r5, r6, lr}
 8002178:	681d      	ldr	r5, [r3, #0]
 800217a:	4606      	mov	r6, r0
 800217c:	460c      	mov	r4, r1
 800217e:	b125      	cbz	r5, 800218a <__swsetup_r+0x16>
 8002180:	69ab      	ldr	r3, [r5, #24]
 8002182:	b913      	cbnz	r3, 800218a <__swsetup_r+0x16>
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff fb93 	bl	80018b0 <__sinit>
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <__swsetup_r+0xd0>)
 800218c:	429c      	cmp	r4, r3
 800218e:	d10f      	bne.n	80021b0 <__swsetup_r+0x3c>
 8002190:	686c      	ldr	r4, [r5, #4]
 8002192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002196:	b29a      	uxth	r2, r3
 8002198:	0715      	lsls	r5, r2, #28
 800219a:	d42c      	bmi.n	80021f6 <__swsetup_r+0x82>
 800219c:	06d0      	lsls	r0, r2, #27
 800219e:	d411      	bmi.n	80021c4 <__swsetup_r+0x50>
 80021a0:	2209      	movs	r2, #9
 80021a2:	6032      	str	r2, [r6, #0]
 80021a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ae:	e03e      	b.n	800222e <__swsetup_r+0xba>
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <__swsetup_r+0xd4>)
 80021b2:	429c      	cmp	r4, r3
 80021b4:	d101      	bne.n	80021ba <__swsetup_r+0x46>
 80021b6:	68ac      	ldr	r4, [r5, #8]
 80021b8:	e7eb      	b.n	8002192 <__swsetup_r+0x1e>
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <__swsetup_r+0xd8>)
 80021bc:	429c      	cmp	r4, r3
 80021be:	bf08      	it	eq
 80021c0:	68ec      	ldreq	r4, [r5, #12]
 80021c2:	e7e6      	b.n	8002192 <__swsetup_r+0x1e>
 80021c4:	0751      	lsls	r1, r2, #29
 80021c6:	d512      	bpl.n	80021ee <__swsetup_r+0x7a>
 80021c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ca:	b141      	cbz	r1, 80021de <__swsetup_r+0x6a>
 80021cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021d0:	4299      	cmp	r1, r3
 80021d2:	d002      	beq.n	80021da <__swsetup_r+0x66>
 80021d4:	4630      	mov	r0, r6
 80021d6:	f000 f981 	bl	80024dc <_free_r>
 80021da:	2300      	movs	r3, #0
 80021dc:	6363      	str	r3, [r4, #52]	; 0x34
 80021de:	89a3      	ldrh	r3, [r4, #12]
 80021e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021e4:	81a3      	strh	r3, [r4, #12]
 80021e6:	2300      	movs	r3, #0
 80021e8:	6063      	str	r3, [r4, #4]
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	89a3      	ldrh	r3, [r4, #12]
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	81a3      	strh	r3, [r4, #12]
 80021f6:	6923      	ldr	r3, [r4, #16]
 80021f8:	b94b      	cbnz	r3, 800220e <__swsetup_r+0x9a>
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002204:	d003      	beq.n	800220e <__swsetup_r+0x9a>
 8002206:	4621      	mov	r1, r4
 8002208:	4630      	mov	r0, r6
 800220a:	f000 f917 	bl	800243c <__smakebuf_r>
 800220e:	89a2      	ldrh	r2, [r4, #12]
 8002210:	f012 0301 	ands.w	r3, r2, #1
 8002214:	d00c      	beq.n	8002230 <__swsetup_r+0xbc>
 8002216:	2300      	movs	r3, #0
 8002218:	60a3      	str	r3, [r4, #8]
 800221a:	6963      	ldr	r3, [r4, #20]
 800221c:	425b      	negs	r3, r3
 800221e:	61a3      	str	r3, [r4, #24]
 8002220:	6923      	ldr	r3, [r4, #16]
 8002222:	b953      	cbnz	r3, 800223a <__swsetup_r+0xc6>
 8002224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002228:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800222c:	d1ba      	bne.n	80021a4 <__swsetup_r+0x30>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	0792      	lsls	r2, r2, #30
 8002232:	bf58      	it	pl
 8002234:	6963      	ldrpl	r3, [r4, #20]
 8002236:	60a3      	str	r3, [r4, #8]
 8002238:	e7f2      	b.n	8002220 <__swsetup_r+0xac>
 800223a:	2000      	movs	r0, #0
 800223c:	e7f7      	b.n	800222e <__swsetup_r+0xba>
 800223e:	bf00      	nop
 8002240:	2000000c 	.word	0x2000000c
 8002244:	08002650 	.word	0x08002650
 8002248:	08002670 	.word	0x08002670
 800224c:	08002630 	.word	0x08002630

08002250 <_close_r>:
 8002250:	b538      	push	{r3, r4, r5, lr}
 8002252:	2300      	movs	r3, #0
 8002254:	4c05      	ldr	r4, [pc, #20]	; (800226c <_close_r+0x1c>)
 8002256:	4605      	mov	r5, r0
 8002258:	4608      	mov	r0, r1
 800225a:	6023      	str	r3, [r4, #0]
 800225c:	f7fe f965 	bl	800052a <_close>
 8002260:	1c43      	adds	r3, r0, #1
 8002262:	d102      	bne.n	800226a <_close_r+0x1a>
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	b103      	cbz	r3, 800226a <_close_r+0x1a>
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	200000e0 	.word	0x200000e0

08002270 <__sflush_r>:
 8002270:	898a      	ldrh	r2, [r1, #12]
 8002272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002276:	4605      	mov	r5, r0
 8002278:	0710      	lsls	r0, r2, #28
 800227a:	460c      	mov	r4, r1
 800227c:	d458      	bmi.n	8002330 <__sflush_r+0xc0>
 800227e:	684b      	ldr	r3, [r1, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	dc05      	bgt.n	8002290 <__sflush_r+0x20>
 8002284:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	dc02      	bgt.n	8002290 <__sflush_r+0x20>
 800228a:	2000      	movs	r0, #0
 800228c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002292:	2e00      	cmp	r6, #0
 8002294:	d0f9      	beq.n	800228a <__sflush_r+0x1a>
 8002296:	2300      	movs	r3, #0
 8002298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800229c:	682f      	ldr	r7, [r5, #0]
 800229e:	6a21      	ldr	r1, [r4, #32]
 80022a0:	602b      	str	r3, [r5, #0]
 80022a2:	d032      	beq.n	800230a <__sflush_r+0x9a>
 80022a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80022a6:	89a3      	ldrh	r3, [r4, #12]
 80022a8:	075a      	lsls	r2, r3, #29
 80022aa:	d505      	bpl.n	80022b8 <__sflush_r+0x48>
 80022ac:	6863      	ldr	r3, [r4, #4]
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022b2:	b10b      	cbz	r3, 80022b8 <__sflush_r+0x48>
 80022b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022b6:	1ac0      	subs	r0, r0, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	4602      	mov	r2, r0
 80022bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022be:	6a21      	ldr	r1, [r4, #32]
 80022c0:	4628      	mov	r0, r5
 80022c2:	47b0      	blx	r6
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	d106      	bne.n	80022d8 <__sflush_r+0x68>
 80022ca:	6829      	ldr	r1, [r5, #0]
 80022cc:	291d      	cmp	r1, #29
 80022ce:	d848      	bhi.n	8002362 <__sflush_r+0xf2>
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <__sflush_r+0x108>)
 80022d2:	40ca      	lsrs	r2, r1
 80022d4:	07d6      	lsls	r6, r2, #31
 80022d6:	d544      	bpl.n	8002362 <__sflush_r+0xf2>
 80022d8:	2200      	movs	r2, #0
 80022da:	6062      	str	r2, [r4, #4]
 80022dc:	6922      	ldr	r2, [r4, #16]
 80022de:	04d9      	lsls	r1, r3, #19
 80022e0:	6022      	str	r2, [r4, #0]
 80022e2:	d504      	bpl.n	80022ee <__sflush_r+0x7e>
 80022e4:	1c42      	adds	r2, r0, #1
 80022e6:	d101      	bne.n	80022ec <__sflush_r+0x7c>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b903      	cbnz	r3, 80022ee <__sflush_r+0x7e>
 80022ec:	6560      	str	r0, [r4, #84]	; 0x54
 80022ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022f0:	602f      	str	r7, [r5, #0]
 80022f2:	2900      	cmp	r1, #0
 80022f4:	d0c9      	beq.n	800228a <__sflush_r+0x1a>
 80022f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022fa:	4299      	cmp	r1, r3
 80022fc:	d002      	beq.n	8002304 <__sflush_r+0x94>
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 f8ec 	bl	80024dc <_free_r>
 8002304:	2000      	movs	r0, #0
 8002306:	6360      	str	r0, [r4, #52]	; 0x34
 8002308:	e7c0      	b.n	800228c <__sflush_r+0x1c>
 800230a:	2301      	movs	r3, #1
 800230c:	4628      	mov	r0, r5
 800230e:	47b0      	blx	r6
 8002310:	1c41      	adds	r1, r0, #1
 8002312:	d1c8      	bne.n	80022a6 <__sflush_r+0x36>
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0c5      	beq.n	80022a6 <__sflush_r+0x36>
 800231a:	2b1d      	cmp	r3, #29
 800231c:	d001      	beq.n	8002322 <__sflush_r+0xb2>
 800231e:	2b16      	cmp	r3, #22
 8002320:	d101      	bne.n	8002326 <__sflush_r+0xb6>
 8002322:	602f      	str	r7, [r5, #0]
 8002324:	e7b1      	b.n	800228a <__sflush_r+0x1a>
 8002326:	89a3      	ldrh	r3, [r4, #12]
 8002328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	e7ad      	b.n	800228c <__sflush_r+0x1c>
 8002330:	690f      	ldr	r7, [r1, #16]
 8002332:	2f00      	cmp	r7, #0
 8002334:	d0a9      	beq.n	800228a <__sflush_r+0x1a>
 8002336:	0793      	lsls	r3, r2, #30
 8002338:	bf18      	it	ne
 800233a:	2300      	movne	r3, #0
 800233c:	680e      	ldr	r6, [r1, #0]
 800233e:	bf08      	it	eq
 8002340:	694b      	ldreq	r3, [r1, #20]
 8002342:	eba6 0807 	sub.w	r8, r6, r7
 8002346:	600f      	str	r7, [r1, #0]
 8002348:	608b      	str	r3, [r1, #8]
 800234a:	f1b8 0f00 	cmp.w	r8, #0
 800234e:	dd9c      	ble.n	800228a <__sflush_r+0x1a>
 8002350:	4643      	mov	r3, r8
 8002352:	463a      	mov	r2, r7
 8002354:	6a21      	ldr	r1, [r4, #32]
 8002356:	4628      	mov	r0, r5
 8002358:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800235a:	47b0      	blx	r6
 800235c:	2800      	cmp	r0, #0
 800235e:	dc06      	bgt.n	800236e <__sflush_r+0xfe>
 8002360:	89a3      	ldrh	r3, [r4, #12]
 8002362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002366:	81a3      	strh	r3, [r4, #12]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800236c:	e78e      	b.n	800228c <__sflush_r+0x1c>
 800236e:	4407      	add	r7, r0
 8002370:	eba8 0800 	sub.w	r8, r8, r0
 8002374:	e7e9      	b.n	800234a <__sflush_r+0xda>
 8002376:	bf00      	nop
 8002378:	20400001 	.word	0x20400001

0800237c <_fflush_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	690b      	ldr	r3, [r1, #16]
 8002380:	4605      	mov	r5, r0
 8002382:	460c      	mov	r4, r1
 8002384:	b1db      	cbz	r3, 80023be <_fflush_r+0x42>
 8002386:	b118      	cbz	r0, 8002390 <_fflush_r+0x14>
 8002388:	6983      	ldr	r3, [r0, #24]
 800238a:	b90b      	cbnz	r3, 8002390 <_fflush_r+0x14>
 800238c:	f7ff fa90 	bl	80018b0 <__sinit>
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <_fflush_r+0x48>)
 8002392:	429c      	cmp	r4, r3
 8002394:	d109      	bne.n	80023aa <_fflush_r+0x2e>
 8002396:	686c      	ldr	r4, [r5, #4]
 8002398:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800239c:	b17b      	cbz	r3, 80023be <_fflush_r+0x42>
 800239e:	4621      	mov	r1, r4
 80023a0:	4628      	mov	r0, r5
 80023a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023a6:	f7ff bf63 	b.w	8002270 <__sflush_r>
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_fflush_r+0x4c>)
 80023ac:	429c      	cmp	r4, r3
 80023ae:	d101      	bne.n	80023b4 <_fflush_r+0x38>
 80023b0:	68ac      	ldr	r4, [r5, #8]
 80023b2:	e7f1      	b.n	8002398 <_fflush_r+0x1c>
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <_fflush_r+0x50>)
 80023b6:	429c      	cmp	r4, r3
 80023b8:	bf08      	it	eq
 80023ba:	68ec      	ldreq	r4, [r5, #12]
 80023bc:	e7ec      	b.n	8002398 <_fflush_r+0x1c>
 80023be:	2000      	movs	r0, #0
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
 80023c2:	bf00      	nop
 80023c4:	08002650 	.word	0x08002650
 80023c8:	08002670 	.word	0x08002670
 80023cc:	08002630 	.word	0x08002630

080023d0 <_lseek_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4605      	mov	r5, r0
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	4c05      	ldr	r4, [pc, #20]	; (80023f0 <_lseek_r+0x20>)
 80023dc:	6022      	str	r2, [r4, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7fe f8c7 	bl	8000572 <_lseek>
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	d102      	bne.n	80023ee <_lseek_r+0x1e>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	b103      	cbz	r3, 80023ee <_lseek_r+0x1e>
 80023ec:	602b      	str	r3, [r5, #0]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	200000e0 	.word	0x200000e0

080023f4 <__swhatbuf_r>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	460e      	mov	r6, r1
 80023f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023fc:	b096      	sub	sp, #88	; 0x58
 80023fe:	2900      	cmp	r1, #0
 8002400:	4614      	mov	r4, r2
 8002402:	461d      	mov	r5, r3
 8002404:	da07      	bge.n	8002416 <__swhatbuf_r+0x22>
 8002406:	2300      	movs	r3, #0
 8002408:	602b      	str	r3, [r5, #0]
 800240a:	89b3      	ldrh	r3, [r6, #12]
 800240c:	061a      	lsls	r2, r3, #24
 800240e:	d410      	bmi.n	8002432 <__swhatbuf_r+0x3e>
 8002410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002414:	e00e      	b.n	8002434 <__swhatbuf_r+0x40>
 8002416:	466a      	mov	r2, sp
 8002418:	f000 f8be 	bl	8002598 <_fstat_r>
 800241c:	2800      	cmp	r0, #0
 800241e:	dbf2      	blt.n	8002406 <__swhatbuf_r+0x12>
 8002420:	9a01      	ldr	r2, [sp, #4]
 8002422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800242a:	425a      	negs	r2, r3
 800242c:	415a      	adcs	r2, r3
 800242e:	602a      	str	r2, [r5, #0]
 8002430:	e7ee      	b.n	8002410 <__swhatbuf_r+0x1c>
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	2000      	movs	r0, #0
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	b016      	add	sp, #88	; 0x58
 800243a:	bd70      	pop	{r4, r5, r6, pc}

0800243c <__smakebuf_r>:
 800243c:	898b      	ldrh	r3, [r1, #12]
 800243e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002440:	079d      	lsls	r5, r3, #30
 8002442:	4606      	mov	r6, r0
 8002444:	460c      	mov	r4, r1
 8002446:	d507      	bpl.n	8002458 <__smakebuf_r+0x1c>
 8002448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	6123      	str	r3, [r4, #16]
 8002450:	2301      	movs	r3, #1
 8002452:	6163      	str	r3, [r4, #20]
 8002454:	b002      	add	sp, #8
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	ab01      	add	r3, sp, #4
 800245a:	466a      	mov	r2, sp
 800245c:	f7ff ffca 	bl	80023f4 <__swhatbuf_r>
 8002460:	9900      	ldr	r1, [sp, #0]
 8002462:	4605      	mov	r5, r0
 8002464:	4630      	mov	r0, r6
 8002466:	f7ff faad 	bl	80019c4 <_malloc_r>
 800246a:	b948      	cbnz	r0, 8002480 <__smakebuf_r+0x44>
 800246c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002470:	059a      	lsls	r2, r3, #22
 8002472:	d4ef      	bmi.n	8002454 <__smakebuf_r+0x18>
 8002474:	f023 0303 	bic.w	r3, r3, #3
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	e7e3      	b.n	8002448 <__smakebuf_r+0xc>
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <__smakebuf_r+0x7c>)
 8002482:	62b3      	str	r3, [r6, #40]	; 0x28
 8002484:	89a3      	ldrh	r3, [r4, #12]
 8002486:	6020      	str	r0, [r4, #0]
 8002488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248c:	81a3      	strh	r3, [r4, #12]
 800248e:	9b00      	ldr	r3, [sp, #0]
 8002490:	6120      	str	r0, [r4, #16]
 8002492:	6163      	str	r3, [r4, #20]
 8002494:	9b01      	ldr	r3, [sp, #4]
 8002496:	b15b      	cbz	r3, 80024b0 <__smakebuf_r+0x74>
 8002498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800249c:	4630      	mov	r0, r6
 800249e:	f000 f88d 	bl	80025bc <_isatty_r>
 80024a2:	b128      	cbz	r0, 80024b0 <__smakebuf_r+0x74>
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	81a3      	strh	r3, [r4, #12]
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	431d      	orrs	r5, r3
 80024b4:	81a5      	strh	r5, [r4, #12]
 80024b6:	e7cd      	b.n	8002454 <__smakebuf_r+0x18>
 80024b8:	08001879 	.word	0x08001879

080024bc <memchr>:
 80024bc:	b510      	push	{r4, lr}
 80024be:	b2c9      	uxtb	r1, r1
 80024c0:	4402      	add	r2, r0
 80024c2:	4290      	cmp	r0, r2
 80024c4:	4603      	mov	r3, r0
 80024c6:	d101      	bne.n	80024cc <memchr+0x10>
 80024c8:	2300      	movs	r3, #0
 80024ca:	e003      	b.n	80024d4 <memchr+0x18>
 80024cc:	781c      	ldrb	r4, [r3, #0]
 80024ce:	3001      	adds	r0, #1
 80024d0:	428c      	cmp	r4, r1
 80024d2:	d1f6      	bne.n	80024c2 <memchr+0x6>
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd10      	pop	{r4, pc}

080024d8 <__malloc_lock>:
 80024d8:	4770      	bx	lr

080024da <__malloc_unlock>:
 80024da:	4770      	bx	lr

080024dc <_free_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	4605      	mov	r5, r0
 80024e0:	2900      	cmp	r1, #0
 80024e2:	d043      	beq.n	800256c <_free_r+0x90>
 80024e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024e8:	1f0c      	subs	r4, r1, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	bfb8      	it	lt
 80024ee:	18e4      	addlt	r4, r4, r3
 80024f0:	f7ff fff2 	bl	80024d8 <__malloc_lock>
 80024f4:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <_free_r+0x94>)
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	4610      	mov	r0, r2
 80024fa:	b933      	cbnz	r3, 800250a <_free_r+0x2e>
 80024fc:	6063      	str	r3, [r4, #4]
 80024fe:	6014      	str	r4, [r2, #0]
 8002500:	4628      	mov	r0, r5
 8002502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002506:	f7ff bfe8 	b.w	80024da <__malloc_unlock>
 800250a:	42a3      	cmp	r3, r4
 800250c:	d90b      	bls.n	8002526 <_free_r+0x4a>
 800250e:	6821      	ldr	r1, [r4, #0]
 8002510:	1862      	adds	r2, r4, r1
 8002512:	4293      	cmp	r3, r2
 8002514:	bf01      	itttt	eq
 8002516:	681a      	ldreq	r2, [r3, #0]
 8002518:	685b      	ldreq	r3, [r3, #4]
 800251a:	1852      	addeq	r2, r2, r1
 800251c:	6022      	streq	r2, [r4, #0]
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	6004      	str	r4, [r0, #0]
 8002522:	e7ed      	b.n	8002500 <_free_r+0x24>
 8002524:	4613      	mov	r3, r2
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	b10a      	cbz	r2, 800252e <_free_r+0x52>
 800252a:	42a2      	cmp	r2, r4
 800252c:	d9fa      	bls.n	8002524 <_free_r+0x48>
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	1858      	adds	r0, r3, r1
 8002532:	42a0      	cmp	r0, r4
 8002534:	d10b      	bne.n	800254e <_free_r+0x72>
 8002536:	6820      	ldr	r0, [r4, #0]
 8002538:	4401      	add	r1, r0
 800253a:	1858      	adds	r0, r3, r1
 800253c:	4282      	cmp	r2, r0
 800253e:	6019      	str	r1, [r3, #0]
 8002540:	d1de      	bne.n	8002500 <_free_r+0x24>
 8002542:	6810      	ldr	r0, [r2, #0]
 8002544:	6852      	ldr	r2, [r2, #4]
 8002546:	4401      	add	r1, r0
 8002548:	6019      	str	r1, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	e7d8      	b.n	8002500 <_free_r+0x24>
 800254e:	d902      	bls.n	8002556 <_free_r+0x7a>
 8002550:	230c      	movs	r3, #12
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	e7d4      	b.n	8002500 <_free_r+0x24>
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	1821      	adds	r1, r4, r0
 800255a:	428a      	cmp	r2, r1
 800255c:	bf01      	itttt	eq
 800255e:	6811      	ldreq	r1, [r2, #0]
 8002560:	6852      	ldreq	r2, [r2, #4]
 8002562:	1809      	addeq	r1, r1, r0
 8002564:	6021      	streq	r1, [r4, #0]
 8002566:	6062      	str	r2, [r4, #4]
 8002568:	605c      	str	r4, [r3, #4]
 800256a:	e7c9      	b.n	8002500 <_free_r+0x24>
 800256c:	bd38      	pop	{r3, r4, r5, pc}
 800256e:	bf00      	nop
 8002570:	20000094 	.word	0x20000094

08002574 <_read_r>:
 8002574:	b538      	push	{r3, r4, r5, lr}
 8002576:	4605      	mov	r5, r0
 8002578:	4608      	mov	r0, r1
 800257a:	4611      	mov	r1, r2
 800257c:	2200      	movs	r2, #0
 800257e:	4c05      	ldr	r4, [pc, #20]	; (8002594 <_read_r+0x20>)
 8002580:	6022      	str	r2, [r4, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	f7fd ffb4 	bl	80004f0 <_read>
 8002588:	1c43      	adds	r3, r0, #1
 800258a:	d102      	bne.n	8002592 <_read_r+0x1e>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	b103      	cbz	r3, 8002592 <_read_r+0x1e>
 8002590:	602b      	str	r3, [r5, #0]
 8002592:	bd38      	pop	{r3, r4, r5, pc}
 8002594:	200000e0 	.word	0x200000e0

08002598 <_fstat_r>:
 8002598:	b538      	push	{r3, r4, r5, lr}
 800259a:	2300      	movs	r3, #0
 800259c:	4c06      	ldr	r4, [pc, #24]	; (80025b8 <_fstat_r+0x20>)
 800259e:	4605      	mov	r5, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	f7fd ffcb 	bl	8000540 <_fstat>
 80025aa:	1c43      	adds	r3, r0, #1
 80025ac:	d102      	bne.n	80025b4 <_fstat_r+0x1c>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	b103      	cbz	r3, 80025b4 <_fstat_r+0x1c>
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	bd38      	pop	{r3, r4, r5, pc}
 80025b6:	bf00      	nop
 80025b8:	200000e0 	.word	0x200000e0

080025bc <_isatty_r>:
 80025bc:	b538      	push	{r3, r4, r5, lr}
 80025be:	2300      	movs	r3, #0
 80025c0:	4c05      	ldr	r4, [pc, #20]	; (80025d8 <_isatty_r+0x1c>)
 80025c2:	4605      	mov	r5, r0
 80025c4:	4608      	mov	r0, r1
 80025c6:	6023      	str	r3, [r4, #0]
 80025c8:	f7fd ffc9 	bl	800055e <_isatty>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	d102      	bne.n	80025d6 <_isatty_r+0x1a>
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	b103      	cbz	r3, 80025d6 <_isatty_r+0x1a>
 80025d4:	602b      	str	r3, [r5, #0]
 80025d6:	bd38      	pop	{r3, r4, r5, pc}
 80025d8:	200000e0 	.word	0x200000e0

080025dc <_init>:
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	bf00      	nop
 80025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e2:	bc08      	pop	{r3}
 80025e4:	469e      	mov	lr, r3
 80025e6:	4770      	bx	lr

080025e8 <_fini>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr
