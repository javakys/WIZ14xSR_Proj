
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000660c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb4  08006bb4  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08006bb4  08006bb4  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bb4  08006bb4  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  200000c4  08006c80  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  08006c80  00020b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109fe  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b64  00000000  00000000  00030aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00033650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f58  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c17c  00000000  00000000  00035640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc25  00000000  00000000  000517bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0cf2  00000000  00000000  0005f3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001000d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d58  00000000  00000000  00100150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000c4 	.word	0x200000c4
 8000200:	00000000 	.word	0x00000000
 8000204:	080067d8 	.word	0x080067d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000c8 	.word	0x200000c8
 8000220:	080067d8 	.word	0x080067d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Reset_W5300>:

#include "main.h"
#include "W5300BasicFunctions.h"

void Reset_W5300()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <Reset_W5300+0x28>)
 800023e:	f001 fbfd 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f001 f858 	bl	80012f8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <Reset_W5300+0x28>)
 800024e:	f001 fbf5 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000252:	2064      	movs	r0, #100	; 0x64
 8000254:	f001 f850 	bl	80012f8 <HAL_Delay>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40011c00 	.word	0x40011c00

08000260 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
	*((uint16_t*)(addr << 1)) = wd;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	461a      	mov	r2, r3
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	8013      	strh	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	return *((uint16_t*)(addr << 1));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	881b      	ldrh	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <W5300Initialize>:

void W5300Initialize(unsigned char * mem_size)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)mem_size) == -1)
 80002a0:	6879      	ldr	r1, [r7, #4]
 80002a2:	2001      	movs	r0, #1
 80002a4:	f004 fc52 	bl	8004b4c <ctlwizchip>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002ae:	d102      	bne.n	80002b6 <W5300Initialize+0x1e>
	{
		printf("W5300 memory initialization failed\r\n");
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <W5300Initialize+0x28>)
 80002b2:	f005 fa9f 	bl	80057f4 <puts>
	}
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	080067f0 	.word	0x080067f0

080002c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	230a      	movs	r3, #10
 80002d6:	68b9      	ldr	r1, [r7, #8]
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <_write+0x24>)
 80002da:	f002 fcb8 	bl	8002c4e <HAL_UART_Transmit>
	return len;
 80002de:	687b      	ldr	r3, [r7, #4]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000031c 	.word	0x2000031c

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 ff9f 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f921 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 fa83 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002fe:	f000 fa2d 	bl	800075c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000302:	f000 f961 	bl	80005c8 <MX_TIM2_Init>
  MX_UART4_Init();
 8000306:	f000 f9ab 	bl	8000660 <MX_UART4_Init>
  MX_UART5_Init();
 800030a:	f000 f9d3 	bl	80006b4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800030e:	f000 f9fb 	bl	8000708 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000312:	f000 fa4d 	bl	80007b0 <MX_USART3_UART_Init>
  MX_FSMC_Init();
 8000316:	f000 fb5b 	bl	80009d0 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800031a:	4865      	ldr	r0, [pc, #404]	; (80004b0 <main+0x1c4>)
 800031c:	f002 f878 	bl	8002410 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Reset_W5300();
 8000320:	f7ff ff88 	bl	8000234 <Reset_W5300>

  reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 8000324:	4963      	ldr	r1, [pc, #396]	; (80004b4 <main+0x1c8>)
 8000326:	4864      	ldr	r0, [pc, #400]	; (80004b8 <main+0x1cc>)
 8000328:	f004 fbe6 	bl	8004af8 <reg_wizchip_bus_cbfunc>

  printf("GetMR()=%04X\r\n", getMR());
 800032c:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8000330:	f003 fa64 	bl	80037fc <WIZCHIP_READ>
 8000334:	4603      	mov	r3, r0
 8000336:	4619      	mov	r1, r3
 8000338:	4860      	ldr	r0, [pc, #384]	; (80004bc <main+0x1d0>)
 800033a:	f005 f9e7 	bl	800570c <iprintf>
//  setSHAR(gWIZNETINFO.mac);
//  setSIPR(gWIZNETINFO.ip);
//  setGAR(gWIZNETINFO.gw);
//  setSUBR(gWIZNETINFO.sn);

  W5300Initialize(W5300_memsize);
 800033e:	4860      	ldr	r0, [pc, #384]	; (80004c0 <main+0x1d4>)
 8000340:	f7ff ffaa 	bl	8000298 <W5300Initialize>
  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 8000344:	495f      	ldr	r1, [pc, #380]	; (80004c4 <main+0x1d8>)
 8000346:	2000      	movs	r0, #0
 8000348:	f004 fcae 	bl	8004ca8 <ctlnetwork>
  print_network_information();
 800034c:	f000 fbca 	bl	8000ae4 <print_network_information>

  printf("GetTMS01R()\%04X\r\n", getTMS01R());
 8000350:	485d      	ldr	r0, [pc, #372]	; (80004c8 <main+0x1dc>)
 8000352:	f003 fa53 	bl	80037fc <WIZCHIP_READ>
 8000356:	4603      	mov	r3, r0
 8000358:	4619      	mov	r1, r3
 800035a:	485c      	ldr	r0, [pc, #368]	; (80004cc <main+0x1e0>)
 800035c:	f005 f9d6 	bl	800570c <iprintf>
  printf("GetTMS23R()\%04X\r\n", getTMS23R());
 8000360:	485b      	ldr	r0, [pc, #364]	; (80004d0 <main+0x1e4>)
 8000362:	f003 fa4b 	bl	80037fc <WIZCHIP_READ>
 8000366:	4603      	mov	r3, r0
 8000368:	4619      	mov	r1, r3
 800036a:	485a      	ldr	r0, [pc, #360]	; (80004d4 <main+0x1e8>)
 800036c:	f005 f9ce 	bl	800570c <iprintf>
  printf("GetTMS45R()\%04X\r\n", getTMS45R());
 8000370:	4859      	ldr	r0, [pc, #356]	; (80004d8 <main+0x1ec>)
 8000372:	f003 fa43 	bl	80037fc <WIZCHIP_READ>
 8000376:	4603      	mov	r3, r0
 8000378:	4619      	mov	r1, r3
 800037a:	4858      	ldr	r0, [pc, #352]	; (80004dc <main+0x1f0>)
 800037c:	f005 f9c6 	bl	800570c <iprintf>
  printf("GetTMS67R()\%04X\r\n", getTMS67R());
 8000380:	4857      	ldr	r0, [pc, #348]	; (80004e0 <main+0x1f4>)
 8000382:	f003 fa3b 	bl	80037fc <WIZCHIP_READ>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4856      	ldr	r0, [pc, #344]	; (80004e4 <main+0x1f8>)
 800038c:	f005 f9be 	bl	800570c <iprintf>
  printf("GetRMS01R()\%04X\r\n", getRMS01R());
 8000390:	4855      	ldr	r0, [pc, #340]	; (80004e8 <main+0x1fc>)
 8000392:	f003 fa33 	bl	80037fc <WIZCHIP_READ>
 8000396:	4603      	mov	r3, r0
 8000398:	4619      	mov	r1, r3
 800039a:	4854      	ldr	r0, [pc, #336]	; (80004ec <main+0x200>)
 800039c:	f005 f9b6 	bl	800570c <iprintf>
  printf("GetRMS23R()\%04X\r\n", getRMS23R());
 80003a0:	4853      	ldr	r0, [pc, #332]	; (80004f0 <main+0x204>)
 80003a2:	f003 fa2b 	bl	80037fc <WIZCHIP_READ>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4619      	mov	r1, r3
 80003aa:	4852      	ldr	r0, [pc, #328]	; (80004f4 <main+0x208>)
 80003ac:	f005 f9ae 	bl	800570c <iprintf>
  printf("GetRMS45R()\%04X\r\n", getRMS45R());
 80003b0:	4851      	ldr	r0, [pc, #324]	; (80004f8 <main+0x20c>)
 80003b2:	f003 fa23 	bl	80037fc <WIZCHIP_READ>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4619      	mov	r1, r3
 80003ba:	4850      	ldr	r0, [pc, #320]	; (80004fc <main+0x210>)
 80003bc:	f005 f9a6 	bl	800570c <iprintf>
  printf("GetRMS67R()\%04X\r\n", getRMS67R());
 80003c0:	484f      	ldr	r0, [pc, #316]	; (8000500 <main+0x214>)
 80003c2:	f003 fa1b 	bl	80037fc <WIZCHIP_READ>
 80003c6:	4603      	mov	r3, r0
 80003c8:	4619      	mov	r1, r3
 80003ca:	484e      	ldr	r0, [pc, #312]	; (8000504 <main+0x218>)
 80003cc:	f005 f99e 	bl	800570c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 80003d0:	4b4d      	ldr	r3, [pc, #308]	; (8000508 <main+0x21c>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d064      	beq.n	80004a2 <main+0x1b6>
	  {
		  onesecondElapsed = 0;
 80003d8:	4b4b      	ldr	r3, [pc, #300]	; (8000508 <main+0x21c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 80003de:	4b4b      	ldr	r3, [pc, #300]	; (800050c <main+0x220>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	3301      	adds	r3, #1
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	4b49      	ldr	r3, [pc, #292]	; (800050c <main+0x220>)
 80003e8:	701a      	strb	r2, [r3, #0]
//		  printf("count: %d\r\n", count);	// print count
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	4848      	ldr	r0, [pc, #288]	; (8000510 <main+0x224>)
 80003ee:	f001 fb3d 	bl	8001a6c <HAL_GPIO_TogglePin>
		  memset(msg, 0, 100);
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2100      	movs	r1, #0
 80003f6:	4847      	ldr	r0, [pc, #284]	; (8000514 <main+0x228>)
 80003f8:	f005 f8d9 	bl	80055ae <memset>
		  sprintf((char *)msg, "UART1, count: %d\r\n", count);
 80003fc:	4b43      	ldr	r3, [pc, #268]	; (800050c <main+0x220>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	461a      	mov	r2, r3
 8000402:	4945      	ldr	r1, [pc, #276]	; (8000518 <main+0x22c>)
 8000404:	4843      	ldr	r0, [pc, #268]	; (8000514 <main+0x228>)
 8000406:	f005 fa0d 	bl	8005824 <siprintf>
		  HAL_UART_Transmit(&huart1, msg, strlen((const char*)msg), 10);
 800040a:	4842      	ldr	r0, [pc, #264]	; (8000514 <main+0x228>)
 800040c:	f7ff ff0a 	bl	8000224 <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	230a      	movs	r3, #10
 8000416:	493f      	ldr	r1, [pc, #252]	; (8000514 <main+0x228>)
 8000418:	4840      	ldr	r0, [pc, #256]	; (800051c <main+0x230>)
 800041a:	f002 fc18 	bl	8002c4e <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 800041e:	2264      	movs	r2, #100	; 0x64
 8000420:	2100      	movs	r1, #0
 8000422:	483c      	ldr	r0, [pc, #240]	; (8000514 <main+0x228>)
 8000424:	f005 f8c3 	bl	80055ae <memset>
		  sprintf((char *)msg, "UART3, count: %d\r\n", count);
 8000428:	4b38      	ldr	r3, [pc, #224]	; (800050c <main+0x220>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	493c      	ldr	r1, [pc, #240]	; (8000520 <main+0x234>)
 8000430:	4838      	ldr	r0, [pc, #224]	; (8000514 <main+0x228>)
 8000432:	f005 f9f7 	bl	8005824 <siprintf>
		  HAL_UART_Transmit(&huart3, msg, strlen((const char*)msg), 10);
 8000436:	4837      	ldr	r0, [pc, #220]	; (8000514 <main+0x228>)
 8000438:	f7ff fef4 	bl	8000224 <strlen>
 800043c:	4603      	mov	r3, r0
 800043e:	b29a      	uxth	r2, r3
 8000440:	230a      	movs	r3, #10
 8000442:	4934      	ldr	r1, [pc, #208]	; (8000514 <main+0x228>)
 8000444:	4837      	ldr	r0, [pc, #220]	; (8000524 <main+0x238>)
 8000446:	f002 fc02 	bl	8002c4e <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 800044a:	2264      	movs	r2, #100	; 0x64
 800044c:	2100      	movs	r1, #0
 800044e:	4831      	ldr	r0, [pc, #196]	; (8000514 <main+0x228>)
 8000450:	f005 f8ad 	bl	80055ae <memset>
		  sprintf((char *)msg, "UART4, count: %d\r\n", count);
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <main+0x220>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4933      	ldr	r1, [pc, #204]	; (8000528 <main+0x23c>)
 800045c:	482d      	ldr	r0, [pc, #180]	; (8000514 <main+0x228>)
 800045e:	f005 f9e1 	bl	8005824 <siprintf>
		  HAL_UART_Transmit(&huart4, msg, strlen((const char*)msg), 10);
 8000462:	482c      	ldr	r0, [pc, #176]	; (8000514 <main+0x228>)
 8000464:	f7ff fede 	bl	8000224 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	230a      	movs	r3, #10
 800046e:	4929      	ldr	r1, [pc, #164]	; (8000514 <main+0x228>)
 8000470:	482e      	ldr	r0, [pc, #184]	; (800052c <main+0x240>)
 8000472:	f002 fbec 	bl	8002c4e <HAL_UART_Transmit>
		  memset(msg, 0, 100);
 8000476:	2264      	movs	r2, #100	; 0x64
 8000478:	2100      	movs	r1, #0
 800047a:	4826      	ldr	r0, [pc, #152]	; (8000514 <main+0x228>)
 800047c:	f005 f897 	bl	80055ae <memset>
		  sprintf((char *)msg, "UART5, count: %d\r\n", count);
 8000480:	4b22      	ldr	r3, [pc, #136]	; (800050c <main+0x220>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	461a      	mov	r2, r3
 8000486:	492a      	ldr	r1, [pc, #168]	; (8000530 <main+0x244>)
 8000488:	4822      	ldr	r0, [pc, #136]	; (8000514 <main+0x228>)
 800048a:	f005 f9cb 	bl	8005824 <siprintf>
		  HAL_UART_Transmit(&huart5, msg, strlen((const char*)msg), 10);
 800048e:	4821      	ldr	r0, [pc, #132]	; (8000514 <main+0x228>)
 8000490:	f7ff fec8 	bl	8000224 <strlen>
 8000494:	4603      	mov	r3, r0
 8000496:	b29a      	uxth	r2, r3
 8000498:	230a      	movs	r3, #10
 800049a:	491e      	ldr	r1, [pc, #120]	; (8000514 <main+0x228>)
 800049c:	4825      	ldr	r0, [pc, #148]	; (8000534 <main+0x248>)
 800049e:	f002 fbd6 	bl	8002c4e <HAL_UART_Transmit>
//		  printf("value: %d\r\n", value);

	  }
	  loopback_tcps(0, ethBuf0, 5000);
 80004a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80004a6:	4924      	ldr	r1, [pc, #144]	; (8000538 <main+0x24c>)
 80004a8:	2000      	movs	r0, #0
 80004aa:	f003 f845 	bl	8003538 <loopback_tcps>
  {
 80004ae:	e78f      	b.n	80003d0 <main+0xe4>
 80004b0:	200002d4 	.word	0x200002d4
 80004b4:	08000261 	.word	0x08000261
 80004b8:	08000281 	.word	0x08000281
 80004bc:	08006814 	.word	0x08006814
 80004c0:	20000018 	.word	0x20000018
 80004c4:	20000000 	.word	0x20000000
 80004c8:	34000020 	.word	0x34000020
 80004cc:	08006824 	.word	0x08006824
 80004d0:	34000022 	.word	0x34000022
 80004d4:	08006838 	.word	0x08006838
 80004d8:	34000024 	.word	0x34000024
 80004dc:	0800684c 	.word	0x0800684c
 80004e0:	34000026 	.word	0x34000026
 80004e4:	08006860 	.word	0x08006860
 80004e8:	34000028 	.word	0x34000028
 80004ec:	08006874 	.word	0x08006874
 80004f0:	3400002a 	.word	0x3400002a
 80004f4:	08006888 	.word	0x08006888
 80004f8:	3400002c 	.word	0x3400002c
 80004fc:	0800689c 	.word	0x0800689c
 8000500:	3400002e 	.word	0x3400002e
 8000504:	080068b0 	.word	0x080068b0
 8000508:	200000e4 	.word	0x200000e4
 800050c:	200000e0 	.word	0x200000e0
 8000510:	40011c00 	.word	0x40011c00
 8000514:	200001ac 	.word	0x200001ac
 8000518:	080068c4 	.word	0x080068c4
 800051c:	20000250 	.word	0x20000250
 8000520:	080068d8 	.word	0x080068d8
 8000524:	20000124 	.word	0x20000124
 8000528:	080068ec 	.word	0x080068ec
 800052c:	20000294 	.word	0x20000294
 8000530:	08006900 	.word	0x08006900
 8000534:	20000210 	.word	0x20000210
 8000538:	2000035c 	.word	0x2000035c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	; 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 f82f 	bl	80055ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fa8b 	bl	8001aa0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000590:	f000 fb18 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fcf6 	bl	8001fa0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 fb03 	bl	8000bc4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	; 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_TIM2_Init+0x94>)
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_TIM2_Init+0x94>)
 80005ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_TIM2_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_TIM2_Init+0x94>)
 80005fc:	2248      	movs	r2, #72	; 0x48
 80005fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_TIM2_Init+0x94>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_TIM2_Init+0x94>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <MX_TIM2_Init+0x94>)
 800060e:	f001 feb0 	bl	8002372 <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000618:	f000 fad4 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <MX_TIM2_Init+0x94>)
 800062a:	f002 f859 	bl	80026e0 <HAL_TIM_ConfigClockSource>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000634:	f000 fac6 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000640:	463b      	mov	r3, r7
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_TIM2_Init+0x94>)
 8000646:	f002 fa37 	bl	8002ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000650:	f000 fab8 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200002d4 	.word	0x200002d4

08000660 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_UART4_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_UART4_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_UART4_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_UART4_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_UART4_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_UART4_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_UART4_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_UART4_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_UART4_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_UART4_Init+0x4c>)
 8000698:	f002 fa8c 	bl	8002bb4 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 fa8f 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000294 	.word	0x20000294
 80006b0:	40004c00 	.word	0x40004c00

080006b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_UART5_Init+0x4c>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_UART5_Init+0x50>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_UART5_Init+0x4c>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_UART5_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_UART5_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_UART5_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_UART5_Init+0x4c>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_UART5_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_UART5_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_UART5_Init+0x4c>)
 80006ec:	f002 fa62 	bl	8002bb4 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80006f6:	f000 fa65 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000210 	.word	0x20000210
 8000704:	40005000 	.word	0x40005000

08000708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <MX_USART1_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART1_UART_Init+0x4c>)
 8000740:	f002 fa38 	bl	8002bb4 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 fa3b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000250 	.word	0x20000250
 8000758:	40013800 	.word	0x40013800

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f002 fa0e 	bl	8002bb4 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 fa11 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000031c 	.word	0x2000031c
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART3_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART3_UART_Init+0x4c>)
 80007e8:	f002 f9e4 	bl	8002bb4 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f9e7 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000124 	.word	0x20000124
 8000800:	40004800 	.word	0x40004800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000818:	4b68      	ldr	r3, [pc, #416]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a67      	ldr	r2, [pc, #412]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b65      	ldr	r3, [pc, #404]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0310 	and.w	r3, r3, #16
 800082c:	61fb      	str	r3, [r7, #28]
 800082e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000830:	4b62      	ldr	r3, [pc, #392]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a61      	ldr	r2, [pc, #388]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a5b      	ldr	r2, [pc, #364]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b59      	ldr	r3, [pc, #356]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	4b56      	ldr	r3, [pc, #344]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a55      	ldr	r2, [pc, #340]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b53      	ldr	r3, [pc, #332]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000878:	4b50      	ldr	r3, [pc, #320]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a4f      	ldr	r2, [pc, #316]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b4d      	ldr	r3, [pc, #308]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000890:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a49      	ldr	r2, [pc, #292]	; (80009bc <MX_GPIO_Init+0x1b8>)
 8000896:	f043 0320 	orr.w	r3, r3, #32
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b47      	ldr	r3, [pc, #284]	; (80009bc <MX_GPIO_Init+0x1b8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0320 	and.w	r3, r3, #32
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a8:	4b44      	ldr	r3, [pc, #272]	; (80009bc <MX_GPIO_Init+0x1b8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a43      	ldr	r2, [pc, #268]	; (80009bc <MX_GPIO_Init+0x1b8>)
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_GPIO_Init+0x1b8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	21c0      	movs	r1, #192	; 0xc0
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <MX_GPIO_Init+0x1bc>)
 80008c6:	f001 f8b9 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80008d0:	483c      	ldr	r0, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x1c0>)
 80008d2:	f001 f8b3 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80008d6:	2200      	movs	r2, #0
 80008d8:	f244 11e0 	movw	r1, #16864	; 0x41e0
 80008dc:	483a      	ldr	r0, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x1c4>)
 80008de:	f001 f8ad 	bl	8001a3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	4838      	ldr	r0, [pc, #224]	; (80009cc <MX_GPIO_Init+0x1c8>)
 80008ea:	f001 f8a7 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80008ee:	f242 130f 	movw	r3, #8463	; 0x210f
 80008f2:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	4830      	ldr	r0, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x1c0>)
 8000904:	f000 ff30 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000908:	23c0      	movs	r3, #192	; 0xc0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2302      	movs	r3, #2
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4828      	ldr	r0, [pc, #160]	; (80009c0 <MX_GPIO_Init+0x1bc>)
 8000920:	f000 ff22 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000924:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2302      	movs	r3, #2
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	4619      	mov	r1, r3
 800093c:	4821      	ldr	r0, [pc, #132]	; (80009c4 <MX_GPIO_Init+0x1c0>)
 800093e:	f000 ff13 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000942:	f242 0301 	movw	r3, #8193	; 0x2001
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4619      	mov	r1, r3
 8000956:	481c      	ldr	r0, [pc, #112]	; (80009c8 <MX_GPIO_Init+0x1c4>)
 8000958:	f000 ff06 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800095c:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000960:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2302      	movs	r3, #2
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	4619      	mov	r1, r3
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <MX_GPIO_Init+0x1c4>)
 8000976:	f000 fef7 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800097a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_GPIO_Init+0x1c8>)
 8000990:	f000 feea 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_GPIO_Init+0x1c8>)
 80009ae:	f000 fedb 	bl	8001768 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40011c00 	.word	0x40011c00
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	40010800 	.word	0x40010800

080009d0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_FSMC_Init+0xbc>)
 80009ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009ee:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_FSMC_Init+0xbc>)
 80009f2:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <MX_FSMC_Init+0xc0>)
 80009f4:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_FSMC_Init+0xbc>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_FSMC_Init+0xbc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <MX_FSMC_Init+0xbc>)
 8000a6a:	f001 fc35 	bl	80022d8 <HAL_SRAM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000a74:	f000 f8a6 	bl	8000bc4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_FSMC_Init+0xc4>)
 8000a7a:	69db      	ldr	r3, [r3, #28]
 8000a7c:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <MX_FSMC_Init+0xc4>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000164 	.word	0x20000164
 8000a90:	a0000104 	.word	0xa0000104
 8000a94:	40010000 	.word	0x40010000

08000a98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d110      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		ms_count++;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ab6:	801a      	strh	r2, [r3, #0]

		if(ms_count >= 1000)
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac0:	d305      	bcc.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			onesecondElapsed = 1;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	801a      	strh	r2, [r3, #0]
		}
		/* Toggle LEDs */
	}
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	200002d4 	.word	0x200002d4
 8000adc:	200000e2 	.word	0x200000e2
 8000ae0:	200000e4 	.word	0x200000e4

08000ae4 <print_network_information>:

void print_network_information(void)
{
 8000ae4:	b5b0      	push	{r4, r5, r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af04      	add	r7, sp, #16

    wizchip_getnetinfo(&gWIZNETINFO);
 8000aea:	4830      	ldr	r0, [pc, #192]	; (8000bac <print_network_information+0xc8>)
 8000aec:	f004 fc04 	bl	80052f8 <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <print_network_information+0xc8>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <print_network_information+0xc8>)
 8000af8:	785b      	ldrb	r3, [r3, #1]
 8000afa:	461c      	mov	r4, r3
 8000afc:	4b2b      	ldr	r3, [pc, #172]	; (8000bac <print_network_information+0xc8>)
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	461d      	mov	r5, r3
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <print_network_information+0xc8>)
 8000b04:	78db      	ldrb	r3, [r3, #3]
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <print_network_information+0xc8>)
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <print_network_information+0xc8>)
 8000b10:	795b      	ldrb	r3, [r3, #5]
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	9101      	str	r1, [sp, #4]
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	462b      	mov	r3, r5
 8000b1a:	4622      	mov	r2, r4
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <print_network_information+0xcc>)
 8000b20:	f004 fdf4 	bl	800570c <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <print_network_information+0xc8>)
 8000b26:	799b      	ldrb	r3, [r3, #6]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <print_network_information+0xc8>)
 8000b2c:	79db      	ldrb	r3, [r3, #7]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <print_network_information+0xc8>)
 8000b32:	7a1b      	ldrb	r3, [r3, #8]
 8000b34:	4618      	mov	r0, r3
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <print_network_information+0xc8>)
 8000b38:	7a5b      	ldrb	r3, [r3, #9]
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <print_network_information+0xd0>)
 8000b40:	f004 fde4 	bl	800570c <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <print_network_information+0xc8>)
 8000b46:	7a9b      	ldrb	r3, [r3, #10]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <print_network_information+0xc8>)
 8000b4c:	7adb      	ldrb	r3, [r3, #11]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <print_network_information+0xc8>)
 8000b52:	7b1b      	ldrb	r3, [r3, #12]
 8000b54:	4618      	mov	r0, r3
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <print_network_information+0xc8>)
 8000b58:	7b5b      	ldrb	r3, [r3, #13]
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4816      	ldr	r0, [pc, #88]	; (8000bb8 <print_network_information+0xd4>)
 8000b60:	f004 fdd4 	bl	800570c <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <print_network_information+0xc8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <print_network_information+0xc8>)
 8000b6c:	7bdb      	ldrb	r3, [r3, #15]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <print_network_information+0xc8>)
 8000b72:	7c1b      	ldrb	r3, [r3, #16]
 8000b74:	4618      	mov	r0, r3
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <print_network_information+0xc8>)
 8000b78:	7c5b      	ldrb	r3, [r3, #17]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <print_network_information+0xd8>)
 8000b80:	f004 fdc4 	bl	800570c <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <print_network_information+0xc8>)
 8000b86:	7c9b      	ldrb	r3, [r3, #18]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <print_network_information+0xc8>)
 8000b8c:	7cdb      	ldrb	r3, [r3, #19]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <print_network_information+0xc8>)
 8000b92:	7d1b      	ldrb	r3, [r3, #20]
 8000b94:	4618      	mov	r0, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <print_network_information+0xc8>)
 8000b98:	7d5b      	ldrb	r3, [r3, #21]
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <print_network_information+0xdc>)
 8000ba0:	f004 fdb4 	bl	800570c <iprintf>
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	08006914 	.word	0x08006914
 8000bb4:	08006944 	.word	0x08006944
 8000bb8:	08006960 	.word	0x08006960
 8000bbc:	0800697c 	.word	0x0800697c
 8000bc0:	08006998 	.word	0x08006998

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6193      	str	r3, [r2, #24]
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_MspInit+0x5c>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	61d3      	str	r3, [r2, #28]
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <HAL_MspInit+0x5c>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_MspInit+0x60>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_MspInit+0x60>)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000

08000c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c44:	d113      	bne.n	8000c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_TIM_Base_MspInit+0x44>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <HAL_TIM_Base_MspInit+0x44>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_TIM_Base_MspInit+0x44>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	201c      	movs	r0, #28
 8000c64:	f000 fc41 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c68:	201c      	movs	r0, #28
 8000c6a:	f000 fc5a 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b092      	sub	sp, #72	; 0x48
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4aa1      	ldr	r2, [pc, #644]	; (8000f1c <HAL_UART_MspInit+0x2a0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13a      	bne.n	8000d12 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c9c:	4ba0      	ldr	r3, [pc, #640]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	4a9f      	ldr	r2, [pc, #636]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000ca2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ca6:	61d3      	str	r3, [r2, #28]
 8000ca8:	4b9d      	ldr	r3, [pc, #628]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b9a      	ldr	r3, [pc, #616]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a99      	ldr	r2, [pc, #612]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b97      	ldr	r3, [pc, #604]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8000cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4890      	ldr	r0, [pc, #576]	; (8000f24 <HAL_UART_MspInit+0x2a8>)
 8000ce2:	f000 fd41 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	488a      	ldr	r0, [pc, #552]	; (8000f24 <HAL_UART_MspInit+0x2a8>)
 8000cfc:	f000 fd34 	bl	8001768 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2034      	movs	r0, #52	; 0x34
 8000d06:	f000 fbf0 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d0a:	2034      	movs	r0, #52	; 0x34
 8000d0c:	f000 fc09 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d10:	e0ff      	b.n	8000f12 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==UART5)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a84      	ldr	r2, [pc, #528]	; (8000f28 <HAL_UART_MspInit+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d145      	bne.n	8000da8 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d1c:	4b80      	ldr	r3, [pc, #512]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	4a7f      	ldr	r2, [pc, #508]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d26:	61d3      	str	r3, [r2, #28]
 8000d28:	4b7d      	ldr	r3, [pc, #500]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b7a      	ldr	r3, [pc, #488]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a79      	ldr	r2, [pc, #484]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b77      	ldr	r3, [pc, #476]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b74      	ldr	r3, [pc, #464]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a73      	ldr	r2, [pc, #460]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b71      	ldr	r3, [pc, #452]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d76:	4619      	mov	r1, r3
 8000d78:	486a      	ldr	r0, [pc, #424]	; (8000f24 <HAL_UART_MspInit+0x2a8>)
 8000d7a:	f000 fcf5 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4866      	ldr	r0, [pc, #408]	; (8000f2c <HAL_UART_MspInit+0x2b0>)
 8000d92:	f000 fce9 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2035      	movs	r0, #53	; 0x35
 8000d9c:	f000 fba5 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000da0:	2035      	movs	r0, #53	; 0x35
 8000da2:	f000 fbbe 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 8000da6:	e0b4      	b.n	8000f12 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a60      	ldr	r2, [pc, #384]	; (8000f30 <HAL_UART_MspInit+0x2b4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d13a      	bne.n	8000e28 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b5b      	ldr	r3, [pc, #364]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a5a      	ldr	r2, [pc, #360]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b58      	ldr	r3, [pc, #352]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b55      	ldr	r3, [pc, #340]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	4a54      	ldr	r2, [pc, #336]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6193      	str	r3, [r2, #24]
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df4:	4619      	mov	r1, r3
 8000df6:	484f      	ldr	r0, [pc, #316]	; (8000f34 <HAL_UART_MspInit+0x2b8>)
 8000df8:	f000 fcb6 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4848      	ldr	r0, [pc, #288]	; (8000f34 <HAL_UART_MspInit+0x2b8>)
 8000e12:	f000 fca9 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2025      	movs	r0, #37	; 0x25
 8000e1c:	f000 fb65 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e20:	2025      	movs	r0, #37	; 0x25
 8000e22:	f000 fb7e 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 8000e26:	e074      	b.n	8000f12 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <HAL_UART_MspInit+0x2bc>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d130      	bne.n	8000e94 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	4a34      	ldr	r2, [pc, #208]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6193      	str	r3, [r2, #24]
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e62:	2304      	movs	r3, #4
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e72:	4619      	mov	r1, r3
 8000e74:	482f      	ldr	r0, [pc, #188]	; (8000f34 <HAL_UART_MspInit+0x2b8>)
 8000e76:	f000 fc77 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4829      	ldr	r0, [pc, #164]	; (8000f34 <HAL_UART_MspInit+0x2b8>)
 8000e8e:	f000 fc6b 	bl	8001768 <HAL_GPIO_Init>
}
 8000e92:	e03e      	b.n	8000f12 <HAL_UART_MspInit+0x296>
  else if(huart->Instance==USART3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a28      	ldr	r2, [pc, #160]	; (8000f3c <HAL_UART_MspInit+0x2c0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d139      	bne.n	8000f12 <HAL_UART_MspInit+0x296>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x2a4>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x2c4>)
 8000ee4:	f000 fc40 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efa:	4619      	mov	r1, r3
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <HAL_UART_MspInit+0x2c4>)
 8000efe:	f000 fc33 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2027      	movs	r0, #39	; 0x27
 8000f08:	f000 faef 	bl	80014ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f0c:	2027      	movs	r0, #39	; 0x27
 8000f0e:	f000 fb08 	bl	8001522 <HAL_NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3748      	adds	r7, #72	; 0x48
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004c00 	.word	0x40004c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40011000 	.word	0x40011000
 8000f28:	40005000 	.word	0x40005000
 8000f2c:	40011400 	.word	0x40011400
 8000f30:	40013800 	.word	0x40013800
 8000f34:	40010800 	.word	0x40010800
 8000f38:	40004400 	.word	0x40004400
 8000f3c:	40004800 	.word	0x40004800
 8000f40:	40010c00 	.word	0x40010c00

08000f44 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_FSMC_MspInit+0xac>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d143      	bne.n	8000fe8 <HAL_FSMC_MspInit+0xa4>
    return;
  }
  FSMC_Initialized = 1;
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_FSMC_MspInit+0xac>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_FSMC_MspInit+0xb0>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_FSMC_MspInit+0xb0>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_FSMC_MspInit+0xb0>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f7e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000f82:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <HAL_FSMC_MspInit+0xb4>)
 8000f94:	f000 fbe8 	bl	8001768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f98:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f9c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <HAL_FSMC_MspInit+0xb8>)
 8000fae:	f000 fbdb 	bl	8001768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000fb2:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000fb6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480e      	ldr	r0, [pc, #56]	; (8001000 <HAL_FSMC_MspInit+0xbc>)
 8000fc8:	f000 fbce 	bl	8001768 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_FSMC_MspInit+0xc0>)
 8000fe2:	f000 fbc1 	bl	8001768 <HAL_GPIO_Init>
 8000fe6:	e000      	b.n	8000fea <HAL_FSMC_MspInit+0xa6>
    return;
 8000fe8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000e8 	.word	0x200000e8
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40011c00 	.word	0x40011c00
 8000ffc:	40011800 	.word	0x40011800
 8001000:	40011400 	.word	0x40011400
 8001004:	40012000 	.word	0x40012000

08001008 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001010:	f7ff ff98 	bl	8000f44 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <HardFault_Handler+0x4>

0800102e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <MemManage_Handler+0x4>

08001034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <BusFault_Handler+0x4>

0800103a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f92a 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM2_IRQHandler+0x10>)
 8001076:	f001 fa2b 	bl	80024d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002d4 	.word	0x200002d4

08001084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USART1_IRQHandler+0x10>)
 800108a:	f001 fe73 	bl	8002d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000250 	.word	0x20000250

08001098 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <USART3_IRQHandler+0x10>)
 800109e:	f001 fe69 	bl	8002d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000124 	.word	0x20000124

080010ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <UART4_IRQHandler+0x10>)
 80010b2:	f001 fe5f 	bl	8002d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000294 	.word	0x20000294

080010c0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <UART5_IRQHandler+0x10>)
 80010c6:	f001 fe55 	bl	8002d74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000210 	.word	0x20000210

080010d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	e00a      	b.n	80010fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010e6:	f3af 8000 	nop.w
 80010ea:	4601      	mov	r1, r0
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	b2ca      	uxtb	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf0      	blt.n	80010e6 <_read+0x12>
	}

return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:
	}
	return len;
}

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001134:	605a      	str	r2, [r3, #4]
	return 0;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
	return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
	...

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f004 f9d0 	bl	8005544 <__errno>
 80011a4:	4602      	mov	r2, r0
 80011a6:	230c      	movs	r3, #12
 80011a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20010000 	.word	0x20010000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	200000ec 	.word	0x200000ec
 80011d8:	20000b68 	.word	0x20000b68

080011dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011ea:	e003      	b.n	80011f4 <LoopCopyDataInit>

080011ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011f2:	3104      	adds	r1, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011f4:	480a      	ldr	r0, [pc, #40]	; (8001220 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011fc:	d3f6      	bcc.n	80011ec <CopyDataInit>
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001200:	e002      	b.n	8001208 <LoopFillZerobss>

08001202 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001204:	f842 3b04 	str.w	r3, [r2], #4

08001208 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800120a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800120c:	d3f9      	bcc.n	8001202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800120e:	f7ff ffe5 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001212:	f004 f99d 	bl	8005550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff f869 	bl	80002ec <main>
  bx lr
 800121a:	4770      	bx	lr
  ldr r3, =_sidata
 800121c:	08006bbc 	.word	0x08006bbc
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001224:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 8001228:	200000c4 	.word	0x200000c4
  ldr r3, = _ebss
 800122c:	20000b64 	.word	0x20000b64

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f945 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fcbe 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f95d 	bl	800153e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f925 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000028 	.word	0x20000028
 80012b8:	20000030 	.word	0x20000030
 80012bc:	2000002c 	.word	0x2000002c

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000030 	.word	0x20000030
 80012e0:	20000b5c 	.word	0x20000b5c

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000b5c 	.word	0x20000b5c

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fff0 	bl	80012e4 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001310:	d005      	beq.n	800131e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_Delay+0x40>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131e:	bf00      	nop
 8001320:	f7ff ffe0 	bl	80012e4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	429a      	cmp	r2, r3
 800132e:	d8f7      	bhi.n	8001320 <HAL_Delay+0x28>
  {
  }
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000030 	.word	0x20000030

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4906      	ldr	r1, [pc, #24]	; (80013d4 <__NVIC_EnableIRQ+0x34>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff2d 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff42 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff35 	bl	80013a0 <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa2 	bl	8001490 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800156a:	2b02      	cmp	r3, #2
 800156c:	d005      	beq.n	800157a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2204      	movs	r2, #4
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e0d6      	b.n	8001728 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 020e 	bic.w	r2, r2, #14
 8001588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_DMA_Abort_IT+0x1dc>)
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d958      	bls.n	8001658 <HAL_DMA_Abort_IT+0x100>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_DMA_Abort_IT+0x1e0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04f      	beq.n	8001650 <HAL_DMA_Abort_IT+0xf8>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a61      	ldr	r2, [pc, #388]	; (800173c <HAL_DMA_Abort_IT+0x1e4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d048      	beq.n	800164c <HAL_DMA_Abort_IT+0xf4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a60      	ldr	r2, [pc, #384]	; (8001740 <HAL_DMA_Abort_IT+0x1e8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d040      	beq.n	8001646 <HAL_DMA_Abort_IT+0xee>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_DMA_Abort_IT+0x1ec>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d038      	beq.n	8001640 <HAL_DMA_Abort_IT+0xe8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_DMA_Abort_IT+0x1f0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d030      	beq.n	800163a <HAL_DMA_Abort_IT+0xe2>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a5b      	ldr	r2, [pc, #364]	; (800174c <HAL_DMA_Abort_IT+0x1f4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d028      	beq.n	8001634 <HAL_DMA_Abort_IT+0xdc>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a53      	ldr	r2, [pc, #332]	; (8001734 <HAL_DMA_Abort_IT+0x1dc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d020      	beq.n	800162e <HAL_DMA_Abort_IT+0xd6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a57      	ldr	r2, [pc, #348]	; (8001750 <HAL_DMA_Abort_IT+0x1f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_DMA_Abort_IT+0xd2>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a56      	ldr	r2, [pc, #344]	; (8001754 <HAL_DMA_Abort_IT+0x1fc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d012      	beq.n	8001626 <HAL_DMA_Abort_IT+0xce>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_DMA_Abort_IT+0x200>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00a      	beq.n	8001620 <HAL_DMA_Abort_IT+0xc8>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a53      	ldr	r2, [pc, #332]	; (800175c <HAL_DMA_Abort_IT+0x204>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d102      	bne.n	800161a <HAL_DMA_Abort_IT+0xc2>
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	e01b      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 800161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161e:	e018      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001624:	e015      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001626:	2310      	movs	r3, #16
 8001628:	e013      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 800162a:	2301      	movs	r3, #1
 800162c:	e011      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 800162e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001632:	e00e      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001634:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001638:	e00b      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 800163a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163e:	e008      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001644:	e005      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164a:	e002      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 800164c:	2310      	movs	r3, #16
 800164e:	e000      	b.n	8001652 <HAL_DMA_Abort_IT+0xfa>
 8001650:	2301      	movs	r3, #1
 8001652:	4a43      	ldr	r2, [pc, #268]	; (8001760 <HAL_DMA_Abort_IT+0x208>)
 8001654:	6053      	str	r3, [r2, #4]
 8001656:	e057      	b.n	8001708 <HAL_DMA_Abort_IT+0x1b0>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a36      	ldr	r2, [pc, #216]	; (8001738 <HAL_DMA_Abort_IT+0x1e0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d04f      	beq.n	8001702 <HAL_DMA_Abort_IT+0x1aa>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a35      	ldr	r2, [pc, #212]	; (800173c <HAL_DMA_Abort_IT+0x1e4>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d048      	beq.n	80016fe <HAL_DMA_Abort_IT+0x1a6>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a33      	ldr	r2, [pc, #204]	; (8001740 <HAL_DMA_Abort_IT+0x1e8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d040      	beq.n	80016f8 <HAL_DMA_Abort_IT+0x1a0>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a32      	ldr	r2, [pc, #200]	; (8001744 <HAL_DMA_Abort_IT+0x1ec>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d038      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x19a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a30      	ldr	r2, [pc, #192]	; (8001748 <HAL_DMA_Abort_IT+0x1f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d030      	beq.n	80016ec <HAL_DMA_Abort_IT+0x194>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <HAL_DMA_Abort_IT+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d028      	beq.n	80016e6 <HAL_DMA_Abort_IT+0x18e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_DMA_Abort_IT+0x1dc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d020      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x188>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <HAL_DMA_Abort_IT+0x1f8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d019      	beq.n	80016dc <HAL_DMA_Abort_IT+0x184>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a29      	ldr	r2, [pc, #164]	; (8001754 <HAL_DMA_Abort_IT+0x1fc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d012      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x180>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a28      	ldr	r2, [pc, #160]	; (8001758 <HAL_DMA_Abort_IT+0x200>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00a      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x17a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_DMA_Abort_IT+0x204>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d102      	bne.n	80016cc <HAL_DMA_Abort_IT+0x174>
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	e01b      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d0:	e018      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	e015      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016d8:	2310      	movs	r3, #16
 80016da:	e013      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016dc:	2301      	movs	r3, #1
 80016de:	e011      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e4:	e00e      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016ea:	e00b      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f0:	e008      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	e005      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fc:	e002      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 80016fe:	2310      	movs	r3, #16
 8001700:	e000      	b.n	8001704 <HAL_DMA_Abort_IT+0x1ac>
 8001702:	2301      	movs	r3, #1
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_DMA_Abort_IT+0x20c>)
 8001706:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
    } 
  }
  return status;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40020080 	.word	0x40020080
 8001738:	40020008 	.word	0x40020008
 800173c:	4002001c 	.word	0x4002001c
 8001740:	40020030 	.word	0x40020030
 8001744:	40020044 	.word	0x40020044
 8001748:	40020058 	.word	0x40020058
 800174c:	4002006c 	.word	0x4002006c
 8001750:	40020408 	.word	0x40020408
 8001754:	4002041c 	.word	0x4002041c
 8001758:	40020430 	.word	0x40020430
 800175c:	40020444 	.word	0x40020444
 8001760:	40020400 	.word	0x40020400
 8001764:	40020000 	.word	0x40020000

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e133      	b.n	80019e4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800177c:	2201      	movs	r2, #1
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8122 	bne.w	80019de <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d034      	beq.n	800180c <HAL_GPIO_Init+0xa4>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d80d      	bhi.n	80017c2 <HAL_GPIO_Init+0x5a>
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d02b      	beq.n	8001802 <HAL_GPIO_Init+0x9a>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d804      	bhi.n	80017b8 <HAL_GPIO_Init+0x50>
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d031      	beq.n	8001816 <HAL_GPIO_Init+0xae>
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d01c      	beq.n	80017f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b6:	e048      	b.n	800184a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d043      	beq.n	8001844 <HAL_GPIO_Init+0xdc>
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d01b      	beq.n	80017f8 <HAL_GPIO_Init+0x90>
          break;
 80017c0:	e043      	b.n	800184a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017c2:	4a8f      	ldr	r2, [pc, #572]	; (8001a00 <HAL_GPIO_Init+0x298>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d026      	beq.n	8001816 <HAL_GPIO_Init+0xae>
 80017c8:	4a8d      	ldr	r2, [pc, #564]	; (8001a00 <HAL_GPIO_Init+0x298>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d806      	bhi.n	80017dc <HAL_GPIO_Init+0x74>
 80017ce:	4a8d      	ldr	r2, [pc, #564]	; (8001a04 <HAL_GPIO_Init+0x29c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d020      	beq.n	8001816 <HAL_GPIO_Init+0xae>
 80017d4:	4a8c      	ldr	r2, [pc, #560]	; (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_GPIO_Init+0xae>
          break;
 80017da:	e036      	b.n	800184a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017dc:	4a8b      	ldr	r2, [pc, #556]	; (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0xae>
 80017e2:	4a8b      	ldr	r2, [pc, #556]	; (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d016      	beq.n	8001816 <HAL_GPIO_Init+0xae>
 80017e8:	4a8a      	ldr	r2, [pc, #552]	; (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0xae>
          break;
 80017ee:	e02c      	b.n	800184a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e028      	b.n	800184a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	3304      	adds	r3, #4
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e023      	b.n	800184a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	3308      	adds	r3, #8
 8001808:	623b      	str	r3, [r7, #32]
          break;
 800180a:	e01e      	b.n	800184a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	330c      	adds	r3, #12
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	e019      	b.n	800184a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800181e:	2304      	movs	r3, #4
 8001820:	623b      	str	r3, [r7, #32]
          break;
 8001822:	e012      	b.n	800184a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800182c:	2308      	movs	r3, #8
 800182e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	611a      	str	r2, [r3, #16]
          break;
 8001836:	e008      	b.n	800184a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	615a      	str	r2, [r3, #20]
          break;
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2bff      	cmp	r3, #255	; 0xff
 800184e:	d801      	bhi.n	8001854 <HAL_GPIO_Init+0xec>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	e001      	b.n	8001858 <HAL_GPIO_Init+0xf0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3304      	adds	r3, #4
 8001858:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2bff      	cmp	r3, #255	; 0xff
 800185e:	d802      	bhi.n	8001866 <HAL_GPIO_Init+0xfe>
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x104>
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	3b08      	subs	r3, #8
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	210f      	movs	r1, #15
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	6a39      	ldr	r1, [r7, #32]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	431a      	orrs	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a2 	beq.w	80019de <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800189a:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_GPIO_Init+0x2b0>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <HAL_GPIO_Init+0x2b0>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6193      	str	r3, [r2, #24]
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <HAL_GPIO_Init+0x2b0>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x2b4>)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01f      	beq.n	800191e <HAL_GPIO_Init+0x1b6>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_GPIO_Init+0x2bc>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d019      	beq.n	800191a <HAL_GPIO_Init+0x1b2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x2c0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_GPIO_Init+0x1ae>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x2c4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00d      	beq.n	8001912 <HAL_GPIO_Init+0x1aa>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x2c8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d007      	beq.n	800190e <HAL_GPIO_Init+0x1a6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x2cc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d101      	bne.n	800190a <HAL_GPIO_Init+0x1a2>
 8001906:	2305      	movs	r3, #5
 8001908:	e00a      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 800190a:	2306      	movs	r3, #6
 800190c:	e008      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 800190e:	2304      	movs	r3, #4
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 8001912:	2303      	movs	r3, #3
 8001914:	e004      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 8001916:	2302      	movs	r3, #2
 8001918:	e002      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x1b8>
 800191e:	2300      	movs	r3, #0
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	f002 0203 	and.w	r2, r2, #3
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	4093      	lsls	r3, r2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001930:	493a      	ldr	r1, [pc, #232]	; (8001a1c <HAL_GPIO_Init+0x2b4>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	493a      	ldr	r1, [pc, #232]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
 8001956:	e006      	b.n	8001966 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	43db      	mvns	r3, r3
 8001960:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001962:	4013      	ands	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4930      	ldr	r1, [pc, #192]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
 800197e:	e006      	b.n	800198e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	43db      	mvns	r3, r3
 8001988:	492b      	ldr	r1, [pc, #172]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 800198a:	4013      	ands	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	4926      	ldr	r1, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
 80019a6:	e006      	b.n	80019b6 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4921      	ldr	r1, [pc, #132]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	491c      	ldr	r1, [pc, #112]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	4917      	ldr	r1, [pc, #92]	; (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019da:	4013      	ands	r3, r2
 80019dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f47f aec4 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 80019f4:	bf00      	nop
 80019f6:	372c      	adds	r7, #44	; 0x2c
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	10210000 	.word	0x10210000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	10120000 	.word	0x10120000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10320000 	.word	0x10320000
 8001a14:	10220000 	.word	0x10220000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40011400 	.word	0x40011400
 8001a30:	40011800 	.word	0x40011800
 8001a34:	40011c00 	.word	0x40011c00
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	611a      	str	r2, [r3, #16]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43d9      	mvns	r1, r3
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	611a      	str	r2, [r3, #16]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e26c      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8087 	beq.w	8001bce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac0:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d00c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001acc:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d112      	bne.n	8001afe <HAL_RCC_OscConfig+0x5e>
 8001ad8:	4b8c      	ldr	r3, [pc, #560]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d10b      	bne.n	8001afe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae6:	4b89      	ldr	r3, [pc, #548]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d06c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x12c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d168      	bne.n	8001bcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e246      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x76>
 8001b08:	4b80      	ldr	r3, [pc, #512]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a7f      	ldr	r2, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e02e      	b.n	8001b74 <HAL_RCC_OscConfig+0xd4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b7b      	ldr	r3, [pc, #492]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a7a      	ldr	r2, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b78      	ldr	r3, [pc, #480]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a77      	ldr	r2, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_RCC_OscConfig+0xd4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0xbc>
 8001b42:	4b72      	ldr	r3, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a71      	ldr	r2, [pc, #452]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6e      	ldr	r2, [pc, #440]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0xd4>
 8001b5c:	4b6b      	ldr	r3, [pc, #428]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a67      	ldr	r2, [pc, #412]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fbb2 	bl	80012e4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fbae 	bl	80012e4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1fa      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0xe4>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fb9e 	bl	80012e4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fb9a 	bl	80012e4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1e6      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x10c>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x18c>
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x176>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1ba      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4939      	ldr	r1, [pc, #228]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e03a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_RCC_OscConfig+0x270>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fb53 	bl	80012e4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fb4f 	bl	80012e4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e19b      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4927      	ldr	r1, [pc, #156]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_RCC_OscConfig+0x270>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb32 	bl	80012e4 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fb2e 	bl	80012e4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e17a      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d03a      	beq.n	8001d24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d019      	beq.n	8001cea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fb12 	bl	80012e4 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fb0e 	bl	80012e4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e15a      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 fada 	bl	800229c <RCC_Delay>
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_RCC_OscConfig+0x274>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7ff faf8 	bl	80012e4 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf6:	e00f      	b.n	8001d18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff faf4 	bl	80012e4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d908      	bls.n	8001d18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e140      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	42420000 	.word	0x42420000
 8001d14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b9e      	ldr	r3, [pc, #632]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1e9      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a6 	beq.w	8001e7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d36:	4b97      	ldr	r3, [pc, #604]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	4b94      	ldr	r3, [pc, #592]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a93      	ldr	r2, [pc, #588]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b91      	ldr	r3, [pc, #580]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8a      	ldr	r2, [pc, #552]	; (8001f98 <HAL_RCC_OscConfig+0x4f8>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7ff fab5 	bl	80012e4 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7e:	f7ff fab1 	bl	80012e4 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e0fd      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	4b81      	ldr	r3, [pc, #516]	; (8001f98 <HAL_RCC_OscConfig+0x4f8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x312>
 8001da4:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	e02d      	b.n	8001e0e <HAL_RCC_OscConfig+0x36e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x334>
 8001dba:	4b76      	ldr	r3, [pc, #472]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a75      	ldr	r2, [pc, #468]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	e01c      	b.n	8001e0e <HAL_RCC_OscConfig+0x36e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x356>
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a6c      	ldr	r2, [pc, #432]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	e00b      	b.n	8001e0e <HAL_RCC_OscConfig+0x36e>
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a66      	ldr	r2, [pc, #408]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4b64      	ldr	r3, [pc, #400]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa65 	bl	80012e4 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fa61 	bl	80012e4 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0ab      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCC_OscConfig+0x37e>
 8001e40:	e014      	b.n	8001e6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fa4f 	bl	80012e4 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7ff fa4b 	bl	80012e4 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e095      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 8081 	beq.w	8001f8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e88:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d061      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d146      	bne.n	8001f2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x4fc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fa1f 	bl	80012e4 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff fa1b 	bl	80012e4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e067      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed0:	d108      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ed2:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	492d      	ldr	r1, [pc, #180]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a19      	ldr	r1, [r3, #32]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	4927      	ldr	r1, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_OscConfig+0x4fc>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f9ef 	bl	80012e4 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff f9eb 	bl	80012e4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e037      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x46a>
 8001f28:	e02f      	b.n	8001f8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <HAL_RCC_OscConfig+0x4fc>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff f9d8 	bl	80012e4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f9d4 	bl	80012e4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e020      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x498>
 8001f56:	e018      	b.n	8001f8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e013      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42420060 	.word	0x42420060

08001fa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0d0      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4965      	ldr	r1, [pc, #404]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b8      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a58      	ldr	r2, [pc, #352]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002006:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a52      	ldr	r2, [pc, #328]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	494d      	ldr	r1, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d040      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d115      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e07f      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e073      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4936      	ldr	r1, [pc, #216]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff f928 	bl	80012e4 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7ff f924 	bl	80012e4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e053      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d210      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4922      	ldr	r1, [pc, #136]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e032      	b.n	8002156 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4916      	ldr	r1, [pc, #88]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212e:	f000 f821 	bl	8002174 <HAL_RCC_GetSysClockFreq>
 8002132:	4601      	mov	r1, r0
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <HAL_RCC_ClockConfig+0x1c8>)
 8002140:	5cd3      	ldrb	r3, [r2, r3]
 8002142:	fa21 f303 	lsr.w	r3, r1, r3
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1cc>)
 8002148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1d0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff f886 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40022000 	.word	0x40022000
 8002164:	40021000 	.word	0x40021000
 8002168:	08006b04 	.word	0x08006b04
 800216c:	20000028 	.word	0x20000028
 8002170:	2000002c 	.word	0x2000002c

08002174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002174:	b490      	push	{r4, r7}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb0>)
 800217c:	1d3c      	adds	r4, r7, #4
 800217e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002180:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800219e:	4b23      	ldr	r3, [pc, #140]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x40>
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x46>
 80021b2:	e02d      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b6:	623b      	str	r3, [r7, #32]
      break;
 80021b8:	e02d      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021c6:	4413      	add	r3, r2
 80021c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d013      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c5b      	lsrs	r3, r3, #17
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021e6:	4413      	add	r3, r2
 80021e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4a0f      	ldr	r2, [pc, #60]	; (8002230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021f2:	fb02 f203 	mul.w	r2, r2, r3
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	e004      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	623b      	str	r3, [r7, #32]
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002212:	623b      	str	r3, [r7, #32]
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6a3b      	ldr	r3, [r7, #32]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bc90      	pop	{r4, r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	080069b4 	.word	0x080069b4
 8002228:	080069c4 	.word	0x080069c4
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200
 8002234:	003d0900 	.word	0x003d0900

08002238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <HAL_RCC_GetHCLKFreq+0x10>)
 800223e:	681b      	ldr	r3, [r3, #0]
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	20000028 	.word	0x20000028

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff2 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 8002254:	4601      	mov	r1, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4a03      	ldr	r2, [pc, #12]	; (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	08006b14 	.word	0x08006b14

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffde 	bl	8002238 <HAL_RCC_GetHCLKFreq>
 800227c:	4601      	mov	r1, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0adb      	lsrs	r3, r3, #11
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4a03      	ldr	r2, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	08006b14 	.word	0x08006b14

0800229c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <RCC_Delay+0x34>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <RCC_Delay+0x38>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0a5b      	lsrs	r3, r3, #9
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b8:	bf00      	nop
  }
  while (Delay --);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	60fa      	str	r2, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <RCC_Delay+0x1c>
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000028 	.word	0x20000028
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_SRAM_Init+0x1c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f2:	d101      	bne.n	80022f8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e038      	b.n	800236a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d106      	bne.n	8002312 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7fe fe7b 	bl	8001008 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3308      	adds	r3, #8
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f001 f835 	bl	800338c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	461a      	mov	r2, r3
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	f001 f897 	bl	8003460 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6858      	ldr	r0, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f001 f8c2 	bl	80034c8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	6892      	ldr	r2, [r2, #8]
 800234c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6892      	ldr	r2, [r2, #8]
 8002358:	f041 0101 	orr.w	r1, r1, #1
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e041      	b.n	8002408 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7fe fc4b 	bl	8000c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2202      	movs	r2, #2
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 fa71 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d001      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e044      	b.n	80024b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_TIM_Base_Start_IT+0xac>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d018      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x6c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a1c      	ldr	r2, [pc, #112]	; (80024c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x6c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800245c:	d00e      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x6c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d009      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x6c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_TIM_Base_Start_IT+0xb8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d004      	beq.n	800247c <HAL_TIM_Base_Start_IT+0x6c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_TIM_Base_Start_IT+0xbc>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d111      	bne.n	80024a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b06      	cmp	r3, #6
 800248c:	d010      	beq.n	80024b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249e:	e007      	b.n	80024b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40013400 	.word	0x40013400
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40000c00 	.word	0x40000c00

080024d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0202 	mvn.w	r2, #2
 80024fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f9a4 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f997 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f9a6 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0204 	mvn.w	r2, #4
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f97a 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f96d 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f97c 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0208 	mvn.w	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f950 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f943 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f952 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0210 	mvn.w	r2, #16
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2208      	movs	r2, #8
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f926 	bl	8002860 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f919 	bl	800284e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f928 	bl	8002872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0201 	mvn.w	r2, #1
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fa22 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b80      	cmp	r3, #128	; 0x80
 8002660:	d10e      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d107      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa91 	bl	8002ba2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f8ec 	bl	8002884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0220 	mvn.w	r2, #32
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa5c 	bl	8002b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0a6      	b.n	8002846 <HAL_TIM_ConfigClockSource+0x166>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d067      	beq.n	8002800 <HAL_TIM_ConfigClockSource+0x120>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d80b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x6c>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d073      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d802      	bhi.n	8002742 <HAL_TIM_ConfigClockSource+0x62>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d06f      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002740:	e078      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002742:	2b20      	cmp	r3, #32
 8002744:	d06c      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
 8002746:	2b30      	cmp	r3, #48	; 0x30
 8002748:	d06a      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800274a:	e073      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d00d      	beq.n	800276c <HAL_TIM_ConfigClockSource+0x8c>
 8002750:	2b70      	cmp	r3, #112	; 0x70
 8002752:	d804      	bhi.n	800275e <HAL_TIM_ConfigClockSource+0x7e>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d033      	beq.n	80027c0 <HAL_TIM_ConfigClockSource+0xe0>
 8002758:	2b60      	cmp	r3, #96	; 0x60
 800275a:	d041      	beq.n	80027e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800275c:	e06a      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d066      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x152>
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d017      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800276a:	e063      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f000 f97d 	bl	8002a7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800278e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e04c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f000 f966 	bl	8002a7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027bc:	609a      	str	r2, [r3, #8]
      break;
 80027be:	e039      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f000 f8dd 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2150      	movs	r1, #80	; 0x50
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f934 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80027de:	e029      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f000 f8fb 	bl	80029e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2160      	movs	r1, #96	; 0x60
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f924 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 80027fe:	e019      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	f000 f8bd 	bl	800298c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f914 	bl	8002a46 <TIM_ITRx_SetConfig>
      break;
 800281e:	e009      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 f90b 	bl	8002a46 <TIM_ITRx_SetConfig>
        break;
 8002830:	e000      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
	...

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a33      	ldr	r2, [pc, #204]	; (8002978 <TIM_Base_SetConfig+0xe0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a32      	ldr	r2, [pc, #200]	; (800297c <TIM_Base_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <TIM_Base_SetConfig+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <TIM_Base_SetConfig+0xec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <TIM_Base_SetConfig+0xf0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <TIM_Base_SetConfig+0xe0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <TIM_Base_SetConfig+0x82>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <TIM_Base_SetConfig+0xe4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00f      	beq.n	800291a <TIM_Base_SetConfig+0x82>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002900:	d00b      	beq.n	800291a <TIM_Base_SetConfig+0x82>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <TIM_Base_SetConfig+0xe8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <TIM_Base_SetConfig+0x82>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <TIM_Base_SetConfig+0xec>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <TIM_Base_SetConfig+0x82>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <TIM_Base_SetConfig+0xf0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d108      	bne.n	800292c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <TIM_Base_SetConfig+0xe0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0xc8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <TIM_Base_SetConfig+0xe4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40013400 	.word	0x40013400
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00

0800298c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f023 030a 	bic.w	r3, r3, #10
 80029c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f023 0210 	bic.w	r2, r3, #16
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	031b      	lsls	r3, r3, #12
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	621a      	str	r2, [r3, #32]
}
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f043 0307 	orr.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	021a      	lsls	r2, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	609a      	str	r2, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e050      	b.n	8002b72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d018      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10c      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40013400 	.word	0x40013400
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	40000c00 	.word	0x40000c00

08002b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e03f      	b.n	8002c46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fe f84e 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb39 	bl	8003270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	; 0x28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d17c      	bne.n	8002d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x2c>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e075      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Transmit+0x3e>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e06e      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fb1f 	bl	80012e4 <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	88fa      	ldrh	r2, [r7, #6]
 8002cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	88fa      	ldrh	r2, [r7, #6]
 8002cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d108      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e003      	b.n	8002cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ce0:	e02a      	b.n	8002d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	; 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f95c 	bl	8002faa <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e036      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10b      	bne.n	8002d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	3302      	adds	r3, #2
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	e007      	b.n	8002d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1cf      	bne.n	8002ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f92c 	bl	8002faa <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e006      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x52>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f9d5 	bl	800316e <UART_Receive_IT>
      return;
 8002dc4:	e0d1      	b.n	8002f6a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80b0 	beq.w	8002f2e <HAL_UART_IRQHandler+0x1ba>
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_UART_IRQHandler+0x70>
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80a5 	beq.w	8002f2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_UART_IRQHandler+0x90>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_UART_IRQHandler+0xb0>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_UART_IRQHandler+0xd0>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	f043 0204 	orr.w	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <HAL_UART_IRQHandler+0xfa>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <HAL_UART_IRQHandler+0xee>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	f043 0208 	orr.w	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d078      	beq.n	8002f68 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_UART_IRQHandler+0x11c>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f96f 	bl	800316e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_UART_IRQHandler+0x144>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d031      	beq.n	8002f1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8c0 	bl	800303e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d013      	beq.n	8002f0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	4a21      	ldr	r2, [pc, #132]	; (8002f70 <HAL_UART_IRQHandler+0x1fc>)
 8002eea:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fb31 	bl	8001558 <HAL_DMA_Abort_IT>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d016      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f06:	4610      	mov	r0, r2
 8002f08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0a:	e00e      	b.n	8002f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f843 	bl	8002f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f12:	e00a      	b.n	8002f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f83f 	bl	8002f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1a:	e006      	b.n	8002f2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f83b 	bl	8002f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f28:	e01e      	b.n	8002f68 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2a:	bf00      	nop
    return;
 8002f2c:	e01c      	b.n	8002f68 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_UART_IRQHandler+0x1d6>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f8ac 	bl	80030a0 <UART_Transmit_IT>
    return;
 8002f48:	e00f      	b.n	8002f6a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_UART_IRQHandler+0x1f6>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8ed 	bl	800313e <UART_EndTransmit_IT>
    return;
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f68:	bf00      	nop
  }
}
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	08003079 	.word	0x08003079

08002f74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr

08002faa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fba:	e02c      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc2:	d028      	beq.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <UART_WaitOnFlagUntilTimeout+0x30>
 8002fca:	f7fe f98b 	bl	80012e4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d21d      	bcs.n	8003016 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fe8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e00f      	b.n	8003036 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4013      	ands	r3, r2
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	429a      	cmp	r2, r3
 8003032:	d0c3      	beq.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003054:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff ff80 	bl	8002f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b21      	cmp	r3, #33	; 0x21
 80030b2:	d13e      	bne.n	8003132 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d114      	bne.n	80030e8 <UART_Transmit_IT+0x48>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d110      	bne.n	80030e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	621a      	str	r2, [r3, #32]
 80030e6:	e008      	b.n	80030fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6211      	str	r1, [r2, #32]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4619      	mov	r1, r3
 8003108:	84d1      	strh	r1, [r2, #38]	; 0x26
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003132:	2302      	movs	r3, #2
  }
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff08 	bl	8002f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b22      	cmp	r3, #34	; 0x22
 8003180:	d170      	bne.n	8003264 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318a:	d117      	bne.n	80031bc <UART_Receive_IT+0x4e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
 80031ba:	e026      	b.n	800320a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ce:	d007      	beq.n	80031e0 <UART_Receive_IT+0x72>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <UART_Receive_IT+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e008      	b.n	8003200 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4619      	mov	r1, r3
 8003218:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800321a:	2b00      	cmp	r3, #0
 800321c:	d120      	bne.n	8003260 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0220 	bic.w	r2, r2, #32
 800322c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800323c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fe95 	bl	8002f86 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e002      	b.n	8003266 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032aa:	f023 030c 	bic.w	r3, r3, #12
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <UART_SetConfig+0x114>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d103      	bne.n	80032e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7fe ffcc 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	e002      	b.n	80032e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032e0:	f7fe ffb4 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 80032e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <UART_SetConfig+0x118>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	0119      	lsls	r1, r3, #4
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fbb2 f2f3 	udiv	r2, r2, r3
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <UART_SetConfig+0x118>)
 800331e:	fba3 0302 	umull	r0, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	fb00 f303 	mul.w	r3, r0, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	3332      	adds	r3, #50	; 0x32
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <UART_SetConfig+0x118>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333c:	4419      	add	r1, r3
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <UART_SetConfig+0x118>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 020f 	and.w	r2, r3, #15
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	440a      	add	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40013800 	.word	0x40013800
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	f023 0101 	bic.w	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d102      	bne.n	80033bc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e001      	b.n	80033c0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80033cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80033d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80033d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80033de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80033e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80033ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80033f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80033f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80033fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <FSMC_NORSRAM_Init+0xd0>)
 800341c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003424:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800342c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	ea02 0103 	and.w	r1, r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4319      	orrs	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	0008fb7f 	.word	0x0008fb7f

08003460 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003476:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	431a      	orrs	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	431a      	orrs	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	041b      	lsls	r3, r3, #16
 8003494:	431a      	orrs	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	3b01      	subs	r3, #1
 800349c:	051b      	lsls	r3, r3, #20
 800349e:	431a      	orrs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	3b02      	subs	r3, #2
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	3201      	adds	r2, #1
 80034b4:	4319      	orrs	r1, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034dc:	d11d      	bne.n	800351a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	6811      	ldr	r1, [r2, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	6852      	ldr	r2, [r2, #4]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	4311      	orrs	r1, r2
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	6892      	ldr	r2, [r2, #8]
 80034fa:	0212      	lsls	r2, r2, #8
 80034fc:	4311      	orrs	r1, r2
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	6992      	ldr	r2, [r2, #24]
 8003502:	4311      	orrs	r1, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	68d2      	ldr	r2, [r2, #12]
 8003508:	0412      	lsls	r2, r2, #16
 800350a:	430a      	orrs	r2, r1
 800350c:	ea43 0102 	orr.w	r1, r3, r2
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003518:	e005      	b.n	8003526 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	cff00000 	.word	0xcff00000

08003538 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af04      	add	r7, sp, #16
 800353e:	4603      	mov	r3, r0
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	4613      	mov	r3, r2
 8003546:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8003548:	2300      	movs	r3, #0
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	2300      	movs	r3, #0
 800354e:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003556:	3308      	adds	r3, #8
 8003558:	019b      	lsls	r3, r3, #6
 800355a:	3308      	adds	r3, #8
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f94d 	bl	80037fc <WIZCHIP_READ>
 8003562:	4603      	mov	r3, r0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b1c      	cmp	r3, #28
 8003568:	f200 8118 	bhi.w	800379c <loopback_tcps+0x264>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <loopback_tcps+0x3c>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003781 	.word	0x08003781
 8003578:	0800379d 	.word	0x0800379d
 800357c:	0800379d 	.word	0x0800379d
 8003580:	0800379d 	.word	0x0800379d
 8003584:	0800379d 	.word	0x0800379d
 8003588:	0800379d 	.word	0x0800379d
 800358c:	0800379d 	.word	0x0800379d
 8003590:	0800379d 	.word	0x0800379d
 8003594:	0800379d 	.word	0x0800379d
 8003598:	0800379d 	.word	0x0800379d
 800359c:	0800379d 	.word	0x0800379d
 80035a0:	0800379d 	.word	0x0800379d
 80035a4:	0800379d 	.word	0x0800379d
 80035a8:	0800379d 	.word	0x0800379d
 80035ac:	0800379d 	.word	0x0800379d
 80035b0:	0800379d 	.word	0x0800379d
 80035b4:	0800379d 	.word	0x0800379d
 80035b8:	0800379d 	.word	0x0800379d
 80035bc:	0800379d 	.word	0x0800379d
 80035c0:	0800375f 	.word	0x0800375f
 80035c4:	0800379d 	.word	0x0800379d
 80035c8:	0800379d 	.word	0x0800379d
 80035cc:	0800379d 	.word	0x0800379d
 80035d0:	080035e9 	.word	0x080035e9
 80035d4:	0800379d 	.word	0x0800379d
 80035d8:	0800379d 	.word	0x0800379d
 80035dc:	0800379d 	.word	0x0800379d
 80035e0:	0800379d 	.word	0x0800379d
 80035e4:	0800373d 	.word	0x0800373d
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80035ee:	3308      	adds	r3, #8
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	3306      	adds	r3, #6
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f901 	bl	80037fc <WIZCHIP_READ>
 80035fa:	4603      	mov	r3, r0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d05a      	beq.n	80036bc <loopback_tcps+0x184>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800360c:	3308      	adds	r3, #8
 800360e:	019b      	lsls	r3, r3, #6
 8003610:	3314      	adds	r3, #20
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f8f2 	bl	80037fc <WIZCHIP_READ>
 8003618:	4603      	mov	r3, r0
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	b29b      	uxth	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	723b      	strb	r3, [r7, #8]
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003628:	3308      	adds	r3, #8
 800362a:	019b      	lsls	r3, r3, #6
 800362c:	3314      	adds	r3, #20
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f8e4 	bl	80037fc <WIZCHIP_READ>
 8003634:	4603      	mov	r3, r0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	727b      	strb	r3, [r7, #9]
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003640:	3308      	adds	r3, #8
 8003642:	019b      	lsls	r3, r3, #6
 8003644:	3316      	adds	r3, #22
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f8d8 	bl	80037fc <WIZCHIP_READ>
 800364c:	4603      	mov	r3, r0
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	72bb      	strb	r3, [r7, #10]
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800365c:	3308      	adds	r3, #8
 800365e:	019b      	lsls	r3, r3, #6
 8003660:	3316      	adds	r3, #22
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f8ca 	bl	80037fc <WIZCHIP_READ>
 8003668:	4603      	mov	r3, r0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003674:	3308      	adds	r3, #8
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	3312      	adds	r3, #18
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f8be 	bl	80037fc <WIZCHIP_READ>
 8003680:	4603      	mov	r3, r0
 8003682:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8003684:	79f9      	ldrb	r1, [r7, #7]
 8003686:	7a3b      	ldrb	r3, [r7, #8]
 8003688:	461c      	mov	r4, r3
 800368a:	7a7b      	ldrb	r3, [r7, #9]
 800368c:	461d      	mov	r5, r3
 800368e:	7abb      	ldrb	r3, [r7, #10]
 8003690:	461a      	mov	r2, r3
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	4618      	mov	r0, r3
 8003696:	89fb      	ldrh	r3, [r7, #14]
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	9001      	str	r0, [sp, #4]
 800369c:	9200      	str	r2, [sp, #0]
 800369e:	462b      	mov	r3, r5
 80036a0:	4622      	mov	r2, r4
 80036a2:	4844      	ldr	r0, [pc, #272]	; (80037b4 <loopback_tcps+0x27c>)
 80036a4:	f002 f832 	bl	800570c <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80036ae:	3308      	adds	r3, #8
 80036b0:	019b      	lsls	r3, r3, #6
 80036b2:	3306      	adds	r3, #6
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f882 	bl	80037c0 <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f9b0 	bl	8003a24 <getSn_RX_RSR>
 80036c4:	4603      	mov	r3, r0
 80036c6:	82fb      	strh	r3, [r7, #22]
 80036c8:	8afb      	ldrh	r3, [r7, #22]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d068      	beq.n	80037a0 <loopback_tcps+0x268>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80036ce:	8afb      	ldrh	r3, [r7, #22]
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d902      	bls.n	80036dc <loopback_tcps+0x1a4>
 80036d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036da:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 80036dc:	8afa      	ldrh	r2, [r7, #22]
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fe34 	bl	8004350 <recv>
 80036e8:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	dc01      	bgt.n	80036f4 <loopback_tcps+0x1bc>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	e05b      	b.n	80037ac <loopback_tcps+0x274>
			size = (uint16_t) ret;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 80036fc:	e019      	b.n	8003732 <loopback_tcps+0x1fa>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 80036fe:	8abb      	ldrh	r3, [r7, #20]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	18d1      	adds	r1, r2, r3
 8003704:	8afa      	ldrh	r2, [r7, #22]
 8003706:	8abb      	ldrh	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	b29a      	uxth	r2, r3
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fd10 	bl	8004134 <send>
 8003714:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	da05      	bge.n	8003728 <loopback_tcps+0x1f0>
				{
					close(sn);
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fb58 	bl	8003dd4 <close>
					return ret;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	e041      	b.n	80037ac <loopback_tcps+0x274>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	b29a      	uxth	r2, r3
 800372c:	8abb      	ldrh	r3, [r7, #20]
 800372e:	4413      	add	r3, r2
 8003730:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 8003732:	8afa      	ldrh	r2, [r7, #22]
 8003734:	8abb      	ldrh	r3, [r7, #20]
 8003736:	429a      	cmp	r2, r3
 8003738:	d1e1      	bne.n	80036fe <loopback_tcps+0x1c6>
			}
         }
         break;
 800373a:	e031      	b.n	80037a0 <loopback_tcps+0x268>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fc7e 	bl	8004040 <disconnect>
 8003744:	4603      	mov	r3, r0
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <loopback_tcps+0x21a>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	e02c      	b.n	80037ac <loopback_tcps+0x274>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	4619      	mov	r1, r3
 8003756:	4818      	ldr	r0, [pc, #96]	; (80037b8 <loopback_tcps+0x280>)
 8003758:	f001 ffd8 	bl	800570c <iprintf>
#endif
         break;
 800375c:	e025      	b.n	80037aa <loopback_tcps+0x272>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	88ba      	ldrh	r2, [r7, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	4815      	ldr	r0, [pc, #84]	; (80037bc <loopback_tcps+0x284>)
 8003766:	f001 ffd1 	bl	800570c <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fc09 	bl	8003f84 <listen>
 8003772:	4603      	mov	r3, r0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d013      	beq.n	80037a4 <loopback_tcps+0x26c>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	e015      	b.n	80037ac <loopback_tcps+0x274>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 8003780:	88ba      	ldrh	r2, [r7, #4]
 8003782:	79f8      	ldrb	r0, [r7, #7]
 8003784:	2300      	movs	r3, #0
 8003786:	2101      	movs	r1, #1
 8003788:	f000 f9fa 	bl	8003b80 <socket>
 800378c:	4603      	mov	r3, r0
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d007      	beq.n	80037a8 <loopback_tcps+0x270>
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	e007      	b.n	80037ac <loopback_tcps+0x274>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 800379c:	bf00      	nop
 800379e:	e004      	b.n	80037aa <loopback_tcps+0x272>
         break;
 80037a0:	bf00      	nop
 80037a2:	e002      	b.n	80037aa <loopback_tcps+0x272>
         break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <loopback_tcps+0x272>
         break;
 80037a8:	bf00      	nop
   }
   return 1;
 80037aa:	2301      	movs	r3, #1
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	080069c8 	.word	0x080069c8
 80037b8:	080069ec 	.word	0x080069ec
 80037bc:	08006a00 	.word	0x08006a00

080037c0 <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <WIZCHIP_WRITE+0x38>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4798      	blx	r3
   WIZCHIP.CS._select();
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <WIZCHIP_WRITE+0x38>)
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <WIZCHIP_WRITE+0x38>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	887a      	ldrh	r2, [r7, #2]
 80037de:	4611      	mov	r1, r2
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <WIZCHIP_WRITE+0x38>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80037ea:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <WIZCHIP_WRITE+0x38>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	4798      	blx	r3
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000034 	.word	0x20000034

080037fc <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <WIZCHIP_READ+0x38>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4798      	blx	r3
   WIZCHIP.CS._select();
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <WIZCHIP_READ+0x38>)
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 8003810:	4b08      	ldr	r3, [pc, #32]	; (8003834 <WIZCHIP_READ+0x38>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4798      	blx	r3
 8003818:	4603      	mov	r3, r0
 800381a:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <WIZCHIP_READ+0x38>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <WIZCHIP_READ+0x38>)
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	4798      	blx	r3
   return ret;
 8003828:	89fb      	ldrh	r3, [r7, #14]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000034 	.word	0x20000034

08003838 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	460a      	mov	r2, r1
 8003842:	71fb      	strb	r3, [r7, #7]
 8003844:	4613      	mov	r3, r2
 8003846:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800384e:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8003852:	3320      	adds	r3, #32
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ffd1 	bl	80037fc <WIZCHIP_READ>
 800385a:	4603      	mov	r3, r0
 800385c:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <setTMSR+0x46>
 8003868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800386c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003870:	b21a      	sxth	r2, r3
 8003872:	79bb      	ldrb	r3, [r7, #6]
 8003874:	b21b      	sxth	r3, r3
 8003876:	4313      	orrs	r3, r2
 8003878:	b21b      	sxth	r3, r3
 800387a:	81fb      	strh	r3, [r7, #14]
 800387c:	e009      	b.n	8003892 <setTMSR+0x5a>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 800387e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	b21a      	sxth	r2, r3
 8003886:	79bb      	ldrb	r3, [r7, #6]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	b21b      	sxth	r3, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	b21b      	sxth	r3, r3
 8003890:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003898:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 800389c:	3320      	adds	r3, #32
 800389e:	461a      	mov	r2, r3
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7ff ff8b 	bl	80037c0 <WIZCHIP_WRITE>
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00b      	beq.n	80038de <getTMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038cc:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80038d0:	3320      	adds	r3, #32
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff92 	bl	80037fc <WIZCHIP_READ>
 80038d8:	4603      	mov	r3, r0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e00c      	b.n	80038f8 <getTMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038e4:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80038e8:	3320      	adds	r3, #32
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff86 	bl	80037fc <WIZCHIP_READ>
 80038f0:	4603      	mov	r3, r0
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	460a      	mov	r2, r1
 800390a:	71fb      	strb	r3, [r7, #7]
 800390c:	4613      	mov	r3, r2
 800390e:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003916:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 800391a:	3328      	adds	r3, #40	; 0x28
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff6d 	bl	80037fc <WIZCHIP_READ>
 8003922:	4603      	mov	r3, r0
 8003924:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <setRMSR+0x46>
 8003930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003934:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003938:	b21a      	sxth	r2, r3
 800393a:	79bb      	ldrb	r3, [r7, #6]
 800393c:	b21b      	sxth	r3, r3
 800393e:	4313      	orrs	r3, r2
 8003940:	b21b      	sxth	r3, r3
 8003942:	81fb      	strh	r3, [r7, #14]
 8003944:	e009      	b.n	800395a <setRMSR+0x5a>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8003946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	b21a      	sxth	r2, r3
 800394e:	79bb      	ldrb	r3, [r7, #6]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	b21b      	sxth	r3, r3
 8003954:	4313      	orrs	r3, r2
 8003956:	b21b      	sxth	r3, r3
 8003958:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003960:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8003964:	3328      	adds	r3, #40	; 0x28
 8003966:	461a      	mov	r2, r3
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f7ff ff27 	bl	80037c0 <WIZCHIP_WRITE>
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <getRMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003994:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8003998:	3328      	adds	r3, #40	; 0x28
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff2e 	bl	80037fc <WIZCHIP_READ>
 80039a0:	4603      	mov	r3, r0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e00c      	b.n	80039c0 <getRMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80039ac:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80039b0:	3328      	adds	r3, #40	; 0x28
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff22 	bl	80037fc <WIZCHIP_READ>
 80039b8:	4603      	mov	r3, r0
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b29b      	uxth	r3, r3
 80039be:	b2db      	uxtb	r3, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 80039c8:	b590      	push	{r4, r7, lr}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80039e0:	3308      	adds	r3, #8
 80039e2:	019b      	lsls	r3, r3, #6
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff08 	bl	80037fc <WIZCHIP_READ>
 80039ec:	4603      	mov	r3, r0
 80039ee:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80039f6:	3308      	adds	r3, #8
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	3326      	adds	r3, #38	; 0x26
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fefd 	bl	80037fc <WIZCHIP_READ>
 8003a02:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003a04:	4323      	orrs	r3, r4
 8003a06:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d002      	beq.n	8003a16 <getSn_TX_FSR+0x4e>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8003a14:	e7e1      	b.n	80039da <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8003a16:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8003a18:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
	...

08003a24 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	019b      	lsls	r3, r3, #6
 8003a40:	3328      	adds	r3, #40	; 0x28
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff feda 	bl	80037fc <WIZCHIP_READ>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003a52:	3308      	adds	r3, #8
 8003a54:	019b      	lsls	r3, r3, #6
 8003a56:	332a      	adds	r3, #42	; 0x2a
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fecf 	bl	80037fc <WIZCHIP_READ>
 8003a5e:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003a60:	4323      	orrs	r3, r4
 8003a62:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d002      	beq.n	8003a72 <getSn_RX_RSR+0x4e>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8003a70:	e7e1      	b.n	8003a36 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8003a72:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <getSn_RX_RSR+0x68>)
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	105b      	asrs	r3, r3, #1
 8003a7c:	f003 0201 	and.w	r2, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4413      	add	r3, r2
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd90      	pop	{r4, r7, pc}
 8003a8c:	20000104 	.word	0x20000104

08003a90 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <wiz_send_data+0x60>
   
   for(i = 0; i < len ; i += 2)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e01b      	b.n	8003ae6 <wiz_send_data+0x56>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	019b      	lsls	r3, r3, #6
 8003ab8:	332e      	adds	r3, #46	; 0x2e
 8003aba:	4618      	mov	r0, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	b21a      	sxth	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3301      	adds	r3, #1
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	440b      	add	r3, r1
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b21b      	sxth	r3, r3
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7ff fe70 	bl	80037c0 <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3df      	bcc.n	8003aae <wiz_send_data+0x1e>
 8003aee:	e000      	b.n	8003af2 <wiz_send_data+0x62>
   if(len == 0)  return;
 8003af0:	bf00      	nop
}
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d02e      	beq.n	8003b72 <wiz_recv_data+0x7a>
      
   for(i = 0; i < len; i++)
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	e021      	b.n	8003b5e <wiz_recv_data+0x66>
   {
      if((i & 0x01)==0)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d113      	bne.n	8003b4c <wiz_recv_data+0x54>
      {
         rd = getSn_RX_FIFOR(sn);
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	019b      	lsls	r3, r3, #6
 8003b2e:	3330      	adds	r3, #48	; 0x30
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fe63 	bl	80037fc <WIZCHIP_READ>
 8003b36:	4603      	mov	r3, r0
 8003b38:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8003b3a:	8afb      	ldrh	r3, [r7, #22]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b299      	uxth	r1, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	b2ca      	uxtb	r2, r1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e005      	b.n	8003b58 <wiz_recv_data+0x60>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4413      	add	r3, r2
 8003b52:	8afa      	ldrh	r2, [r7, #22]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3d9      	bcc.n	8003b1a <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
 8003b68:	8afa      	ldrh	r2, [r7, #22]
 8003b6a:	b2d1      	uxtb	r1, r2
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <wiz_recv_data+0x84>)
 8003b6e:	54d1      	strb	r1, [r2, r3]
 8003b70:	e000      	b.n	8003b74 <wiz_recv_data+0x7c>
   if(len == 0) return;
 8003b72:	bf00      	nop
}
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000010c 	.word	0x2000010c

08003b80 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4623      	mov	r3, r4
 8003b90:	71fb      	strb	r3, [r7, #7]
 8003b92:	4603      	mov	r3, r0
 8003b94:	71bb      	strb	r3, [r7, #6]
 8003b96:	460b      	mov	r3, r1
 8003b98:	80bb      	strh	r3, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d902      	bls.n	8003baa <socket+0x2a>
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba8:	e101      	b.n	8003dae <socket+0x22e>
	switch(protocol)
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d004      	beq.n	8003bba <socket+0x3a>
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	db31      	blt.n	8003c18 <socket+0x98>
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	dc2f      	bgt.n	8003c18 <socket+0x98>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003bb8:	e032      	b.n	8003c20 <socket+0xa0>
            getSIPR((uint8_t*)&taddr);
 8003bba:	487f      	ldr	r0, [pc, #508]	; (8003db8 <socket+0x238>)
 8003bbc:	f7ff fe1e 	bl	80037fc <WIZCHIP_READ>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	0a1b      	lsrs	r3, r3, #8
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f107 030c 	add.w	r3, r7, #12
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	487a      	ldr	r0, [pc, #488]	; (8003db8 <socket+0x238>)
 8003bd0:	f7ff fe14 	bl	80037fc <WIZCHIP_READ>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	4876      	ldr	r0, [pc, #472]	; (8003dbc <socket+0x23c>)
 8003be4:	f7ff fe0a 	bl	80037fc <WIZCHIP_READ>
 8003be8:	4603      	mov	r3, r0
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	4870      	ldr	r0, [pc, #448]	; (8003dbc <socket+0x23c>)
 8003bfa:	f7ff fdff 	bl	80037fc <WIZCHIP_READ>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	3303      	adds	r3, #3
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <socket+0x9e>
 8003c12:	f06f 0302 	mvn.w	r3, #2
 8003c16:	e0ca      	b.n	8003dae <socket+0x22e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003c18:	f06f 0304 	mvn.w	r3, #4
 8003c1c:	e0c7      	b.n	8003dae <socket+0x22e>
	    break;
 8003c1e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <socket+0xb0>
 8003c2a:	f06f 0305 	mvn.w	r3, #5
 8003c2e:	e0be      	b.n	8003dae <socket+0x22e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <socket+0xea>
	{
   	switch(protocol)
 8003c36:	79bb      	ldrb	r3, [r7, #6]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d002      	beq.n	8003c42 <socket+0xc2>
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d008      	beq.n	8003c52 <socket+0xd2>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003c40:	e018      	b.n	8003c74 <socket+0xf4>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d110      	bne.n	8003c6e <socket+0xee>
 8003c4c:	f06f 0305 	mvn.w	r3, #5
 8003c50:	e0ad      	b.n	8003dae <socket+0x22e>
   	      if(flag & SF_IGMP_VER2)
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <socket+0xf2>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db06      	blt.n	8003c72 <socket+0xf2>
 8003c64:	f06f 0305 	mvn.w	r3, #5
 8003c68:	e0a1      	b.n	8003dae <socket+0x22e>
   	}
   }
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <socket+0xf4>
   	      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <socket+0xf4>
   	      break;
 8003c72:	bf00      	nop
	close(sn);
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f8ac 	bl	8003dd4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003c82:	3308      	adds	r3, #8
 8003c84:	019b      	lsls	r3, r3, #6
 8003c86:	4618      	mov	r0, r3
 8003c88:	79bb      	ldrb	r3, [r7, #6]
 8003c8a:	b21a      	sxth	r2, r3
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	b21b      	sxth	r3, r3
 8003c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21a      	sxth	r2, r3
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	01db      	lsls	r3, r3, #7
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	b21b      	sxth	r3, r3
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7ff fd87 	bl	80037c0 <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8003cb2:	88bb      	ldrh	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d110      	bne.n	8003cda <socket+0x15a>
	{
	   port = sock_any_port++;
 8003cb8:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <socket+0x240>)
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	b291      	uxth	r1, r2
 8003cc0:	4a3f      	ldr	r2, [pc, #252]	; (8003dc0 <socket+0x240>)
 8003cc2:	8011      	strh	r1, [r2, #0]
 8003cc4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	; (8003dc0 <socket+0x240>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d103      	bne.n	8003cda <socket+0x15a>
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <socket+0x240>)
 8003cd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003cd8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	019b      	lsls	r3, r3, #6
 8003ce4:	330a      	adds	r3, #10
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	88bb      	ldrh	r3, [r7, #4]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7ff fd67 	bl	80037c0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	019b      	lsls	r3, r3, #6
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fd5d 	bl	80037c0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003d06:	bf00      	nop
 8003d08:	79fb      	ldrb	r3, [r7, #7]
 8003d0a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003d0e:	3308      	adds	r3, #8
 8003d10:	019b      	lsls	r3, r3, #6
 8003d12:	3302      	adds	r3, #2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fd71 	bl	80037fc <WIZCHIP_READ>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f2      	bne.n	8003d08 <socket+0x188>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	2201      	movs	r2, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	b21a      	sxth	r2, r3
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <socket+0x244>)
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	4013      	ands	r3, r2
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <socket+0x244>)
 8003d3e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 0201 	and.w	r2, r3, #1
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	b21a      	sxth	r2, r3
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <socket+0x244>)
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b21b      	sxth	r3, r3
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b21b      	sxth	r3, r3
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <socket+0x244>)
 8003d5c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2201      	movs	r2, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <socket+0x248>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b21b      	sxth	r3, r3
 8003d72:	4013      	ands	r3, r2
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <socket+0x248>)
 8003d7a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <socket+0x24c>)
 8003d80:	2100      	movs	r1, #0
 8003d82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <socket+0x250>)
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003d8e:	bf00      	nop
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003d96:	3308      	adds	r3, #8
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fd2d 	bl	80037fc <WIZCHIP_READ>
 8003da2:	4603      	mov	r3, r0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f2      	beq.n	8003d90 <socket+0x210>
   return (int8_t)sn;
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd90      	pop	{r4, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	34000018 	.word	0x34000018
 8003dbc:	3400001a 	.word	0x3400001a
 8003dc0:	20000032 	.word	0x20000032
 8003dc4:	200000f0 	.word	0x200000f0
 8003dc8:	200000f2 	.word	0x200000f2
 8003dcc:	200000f4 	.word	0x200000f4
 8003dd0:	20000104 	.word	0x20000104

08003dd4 <close>:

int8_t close(uint8_t sn)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d902      	bls.n	8003dea <close+0x16>
 8003de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003de8:	e0bf      	b.n	8003f6a <close+0x196>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003df0:	3308      	adds	r3, #8
 8003df2:	019b      	lsls	r3, r3, #6
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fd01 	bl	80037fc <WIZCHIP_READ>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d15a      	bne.n	8003eba <close+0xe6>
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fdde 	bl	80039c8 <getSn_TX_FSR>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fd4e 	bl	80038b2 <getTMSR>
 8003e16:	4603      	mov	r3, r0
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	429c      	cmp	r4, r3
 8003e1c:	d04d      	beq.n	8003eba <close+0xe6>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8003e1e:	2300      	movs	r3, #0
 8003e20:	733b      	strb	r3, [r7, #12]
 8003e22:	2300      	movs	r3, #0
 8003e24:	737b      	strb	r3, [r7, #13]
 8003e26:	2300      	movs	r3, #0
 8003e28:	73bb      	strb	r3, [r7, #14]
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	73fb      	strb	r3, [r7, #15]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003e34:	3308      	adds	r3, #8
 8003e36:	019b      	lsls	r3, r3, #6
 8003e38:	2102      	movs	r1, #2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fcc0 	bl	80037c0 <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003e46:	3308      	adds	r3, #8
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	330a      	adds	r3, #10
 8003e4c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fcb5 	bl	80037c0 <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	019b      	lsls	r3, r3, #6
 8003e60:	3302      	adds	r3, #2
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fcab 	bl	80037c0 <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8003e6a:	bf00      	nop
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003e72:	3308      	adds	r3, #8
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	3302      	adds	r3, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fcbf 	bl	80037fc <WIZCHIP_READ>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f2      	bne.n	8003e6c <close+0x98>
      while(getSn_SR(sn) != SOCK_UDP);
 8003e86:	bf00      	nop
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003e8e:	3308      	adds	r3, #8
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	3308      	adds	r3, #8
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fcb1 	bl	80037fc <WIZCHIP_READ>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b22      	cmp	r3, #34	; 0x22
 8003ea0:	d1f2      	bne.n	8003e88 <close+0xb4>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8003ea2:	f107 020c 	add.w	r2, r7, #12
 8003ea6:	f107 010c 	add.w	r1, r7, #12
 8003eaa:	79f8      	ldrb	r0, [r7, #7]
 8003eac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f000 fbbf 	bl	8004638 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	019b      	lsls	r3, r3, #6
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	2110      	movs	r1, #16
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fc79 	bl	80037c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003ece:	bf00      	nop
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	3302      	adds	r3, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fc8d 	bl	80037fc <WIZCHIP_READ>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <close+0xfc>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	019b      	lsls	r3, r3, #6
 8003ef4:	3306      	adds	r3, #6
 8003ef6:	21ff      	movs	r1, #255	; 0xff
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff fc61 	bl	80037c0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2201      	movs	r2, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <close+0x1a0>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b21b      	sxth	r3, r3
 8003f12:	4013      	ands	r3, r2
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4b16      	ldr	r3, [pc, #88]	; (8003f74 <close+0x1a0>)
 8003f1a:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	b21b      	sxth	r3, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	b21a      	sxth	r2, r3
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <close+0x1a4>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	4013      	ands	r3, r2
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <close+0x1a4>)
 8003f38:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <close+0x1a8>)
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <close+0x1ac>)
 8003f48:	2100      	movs	r1, #0
 8003f4a:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003f4c:	bf00      	nop
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003f54:	3308      	adds	r3, #8
 8003f56:	019b      	lsls	r3, r3, #6
 8003f58:	3308      	adds	r3, #8
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fc4e 	bl	80037fc <WIZCHIP_READ>
 8003f60:	4603      	mov	r3, r0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f2      	bne.n	8003f4e <close+0x17a>
	return SOCK_OK;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd90      	pop	{r4, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200000f0 	.word	0x200000f0
 8003f78:	200000f2 	.word	0x200000f2
 8003f7c:	200000f4 	.word	0x200000f4
 8003f80:	20000104 	.word	0x20000104

08003f84 <listen>:

int8_t listen(uint8_t sn)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d902      	bls.n	8003f9a <listen+0x16>
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f98:	e04d      	b.n	8004036 <listen+0xb2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	019b      	lsls	r3, r3, #6
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fc29 	bl	80037fc <WIZCHIP_READ>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d002      	beq.n	8003fba <listen+0x36>
 8003fb4:	f06f 0304 	mvn.w	r3, #4
 8003fb8:	e03d      	b.n	8004036 <listen+0xb2>
	CHECK_SOCKINIT();
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	019b      	lsls	r3, r3, #6
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fc18 	bl	80037fc <WIZCHIP_READ>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b13      	cmp	r3, #19
 8003fd2:	d002      	beq.n	8003fda <listen+0x56>
 8003fd4:	f06f 0302 	mvn.w	r3, #2
 8003fd8:	e02d      	b.n	8004036 <listen+0xb2>
	setSn_CR(sn,Sn_CR_LISTEN);
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	019b      	lsls	r3, r3, #6
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fbe9 	bl	80037c0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003fee:	bf00      	nop
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fbfd 	bl	80037fc <WIZCHIP_READ>
 8004002:	4603      	mov	r3, r0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f2      	bne.n	8003ff0 <listen+0x6c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800400a:	e006      	b.n	800401a <listen+0x96>
   {
         close(sn);
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fee0 	bl	8003dd4 <close>
         return SOCKERR_SOCKCLOSED;
 8004014:	f06f 0303 	mvn.w	r3, #3
 8004018:	e00d      	b.n	8004036 <listen+0xb2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004020:	3308      	adds	r3, #8
 8004022:	019b      	lsls	r3, r3, #6
 8004024:	3308      	adds	r3, #8
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fbe8 	bl	80037fc <WIZCHIP_READ>
 800402c:	4603      	mov	r3, r0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b14      	cmp	r3, #20
 8004032:	d1eb      	bne.n	800400c <listen+0x88>
   }
   return SOCK_OK;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d902      	bls.n	8004056 <disconnect+0x16>
 8004050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004054:	e066      	b.n	8004124 <disconnect+0xe4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800405c:	3308      	adds	r3, #8
 800405e:	019b      	lsls	r3, r3, #6
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fbcb 	bl	80037fc <WIZCHIP_READ>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	2b01      	cmp	r3, #1
 800406e:	d002      	beq.n	8004076 <disconnect+0x36>
 8004070:	f06f 0304 	mvn.w	r3, #4
 8004074:	e056      	b.n	8004124 <disconnect+0xe4>
	setSn_CR(sn,Sn_CR_DISCON);
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800407c:	3308      	adds	r3, #8
 800407e:	019b      	lsls	r3, r3, #6
 8004080:	3302      	adds	r3, #2
 8004082:	2108      	movs	r1, #8
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fb9b 	bl	80037c0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800408a:	bf00      	nop
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004092:	3308      	adds	r3, #8
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	3302      	adds	r3, #2
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff fbaf 	bl	80037fc <WIZCHIP_READ>
 800409e:	4603      	mov	r3, r0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f2      	bne.n	800408c <disconnect+0x4c>
	sock_is_sending &= ~(1<<sn);
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2201      	movs	r2, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	b21b      	sxth	r3, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <disconnect+0xec>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b21b      	sxth	r3, r3
 80040ba:	4013      	ands	r3, r2
 80040bc:	b21b      	sxth	r3, r3
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <disconnect+0xec>)
 80040c2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80040c4:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <disconnect+0xf0>)
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	fa42 f303 	asr.w	r3, r2, r3
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <disconnect+0xc8>
 80040d8:	2300      	movs	r3, #0
 80040da:	e023      	b.n	8004124 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80040e2:	3308      	adds	r3, #8
 80040e4:	019b      	lsls	r3, r3, #6
 80040e6:	3306      	adds	r3, #6
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fb87 	bl	80037fc <WIZCHIP_READ>
 80040ee:	4603      	mov	r3, r0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <disconnect+0xc8>
	   {
	      close(sn);
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fe69 	bl	8003dd4 <close>
	      return SOCKERR_TIMEOUT;
 8004102:	f06f 030c 	mvn.w	r3, #12
 8004106:	e00d      	b.n	8004124 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800410e:	3308      	adds	r3, #8
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	3308      	adds	r3, #8
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fb71 	bl	80037fc <WIZCHIP_READ>
 800411a:	4603      	mov	r3, r0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1dc      	bne.n	80040dc <disconnect+0x9c>
	   }
	}
	return SOCK_OK;
 8004122:	2301      	movs	r3, #1
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200000f2 	.word	0x200000f2
 8004130:	200000f0 	.word	0x200000f0

08004134 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
 8004140:	4613      	mov	r3, r2
 8004142:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004148:	2300      	movs	r3, #0
 800414a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d902      	bls.n	8004158 <send+0x24>
 8004152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004156:	e0f3      	b.n	8004340 <send+0x20c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004158:	79fb      	ldrb	r3, [r7, #7]
 800415a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800415e:	3308      	adds	r3, #8
 8004160:	019b      	lsls	r3, r3, #6
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fb4a 	bl	80037fc <WIZCHIP_READ>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <send+0x44>
 8004172:	f06f 0304 	mvn.w	r3, #4
 8004176:	e0e3      	b.n	8004340 <send+0x20c>
   CHECK_SOCKDATA();
 8004178:	88bb      	ldrh	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <send+0x50>
 800417e:	f06f 030d 	mvn.w	r3, #13
 8004182:	e0dd      	b.n	8004340 <send+0x20c>
   tmp = getSn_SR(sn);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800418a:	3308      	adds	r3, #8
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	3308      	adds	r3, #8
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fb33 	bl	80037fc <WIZCHIP_READ>
 8004196:	4603      	mov	r3, r0
 8004198:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b17      	cmp	r3, #23
 800419e:	d005      	beq.n	80041ac <send+0x78>
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b1c      	cmp	r3, #28
 80041a4:	d002      	beq.n	80041ac <send+0x78>
 80041a6:	f06f 0306 	mvn.w	r3, #6
 80041aa:	e0c9      	b.n	8004340 <send+0x20c>
   if( sock_is_sending & (1<<sn) )
 80041ac:	4b66      	ldr	r3, [pc, #408]	; (8004348 <send+0x214>)
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	fa42 f303 	asr.w	r3, r2, r3
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d037      	beq.n	8004230 <send+0xfc>
   {
      tmp = getSn_IR(sn);
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80041c6:	3308      	adds	r3, #8
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	3306      	adds	r3, #6
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fb15 	bl	80037fc <WIZCHIP_READ>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d019      	beq.n	8004214 <send+0xe0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80041e6:	3308      	adds	r3, #8
 80041e8:	019b      	lsls	r3, r3, #6
 80041ea:	3306      	adds	r3, #6
 80041ec:	2110      	movs	r1, #16
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fae6 	bl	80037c0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	2201      	movs	r2, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	b21b      	sxth	r3, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	b21a      	sxth	r2, r3
 8004202:	4b51      	ldr	r3, [pc, #324]	; (8004348 <send+0x214>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b21b      	sxth	r3, r3
 8004208:	4013      	ands	r3, r2
 800420a:	b21b      	sxth	r3, r3
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <send+0x214>)
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e00d      	b.n	8004230 <send+0xfc>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <send+0xf8>
      {
         close(sn);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fdd7 	bl	8003dd4 <close>
         return SOCKERR_TIMEOUT;
 8004226:	f06f 030c 	mvn.w	r3, #12
 800422a:	e089      	b.n	8004340 <send+0x20c>
      }
      else return SOCK_BUSY;
 800422c:	2300      	movs	r3, #0
 800422e:	e087      	b.n	8004340 <send+0x20c>
   }
   freesize = getSn_TxMAX(sn);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff fb3d 	bl	80038b2 <getTMSR>
 8004238:	4603      	mov	r3, r0
 800423a:	b29b      	uxth	r3, r3
 800423c:	029b      	lsls	r3, r3, #10
 800423e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004240:	88ba      	ldrh	r2, [r7, #4]
 8004242:	89bb      	ldrh	r3, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d901      	bls.n	800424c <send+0x118>
 8004248:	89bb      	ldrh	r3, [r7, #12]
 800424a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fbba 	bl	80039c8 <getSn_TX_FSR>
 8004254:	4603      	mov	r3, r0
 8004256:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800425e:	3308      	adds	r3, #8
 8004260:	019b      	lsls	r3, r3, #6
 8004262:	3308      	adds	r3, #8
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fac9 	bl	80037fc <WIZCHIP_READ>
 800426a:	4603      	mov	r3, r0
 800426c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b17      	cmp	r3, #23
 8004272:	d009      	beq.n	8004288 <send+0x154>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b1c      	cmp	r3, #28
 8004278:	d006      	beq.n	8004288 <send+0x154>
      {
         close(sn);
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fda9 	bl	8003dd4 <close>
         return SOCKERR_SOCKSTATUS;
 8004282:	f06f 0306 	mvn.w	r3, #6
 8004286:	e05b      	b.n	8004340 <send+0x20c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004288:	4b30      	ldr	r3, [pc, #192]	; (800434c <send+0x218>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	fa42 f303 	asr.w	r3, r2, r3
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <send+0x174>
 800429c:	88ba      	ldrh	r2, [r7, #4]
 800429e:	89bb      	ldrh	r3, [r7, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d901      	bls.n	80042a8 <send+0x174>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e04b      	b.n	8004340 <send+0x20c>
      if(len <= freesize) break;
 80042a8:	88ba      	ldrh	r2, [r7, #4]
 80042aa:	89bb      	ldrh	r3, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d900      	bls.n	80042b2 <send+0x17e>
      freesize = getSn_TX_FSR(sn);
 80042b0:	e7cc      	b.n	800424c <send+0x118>
      if(len <= freesize) break;
 80042b2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80042b4:	88ba      	ldrh	r2, [r7, #4]
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff fbe8 	bl	8003a90 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80042c6:	3308      	adds	r3, #8
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	3320      	adds	r3, #32
 80042cc:	461a      	mov	r2, r3
 80042ce:	88bb      	ldrh	r3, [r7, #4]
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fa72 	bl	80037c0 <WIZCHIP_WRITE>
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80042e2:	3308      	adds	r3, #8
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	3322      	adds	r3, #34	; 0x22
 80042e8:	461a      	mov	r2, r3
 80042ea:	88bb      	ldrh	r3, [r7, #4]
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7ff fa66 	bl	80037c0 <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80042fa:	3308      	adds	r3, #8
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	3302      	adds	r3, #2
 8004300:	2120      	movs	r1, #32
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fa5c 	bl	80037c0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8004308:	bf00      	nop
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004310:	3308      	adds	r3, #8
 8004312:	019b      	lsls	r3, r3, #6
 8004314:	3302      	adds	r3, #2
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fa70 	bl	80037fc <WIZCHIP_READ>
 800431c:	4603      	mov	r3, r0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f2      	bne.n	800430a <send+0x1d6>
   sock_is_sending |= (1 << sn);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	b21a      	sxth	r2, r3
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <send+0x214>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b21b      	sxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b21b      	sxth	r3, r3
 8004338:	b29a      	uxth	r2, r3
 800433a:	4b03      	ldr	r3, [pc, #12]	; (8004348 <send+0x214>)
 800433c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800433e:	88bb      	ldrh	r3, [r7, #4]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200000f2 	.word	0x200000f2
 800434c:	200000f0 	.word	0x200000f0

08004350 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
 800435c:	4613      	mov	r3, r2
 800435e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	2b08      	cmp	r3, #8
 800436c:	d902      	bls.n	8004374 <recv+0x24>
 800436e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004372:	e154      	b.n	800461e <recv+0x2ce>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800437a:	3308      	adds	r3, #8
 800437c:	019b      	lsls	r3, r3, #6
 800437e:	4618      	mov	r0, r3
 8004380:	f7ff fa3c 	bl	80037fc <WIZCHIP_READ>
 8004384:	4603      	mov	r3, r0
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	2b01      	cmp	r3, #1
 800438c:	d002      	beq.n	8004394 <recv+0x44>
 800438e:	f06f 0304 	mvn.w	r3, #4
 8004392:	e144      	b.n	800461e <recv+0x2ce>
   CHECK_SOCKDATA();
 8004394:	88bb      	ldrh	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <recv+0x50>
 800439a:	f06f 030d 	mvn.w	r3, #13
 800439e:	e13e      	b.n	800461e <recv+0x2ce>
   
   recvsize = getSn_RxMAX(sn);
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fae9 	bl	800397a <getRMSR>
 80043a8:	4603      	mov	r3, r0
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 80043b0:	89fa      	ldrh	r2, [r7, #14]
 80043b2:	88bb      	ldrh	r3, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d201      	bcs.n	80043bc <recv+0x6c>
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	4a9a      	ldr	r2, [pc, #616]	; (8004628 <recv+0x2d8>)
 80043c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d14a      	bne.n	800445e <recv+0x10e>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fb2a 	bl	8003a24 <getSn_RX_RSR>
 80043d0:	4603      	mov	r3, r0
 80043d2:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80043da:	3308      	adds	r3, #8
 80043dc:	019b      	lsls	r3, r3, #6
 80043de:	3308      	adds	r3, #8
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fa0b 	bl	80037fc <WIZCHIP_READ>
 80043e6:	4603      	mov	r3, r0
 80043e8:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 80043ea:	7b7b      	ldrb	r3, [r7, #13]
 80043ec:	2b17      	cmp	r3, #23
 80043ee:	d020      	beq.n	8004432 <recv+0xe2>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80043f0:	7b7b      	ldrb	r3, [r7, #13]
 80043f2:	2b1c      	cmp	r3, #28
 80043f4:	d116      	bne.n	8004424 <recv+0xd4>
            {
               if(recvsize != 0) break;
 80043f6:	89fb      	ldrh	r3, [r7, #14]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d12d      	bne.n	8004458 <recv+0x108>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fae2 	bl	80039c8 <getSn_TX_FSR>
 8004404:	4604      	mov	r4, r0
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fa52 	bl	80038b2 <getTMSR>
 800440e:	4603      	mov	r3, r0
 8004410:	029b      	lsls	r3, r3, #10
 8004412:	429c      	cmp	r4, r3
 8004414:	d10d      	bne.n	8004432 <recv+0xe2>
               {
                  close(sn);
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fcdb 	bl	8003dd4 <close>
                  return SOCKERR_SOCKSTATUS;
 800441e:	f06f 0306 	mvn.w	r3, #6
 8004422:	e0fc      	b.n	800461e <recv+0x2ce>
               }
            }
            else
            {
               close(sn);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fcd4 	bl	8003dd4 <close>
               return SOCKERR_SOCKSTATUS;
 800442c:	f06f 0306 	mvn.w	r3, #6
 8004430:	e0f5      	b.n	800461e <recv+0x2ce>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8004432:	4b7e      	ldr	r3, [pc, #504]	; (800462c <recv+0x2dc>)
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	fa42 f303 	asr.w	r3, r2, r3
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <recv+0x100>
 8004446:	89fb      	ldrh	r3, [r7, #14]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <recv+0x100>
 800444c:	2300      	movs	r3, #0
 800444e:	e0e6      	b.n	800461e <recv+0x2ce>
         if(recvsize != 0) break;
 8004450:	89fb      	ldrh	r3, [r7, #14]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <recv+0x10c>
         recvsize = getSn_RX_RSR(sn);
 8004456:	e7b7      	b.n	80043c8 <recv+0x78>
               if(recvsize != 0) break;
 8004458:	bf00      	nop
 800445a:	e000      	b.n	800445e <recv+0x10e>
         if(recvsize != 0) break;
 800445c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	4a71      	ldr	r2, [pc, #452]	; (8004628 <recv+0x2d8>)
 8004462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <recv+0x134>
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004470:	3308      	adds	r3, #8
 8004472:	019b      	lsls	r3, r3, #6
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff f9c1 	bl	80037fc <WIZCHIP_READ>
 800447a:	4603      	mov	r3, r0
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d038      	beq.n	80044f6 <recv+0x1a6>
   {
      mr = getMR();
 8004484:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8004488:	f7ff f9b8 	bl	80037fc <WIZCHIP_READ>
 800448c:	4603      	mov	r3, r0
 800448e:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004496:	3308      	adds	r3, #8
 8004498:	019b      	lsls	r3, r3, #6
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f9ae 	bl	80037fc <WIZCHIP_READ>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d120      	bne.n	80044ec <recv+0x19c>
      {
         wiz_recv_data(sn,head,2);
 80044aa:	f107 0108 	add.w	r1, r7, #8
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	2202      	movs	r2, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fb20 	bl	8003af8 <wiz_recv_data>
         if(mr & MR_FS)
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <recv+0x184>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80044c2:	7a7b      	ldrb	r3, [r7, #9]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	b21a      	sxth	r2, r3
 80044c8:	7a3b      	ldrb	r3, [r7, #8]
 80044ca:	b21b      	sxth	r3, r3
 80044cc:	4313      	orrs	r3, r2
 80044ce:	b21b      	sxth	r3, r3
 80044d0:	81fb      	strh	r3, [r7, #14]
 80044d2:	e007      	b.n	80044e4 <recv+0x194>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80044d4:	7a3b      	ldrb	r3, [r7, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	b21a      	sxth	r2, r3
 80044da:	7a7b      	ldrb	r3, [r7, #9]
 80044dc:	b21b      	sxth	r3, r3
 80044de:	4313      	orrs	r3, r2
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	4a52      	ldr	r2, [pc, #328]	; (8004630 <recv+0x2e0>)
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	494e      	ldr	r1, [pc, #312]	; (8004628 <recv+0x2d8>)
 80044f0:	89fa      	ldrh	r2, [r7, #14]
 80044f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	4a4b      	ldr	r2, [pc, #300]	; (8004628 <recv+0x2d8>)
 80044fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044fe:	88ba      	ldrh	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d904      	bls.n	800450e <recv+0x1be>
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	4a48      	ldr	r2, [pc, #288]	; (8004628 <recv+0x2d8>)
 8004508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800450c:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 800450e:	88bb      	ldrh	r3, [r7, #4]
 8004510:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	4a46      	ldr	r2, [pc, #280]	; (8004630 <recv+0x2e0>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01d      	beq.n	800455c <recv+0x20c>
   {
      *buf = sock_remained_byte[sn];
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4a44      	ldr	r2, [pc, #272]	; (8004634 <recv+0x2e4>)
 8004524:	5cd2      	ldrb	r2, [r2, r3]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	701a      	strb	r2, [r3, #0]
      buf++;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	4a3f      	ldr	r2, [pc, #252]	; (8004630 <recv+0x2e0>)
 8004534:	5cd2      	ldrb	r2, [r2, r3]
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	f022 0202 	bic.w	r2, r2, #2
 800453c:	b2d1      	uxtb	r1, r2
 800453e:	4a3c      	ldr	r2, [pc, #240]	; (8004630 <recv+0x2e0>)
 8004540:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8004542:	89fb      	ldrh	r3, [r7, #14]
 8004544:	3b01      	subs	r3, #1
 8004546:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	4a37      	ldr	r2, [pc, #220]	; (8004628 <recv+0x2d8>)
 800454c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004550:	79fb      	ldrb	r3, [r7, #7]
 8004552:	3a01      	subs	r2, #1
 8004554:	b291      	uxth	r1, r2
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <recv+0x2d8>)
 8004558:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 800455c:	89fb      	ldrh	r3, [r7, #14]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01d      	beq.n	800459e <recv+0x24e>
   {
      wiz_recv_data(sn, buf, recvsize);
 8004562:	89fa      	ldrh	r2, [r7, #14]
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fac5 	bl	8003af8 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004574:	3308      	adds	r3, #8
 8004576:	019b      	lsls	r3, r3, #6
 8004578:	3302      	adds	r3, #2
 800457a:	2140      	movs	r1, #64	; 0x40
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f91f 	bl	80037c0 <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8004582:	bf00      	nop
 8004584:	79fb      	ldrb	r3, [r7, #7]
 8004586:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800458a:	3308      	adds	r3, #8
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	3302      	adds	r3, #2
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff f933 	bl	80037fc <WIZCHIP_READ>
 8004596:	4603      	mov	r3, r0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f2      	bne.n	8004584 <recv+0x234>
   }
   sock_remained_size[sn] -= recvsize;
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <recv+0x2d8>)
 80045a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	89fa      	ldrh	r2, [r7, #14]
 80045aa:	1a8a      	subs	r2, r1, r2
 80045ac:	b291      	uxth	r1, r2
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <recv+0x2d8>)
 80045b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <recv+0x2d8>)
 80045b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d017      	beq.n	80045f0 <recv+0x2a0>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <recv+0x2e0>)
 80045c4:	5cd2      	ldrb	r2, [r2, r3]
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	b2d1      	uxtb	r1, r2
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <recv+0x2e0>)
 80045d0:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80045d2:	89fb      	ldrh	r3, [r7, #14]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00d      	beq.n	80045f8 <recv+0x2a8>
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <recv+0x2e0>)
 80045e0:	5cd2      	ldrb	r2, [r2, r3]
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	f042 0202 	orr.w	r2, r2, #2
 80045e8:	b2d1      	uxtb	r1, r2
 80045ea:	4a11      	ldr	r2, [pc, #68]	; (8004630 <recv+0x2e0>)
 80045ec:	54d1      	strb	r1, [r2, r3]
 80045ee:	e003      	b.n	80045f8 <recv+0x2a8>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <recv+0x2e0>)
 80045f4:	2100      	movs	r1, #0
 80045f6:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80045fe:	3308      	adds	r3, #8
 8004600:	019b      	lsls	r3, r3, #6
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f8fa 	bl	80037fc <WIZCHIP_READ>
 8004608:	4603      	mov	r3, r0
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <recv+0x2cc>
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <recv+0x2d8>)
 8004616:	2100      	movs	r1, #0
 8004618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800461c:	88bb      	ldrh	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}
 8004626:	bf00      	nop
 8004628:	200000f4 	.word	0x200000f4
 800462c:	200000f0 	.word	0x200000f0
 8004630:	20000104 	.word	0x20000104
 8004634:	2000010c 	.word	0x2000010c

08004638 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	4603      	mov	r3, r0
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	4613      	mov	r3, r2
 8004648:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d902      	bls.n	800465e <sendto+0x26>
 8004658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800465c:	e204      	b.n	8004a68 <sendto+0x430>
   switch(getSn_MR(sn) & 0x0F)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004664:	3308      	adds	r3, #8
 8004666:	019b      	lsls	r3, r3, #6
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f8c7 	bl	80037fc <WIZCHIP_READ>
 800466e:	4603      	mov	r3, r0
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	3b02      	subs	r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <sendto+0x48>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800467a:	f06f 0304 	mvn.w	r3, #4
 800467e:	e1f3      	b.n	8004a68 <sendto+0x430>
         break;
 8004680:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004682:	89bb      	ldrh	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <sendto+0x56>
 8004688:	f06f 030d 	mvn.w	r3, #13
 800468c:	e1ec      	b.n	8004a68 <sendto+0x430>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	3201      	adds	r2, #1
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	4413      	add	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	3202      	adds	r2, #2
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	3203      	adds	r2, #3
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	4413      	add	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10f      	bne.n	80046e4 <sendto+0xac>
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80046ca:	3308      	adds	r3, #8
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f894 	bl	80037fc <WIZCHIP_READ>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d002      	beq.n	80046e4 <sendto+0xac>
 80046de:	f06f 030b 	mvn.w	r3, #11
 80046e2:	e1c1      	b.n	8004a68 <sendto+0x430>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80046e4:	8c3b      	ldrh	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <sendto+0xd2>
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80046f0:	3308      	adds	r3, #8
 80046f2:	019b      	lsls	r3, r3, #6
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff f881 	bl	80037fc <WIZCHIP_READ>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d002      	beq.n	800470a <sendto+0xd2>
 8004704:	f06f 030a 	mvn.w	r3, #10
 8004708:	e1ae      	b.n	8004a68 <sendto+0x430>
   tmp = getSn_SR(sn);
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004710:	3308      	adds	r3, #8
 8004712:	019b      	lsls	r3, r3, #6
 8004714:	3308      	adds	r3, #8
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff f870 	bl	80037fc <WIZCHIP_READ>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b42      	cmp	r3, #66	; 0x42
 8004724:	d008      	beq.n	8004738 <sendto+0x100>
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b22      	cmp	r3, #34	; 0x22
 800472a:	d005      	beq.n	8004738 <sendto+0x100>
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b32      	cmp	r3, #50	; 0x32
 8004730:	d002      	beq.n	8004738 <sendto+0x100>
 8004732:	f06f 0306 	mvn.w	r3, #6
 8004736:	e197      	b.n	8004a68 <sendto+0x430>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800473e:	3308      	adds	r3, #8
 8004740:	019b      	lsls	r3, r3, #6
 8004742:	3314      	adds	r3, #20
 8004744:	4618      	mov	r0, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	b29a      	uxth	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3301      	adds	r3, #1
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	4413      	add	r3, r2
 800475a:	b29b      	uxth	r3, r3
 800475c:	4619      	mov	r1, r3
 800475e:	f7ff f82f 	bl	80037c0 <WIZCHIP_WRITE>
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004768:	3308      	adds	r3, #8
 800476a:	019b      	lsls	r3, r3, #6
 800476c:	3316      	adds	r3, #22
 800476e:	4618      	mov	r0, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3302      	adds	r3, #2
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3303      	adds	r3, #3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	4413      	add	r3, r2
 8004786:	b29b      	uxth	r3, r3
 8004788:	4619      	mov	r1, r3
 800478a:	f7ff f819 	bl	80037c0 <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004794:	3308      	adds	r3, #8
 8004796:	019b      	lsls	r3, r3, #6
 8004798:	3312      	adds	r3, #18
 800479a:	461a      	mov	r2, r3
 800479c:	8c3b      	ldrh	r3, [r7, #32]
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f7ff f80d 	bl	80037c0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff f882 	bl	80038b2 <getTMSR>
 80047ae:	4603      	mov	r3, r0
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	029b      	lsls	r3, r3, #10
 80047b4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80047b6:	89ba      	ldrh	r2, [r7, #12]
 80047b8:	8abb      	ldrh	r3, [r7, #20]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d901      	bls.n	80047c2 <sendto+0x18a>
 80047be:	8abb      	ldrh	r3, [r7, #20]
 80047c0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff f8ff 	bl	80039c8 <getSn_TX_FSR>
 80047ca:	4603      	mov	r3, r0
 80047cc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80047d4:	3308      	adds	r3, #8
 80047d6:	019b      	lsls	r3, r3, #6
 80047d8:	3308      	adds	r3, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f80e 	bl	80037fc <WIZCHIP_READ>
 80047e0:	4603      	mov	r3, r0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <sendto+0x1b6>
 80047e8:	f06f 0303 	mvn.w	r3, #3
 80047ec:	e13c      	b.n	8004a68 <sendto+0x430>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80047ee:	4ba0      	ldr	r3, [pc, #640]	; (8004a70 <sendto+0x438>)
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	fa42 f303 	asr.w	r3, r2, r3
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <sendto+0x1d6>
 8004802:	89ba      	ldrh	r2, [r7, #12]
 8004804:	8abb      	ldrh	r3, [r7, #20]
 8004806:	429a      	cmp	r2, r3
 8004808:	d901      	bls.n	800480e <sendto+0x1d6>
 800480a:	2300      	movs	r3, #0
 800480c:	e12c      	b.n	8004a68 <sendto+0x430>
      if(len <= freesize) break;
 800480e:	89ba      	ldrh	r2, [r7, #12]
 8004810:	8abb      	ldrh	r3, [r7, #20]
 8004812:	429a      	cmp	r2, r3
 8004814:	d900      	bls.n	8004818 <sendto+0x1e0>
      freesize = getSn_TX_FSR(sn);
 8004816:	e7d4      	b.n	80047c2 <sendto+0x18a>
      if(len <= freesize) break;
 8004818:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800481a:	89ba      	ldrh	r2, [r7, #12]
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f935 	bl	8003a90 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8004826:	4893      	ldr	r0, [pc, #588]	; (8004a74 <sendto+0x43c>)
 8004828:	f7fe ffe8 	bl	80037fc <WIZCHIP_READ>
 800482c:	4603      	mov	r3, r0
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	b29a      	uxth	r2, r3
 8004832:	f107 0310 	add.w	r3, r7, #16
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
 800483a:	488e      	ldr	r0, [pc, #568]	; (8004a74 <sendto+0x43c>)
 800483c:	f7fe ffde 	bl	80037fc <WIZCHIP_READ>
 8004840:	4603      	mov	r3, r0
 8004842:	461a      	mov	r2, r3
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	3301      	adds	r3, #1
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	488a      	ldr	r0, [pc, #552]	; (8004a78 <sendto+0x440>)
 8004850:	f7fe ffd4 	bl	80037fc <WIZCHIP_READ>
 8004854:	4603      	mov	r3, r0
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	b29a      	uxth	r2, r3
 800485a:	f107 0310 	add.w	r3, r7, #16
 800485e:	3302      	adds	r3, #2
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	4884      	ldr	r0, [pc, #528]	; (8004a78 <sendto+0x440>)
 8004866:	f7fe ffc9 	bl	80037fc <WIZCHIP_READ>
 800486a:	4603      	mov	r3, r0
 800486c:	461a      	mov	r2, r3
 800486e:	f107 0310 	add.w	r3, r7, #16
 8004872:	3303      	adds	r3, #3
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d145      	bne.n	800490a <sendto+0x2d2>
      {
         getSUBR((uint8_t*)&taddr);
 800487e:	487f      	ldr	r0, [pc, #508]	; (8004a7c <sendto+0x444>)
 8004880:	f7fe ffbc 	bl	80037fc <WIZCHIP_READ>
 8004884:	4603      	mov	r3, r0
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	b29a      	uxth	r2, r3
 800488a:	f107 0310 	add.w	r3, r7, #16
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	487a      	ldr	r0, [pc, #488]	; (8004a7c <sendto+0x444>)
 8004894:	f7fe ffb2 	bl	80037fc <WIZCHIP_READ>
 8004898:	4603      	mov	r3, r0
 800489a:	461a      	mov	r2, r3
 800489c:	f107 0310 	add.w	r3, r7, #16
 80048a0:	3301      	adds	r3, #1
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	4876      	ldr	r0, [pc, #472]	; (8004a80 <sendto+0x448>)
 80048a8:	f7fe ffa8 	bl	80037fc <WIZCHIP_READ>
 80048ac:	4603      	mov	r3, r0
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f107 0310 	add.w	r3, r7, #16
 80048b6:	3302      	adds	r3, #2
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	4870      	ldr	r0, [pc, #448]	; (8004a80 <sendto+0x448>)
 80048be:	f7fe ff9d 	bl	80037fc <WIZCHIP_READ>
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	f107 0310 	add.w	r3, r7, #16
 80048ca:	3303      	adds	r3, #3
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80048d0:	4b6c      	ldr	r3, [pc, #432]	; (8004a84 <sendto+0x44c>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	b29a      	uxth	r2, r3
 80048da:	4b6b      	ldr	r3, [pc, #428]	; (8004a88 <sendto+0x450>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	4865      	ldr	r0, [pc, #404]	; (8004a7c <sendto+0x444>)
 80048e8:	f7fe ff6a 	bl	80037c0 <WIZCHIP_WRITE>
 80048ec:	4b67      	ldr	r3, [pc, #412]	; (8004a8c <sendto+0x454>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	4b66      	ldr	r3, [pc, #408]	; (8004a90 <sendto+0x458>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4413      	add	r3, r2
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4619      	mov	r1, r3
 8004902:	485f      	ldr	r0, [pc, #380]	; (8004a80 <sendto+0x448>)
 8004904:	f7fe ff5c 	bl	80037c0 <WIZCHIP_WRITE>
 8004908:	e001      	b.n	800490e <sendto+0x2d6>
      }
      else taddr = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004914:	3308      	adds	r3, #8
 8004916:	019b      	lsls	r3, r3, #6
 8004918:	3320      	adds	r3, #32
 800491a:	461a      	mov	r2, r3
 800491c:	89bb      	ldrh	r3, [r7, #12]
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	b29b      	uxth	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	4610      	mov	r0, r2
 8004926:	f7fe ff4b 	bl	80037c0 <WIZCHIP_WRITE>
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004930:	3308      	adds	r3, #8
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	3322      	adds	r3, #34	; 0x22
 8004936:	461a      	mov	r2, r3
 8004938:	89bb      	ldrh	r3, [r7, #12]
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f7fe ff3f 	bl	80037c0 <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004948:	3308      	adds	r3, #8
 800494a:	019b      	lsls	r3, r3, #6
 800494c:	3302      	adds	r3, #2
 800494e:	2120      	movs	r1, #32
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe ff35 	bl	80037c0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004956:	bf00      	nop
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800495e:	3308      	adds	r3, #8
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	3302      	adds	r3, #2
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe ff49 	bl	80037fc <WIZCHIP_READ>
 800496a:	4603      	mov	r3, r0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f2      	bne.n	8004958 <sendto+0x320>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004978:	3308      	adds	r3, #8
 800497a:	019b      	lsls	r3, r3, #6
 800497c:	3306      	adds	r3, #6
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe ff3c 	bl	80037fc <WIZCHIP_READ>
 8004984:	4603      	mov	r3, r0
 8004986:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00e      	beq.n	80049b0 <sendto+0x378>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004998:	3308      	adds	r3, #8
 800499a:	019b      	lsls	r3, r3, #6
 800499c:	3306      	adds	r3, #6
 800499e:	2110      	movs	r1, #16
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe ff0d 	bl	80037c0 <WIZCHIP_WRITE>
         break;
 80049a6:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05b      	beq.n	8004a66 <sendto+0x42e>
 80049ae:	e037      	b.n	8004a20 <sendto+0x3e8>
      else if(tmp & Sn_IR_TIMEOUT)
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0db      	beq.n	8004972 <sendto+0x33a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80049c0:	3308      	adds	r3, #8
 80049c2:	019b      	lsls	r3, r3, #6
 80049c4:	3306      	adds	r3, #6
 80049c6:	2108      	movs	r1, #8
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe fef9 	bl	80037c0 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d022      	beq.n	8004a1a <sendto+0x3e2>
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	b29a      	uxth	r2, r3
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	3301      	adds	r3, #1
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4619      	mov	r1, r3
 80049f0:	4822      	ldr	r0, [pc, #136]	; (8004a7c <sendto+0x444>)
 80049f2:	f7fe fee5 	bl	80037c0 <WIZCHIP_WRITE>
 80049f6:	f107 0310 	add.w	r3, r7, #16
 80049fa:	3302      	adds	r3, #2
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	3303      	adds	r3, #3
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4619      	mov	r1, r3
 8004a14:	481a      	ldr	r0, [pc, #104]	; (8004a80 <sendto+0x448>)
 8004a16:	f7fe fed3 	bl	80037c0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004a1a:	f06f 030c 	mvn.w	r3, #12
 8004a1e:	e023      	b.n	8004a68 <sendto+0x430>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8004a20:	f107 0310 	add.w	r3, r7, #16
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	3301      	adds	r3, #1
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	480f      	ldr	r0, [pc, #60]	; (8004a7c <sendto+0x444>)
 8004a3e:	f7fe febf 	bl	80037c0 <WIZCHIP_WRITE>
 8004a42:	f107 0310 	add.w	r3, r7, #16
 8004a46:	3302      	adds	r3, #2
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	f107 0310 	add.w	r3, r7, #16
 8004a54:	3303      	adds	r3, #3
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <sendto+0x448>)
 8004a62:	f7fe fead 	bl	80037c0 <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004a66:	89bb      	ldrh	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	200000f0 	.word	0x200000f0
 8004a74:	34000018 	.word	0x34000018
 8004a78:	3400001a 	.word	0x3400001a
 8004a7c:	34000014 	.word	0x34000014
 8004a80:	34000016 	.word	0x34000016
 8004a84:	08006adc 	.word	0x08006adc
 8004a88:	08006add 	.word	0x08006add
 8004a8c:	08006ade 	.word	0x08006ade
 8004a90:	08006adf 	.word	0x08006adf

08004a94 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	807b      	strh	r3, [r7, #2]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <reg_wizchip_bus_cbfunc>:
}

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8004b02:	bf00      	nop
 8004b04:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <reg_wizchip_bus_cbfunc+0x48>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f9      	beq.n	8004b04 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <reg_wizchip_bus_cbfunc+0x24>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8004b1c:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <reg_wizchip_bus_cbfunc+0x48>)
 8004b1e:	4a09      	ldr	r2, [pc, #36]	; (8004b44 <reg_wizchip_bus_cbfunc+0x4c>)
 8004b20:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <reg_wizchip_bus_cbfunc+0x48>)
 8004b24:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <reg_wizchip_bus_cbfunc+0x50>)
 8004b26:	621a      	str	r2, [r3, #32]
 8004b28:	e005      	b.n	8004b36 <reg_wizchip_bus_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <reg_wizchip_bus_cbfunc+0x48>)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8004b30:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <reg_wizchip_bus_cbfunc+0x48>)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6213      	str	r3, [r2, #32]
   }
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000034 	.word	0x20000034
 8004b44:	08004ac5 	.word	0x08004ac5
 8004b48:	08004add 	.word	0x08004add

08004b4c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
   uint8_t i;
   switch(cwtype)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	f200 808e 	bhi.w	8004c84 <ctlwizchip+0x138>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <ctlwizchip+0x24>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004b9b 	.word	0x08004b9b
 8004b78:	08004c23 	.word	0x08004c23
 8004b7c:	08004c17 	.word	0x08004c17
 8004b80:	08004c31 	.word	0x08004c31
 8004b84:	08004c3d 	.word	0x08004c3d
 8004b88:	08004c85 	.word	0x08004c85
 8004b8c:	08004c85 	.word	0x08004c85
 8004b90:	08004c4b 	.word	0x08004c4b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8004b94:	f000 f8c6 	bl	8004d24 <wizchip_sw_reset>
         break;
 8004b98:	e077      	b.n	8004c8a <ctlwizchip+0x13e>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <ctlwizchip+0x5e>
         {
            ptmp[0] = (uint8_t*)arg;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	613b      	str	r3, [r7, #16]
         }
         printf("tx mem: ");
 8004baa:	483a      	ldr	r0, [pc, #232]	; (8004c94 <ctlwizchip+0x148>)
 8004bac:	f000 fdae 	bl	800570c <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
 8004bb4:	e00a      	b.n	8004bcc <ctlwizchip+0x80>
         {
        	 printf("%d,", ptmp[0][i]);
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4835      	ldr	r0, [pc, #212]	; (8004c98 <ctlwizchip+0x14c>)
 8004bc2:	f000 fda3 	bl	800570c <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b07      	cmp	r3, #7
 8004bd0:	d9f1      	bls.n	8004bb6 <ctlwizchip+0x6a>
         }
         printf("\r\n");
 8004bd2:	4832      	ldr	r0, [pc, #200]	; (8004c9c <ctlwizchip+0x150>)
 8004bd4:	f000 fe0e 	bl	80057f4 <puts>
         printf("rx mem: ");
 8004bd8:	4831      	ldr	r0, [pc, #196]	; (8004ca0 <ctlwizchip+0x154>)
 8004bda:	f000 fd97 	bl	800570c <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]
 8004be2:	e00a      	b.n	8004bfa <ctlwizchip+0xae>
         {
        	 printf("%d,", ptmp[1][i]);
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	4413      	add	r3, r2
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	4619      	mov	r1, r3
 8004bee:	482a      	ldr	r0, [pc, #168]	; (8004c98 <ctlwizchip+0x14c>)
 8004bf0:	f000 fd8c 	bl	800570c <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b07      	cmp	r3, #7
 8004bfe:	d9f1      	bls.n	8004be4 <ctlwizchip+0x98>
         }
         printf("\r\n");
 8004c00:	4826      	ldr	r0, [pc, #152]	; (8004c9c <ctlwizchip+0x150>)
 8004c02:	f000 fdf7 	bl	80057f4 <puts>
         return wizchip_init(ptmp[0], ptmp[1]);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f995 	bl	8004f3c <wizchip_init>
 8004c12:	4603      	mov	r3, r0
 8004c14:	e03a      	b.n	8004c8c <ctlwizchip+0x140>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fa24 	bl	8005068 <wizchip_clrinterrupt>
         break;
 8004c20:	e033      	b.n	8004c8a <ctlwizchip+0x13e>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004c22:	f000 fa45 	bl	80050b0 <wizchip_getinterrupt>
 8004c26:	4603      	mov	r3, r0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	801a      	strh	r2, [r3, #0]
         break;
 8004c2e:	e02c      	b.n	8004c8a <ctlwizchip+0x13e>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fa61 	bl	80050fc <wizchip_setinterruptmask>
         break;         
 8004c3a:	e026      	b.n	8004c8a <ctlwizchip+0x13e>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004c3c:	f000 fa82 	bl	8005144 <wizchip_getinterruptmask>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	801a      	strh	r2, [r3, #0]
         break;
 8004c48:	e01f      	b.n	8004c8a <ctlwizchip+0x13e>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <ctlwizchip+0x158>)
 8004c4c:	789a      	ldrb	r2, [r3, #2]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <ctlwizchip+0x158>)
 8004c58:	78d2      	ldrb	r2, [r2, #3]
 8004c5a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	4a10      	ldr	r2, [pc, #64]	; (8004ca4 <ctlwizchip+0x158>)
 8004c62:	7912      	ldrb	r2, [r2, #4]
 8004c64:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	3303      	adds	r3, #3
 8004c6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ca4 <ctlwizchip+0x158>)
 8004c6c:	7952      	ldrb	r2, [r2, #5]
 8004c6e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <ctlwizchip+0x158>)
 8004c76:	7992      	ldrb	r2, [r2, #6]
 8004c78:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	3305      	adds	r3, #5
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
         break;
 8004c82:	e002      	b.n	8004c8a <ctlwizchip+0x13e>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c88:	e000      	b.n	8004c8c <ctlwizchip+0x140>
   }
   return 0;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08006ae4 	.word	0x08006ae4
 8004c98:	08006af0 	.word	0x08006af0
 8004c9c:	08006af4 	.word	0x08006af4
 8004ca0:	08006af8 	.word	0x08006af8
 8004ca4:	20000034 	.word	0x20000034

08004ca8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d82c      	bhi.n	8004d14 <ctlnetwork+0x6c>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <ctlnetwork+0x18>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004ce1 	.word	0x08004ce1
 8004cc8:	08004ce9 	.word	0x08004ce9
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004d05 	.word	0x08004d05
 8004cd4:	08004d0d 	.word	0x08004d0d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f000 fa5d 	bl	8005198 <wizchip_setnetinfo>
         break;
 8004cde:	e01c      	b.n	8004d1a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004ce0:	6838      	ldr	r0, [r7, #0]
 8004ce2:	f000 fb09 	bl	80052f8 <wizchip_getnetinfo>
         break;
 8004ce6:	e018      	b.n	8004d1a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fbc5 	bl	800547c <wizchip_setnetmode>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	e012      	b.n	8004d1c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004cf6:	f000 fbe6 	bl	80054c6 <wizchip_getnetmode>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	701a      	strb	r2, [r3, #0]
         break;
 8004d02:	e00a      	b.n	8004d1a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004d04:	6838      	ldr	r0, [r7, #0]
 8004d06:	f000 fbe9 	bl	80054dc <wizchip_settimeout>
         break;
 8004d0a:	e006      	b.n	8004d1a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8004d0c:	6838      	ldr	r0, [r7, #0]
 8004d0e:	f000 fbff 	bl	8005510 <wizchip_gettimeout>
         break;
 8004d12:	e002      	b.n	8004d1a <ctlnetwork+0x72>
      default:
         return -1;
 8004d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d18:	e000      	b.n	8004d1c <ctlnetwork+0x74>
   }
   return 0;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004d2a:	487b      	ldr	r0, [pc, #492]	; (8004f18 <wizchip_sw_reset+0x1f4>)
 8004d2c:	f7fe fd66 	bl	80037fc <WIZCHIP_READ>
 8004d30:	4603      	mov	r3, r0
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	713b      	strb	r3, [r7, #4]
 8004d3a:	4877      	ldr	r0, [pc, #476]	; (8004f18 <wizchip_sw_reset+0x1f4>)
 8004d3c:	f7fe fd5e 	bl	80037fc <WIZCHIP_READ>
 8004d40:	4603      	mov	r3, r0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	717b      	strb	r3, [r7, #5]
 8004d46:	4875      	ldr	r0, [pc, #468]	; (8004f1c <wizchip_sw_reset+0x1f8>)
 8004d48:	f7fe fd58 	bl	80037fc <WIZCHIP_READ>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	71bb      	strb	r3, [r7, #6]
 8004d56:	4871      	ldr	r0, [pc, #452]	; (8004f1c <wizchip_sw_reset+0x1f8>)
 8004d58:	f7fe fd50 	bl	80037fc <WIZCHIP_READ>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	71fb      	strb	r3, [r7, #7]
 8004d62:	486f      	ldr	r0, [pc, #444]	; (8004f20 <wizchip_sw_reset+0x1fc>)
 8004d64:	f7fe fd4a 	bl	80037fc <WIZCHIP_READ>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	723b      	strb	r3, [r7, #8]
 8004d72:	486b      	ldr	r0, [pc, #428]	; (8004f20 <wizchip_sw_reset+0x1fc>)
 8004d74:	f7fe fd42 	bl	80037fc <WIZCHIP_READ>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	727b      	strb	r3, [r7, #9]
   getSIPR(sip);
 8004d7e:	4869      	ldr	r0, [pc, #420]	; (8004f24 <wizchip_sw_reset+0x200>)
 8004d80:	f7fe fd3c 	bl	80037fc <WIZCHIP_READ>
 8004d84:	4603      	mov	r3, r0
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	733b      	strb	r3, [r7, #12]
 8004d8e:	4865      	ldr	r0, [pc, #404]	; (8004f24 <wizchip_sw_reset+0x200>)
 8004d90:	f7fe fd34 	bl	80037fc <WIZCHIP_READ>
 8004d94:	4603      	mov	r3, r0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	737b      	strb	r3, [r7, #13]
 8004d9a:	4863      	ldr	r0, [pc, #396]	; (8004f28 <wizchip_sw_reset+0x204>)
 8004d9c:	f7fe fd2e 	bl	80037fc <WIZCHIP_READ>
 8004da0:	4603      	mov	r3, r0
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	73bb      	strb	r3, [r7, #14]
 8004daa:	485f      	ldr	r0, [pc, #380]	; (8004f28 <wizchip_sw_reset+0x204>)
 8004dac:	f7fe fd26 	bl	80037fc <WIZCHIP_READ>
 8004db0:	4603      	mov	r3, r0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	73fb      	strb	r3, [r7, #15]
   getGAR(gw);
 8004db6:	485d      	ldr	r0, [pc, #372]	; (8004f2c <wizchip_sw_reset+0x208>)
 8004db8:	f7fe fd20 	bl	80037fc <WIZCHIP_READ>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	753b      	strb	r3, [r7, #20]
 8004dc6:	4859      	ldr	r0, [pc, #356]	; (8004f2c <wizchip_sw_reset+0x208>)
 8004dc8:	f7fe fd18 	bl	80037fc <WIZCHIP_READ>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	757b      	strb	r3, [r7, #21]
 8004dd2:	4857      	ldr	r0, [pc, #348]	; (8004f30 <wizchip_sw_reset+0x20c>)
 8004dd4:	f7fe fd12 	bl	80037fc <WIZCHIP_READ>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	75bb      	strb	r3, [r7, #22]
 8004de2:	4853      	ldr	r0, [pc, #332]	; (8004f30 <wizchip_sw_reset+0x20c>)
 8004de4:	f7fe fd0a 	bl	80037fc <WIZCHIP_READ>
 8004de8:	4603      	mov	r3, r0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	75fb      	strb	r3, [r7, #23]
   getSUBR(sn);
 8004dee:	4851      	ldr	r0, [pc, #324]	; (8004f34 <wizchip_sw_reset+0x210>)
 8004df0:	f7fe fd04 	bl	80037fc <WIZCHIP_READ>
 8004df4:	4603      	mov	r3, r0
 8004df6:	0a1b      	lsrs	r3, r3, #8
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	743b      	strb	r3, [r7, #16]
 8004dfe:	484d      	ldr	r0, [pc, #308]	; (8004f34 <wizchip_sw_reset+0x210>)
 8004e00:	f7fe fcfc 	bl	80037fc <WIZCHIP_READ>
 8004e04:	4603      	mov	r3, r0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	747b      	strb	r3, [r7, #17]
 8004e0a:	484b      	ldr	r0, [pc, #300]	; (8004f38 <wizchip_sw_reset+0x214>)
 8004e0c:	f7fe fcf6 	bl	80037fc <WIZCHIP_READ>
 8004e10:	4603      	mov	r3, r0
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	74bb      	strb	r3, [r7, #18]
 8004e1a:	4847      	ldr	r0, [pc, #284]	; (8004f38 <wizchip_sw_reset+0x214>)
 8004e1c:	f7fe fcee 	bl	80037fc <WIZCHIP_READ>
 8004e20:	4603      	mov	r3, r0
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	74fb      	strb	r3, [r7, #19]
   setMR(MR_RST);
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8004e2c:	f7fe fcc8 	bl	80037c0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004e30:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8004e34:	f7fe fce2 	bl	80037fc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8004e38:	793b      	ldrb	r3, [r7, #4]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	797b      	ldrb	r3, [r7, #5]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4833      	ldr	r0, [pc, #204]	; (8004f18 <wizchip_sw_reset+0x1f4>)
 8004e4c:	f7fe fcb8 	bl	80037c0 <WIZCHIP_WRITE>
 8004e50:	79bb      	ldrb	r3, [r7, #6]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	4619      	mov	r1, r3
 8004e62:	482e      	ldr	r0, [pc, #184]	; (8004f1c <wizchip_sw_reset+0x1f8>)
 8004e64:	f7fe fcac 	bl	80037c0 <WIZCHIP_WRITE>
 8004e68:	7a3b      	ldrb	r3, [r7, #8]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	7a7b      	ldrb	r3, [r7, #9]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	4829      	ldr	r0, [pc, #164]	; (8004f20 <wizchip_sw_reset+0x1fc>)
 8004e7c:	f7fe fca0 	bl	80037c0 <WIZCHIP_WRITE>
   setGAR(gw);
 8004e80:	7d3b      	ldrb	r3, [r7, #20]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	7d7b      	ldrb	r3, [r7, #21]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	4826      	ldr	r0, [pc, #152]	; (8004f2c <wizchip_sw_reset+0x208>)
 8004e94:	f7fe fc94 	bl	80037c0 <WIZCHIP_WRITE>
 8004e98:	7dbb      	ldrb	r3, [r7, #22]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	7dfb      	ldrb	r3, [r7, #23]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4821      	ldr	r0, [pc, #132]	; (8004f30 <wizchip_sw_reset+0x20c>)
 8004eac:	f7fe fc88 	bl	80037c0 <WIZCHIP_WRITE>
   setSUBR(sn);
 8004eb0:	7c3b      	ldrb	r3, [r7, #16]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	7c7b      	ldrb	r3, [r7, #17]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	481c      	ldr	r0, [pc, #112]	; (8004f34 <wizchip_sw_reset+0x210>)
 8004ec4:	f7fe fc7c 	bl	80037c0 <WIZCHIP_WRITE>
 8004ec8:	7cbb      	ldrb	r3, [r7, #18]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4817      	ldr	r0, [pc, #92]	; (8004f38 <wizchip_sw_reset+0x214>)
 8004edc:	f7fe fc70 	bl	80037c0 <WIZCHIP_WRITE>
   setSIPR(sip);
 8004ee0:	7b3b      	ldrb	r3, [r7, #12]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	7b7b      	ldrb	r3, [r7, #13]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	480c      	ldr	r0, [pc, #48]	; (8004f24 <wizchip_sw_reset+0x200>)
 8004ef4:	f7fe fc64 	bl	80037c0 <WIZCHIP_WRITE>
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	4413      	add	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <wizchip_sw_reset+0x204>)
 8004f0c:	f7fe fc58 	bl	80037c0 <WIZCHIP_WRITE>
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	34000008 	.word	0x34000008
 8004f1c:	3400000a 	.word	0x3400000a
 8004f20:	3400000c 	.word	0x3400000c
 8004f24:	34000018 	.word	0x34000018
 8004f28:	3400001a 	.word	0x3400001a
 8004f2c:	34000010 	.word	0x34000010
 8004f30:	34000012 	.word	0x34000012
 8004f34:	34000014 	.word	0x34000014
 8004f38:	34000016 	.word	0x34000016

08004f3c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8004f4a:	f7ff feeb 	bl	8004d24 <wizchip_sw_reset>
   if(txsize)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d040      	beq.n	8004fd6 <wizchip_init+0x9a>
   {
      tmp = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	73fb      	strb	r3, [r7, #15]
 8004f5c:	e018      	b.n	8004f90 <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b3f      	cmp	r3, #63	; 0x3f
 8004f6a:	d902      	bls.n	8004f72 <wizchip_init+0x36>
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f70:	e076      	b.n	8005060 <wizchip_init+0x124>
			tmp += txsize[i];
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f94:	2b07      	cmp	r3, #7
 8004f96:	dde2      	ble.n	8004f5e <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <wizchip_init+0x6e>
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fa8:	e05a      	b.n	8005060 <wizchip_init+0x124>
		#else
			if(tmp > 16) return -1;
		#endif
		}
	#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	e00e      	b.n	8004fce <wizchip_init+0x92>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004fb0:	7bf8      	ldrb	r0, [r7, #15]
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fe fc3b 	bl	8003838 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3301      	adds	r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd2:	2b07      	cmp	r3, #7
 8004fd4:	ddec      	ble.n	8004fb0 <wizchip_init+0x74>
		#endif
		}

   }

   if(rxsize)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d040      	beq.n	800505e <wizchip_init+0x122>
   {
      tmp = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e018      	b.n	8005018 <wizchip_init+0xdc>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8004fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b3f      	cmp	r3, #63	; 0x3f
 8004ff2:	d902      	bls.n	8004ffa <wizchip_init+0xbe>
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ff8:	e032      	b.n	8005060 <wizchip_init+0x124>
			tmp += rxsize[i];
 8004ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	781a      	ldrb	r2, [r3, #0]
 8005004:	7bbb      	ldrb	r3, [r7, #14]
 8005006:	4413      	add	r3, r2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800500c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	3301      	adds	r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501c:	2b07      	cmp	r3, #7
 800501e:	dde2      	ble.n	8004fe6 <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <wizchip_init+0xf6>
 800502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005030:	e016      	b.n	8005060 <wizchip_init+0x124>
			if(tmp > 16) return -1;
		#endif
		}
	#endif

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
 8005036:	e00e      	b.n	8005056 <wizchip_init+0x11a>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005038:	7bf8      	ldrb	r0, [r7, #15]
 800503a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	4413      	add	r3, r2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	f7fe fc5b 	bl	8003900 <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	3301      	adds	r3, #1
 8005052:	b2db      	uxtb	r3, r3
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	2b07      	cmp	r3, #7
 800505c:	ddec      	ble.n	8005038 <wizchip_init+0xfc>
		#endif
		}
   }
   return 0;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	b29b      	uxth	r3, r3
 800507c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	f043 0310 	orr.w	r3, r3, #16
 8005084:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	b21a      	sxth	r2, r3
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	b21b      	sxth	r3, r3
 8005090:	4313      	orrs	r3, r2
 8005092:	b21b      	sxth	r3, r3
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800509a:	b29b      	uxth	r3, r3
 800509c:	4619      	mov	r1, r3
 800509e:	4803      	ldr	r0, [pc, #12]	; (80050ac <wizchip_clrinterrupt+0x44>)
 80050a0:	f7fe fb8e 	bl	80037c0 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	34000002 	.word	0x34000002

080050b0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80050c2:	480d      	ldr	r0, [pc, #52]	; (80050f8 <wizchip_getinterrupt+0x48>)
 80050c4:	f7fe fb9a 	bl	80037fc <WIZCHIP_READ>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050ce:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	0a1b      	lsrs	r3, r3, #8
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80050d8:	88bb      	ldrh	r3, [r7, #4]
 80050da:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80050e0:	88bb      	ldrh	r3, [r7, #4]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80050ee:	88bb      	ldrh	r3, [r7, #4]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	34000002 	.word	0x34000002

080050fc <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	0a1b      	lsrs	r3, r3, #8
 800510e:	b29b      	uxth	r3, r3
 8005110:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8005112:	7bfb      	ldrb	r3, [r7, #15]
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	b21a      	sxth	r2, r3
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	b21b      	sxth	r3, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	b21b      	sxth	r3, r3
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800512e:	b29b      	uxth	r3, r3
 8005130:	4619      	mov	r1, r3
 8005132:	4803      	ldr	r0, [pc, #12]	; (8005140 <wizchip_setinterruptmask+0x44>)
 8005134:	f7fe fb44 	bl	80037c0 <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	34000004 	.word	0x34000004

08005144 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800514a:	2300      	movs	r3, #0
 800514c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 8005156:	480f      	ldr	r0, [pc, #60]	; (8005194 <wizchip_getinterruptmask+0x50>)
 8005158:	f7fe fb50 	bl	80037fc <WIZCHIP_READ>
 800515c:	4603      	mov	r3, r0
 800515e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005162:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8005164:	88bb      	ldrh	r3, [r7, #4]
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	b29b      	uxth	r3, r3
 800516a:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 800516c:	88bb      	ldrh	r3, [r7, #4]
 800516e:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	f023 0310 	bic.w	r3, r3, #16
 8005176:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8005178:	79bb      	ldrb	r3, [r7, #6]
 800517a:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800517c:	88bb      	ldrh	r3, [r7, #4]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	b29a      	uxth	r2, r3
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	b29b      	uxth	r3, r3
 8005186:	4413      	add	r3, r2
 8005188:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800518a:	88bb      	ldrh	r3, [r7, #4]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	34000004 	.word	0x34000004

08005198 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	785b      	ldrb	r3, [r3, #1]
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	4413      	add	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	4845      	ldr	r0, [pc, #276]	; (80052cc <wizchip_setnetinfo+0x134>)
 80051b8:	f7fe fb02 	bl	80037c0 <WIZCHIP_WRITE>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	789b      	ldrb	r3, [r3, #2]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	483f      	ldr	r0, [pc, #252]	; (80052d0 <wizchip_setnetinfo+0x138>)
 80051d4:	f7fe faf4 	bl	80037c0 <WIZCHIP_WRITE>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	791b      	ldrb	r3, [r3, #4]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	795b      	ldrb	r3, [r3, #5]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	4839      	ldr	r0, [pc, #228]	; (80052d4 <wizchip_setnetinfo+0x13c>)
 80051f0:	f7fe fae6 	bl	80037c0 <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7b9b      	ldrb	r3, [r3, #14]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7bdb      	ldrb	r3, [r3, #15]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4413      	add	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	4833      	ldr	r0, [pc, #204]	; (80052d8 <wizchip_setnetinfo+0x140>)
 800520c:	f7fe fad8 	bl	80037c0 <WIZCHIP_WRITE>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	7c1b      	ldrb	r3, [r3, #16]
 8005214:	b29b      	uxth	r3, r3
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	b29a      	uxth	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	7c5b      	ldrb	r3, [r3, #17]
 800521e:	b29b      	uxth	r3, r3
 8005220:	4413      	add	r3, r2
 8005222:	b29b      	uxth	r3, r3
 8005224:	4619      	mov	r1, r3
 8005226:	482d      	ldr	r0, [pc, #180]	; (80052dc <wizchip_setnetinfo+0x144>)
 8005228:	f7fe faca 	bl	80037c0 <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7a9b      	ldrb	r3, [r3, #10]
 8005230:	b29b      	uxth	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	7adb      	ldrb	r3, [r3, #11]
 800523a:	b29b      	uxth	r3, r3
 800523c:	4413      	add	r3, r2
 800523e:	b29b      	uxth	r3, r3
 8005240:	4619      	mov	r1, r3
 8005242:	4827      	ldr	r0, [pc, #156]	; (80052e0 <wizchip_setnetinfo+0x148>)
 8005244:	f7fe fabc 	bl	80037c0 <WIZCHIP_WRITE>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7b1b      	ldrb	r3, [r3, #12]
 800524c:	b29b      	uxth	r3, r3
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7b5b      	ldrb	r3, [r3, #13]
 8005256:	b29b      	uxth	r3, r3
 8005258:	4413      	add	r3, r2
 800525a:	b29b      	uxth	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	4821      	ldr	r0, [pc, #132]	; (80052e4 <wizchip_setnetinfo+0x14c>)
 8005260:	f7fe faae 	bl	80037c0 <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	799b      	ldrb	r3, [r3, #6]
 8005268:	b29b      	uxth	r3, r3
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	b29a      	uxth	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	79db      	ldrb	r3, [r3, #7]
 8005272:	b29b      	uxth	r3, r3
 8005274:	4413      	add	r3, r2
 8005276:	b29b      	uxth	r3, r3
 8005278:	4619      	mov	r1, r3
 800527a:	481b      	ldr	r0, [pc, #108]	; (80052e8 <wizchip_setnetinfo+0x150>)
 800527c:	f7fe faa0 	bl	80037c0 <WIZCHIP_WRITE>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	7a1b      	ldrb	r3, [r3, #8]
 8005284:	b29b      	uxth	r3, r3
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7a5b      	ldrb	r3, [r3, #9]
 800528e:	b29b      	uxth	r3, r3
 8005290:	4413      	add	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	4619      	mov	r1, r3
 8005296:	4815      	ldr	r0, [pc, #84]	; (80052ec <wizchip_setnetinfo+0x154>)
 8005298:	f7fe fa92 	bl	80037c0 <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	7c9a      	ldrb	r2, [r3, #18]
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <wizchip_setnetinfo+0x158>)
 80052a2:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7cda      	ldrb	r2, [r3, #19]
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <wizchip_setnetinfo+0x158>)
 80052aa:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7d1a      	ldrb	r2, [r3, #20]
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <wizchip_setnetinfo+0x158>)
 80052b2:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7d5a      	ldrb	r2, [r3, #21]
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <wizchip_setnetinfo+0x158>)
 80052ba:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	7d9a      	ldrb	r2, [r3, #22]
 80052c0:	4b0c      	ldr	r3, [pc, #48]	; (80052f4 <wizchip_setnetinfo+0x15c>)
 80052c2:	701a      	strb	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	34000008 	.word	0x34000008
 80052d0:	3400000a 	.word	0x3400000a
 80052d4:	3400000c 	.word	0x3400000c
 80052d8:	34000010 	.word	0x34000010
 80052dc:	34000012 	.word	0x34000012
 80052e0:	34000014 	.word	0x34000014
 80052e4:	34000016 	.word	0x34000016
 80052e8:	34000018 	.word	0x34000018
 80052ec:	3400001a 	.word	0x3400001a
 80052f0:	20000114 	.word	0x20000114
 80052f4:	20000118 	.word	0x20000118

080052f8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8005300:	4853      	ldr	r0, [pc, #332]	; (8005450 <wizchip_getnetinfo+0x158>)
 8005302:	f7fe fa7b 	bl	80037fc <WIZCHIP_READ>
 8005306:	4603      	mov	r3, r0
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	b29b      	uxth	r3, r3
 800530c:	b2da      	uxtb	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	484f      	ldr	r0, [pc, #316]	; (8005450 <wizchip_getnetinfo+0x158>)
 8005314:	f7fe fa72 	bl	80037fc <WIZCHIP_READ>
 8005318:	4603      	mov	r3, r0
 800531a:	b2da      	uxtb	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	705a      	strb	r2, [r3, #1]
 8005320:	484c      	ldr	r0, [pc, #304]	; (8005454 <wizchip_getnetinfo+0x15c>)
 8005322:	f7fe fa6b 	bl	80037fc <WIZCHIP_READ>
 8005326:	4603      	mov	r3, r0
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	b29b      	uxth	r3, r3
 800532c:	b2da      	uxtb	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	709a      	strb	r2, [r3, #2]
 8005332:	4848      	ldr	r0, [pc, #288]	; (8005454 <wizchip_getnetinfo+0x15c>)
 8005334:	f7fe fa62 	bl	80037fc <WIZCHIP_READ>
 8005338:	4603      	mov	r3, r0
 800533a:	b2da      	uxtb	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	70da      	strb	r2, [r3, #3]
 8005340:	4845      	ldr	r0, [pc, #276]	; (8005458 <wizchip_getnetinfo+0x160>)
 8005342:	f7fe fa5b 	bl	80037fc <WIZCHIP_READ>
 8005346:	4603      	mov	r3, r0
 8005348:	0a1b      	lsrs	r3, r3, #8
 800534a:	b29b      	uxth	r3, r3
 800534c:	b2da      	uxtb	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	711a      	strb	r2, [r3, #4]
 8005352:	4841      	ldr	r0, [pc, #260]	; (8005458 <wizchip_getnetinfo+0x160>)
 8005354:	f7fe fa52 	bl	80037fc <WIZCHIP_READ>
 8005358:	4603      	mov	r3, r0
 800535a:	b2da      	uxtb	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8005360:	483e      	ldr	r0, [pc, #248]	; (800545c <wizchip_getnetinfo+0x164>)
 8005362:	f7fe fa4b 	bl	80037fc <WIZCHIP_READ>
 8005366:	4603      	mov	r3, r0
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	b29b      	uxth	r3, r3
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	739a      	strb	r2, [r3, #14]
 8005372:	483a      	ldr	r0, [pc, #232]	; (800545c <wizchip_getnetinfo+0x164>)
 8005374:	f7fe fa42 	bl	80037fc <WIZCHIP_READ>
 8005378:	4603      	mov	r3, r0
 800537a:	b2da      	uxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	73da      	strb	r2, [r3, #15]
 8005380:	4837      	ldr	r0, [pc, #220]	; (8005460 <wizchip_getnetinfo+0x168>)
 8005382:	f7fe fa3b 	bl	80037fc <WIZCHIP_READ>
 8005386:	4603      	mov	r3, r0
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	b29b      	uxth	r3, r3
 800538c:	b2da      	uxtb	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	741a      	strb	r2, [r3, #16]
 8005392:	4833      	ldr	r0, [pc, #204]	; (8005460 <wizchip_getnetinfo+0x168>)
 8005394:	f7fe fa32 	bl	80037fc <WIZCHIP_READ>
 8005398:	4603      	mov	r3, r0
 800539a:	b2da      	uxtb	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 80053a0:	4830      	ldr	r0, [pc, #192]	; (8005464 <wizchip_getnetinfo+0x16c>)
 80053a2:	f7fe fa2b 	bl	80037fc <WIZCHIP_READ>
 80053a6:	4603      	mov	r3, r0
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	729a      	strb	r2, [r3, #10]
 80053b2:	482c      	ldr	r0, [pc, #176]	; (8005464 <wizchip_getnetinfo+0x16c>)
 80053b4:	f7fe fa22 	bl	80037fc <WIZCHIP_READ>
 80053b8:	4603      	mov	r3, r0
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	72da      	strb	r2, [r3, #11]
 80053c0:	4829      	ldr	r0, [pc, #164]	; (8005468 <wizchip_getnetinfo+0x170>)
 80053c2:	f7fe fa1b 	bl	80037fc <WIZCHIP_READ>
 80053c6:	4603      	mov	r3, r0
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	731a      	strb	r2, [r3, #12]
 80053d2:	4825      	ldr	r0, [pc, #148]	; (8005468 <wizchip_getnetinfo+0x170>)
 80053d4:	f7fe fa12 	bl	80037fc <WIZCHIP_READ>
 80053d8:	4603      	mov	r3, r0
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80053e0:	4822      	ldr	r0, [pc, #136]	; (800546c <wizchip_getnetinfo+0x174>)
 80053e2:	f7fe fa0b 	bl	80037fc <WIZCHIP_READ>
 80053e6:	4603      	mov	r3, r0
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	719a      	strb	r2, [r3, #6]
 80053f2:	481e      	ldr	r0, [pc, #120]	; (800546c <wizchip_getnetinfo+0x174>)
 80053f4:	f7fe fa02 	bl	80037fc <WIZCHIP_READ>
 80053f8:	4603      	mov	r3, r0
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	71da      	strb	r2, [r3, #7]
 8005400:	481b      	ldr	r0, [pc, #108]	; (8005470 <wizchip_getnetinfo+0x178>)
 8005402:	f7fe f9fb 	bl	80037fc <WIZCHIP_READ>
 8005406:	4603      	mov	r3, r0
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	b29b      	uxth	r3, r3
 800540c:	b2da      	uxtb	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	721a      	strb	r2, [r3, #8]
 8005412:	4817      	ldr	r0, [pc, #92]	; (8005470 <wizchip_getnetinfo+0x178>)
 8005414:	f7fe f9f2 	bl	80037fc <WIZCHIP_READ>
 8005418:	4603      	mov	r3, r0
 800541a:	b2da      	uxtb	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <wizchip_getnetinfo+0x17c>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8005428:	4b12      	ldr	r3, [pc, #72]	; (8005474 <wizchip_getnetinfo+0x17c>)
 800542a:	785a      	ldrb	r2, [r3, #1]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8005430:	4b10      	ldr	r3, [pc, #64]	; (8005474 <wizchip_getnetinfo+0x17c>)
 8005432:	789a      	ldrb	r2, [r3, #2]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8005438:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <wizchip_getnetinfo+0x17c>)
 800543a:	78da      	ldrb	r2, [r3, #3]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <wizchip_getnetinfo+0x180>)
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	759a      	strb	r2, [r3, #22]
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	34000008 	.word	0x34000008
 8005454:	3400000a 	.word	0x3400000a
 8005458:	3400000c 	.word	0x3400000c
 800545c:	34000010 	.word	0x34000010
 8005460:	34000012 	.word	0x34000012
 8005464:	34000014 	.word	0x34000014
 8005468:	34000016 	.word	0x34000016
 800546c:	34000018 	.word	0x34000018
 8005470:	3400001a 	.word	0x3400001a
 8005474:	20000114 	.word	0x20000114
 8005478:	20000118 	.word	0x20000118

0800547c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <wizchip_setnetmode+0x1e>
 8005494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005498:	e011      	b.n	80054be <wizchip_setnetmode+0x42>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 800549a:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 800549e:	f7fe f9ad 	bl	80037fc <WIZCHIP_READ>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 80054b8:	f7fe f982 	bl	80037c0 <WIZCHIP_WRITE>
   return 0;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80054ca:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 80054ce:	f7fe f995 	bl	80037fc <WIZCHIP_READ>
 80054d2:	4603      	mov	r3, r0
 80054d4:	b2db      	uxtb	r3, r3
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4619      	mov	r1, r3
 80054ec:	4806      	ldr	r0, [pc, #24]	; (8005508 <wizchip_settimeout+0x2c>)
 80054ee:	f7fe f967 	bl	80037c0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	885b      	ldrh	r3, [r3, #2]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4804      	ldr	r0, [pc, #16]	; (800550c <wizchip_settimeout+0x30>)
 80054fa:	f7fe f961 	bl	80037c0 <WIZCHIP_WRITE>
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	3400001e 	.word	0x3400001e
 800550c:	3400001c 	.word	0x3400001c

08005510 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8005518:	4808      	ldr	r0, [pc, #32]	; (800553c <wizchip_gettimeout+0x2c>)
 800551a:	f7fe f96f 	bl	80037fc <WIZCHIP_READ>
 800551e:	4603      	mov	r3, r0
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8005526:	4806      	ldr	r0, [pc, #24]	; (8005540 <wizchip_gettimeout+0x30>)
 8005528:	f7fe f968 	bl	80037fc <WIZCHIP_READ>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	805a      	strh	r2, [r3, #2]
}
 8005534:	bf00      	nop
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	3400001e 	.word	0x3400001e
 8005540:	3400001c 	.word	0x3400001c

08005544 <__errno>:
 8005544:	4b01      	ldr	r3, [pc, #4]	; (800554c <__errno+0x8>)
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	20000060 	.word	0x20000060

08005550 <__libc_init_array>:
 8005550:	b570      	push	{r4, r5, r6, lr}
 8005552:	2500      	movs	r5, #0
 8005554:	4e0c      	ldr	r6, [pc, #48]	; (8005588 <__libc_init_array+0x38>)
 8005556:	4c0d      	ldr	r4, [pc, #52]	; (800558c <__libc_init_array+0x3c>)
 8005558:	1ba4      	subs	r4, r4, r6
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	42a5      	cmp	r5, r4
 800555e:	d109      	bne.n	8005574 <__libc_init_array+0x24>
 8005560:	f001 f93a 	bl	80067d8 <_init>
 8005564:	2500      	movs	r5, #0
 8005566:	4e0a      	ldr	r6, [pc, #40]	; (8005590 <__libc_init_array+0x40>)
 8005568:	4c0a      	ldr	r4, [pc, #40]	; (8005594 <__libc_init_array+0x44>)
 800556a:	1ba4      	subs	r4, r4, r6
 800556c:	10a4      	asrs	r4, r4, #2
 800556e:	42a5      	cmp	r5, r4
 8005570:	d105      	bne.n	800557e <__libc_init_array+0x2e>
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005578:	4798      	blx	r3
 800557a:	3501      	adds	r5, #1
 800557c:	e7ee      	b.n	800555c <__libc_init_array+0xc>
 800557e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005582:	4798      	blx	r3
 8005584:	3501      	adds	r5, #1
 8005586:	e7f2      	b.n	800556e <__libc_init_array+0x1e>
 8005588:	08006bb4 	.word	0x08006bb4
 800558c:	08006bb4 	.word	0x08006bb4
 8005590:	08006bb4 	.word	0x08006bb4
 8005594:	08006bb8 	.word	0x08006bb8

08005598 <memcpy>:
 8005598:	b510      	push	{r4, lr}
 800559a:	1e43      	subs	r3, r0, #1
 800559c:	440a      	add	r2, r1
 800559e:	4291      	cmp	r1, r2
 80055a0:	d100      	bne.n	80055a4 <memcpy+0xc>
 80055a2:	bd10      	pop	{r4, pc}
 80055a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ac:	e7f7      	b.n	800559e <memcpy+0x6>

080055ae <memset>:
 80055ae:	4603      	mov	r3, r0
 80055b0:	4402      	add	r2, r0
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d100      	bne.n	80055b8 <memset+0xa>
 80055b6:	4770      	bx	lr
 80055b8:	f803 1b01 	strb.w	r1, [r3], #1
 80055bc:	e7f9      	b.n	80055b2 <memset+0x4>
	...

080055c0 <_free_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4605      	mov	r5, r0
 80055c4:	2900      	cmp	r1, #0
 80055c6:	d043      	beq.n	8005650 <_free_r+0x90>
 80055c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055cc:	1f0c      	subs	r4, r1, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bfb8      	it	lt
 80055d2:	18e4      	addlt	r4, r4, r3
 80055d4:	f000 fc5c 	bl	8005e90 <__malloc_lock>
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <_free_r+0x94>)
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	4610      	mov	r0, r2
 80055de:	b933      	cbnz	r3, 80055ee <_free_r+0x2e>
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	6014      	str	r4, [r2, #0]
 80055e4:	4628      	mov	r0, r5
 80055e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055ea:	f000 bc52 	b.w	8005e92 <__malloc_unlock>
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	d90b      	bls.n	800560a <_free_r+0x4a>
 80055f2:	6821      	ldr	r1, [r4, #0]
 80055f4:	1862      	adds	r2, r4, r1
 80055f6:	4293      	cmp	r3, r2
 80055f8:	bf01      	itttt	eq
 80055fa:	681a      	ldreq	r2, [r3, #0]
 80055fc:	685b      	ldreq	r3, [r3, #4]
 80055fe:	1852      	addeq	r2, r2, r1
 8005600:	6022      	streq	r2, [r4, #0]
 8005602:	6063      	str	r3, [r4, #4]
 8005604:	6004      	str	r4, [r0, #0]
 8005606:	e7ed      	b.n	80055e4 <_free_r+0x24>
 8005608:	4613      	mov	r3, r2
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	b10a      	cbz	r2, 8005612 <_free_r+0x52>
 800560e:	42a2      	cmp	r2, r4
 8005610:	d9fa      	bls.n	8005608 <_free_r+0x48>
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	1858      	adds	r0, r3, r1
 8005616:	42a0      	cmp	r0, r4
 8005618:	d10b      	bne.n	8005632 <_free_r+0x72>
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	4401      	add	r1, r0
 800561e:	1858      	adds	r0, r3, r1
 8005620:	4282      	cmp	r2, r0
 8005622:	6019      	str	r1, [r3, #0]
 8005624:	d1de      	bne.n	80055e4 <_free_r+0x24>
 8005626:	6810      	ldr	r0, [r2, #0]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	4401      	add	r1, r0
 800562c:	6019      	str	r1, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	e7d8      	b.n	80055e4 <_free_r+0x24>
 8005632:	d902      	bls.n	800563a <_free_r+0x7a>
 8005634:	230c      	movs	r3, #12
 8005636:	602b      	str	r3, [r5, #0]
 8005638:	e7d4      	b.n	80055e4 <_free_r+0x24>
 800563a:	6820      	ldr	r0, [r4, #0]
 800563c:	1821      	adds	r1, r4, r0
 800563e:	428a      	cmp	r2, r1
 8005640:	bf01      	itttt	eq
 8005642:	6811      	ldreq	r1, [r2, #0]
 8005644:	6852      	ldreq	r2, [r2, #4]
 8005646:	1809      	addeq	r1, r1, r0
 8005648:	6021      	streq	r1, [r4, #0]
 800564a:	6062      	str	r2, [r4, #4]
 800564c:	605c      	str	r4, [r3, #4]
 800564e:	e7c9      	b.n	80055e4 <_free_r+0x24>
 8005650:	bd38      	pop	{r3, r4, r5, pc}
 8005652:	bf00      	nop
 8005654:	2000011c 	.word	0x2000011c

08005658 <_malloc_r>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	1ccd      	adds	r5, r1, #3
 800565c:	f025 0503 	bic.w	r5, r5, #3
 8005660:	3508      	adds	r5, #8
 8005662:	2d0c      	cmp	r5, #12
 8005664:	bf38      	it	cc
 8005666:	250c      	movcc	r5, #12
 8005668:	2d00      	cmp	r5, #0
 800566a:	4606      	mov	r6, r0
 800566c:	db01      	blt.n	8005672 <_malloc_r+0x1a>
 800566e:	42a9      	cmp	r1, r5
 8005670:	d903      	bls.n	800567a <_malloc_r+0x22>
 8005672:	230c      	movs	r3, #12
 8005674:	6033      	str	r3, [r6, #0]
 8005676:	2000      	movs	r0, #0
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	f000 fc09 	bl	8005e90 <__malloc_lock>
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <_malloc_r+0xac>)
 8005680:	6814      	ldr	r4, [r2, #0]
 8005682:	4621      	mov	r1, r4
 8005684:	b991      	cbnz	r1, 80056ac <_malloc_r+0x54>
 8005686:	4c20      	ldr	r4, [pc, #128]	; (8005708 <_malloc_r+0xb0>)
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	b91b      	cbnz	r3, 8005694 <_malloc_r+0x3c>
 800568c:	4630      	mov	r0, r6
 800568e:	f000 f8b9 	bl	8005804 <_sbrk_r>
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	4629      	mov	r1, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f000 f8b4 	bl	8005804 <_sbrk_r>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d124      	bne.n	80056ea <_malloc_r+0x92>
 80056a0:	230c      	movs	r3, #12
 80056a2:	4630      	mov	r0, r6
 80056a4:	6033      	str	r3, [r6, #0]
 80056a6:	f000 fbf4 	bl	8005e92 <__malloc_unlock>
 80056aa:	e7e4      	b.n	8005676 <_malloc_r+0x1e>
 80056ac:	680b      	ldr	r3, [r1, #0]
 80056ae:	1b5b      	subs	r3, r3, r5
 80056b0:	d418      	bmi.n	80056e4 <_malloc_r+0x8c>
 80056b2:	2b0b      	cmp	r3, #11
 80056b4:	d90f      	bls.n	80056d6 <_malloc_r+0x7e>
 80056b6:	600b      	str	r3, [r1, #0]
 80056b8:	18cc      	adds	r4, r1, r3
 80056ba:	50cd      	str	r5, [r1, r3]
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 fbe8 	bl	8005e92 <__malloc_unlock>
 80056c2:	f104 000b 	add.w	r0, r4, #11
 80056c6:	1d23      	adds	r3, r4, #4
 80056c8:	f020 0007 	bic.w	r0, r0, #7
 80056cc:	1ac3      	subs	r3, r0, r3
 80056ce:	d0d3      	beq.n	8005678 <_malloc_r+0x20>
 80056d0:	425a      	negs	r2, r3
 80056d2:	50e2      	str	r2, [r4, r3]
 80056d4:	e7d0      	b.n	8005678 <_malloc_r+0x20>
 80056d6:	684b      	ldr	r3, [r1, #4]
 80056d8:	428c      	cmp	r4, r1
 80056da:	bf16      	itet	ne
 80056dc:	6063      	strne	r3, [r4, #4]
 80056de:	6013      	streq	r3, [r2, #0]
 80056e0:	460c      	movne	r4, r1
 80056e2:	e7eb      	b.n	80056bc <_malloc_r+0x64>
 80056e4:	460c      	mov	r4, r1
 80056e6:	6849      	ldr	r1, [r1, #4]
 80056e8:	e7cc      	b.n	8005684 <_malloc_r+0x2c>
 80056ea:	1cc4      	adds	r4, r0, #3
 80056ec:	f024 0403 	bic.w	r4, r4, #3
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d005      	beq.n	8005700 <_malloc_r+0xa8>
 80056f4:	1a21      	subs	r1, r4, r0
 80056f6:	4630      	mov	r0, r6
 80056f8:	f000 f884 	bl	8005804 <_sbrk_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d0cf      	beq.n	80056a0 <_malloc_r+0x48>
 8005700:	6025      	str	r5, [r4, #0]
 8005702:	e7db      	b.n	80056bc <_malloc_r+0x64>
 8005704:	2000011c 	.word	0x2000011c
 8005708:	20000120 	.word	0x20000120

0800570c <iprintf>:
 800570c:	b40f      	push	{r0, r1, r2, r3}
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <iprintf+0x2c>)
 8005710:	b513      	push	{r0, r1, r4, lr}
 8005712:	681c      	ldr	r4, [r3, #0]
 8005714:	b124      	cbz	r4, 8005720 <iprintf+0x14>
 8005716:	69a3      	ldr	r3, [r4, #24]
 8005718:	b913      	cbnz	r3, 8005720 <iprintf+0x14>
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fab8 	bl	8005c90 <__sinit>
 8005720:	ab05      	add	r3, sp, #20
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	68a1      	ldr	r1, [r4, #8]
 8005726:	4620      	mov	r0, r4
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	f000 fd2d 	bl	8006188 <_vfiprintf_r>
 800572e:	b002      	add	sp, #8
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	b004      	add	sp, #16
 8005736:	4770      	bx	lr
 8005738:	20000060 	.word	0x20000060

0800573c <_puts_r>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	4605      	mov	r5, r0
 8005742:	b118      	cbz	r0, 800574c <_puts_r+0x10>
 8005744:	6983      	ldr	r3, [r0, #24]
 8005746:	b90b      	cbnz	r3, 800574c <_puts_r+0x10>
 8005748:	f000 faa2 	bl	8005c90 <__sinit>
 800574c:	69ab      	ldr	r3, [r5, #24]
 800574e:	68ac      	ldr	r4, [r5, #8]
 8005750:	b913      	cbnz	r3, 8005758 <_puts_r+0x1c>
 8005752:	4628      	mov	r0, r5
 8005754:	f000 fa9c 	bl	8005c90 <__sinit>
 8005758:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <_puts_r+0xac>)
 800575a:	429c      	cmp	r4, r3
 800575c:	d117      	bne.n	800578e <_puts_r+0x52>
 800575e:	686c      	ldr	r4, [r5, #4]
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	071b      	lsls	r3, r3, #28
 8005764:	d51d      	bpl.n	80057a2 <_puts_r+0x66>
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	b1db      	cbz	r3, 80057a2 <_puts_r+0x66>
 800576a:	3e01      	subs	r6, #1
 800576c:	68a3      	ldr	r3, [r4, #8]
 800576e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005772:	3b01      	subs	r3, #1
 8005774:	60a3      	str	r3, [r4, #8]
 8005776:	b9e9      	cbnz	r1, 80057b4 <_puts_r+0x78>
 8005778:	2b00      	cmp	r3, #0
 800577a:	da2e      	bge.n	80057da <_puts_r+0x9e>
 800577c:	4622      	mov	r2, r4
 800577e:	210a      	movs	r1, #10
 8005780:	4628      	mov	r0, r5
 8005782:	f000 f8b3 	bl	80058ec <__swbuf_r>
 8005786:	3001      	adds	r0, #1
 8005788:	d011      	beq.n	80057ae <_puts_r+0x72>
 800578a:	200a      	movs	r0, #10
 800578c:	e011      	b.n	80057b2 <_puts_r+0x76>
 800578e:	4b17      	ldr	r3, [pc, #92]	; (80057ec <_puts_r+0xb0>)
 8005790:	429c      	cmp	r4, r3
 8005792:	d101      	bne.n	8005798 <_puts_r+0x5c>
 8005794:	68ac      	ldr	r4, [r5, #8]
 8005796:	e7e3      	b.n	8005760 <_puts_r+0x24>
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <_puts_r+0xb4>)
 800579a:	429c      	cmp	r4, r3
 800579c:	bf08      	it	eq
 800579e:	68ec      	ldreq	r4, [r5, #12]
 80057a0:	e7de      	b.n	8005760 <_puts_r+0x24>
 80057a2:	4621      	mov	r1, r4
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f905 	bl	80059b4 <__swsetup_r>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d0dd      	beq.n	800576a <_puts_r+0x2e>
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	da04      	bge.n	80057c2 <_puts_r+0x86>
 80057b8:	69a2      	ldr	r2, [r4, #24]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	dc06      	bgt.n	80057cc <_puts_r+0x90>
 80057be:	290a      	cmp	r1, #10
 80057c0:	d004      	beq.n	80057cc <_puts_r+0x90>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	6022      	str	r2, [r4, #0]
 80057c8:	7019      	strb	r1, [r3, #0]
 80057ca:	e7cf      	b.n	800576c <_puts_r+0x30>
 80057cc:	4622      	mov	r2, r4
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 f88c 	bl	80058ec <__swbuf_r>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d1c9      	bne.n	800576c <_puts_r+0x30>
 80057d8:	e7e9      	b.n	80057ae <_puts_r+0x72>
 80057da:	200a      	movs	r0, #10
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	6022      	str	r2, [r4, #0]
 80057e2:	7018      	strb	r0, [r3, #0]
 80057e4:	e7e5      	b.n	80057b2 <_puts_r+0x76>
 80057e6:	bf00      	nop
 80057e8:	08006b40 	.word	0x08006b40
 80057ec:	08006b60 	.word	0x08006b60
 80057f0:	08006b20 	.word	0x08006b20

080057f4 <puts>:
 80057f4:	4b02      	ldr	r3, [pc, #8]	; (8005800 <puts+0xc>)
 80057f6:	4601      	mov	r1, r0
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	f7ff bf9f 	b.w	800573c <_puts_r>
 80057fe:	bf00      	nop
 8005800:	20000060 	.word	0x20000060

08005804 <_sbrk_r>:
 8005804:	b538      	push	{r3, r4, r5, lr}
 8005806:	2300      	movs	r3, #0
 8005808:	4c05      	ldr	r4, [pc, #20]	; (8005820 <_sbrk_r+0x1c>)
 800580a:	4605      	mov	r5, r0
 800580c:	4608      	mov	r0, r1
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	f7fb fcae 	bl	8001170 <_sbrk>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_sbrk_r+0x1a>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	b103      	cbz	r3, 800581e <_sbrk_r+0x1a>
 800581c:	602b      	str	r3, [r5, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	20000b60 	.word	0x20000b60

08005824 <siprintf>:
 8005824:	b40e      	push	{r1, r2, r3}
 8005826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800582a:	b500      	push	{lr}
 800582c:	b09c      	sub	sp, #112	; 0x70
 800582e:	ab1d      	add	r3, sp, #116	; 0x74
 8005830:	9002      	str	r0, [sp, #8]
 8005832:	9006      	str	r0, [sp, #24]
 8005834:	9107      	str	r1, [sp, #28]
 8005836:	9104      	str	r1, [sp, #16]
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <siprintf+0x38>)
 800583a:	4909      	ldr	r1, [pc, #36]	; (8005860 <siprintf+0x3c>)
 800583c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005840:	9105      	str	r1, [sp, #20]
 8005842:	6800      	ldr	r0, [r0, #0]
 8005844:	a902      	add	r1, sp, #8
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	f000 fb7e 	bl	8005f48 <_svfiprintf_r>
 800584c:	2200      	movs	r2, #0
 800584e:	9b02      	ldr	r3, [sp, #8]
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	b01c      	add	sp, #112	; 0x70
 8005854:	f85d eb04 	ldr.w	lr, [sp], #4
 8005858:	b003      	add	sp, #12
 800585a:	4770      	bx	lr
 800585c:	20000060 	.word	0x20000060
 8005860:	ffff0208 	.word	0xffff0208

08005864 <__sread>:
 8005864:	b510      	push	{r4, lr}
 8005866:	460c      	mov	r4, r1
 8005868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586c:	f000 ff2a 	bl	80066c4 <_read_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	bfab      	itete	ge
 8005874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005876:	89a3      	ldrhlt	r3, [r4, #12]
 8005878:	181b      	addge	r3, r3, r0
 800587a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800587e:	bfac      	ite	ge
 8005880:	6563      	strge	r3, [r4, #84]	; 0x54
 8005882:	81a3      	strhlt	r3, [r4, #12]
 8005884:	bd10      	pop	{r4, pc}

08005886 <__swrite>:
 8005886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588a:	461f      	mov	r7, r3
 800588c:	898b      	ldrh	r3, [r1, #12]
 800588e:	4605      	mov	r5, r0
 8005890:	05db      	lsls	r3, r3, #23
 8005892:	460c      	mov	r4, r1
 8005894:	4616      	mov	r6, r2
 8005896:	d505      	bpl.n	80058a4 <__swrite+0x1e>
 8005898:	2302      	movs	r3, #2
 800589a:	2200      	movs	r2, #0
 800589c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a0:	f000 fa80 	bl	8005da4 <_lseek_r>
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	4632      	mov	r2, r6
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058b2:	463b      	mov	r3, r7
 80058b4:	4628      	mov	r0, r5
 80058b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ba:	f000 b869 	b.w	8005990 <_write_r>

080058be <__sseek>:
 80058be:	b510      	push	{r4, lr}
 80058c0:	460c      	mov	r4, r1
 80058c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c6:	f000 fa6d 	bl	8005da4 <_lseek_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	89a3      	ldrh	r3, [r4, #12]
 80058ce:	bf15      	itete	ne
 80058d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80058d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058da:	81a3      	strheq	r3, [r4, #12]
 80058dc:	bf18      	it	ne
 80058de:	81a3      	strhne	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__sclose>:
 80058e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e6:	f000 b8d3 	b.w	8005a90 <_close_r>
	...

080058ec <__swbuf_r>:
 80058ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ee:	460e      	mov	r6, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	4605      	mov	r5, r0
 80058f4:	b118      	cbz	r0, 80058fe <__swbuf_r+0x12>
 80058f6:	6983      	ldr	r3, [r0, #24]
 80058f8:	b90b      	cbnz	r3, 80058fe <__swbuf_r+0x12>
 80058fa:	f000 f9c9 	bl	8005c90 <__sinit>
 80058fe:	4b21      	ldr	r3, [pc, #132]	; (8005984 <__swbuf_r+0x98>)
 8005900:	429c      	cmp	r4, r3
 8005902:	d12a      	bne.n	800595a <__swbuf_r+0x6e>
 8005904:	686c      	ldr	r4, [r5, #4]
 8005906:	69a3      	ldr	r3, [r4, #24]
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	89a3      	ldrh	r3, [r4, #12]
 800590c:	071a      	lsls	r2, r3, #28
 800590e:	d52e      	bpl.n	800596e <__swbuf_r+0x82>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	b363      	cbz	r3, 800596e <__swbuf_r+0x82>
 8005914:	6923      	ldr	r3, [r4, #16]
 8005916:	6820      	ldr	r0, [r4, #0]
 8005918:	b2f6      	uxtb	r6, r6
 800591a:	1ac0      	subs	r0, r0, r3
 800591c:	6963      	ldr	r3, [r4, #20]
 800591e:	4637      	mov	r7, r6
 8005920:	4283      	cmp	r3, r0
 8005922:	dc04      	bgt.n	800592e <__swbuf_r+0x42>
 8005924:	4621      	mov	r1, r4
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f948 	bl	8005bbc <_fflush_r>
 800592c:	bb28      	cbnz	r0, 800597a <__swbuf_r+0x8e>
 800592e:	68a3      	ldr	r3, [r4, #8]
 8005930:	3001      	adds	r0, #1
 8005932:	3b01      	subs	r3, #1
 8005934:	60a3      	str	r3, [r4, #8]
 8005936:	6823      	ldr	r3, [r4, #0]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	6022      	str	r2, [r4, #0]
 800593c:	701e      	strb	r6, [r3, #0]
 800593e:	6963      	ldr	r3, [r4, #20]
 8005940:	4283      	cmp	r3, r0
 8005942:	d004      	beq.n	800594e <__swbuf_r+0x62>
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	07db      	lsls	r3, r3, #31
 8005948:	d519      	bpl.n	800597e <__swbuf_r+0x92>
 800594a:	2e0a      	cmp	r6, #10
 800594c:	d117      	bne.n	800597e <__swbuf_r+0x92>
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 f933 	bl	8005bbc <_fflush_r>
 8005956:	b190      	cbz	r0, 800597e <__swbuf_r+0x92>
 8005958:	e00f      	b.n	800597a <__swbuf_r+0x8e>
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <__swbuf_r+0x9c>)
 800595c:	429c      	cmp	r4, r3
 800595e:	d101      	bne.n	8005964 <__swbuf_r+0x78>
 8005960:	68ac      	ldr	r4, [r5, #8]
 8005962:	e7d0      	b.n	8005906 <__swbuf_r+0x1a>
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <__swbuf_r+0xa0>)
 8005966:	429c      	cmp	r4, r3
 8005968:	bf08      	it	eq
 800596a:	68ec      	ldreq	r4, [r5, #12]
 800596c:	e7cb      	b.n	8005906 <__swbuf_r+0x1a>
 800596e:	4621      	mov	r1, r4
 8005970:	4628      	mov	r0, r5
 8005972:	f000 f81f 	bl	80059b4 <__swsetup_r>
 8005976:	2800      	cmp	r0, #0
 8005978:	d0cc      	beq.n	8005914 <__swbuf_r+0x28>
 800597a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800597e:	4638      	mov	r0, r7
 8005980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005982:	bf00      	nop
 8005984:	08006b40 	.word	0x08006b40
 8005988:	08006b60 	.word	0x08006b60
 800598c:	08006b20 	.word	0x08006b20

08005990 <_write_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4605      	mov	r5, r0
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	2200      	movs	r2, #0
 800599a:	4c05      	ldr	r4, [pc, #20]	; (80059b0 <_write_r+0x20>)
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fa fc90 	bl	80002c4 <_write>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_write_r+0x1e>
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_write_r+0x1e>
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	20000b60 	.word	0x20000b60

080059b4 <__swsetup_r>:
 80059b4:	4b32      	ldr	r3, [pc, #200]	; (8005a80 <__swsetup_r+0xcc>)
 80059b6:	b570      	push	{r4, r5, r6, lr}
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	4606      	mov	r6, r0
 80059bc:	460c      	mov	r4, r1
 80059be:	b125      	cbz	r5, 80059ca <__swsetup_r+0x16>
 80059c0:	69ab      	ldr	r3, [r5, #24]
 80059c2:	b913      	cbnz	r3, 80059ca <__swsetup_r+0x16>
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f963 	bl	8005c90 <__sinit>
 80059ca:	4b2e      	ldr	r3, [pc, #184]	; (8005a84 <__swsetup_r+0xd0>)
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d10f      	bne.n	80059f0 <__swsetup_r+0x3c>
 80059d0:	686c      	ldr	r4, [r5, #4]
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	0715      	lsls	r5, r2, #28
 80059da:	d42c      	bmi.n	8005a36 <__swsetup_r+0x82>
 80059dc:	06d0      	lsls	r0, r2, #27
 80059de:	d411      	bmi.n	8005a04 <__swsetup_r+0x50>
 80059e0:	2209      	movs	r2, #9
 80059e2:	6032      	str	r2, [r6, #0]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ee:	e03e      	b.n	8005a6e <__swsetup_r+0xba>
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <__swsetup_r+0xd4>)
 80059f2:	429c      	cmp	r4, r3
 80059f4:	d101      	bne.n	80059fa <__swsetup_r+0x46>
 80059f6:	68ac      	ldr	r4, [r5, #8]
 80059f8:	e7eb      	b.n	80059d2 <__swsetup_r+0x1e>
 80059fa:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <__swsetup_r+0xd8>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	bf08      	it	eq
 8005a00:	68ec      	ldreq	r4, [r5, #12]
 8005a02:	e7e6      	b.n	80059d2 <__swsetup_r+0x1e>
 8005a04:	0751      	lsls	r1, r2, #29
 8005a06:	d512      	bpl.n	8005a2e <__swsetup_r+0x7a>
 8005a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a0a:	b141      	cbz	r1, 8005a1e <__swsetup_r+0x6a>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__swsetup_r+0x66>
 8005a14:	4630      	mov	r0, r6
 8005a16:	f7ff fdd3 	bl	80055c0 <_free_r>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	2300      	movs	r3, #0
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6923      	ldr	r3, [r4, #16]
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	89a3      	ldrh	r3, [r4, #12]
 8005a30:	f043 0308 	orr.w	r3, r3, #8
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	b94b      	cbnz	r3, 8005a4e <__swsetup_r+0x9a>
 8005a3a:	89a3      	ldrh	r3, [r4, #12]
 8005a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a44:	d003      	beq.n	8005a4e <__swsetup_r+0x9a>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f9e1 	bl	8005e10 <__smakebuf_r>
 8005a4e:	89a2      	ldrh	r2, [r4, #12]
 8005a50:	f012 0301 	ands.w	r3, r2, #1
 8005a54:	d00c      	beq.n	8005a70 <__swsetup_r+0xbc>
 8005a56:	2300      	movs	r3, #0
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	6963      	ldr	r3, [r4, #20]
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	61a3      	str	r3, [r4, #24]
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	b953      	cbnz	r3, 8005a7a <__swsetup_r+0xc6>
 8005a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a6c:	d1ba      	bne.n	80059e4 <__swsetup_r+0x30>
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}
 8005a70:	0792      	lsls	r2, r2, #30
 8005a72:	bf58      	it	pl
 8005a74:	6963      	ldrpl	r3, [r4, #20]
 8005a76:	60a3      	str	r3, [r4, #8]
 8005a78:	e7f2      	b.n	8005a60 <__swsetup_r+0xac>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e7f7      	b.n	8005a6e <__swsetup_r+0xba>
 8005a7e:	bf00      	nop
 8005a80:	20000060 	.word	0x20000060
 8005a84:	08006b40 	.word	0x08006b40
 8005a88:	08006b60 	.word	0x08006b60
 8005a8c:	08006b20 	.word	0x08006b20

08005a90 <_close_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	2300      	movs	r3, #0
 8005a94:	4c05      	ldr	r4, [pc, #20]	; (8005aac <_close_r+0x1c>)
 8005a96:	4605      	mov	r5, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	6023      	str	r3, [r4, #0]
 8005a9c:	f7fb fb37 	bl	800110e <_close>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_close_r+0x1a>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_close_r+0x1a>
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000b60 	.word	0x20000b60

08005ab0 <__sflush_r>:
 8005ab0:	898a      	ldrh	r2, [r1, #12]
 8005ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	0710      	lsls	r0, r2, #28
 8005aba:	460c      	mov	r4, r1
 8005abc:	d458      	bmi.n	8005b70 <__sflush_r+0xc0>
 8005abe:	684b      	ldr	r3, [r1, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dc05      	bgt.n	8005ad0 <__sflush_r+0x20>
 8005ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	dc02      	bgt.n	8005ad0 <__sflush_r+0x20>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ad2:	2e00      	cmp	r6, #0
 8005ad4:	d0f9      	beq.n	8005aca <__sflush_r+0x1a>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005adc:	682f      	ldr	r7, [r5, #0]
 8005ade:	6a21      	ldr	r1, [r4, #32]
 8005ae0:	602b      	str	r3, [r5, #0]
 8005ae2:	d032      	beq.n	8005b4a <__sflush_r+0x9a>
 8005ae4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ae6:	89a3      	ldrh	r3, [r4, #12]
 8005ae8:	075a      	lsls	r2, r3, #29
 8005aea:	d505      	bpl.n	8005af8 <__sflush_r+0x48>
 8005aec:	6863      	ldr	r3, [r4, #4]
 8005aee:	1ac0      	subs	r0, r0, r3
 8005af0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005af2:	b10b      	cbz	r3, 8005af8 <__sflush_r+0x48>
 8005af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005af6:	1ac0      	subs	r0, r0, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	4602      	mov	r2, r0
 8005afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005afe:	6a21      	ldr	r1, [r4, #32]
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b0      	blx	r6
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	d106      	bne.n	8005b18 <__sflush_r+0x68>
 8005b0a:	6829      	ldr	r1, [r5, #0]
 8005b0c:	291d      	cmp	r1, #29
 8005b0e:	d848      	bhi.n	8005ba2 <__sflush_r+0xf2>
 8005b10:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <__sflush_r+0x108>)
 8005b12:	40ca      	lsrs	r2, r1
 8005b14:	07d6      	lsls	r6, r2, #31
 8005b16:	d544      	bpl.n	8005ba2 <__sflush_r+0xf2>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	6062      	str	r2, [r4, #4]
 8005b1c:	6922      	ldr	r2, [r4, #16]
 8005b1e:	04d9      	lsls	r1, r3, #19
 8005b20:	6022      	str	r2, [r4, #0]
 8005b22:	d504      	bpl.n	8005b2e <__sflush_r+0x7e>
 8005b24:	1c42      	adds	r2, r0, #1
 8005b26:	d101      	bne.n	8005b2c <__sflush_r+0x7c>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b903      	cbnz	r3, 8005b2e <__sflush_r+0x7e>
 8005b2c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b30:	602f      	str	r7, [r5, #0]
 8005b32:	2900      	cmp	r1, #0
 8005b34:	d0c9      	beq.n	8005aca <__sflush_r+0x1a>
 8005b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b3a:	4299      	cmp	r1, r3
 8005b3c:	d002      	beq.n	8005b44 <__sflush_r+0x94>
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7ff fd3e 	bl	80055c0 <_free_r>
 8005b44:	2000      	movs	r0, #0
 8005b46:	6360      	str	r0, [r4, #52]	; 0x34
 8005b48:	e7c0      	b.n	8005acc <__sflush_r+0x1c>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b0      	blx	r6
 8005b50:	1c41      	adds	r1, r0, #1
 8005b52:	d1c8      	bne.n	8005ae6 <__sflush_r+0x36>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0c5      	beq.n	8005ae6 <__sflush_r+0x36>
 8005b5a:	2b1d      	cmp	r3, #29
 8005b5c:	d001      	beq.n	8005b62 <__sflush_r+0xb2>
 8005b5e:	2b16      	cmp	r3, #22
 8005b60:	d101      	bne.n	8005b66 <__sflush_r+0xb6>
 8005b62:	602f      	str	r7, [r5, #0]
 8005b64:	e7b1      	b.n	8005aca <__sflush_r+0x1a>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	e7ad      	b.n	8005acc <__sflush_r+0x1c>
 8005b70:	690f      	ldr	r7, [r1, #16]
 8005b72:	2f00      	cmp	r7, #0
 8005b74:	d0a9      	beq.n	8005aca <__sflush_r+0x1a>
 8005b76:	0793      	lsls	r3, r2, #30
 8005b78:	bf18      	it	ne
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	680e      	ldr	r6, [r1, #0]
 8005b7e:	bf08      	it	eq
 8005b80:	694b      	ldreq	r3, [r1, #20]
 8005b82:	eba6 0807 	sub.w	r8, r6, r7
 8005b86:	600f      	str	r7, [r1, #0]
 8005b88:	608b      	str	r3, [r1, #8]
 8005b8a:	f1b8 0f00 	cmp.w	r8, #0
 8005b8e:	dd9c      	ble.n	8005aca <__sflush_r+0x1a>
 8005b90:	4643      	mov	r3, r8
 8005b92:	463a      	mov	r2, r7
 8005b94:	6a21      	ldr	r1, [r4, #32]
 8005b96:	4628      	mov	r0, r5
 8005b98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b9a:	47b0      	blx	r6
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	dc06      	bgt.n	8005bae <__sflush_r+0xfe>
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba6:	81a3      	strh	r3, [r4, #12]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bac:	e78e      	b.n	8005acc <__sflush_r+0x1c>
 8005bae:	4407      	add	r7, r0
 8005bb0:	eba8 0800 	sub.w	r8, r8, r0
 8005bb4:	e7e9      	b.n	8005b8a <__sflush_r+0xda>
 8005bb6:	bf00      	nop
 8005bb8:	20400001 	.word	0x20400001

08005bbc <_fflush_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	690b      	ldr	r3, [r1, #16]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	b1db      	cbz	r3, 8005bfe <_fflush_r+0x42>
 8005bc6:	b118      	cbz	r0, 8005bd0 <_fflush_r+0x14>
 8005bc8:	6983      	ldr	r3, [r0, #24]
 8005bca:	b90b      	cbnz	r3, 8005bd0 <_fflush_r+0x14>
 8005bcc:	f000 f860 	bl	8005c90 <__sinit>
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <_fflush_r+0x48>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d109      	bne.n	8005bea <_fflush_r+0x2e>
 8005bd6:	686c      	ldr	r4, [r5, #4]
 8005bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bdc:	b17b      	cbz	r3, 8005bfe <_fflush_r+0x42>
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be6:	f7ff bf63 	b.w	8005ab0 <__sflush_r>
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <_fflush_r+0x4c>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d101      	bne.n	8005bf4 <_fflush_r+0x38>
 8005bf0:	68ac      	ldr	r4, [r5, #8]
 8005bf2:	e7f1      	b.n	8005bd8 <_fflush_r+0x1c>
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <_fflush_r+0x50>)
 8005bf6:	429c      	cmp	r4, r3
 8005bf8:	bf08      	it	eq
 8005bfa:	68ec      	ldreq	r4, [r5, #12]
 8005bfc:	e7ec      	b.n	8005bd8 <_fflush_r+0x1c>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	bf00      	nop
 8005c04:	08006b40 	.word	0x08006b40
 8005c08:	08006b60 	.word	0x08006b60
 8005c0c:	08006b20 	.word	0x08006b20

08005c10 <std>:
 8005c10:	2300      	movs	r3, #0
 8005c12:	b510      	push	{r4, lr}
 8005c14:	4604      	mov	r4, r0
 8005c16:	e9c0 3300 	strd	r3, r3, [r0]
 8005c1a:	6083      	str	r3, [r0, #8]
 8005c1c:	8181      	strh	r1, [r0, #12]
 8005c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005c20:	81c2      	strh	r2, [r0, #14]
 8005c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c26:	6183      	str	r3, [r0, #24]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	305c      	adds	r0, #92	; 0x5c
 8005c2e:	f7ff fcbe 	bl	80055ae <memset>
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <std+0x38>)
 8005c34:	6224      	str	r4, [r4, #32]
 8005c36:	6263      	str	r3, [r4, #36]	; 0x24
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <std+0x3c>)
 8005c3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <std+0x40>)
 8005c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c40:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <std+0x44>)
 8005c42:	6323      	str	r3, [r4, #48]	; 0x30
 8005c44:	bd10      	pop	{r4, pc}
 8005c46:	bf00      	nop
 8005c48:	08005865 	.word	0x08005865
 8005c4c:	08005887 	.word	0x08005887
 8005c50:	080058bf 	.word	0x080058bf
 8005c54:	080058e3 	.word	0x080058e3

08005c58 <_cleanup_r>:
 8005c58:	4901      	ldr	r1, [pc, #4]	; (8005c60 <_cleanup_r+0x8>)
 8005c5a:	f000 b885 	b.w	8005d68 <_fwalk_reent>
 8005c5e:	bf00      	nop
 8005c60:	08005bbd 	.word	0x08005bbd

08005c64 <__sfmoreglue>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	2568      	movs	r5, #104	; 0x68
 8005c68:	1e4a      	subs	r2, r1, #1
 8005c6a:	4355      	muls	r5, r2
 8005c6c:	460e      	mov	r6, r1
 8005c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c72:	f7ff fcf1 	bl	8005658 <_malloc_r>
 8005c76:	4604      	mov	r4, r0
 8005c78:	b140      	cbz	r0, 8005c8c <__sfmoreglue+0x28>
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c80:	300c      	adds	r0, #12
 8005c82:	60a0      	str	r0, [r4, #8]
 8005c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c88:	f7ff fc91 	bl	80055ae <memset>
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}

08005c90 <__sinit>:
 8005c90:	6983      	ldr	r3, [r0, #24]
 8005c92:	b510      	push	{r4, lr}
 8005c94:	4604      	mov	r4, r0
 8005c96:	bb33      	cbnz	r3, 8005ce6 <__sinit+0x56>
 8005c98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c9c:	6503      	str	r3, [r0, #80]	; 0x50
 8005c9e:	4b12      	ldr	r3, [pc, #72]	; (8005ce8 <__sinit+0x58>)
 8005ca0:	4a12      	ldr	r2, [pc, #72]	; (8005cec <__sinit+0x5c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6282      	str	r2, [r0, #40]	; 0x28
 8005ca6:	4298      	cmp	r0, r3
 8005ca8:	bf04      	itt	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	6183      	streq	r3, [r0, #24]
 8005cae:	f000 f81f 	bl	8005cf0 <__sfp>
 8005cb2:	6060      	str	r0, [r4, #4]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 f81b 	bl	8005cf0 <__sfp>
 8005cba:	60a0      	str	r0, [r4, #8]
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f000 f817 	bl	8005cf0 <__sfp>
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	60e0      	str	r0, [r4, #12]
 8005cc6:	2104      	movs	r1, #4
 8005cc8:	6860      	ldr	r0, [r4, #4]
 8005cca:	f7ff ffa1 	bl	8005c10 <std>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	2109      	movs	r1, #9
 8005cd2:	68a0      	ldr	r0, [r4, #8]
 8005cd4:	f7ff ff9c 	bl	8005c10 <std>
 8005cd8:	2202      	movs	r2, #2
 8005cda:	2112      	movs	r1, #18
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	f7ff ff97 	bl	8005c10 <std>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	61a3      	str	r3, [r4, #24]
 8005ce6:	bd10      	pop	{r4, pc}
 8005ce8:	08006b1c 	.word	0x08006b1c
 8005cec:	08005c59 	.word	0x08005c59

08005cf0 <__sfp>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <__sfp+0x70>)
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	681e      	ldr	r6, [r3, #0]
 8005cf8:	69b3      	ldr	r3, [r6, #24]
 8005cfa:	b913      	cbnz	r3, 8005d02 <__sfp+0x12>
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f7ff ffc7 	bl	8005c90 <__sinit>
 8005d02:	3648      	adds	r6, #72	; 0x48
 8005d04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	d503      	bpl.n	8005d14 <__sfp+0x24>
 8005d0c:	6833      	ldr	r3, [r6, #0]
 8005d0e:	b133      	cbz	r3, 8005d1e <__sfp+0x2e>
 8005d10:	6836      	ldr	r6, [r6, #0]
 8005d12:	e7f7      	b.n	8005d04 <__sfp+0x14>
 8005d14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d18:	b16d      	cbz	r5, 8005d36 <__sfp+0x46>
 8005d1a:	3468      	adds	r4, #104	; 0x68
 8005d1c:	e7f4      	b.n	8005d08 <__sfp+0x18>
 8005d1e:	2104      	movs	r1, #4
 8005d20:	4638      	mov	r0, r7
 8005d22:	f7ff ff9f 	bl	8005c64 <__sfmoreglue>
 8005d26:	6030      	str	r0, [r6, #0]
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d1f1      	bne.n	8005d10 <__sfp+0x20>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	4604      	mov	r4, r0
 8005d30:	603b      	str	r3, [r7, #0]
 8005d32:	4620      	mov	r0, r4
 8005d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <__sfp+0x74>)
 8005d38:	6665      	str	r5, [r4, #100]	; 0x64
 8005d3a:	e9c4 5500 	strd	r5, r5, [r4]
 8005d3e:	60a5      	str	r5, [r4, #8]
 8005d40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005d44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d48:	2208      	movs	r2, #8
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d50:	f7ff fc2d 	bl	80055ae <memset>
 8005d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d5c:	e7e9      	b.n	8005d32 <__sfp+0x42>
 8005d5e:	bf00      	nop
 8005d60:	08006b1c 	.word	0x08006b1c
 8005d64:	ffff0001 	.word	0xffff0001

08005d68 <_fwalk_reent>:
 8005d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d6c:	4680      	mov	r8, r0
 8005d6e:	4689      	mov	r9, r1
 8005d70:	2600      	movs	r6, #0
 8005d72:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d76:	b914      	cbnz	r4, 8005d7e <_fwalk_reent+0x16>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d82:	3f01      	subs	r7, #1
 8005d84:	d501      	bpl.n	8005d8a <_fwalk_reent+0x22>
 8005d86:	6824      	ldr	r4, [r4, #0]
 8005d88:	e7f5      	b.n	8005d76 <_fwalk_reent+0xe>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d907      	bls.n	8005da0 <_fwalk_reent+0x38>
 8005d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d94:	3301      	adds	r3, #1
 8005d96:	d003      	beq.n	8005da0 <_fwalk_reent+0x38>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	47c8      	blx	r9
 8005d9e:	4306      	orrs	r6, r0
 8005da0:	3568      	adds	r5, #104	; 0x68
 8005da2:	e7ee      	b.n	8005d82 <_fwalk_reent+0x1a>

08005da4 <_lseek_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4605      	mov	r5, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	2200      	movs	r2, #0
 8005dae:	4c05      	ldr	r4, [pc, #20]	; (8005dc4 <_lseek_r+0x20>)
 8005db0:	6022      	str	r2, [r4, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f7fb f9cf 	bl	8001156 <_lseek>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_lseek_r+0x1e>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_lseek_r+0x1e>
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	20000b60 	.word	0x20000b60

08005dc8 <__swhatbuf_r>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	460e      	mov	r6, r1
 8005dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd0:	b096      	sub	sp, #88	; 0x58
 8005dd2:	2900      	cmp	r1, #0
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	da07      	bge.n	8005dea <__swhatbuf_r+0x22>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	602b      	str	r3, [r5, #0]
 8005dde:	89b3      	ldrh	r3, [r6, #12]
 8005de0:	061a      	lsls	r2, r3, #24
 8005de2:	d410      	bmi.n	8005e06 <__swhatbuf_r+0x3e>
 8005de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de8:	e00e      	b.n	8005e08 <__swhatbuf_r+0x40>
 8005dea:	466a      	mov	r2, sp
 8005dec:	f000 fc7c 	bl	80066e8 <_fstat_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	dbf2      	blt.n	8005dda <__swhatbuf_r+0x12>
 8005df4:	9a01      	ldr	r2, [sp, #4]
 8005df6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dfe:	425a      	negs	r2, r3
 8005e00:	415a      	adcs	r2, r3
 8005e02:	602a      	str	r2, [r5, #0]
 8005e04:	e7ee      	b.n	8005de4 <__swhatbuf_r+0x1c>
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2000      	movs	r0, #0
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	b016      	add	sp, #88	; 0x58
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}

08005e10 <__smakebuf_r>:
 8005e10:	898b      	ldrh	r3, [r1, #12]
 8005e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e14:	079d      	lsls	r5, r3, #30
 8005e16:	4606      	mov	r6, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	d507      	bpl.n	8005e2c <__smakebuf_r+0x1c>
 8005e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	2301      	movs	r3, #1
 8005e26:	6163      	str	r3, [r4, #20]
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	ab01      	add	r3, sp, #4
 8005e2e:	466a      	mov	r2, sp
 8005e30:	f7ff ffca 	bl	8005dc8 <__swhatbuf_r>
 8005e34:	9900      	ldr	r1, [sp, #0]
 8005e36:	4605      	mov	r5, r0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff fc0d 	bl	8005658 <_malloc_r>
 8005e3e:	b948      	cbnz	r0, 8005e54 <__smakebuf_r+0x44>
 8005e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e44:	059a      	lsls	r2, r3, #22
 8005e46:	d4ef      	bmi.n	8005e28 <__smakebuf_r+0x18>
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	e7e3      	b.n	8005e1c <__smakebuf_r+0xc>
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <__smakebuf_r+0x7c>)
 8005e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	6120      	str	r0, [r4, #16]
 8005e66:	6163      	str	r3, [r4, #20]
 8005e68:	9b01      	ldr	r3, [sp, #4]
 8005e6a:	b15b      	cbz	r3, 8005e84 <__smakebuf_r+0x74>
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 fc4b 	bl	800670c <_isatty_r>
 8005e76:	b128      	cbz	r0, 8005e84 <__smakebuf_r+0x74>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	431d      	orrs	r5, r3
 8005e88:	81a5      	strh	r5, [r4, #12]
 8005e8a:	e7cd      	b.n	8005e28 <__smakebuf_r+0x18>
 8005e8c:	08005c59 	.word	0x08005c59

08005e90 <__malloc_lock>:
 8005e90:	4770      	bx	lr

08005e92 <__malloc_unlock>:
 8005e92:	4770      	bx	lr

08005e94 <__ssputs_r>:
 8005e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e98:	688e      	ldr	r6, [r1, #8]
 8005e9a:	4682      	mov	sl, r0
 8005e9c:	429e      	cmp	r6, r3
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4690      	mov	r8, r2
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	d837      	bhi.n	8005f16 <__ssputs_r+0x82>
 8005ea6:	898a      	ldrh	r2, [r1, #12]
 8005ea8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005eac:	d031      	beq.n	8005f12 <__ssputs_r+0x7e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	6825      	ldr	r5, [r4, #0]
 8005eb2:	6909      	ldr	r1, [r1, #16]
 8005eb4:	1a6f      	subs	r7, r5, r1
 8005eb6:	6965      	ldr	r5, [r4, #20]
 8005eb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ebc:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ec0:	f109 0301 	add.w	r3, r9, #1
 8005ec4:	443b      	add	r3, r7
 8005ec6:	429d      	cmp	r5, r3
 8005ec8:	bf38      	it	cc
 8005eca:	461d      	movcc	r5, r3
 8005ecc:	0553      	lsls	r3, r2, #21
 8005ece:	d530      	bpl.n	8005f32 <__ssputs_r+0x9e>
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7ff fbc1 	bl	8005658 <_malloc_r>
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	b950      	cbnz	r0, 8005ef0 <__ssputs_r+0x5c>
 8005eda:	230c      	movs	r3, #12
 8005edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee0:	f8ca 3000 	str.w	r3, [sl]
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef0:	463a      	mov	r2, r7
 8005ef2:	6921      	ldr	r1, [r4, #16]
 8005ef4:	f7ff fb50 	bl	8005598 <memcpy>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	81a3      	strh	r3, [r4, #12]
 8005f04:	6126      	str	r6, [r4, #16]
 8005f06:	443e      	add	r6, r7
 8005f08:	6026      	str	r6, [r4, #0]
 8005f0a:	464e      	mov	r6, r9
 8005f0c:	6165      	str	r5, [r4, #20]
 8005f0e:	1bed      	subs	r5, r5, r7
 8005f10:	60a5      	str	r5, [r4, #8]
 8005f12:	454e      	cmp	r6, r9
 8005f14:	d900      	bls.n	8005f18 <__ssputs_r+0x84>
 8005f16:	464e      	mov	r6, r9
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	f000 fc13 	bl	8006748 <memmove>
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	2000      	movs	r0, #0
 8005f26:	1b9b      	subs	r3, r3, r6
 8005f28:	60a3      	str	r3, [r4, #8]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	441e      	add	r6, r3
 8005f2e:	6026      	str	r6, [r4, #0]
 8005f30:	e7dc      	b.n	8005eec <__ssputs_r+0x58>
 8005f32:	462a      	mov	r2, r5
 8005f34:	f000 fc21 	bl	800677a <_realloc_r>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d1e2      	bne.n	8005f04 <__ssputs_r+0x70>
 8005f3e:	6921      	ldr	r1, [r4, #16]
 8005f40:	4650      	mov	r0, sl
 8005f42:	f7ff fb3d 	bl	80055c0 <_free_r>
 8005f46:	e7c8      	b.n	8005eda <__ssputs_r+0x46>

08005f48 <_svfiprintf_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	461d      	mov	r5, r3
 8005f4e:	898b      	ldrh	r3, [r1, #12]
 8005f50:	b09d      	sub	sp, #116	; 0x74
 8005f52:	061f      	lsls	r7, r3, #24
 8005f54:	4680      	mov	r8, r0
 8005f56:	460c      	mov	r4, r1
 8005f58:	4616      	mov	r6, r2
 8005f5a:	d50f      	bpl.n	8005f7c <_svfiprintf_r+0x34>
 8005f5c:	690b      	ldr	r3, [r1, #16]
 8005f5e:	b96b      	cbnz	r3, 8005f7c <_svfiprintf_r+0x34>
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	f7ff fb79 	bl	8005658 <_malloc_r>
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	6120      	str	r0, [r4, #16]
 8005f6a:	b928      	cbnz	r0, 8005f78 <_svfiprintf_r+0x30>
 8005f6c:	230c      	movs	r3, #12
 8005f6e:	f8c8 3000 	str.w	r3, [r8]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f76:	e0c8      	b.n	800610a <_svfiprintf_r+0x1c2>
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	6163      	str	r3, [r4, #20]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	2320      	movs	r3, #32
 8005f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f86:	2330      	movs	r3, #48	; 0x30
 8005f88:	f04f 0b01 	mov.w	fp, #1
 8005f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f90:	9503      	str	r5, [sp, #12]
 8005f92:	4637      	mov	r7, r6
 8005f94:	463d      	mov	r5, r7
 8005f96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f9a:	b10b      	cbz	r3, 8005fa0 <_svfiprintf_r+0x58>
 8005f9c:	2b25      	cmp	r3, #37	; 0x25
 8005f9e:	d13e      	bne.n	800601e <_svfiprintf_r+0xd6>
 8005fa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005fa4:	d00b      	beq.n	8005fbe <_svfiprintf_r+0x76>
 8005fa6:	4653      	mov	r3, sl
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4621      	mov	r1, r4
 8005fac:	4640      	mov	r0, r8
 8005fae:	f7ff ff71 	bl	8005e94 <__ssputs_r>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f000 80a4 	beq.w	8006100 <_svfiprintf_r+0x1b8>
 8005fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fba:	4453      	add	r3, sl
 8005fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fbe:	783b      	ldrb	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 809d 	beq.w	8006100 <_svfiprintf_r+0x1b8>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fda:	462f      	mov	r7, r5
 8005fdc:	2205      	movs	r2, #5
 8005fde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005fe2:	4850      	ldr	r0, [pc, #320]	; (8006124 <_svfiprintf_r+0x1dc>)
 8005fe4:	f000 fba2 	bl	800672c <memchr>
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	b9d0      	cbnz	r0, 8006022 <_svfiprintf_r+0xda>
 8005fec:	06d9      	lsls	r1, r3, #27
 8005fee:	bf44      	itt	mi
 8005ff0:	2220      	movmi	r2, #32
 8005ff2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ff6:	071a      	lsls	r2, r3, #28
 8005ff8:	bf44      	itt	mi
 8005ffa:	222b      	movmi	r2, #43	; 0x2b
 8005ffc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006000:	782a      	ldrb	r2, [r5, #0]
 8006002:	2a2a      	cmp	r2, #42	; 0x2a
 8006004:	d015      	beq.n	8006032 <_svfiprintf_r+0xea>
 8006006:	462f      	mov	r7, r5
 8006008:	2000      	movs	r0, #0
 800600a:	250a      	movs	r5, #10
 800600c:	9a07      	ldr	r2, [sp, #28]
 800600e:	4639      	mov	r1, r7
 8006010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006014:	3b30      	subs	r3, #48	; 0x30
 8006016:	2b09      	cmp	r3, #9
 8006018:	d94d      	bls.n	80060b6 <_svfiprintf_r+0x16e>
 800601a:	b1b8      	cbz	r0, 800604c <_svfiprintf_r+0x104>
 800601c:	e00f      	b.n	800603e <_svfiprintf_r+0xf6>
 800601e:	462f      	mov	r7, r5
 8006020:	e7b8      	b.n	8005f94 <_svfiprintf_r+0x4c>
 8006022:	4a40      	ldr	r2, [pc, #256]	; (8006124 <_svfiprintf_r+0x1dc>)
 8006024:	463d      	mov	r5, r7
 8006026:	1a80      	subs	r0, r0, r2
 8006028:	fa0b f000 	lsl.w	r0, fp, r0
 800602c:	4318      	orrs	r0, r3
 800602e:	9004      	str	r0, [sp, #16]
 8006030:	e7d3      	b.n	8005fda <_svfiprintf_r+0x92>
 8006032:	9a03      	ldr	r2, [sp, #12]
 8006034:	1d11      	adds	r1, r2, #4
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	2a00      	cmp	r2, #0
 800603c:	db01      	blt.n	8006042 <_svfiprintf_r+0xfa>
 800603e:	9207      	str	r2, [sp, #28]
 8006040:	e004      	b.n	800604c <_svfiprintf_r+0x104>
 8006042:	4252      	negs	r2, r2
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	9207      	str	r2, [sp, #28]
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	783b      	ldrb	r3, [r7, #0]
 800604e:	2b2e      	cmp	r3, #46	; 0x2e
 8006050:	d10c      	bne.n	800606c <_svfiprintf_r+0x124>
 8006052:	787b      	ldrb	r3, [r7, #1]
 8006054:	2b2a      	cmp	r3, #42	; 0x2a
 8006056:	d133      	bne.n	80060c0 <_svfiprintf_r+0x178>
 8006058:	9b03      	ldr	r3, [sp, #12]
 800605a:	3702      	adds	r7, #2
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	9203      	str	r2, [sp, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	bfb8      	it	lt
 8006066:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800606a:	9305      	str	r3, [sp, #20]
 800606c:	4d2e      	ldr	r5, [pc, #184]	; (8006128 <_svfiprintf_r+0x1e0>)
 800606e:	2203      	movs	r2, #3
 8006070:	7839      	ldrb	r1, [r7, #0]
 8006072:	4628      	mov	r0, r5
 8006074:	f000 fb5a 	bl	800672c <memchr>
 8006078:	b138      	cbz	r0, 800608a <_svfiprintf_r+0x142>
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	1b40      	subs	r0, r0, r5
 800607e:	fa03 f000 	lsl.w	r0, r3, r0
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	3701      	adds	r7, #1
 8006086:	4303      	orrs	r3, r0
 8006088:	9304      	str	r3, [sp, #16]
 800608a:	7839      	ldrb	r1, [r7, #0]
 800608c:	2206      	movs	r2, #6
 800608e:	4827      	ldr	r0, [pc, #156]	; (800612c <_svfiprintf_r+0x1e4>)
 8006090:	1c7e      	adds	r6, r7, #1
 8006092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006096:	f000 fb49 	bl	800672c <memchr>
 800609a:	2800      	cmp	r0, #0
 800609c:	d038      	beq.n	8006110 <_svfiprintf_r+0x1c8>
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <_svfiprintf_r+0x1e8>)
 80060a0:	bb13      	cbnz	r3, 80060e8 <_svfiprintf_r+0x1a0>
 80060a2:	9b03      	ldr	r3, [sp, #12]
 80060a4:	3307      	adds	r3, #7
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	3308      	adds	r3, #8
 80060ac:	9303      	str	r3, [sp, #12]
 80060ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b0:	444b      	add	r3, r9
 80060b2:	9309      	str	r3, [sp, #36]	; 0x24
 80060b4:	e76d      	b.n	8005f92 <_svfiprintf_r+0x4a>
 80060b6:	fb05 3202 	mla	r2, r5, r2, r3
 80060ba:	2001      	movs	r0, #1
 80060bc:	460f      	mov	r7, r1
 80060be:	e7a6      	b.n	800600e <_svfiprintf_r+0xc6>
 80060c0:	2300      	movs	r3, #0
 80060c2:	250a      	movs	r5, #10
 80060c4:	4619      	mov	r1, r3
 80060c6:	3701      	adds	r7, #1
 80060c8:	9305      	str	r3, [sp, #20]
 80060ca:	4638      	mov	r0, r7
 80060cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060d0:	3a30      	subs	r2, #48	; 0x30
 80060d2:	2a09      	cmp	r2, #9
 80060d4:	d903      	bls.n	80060de <_svfiprintf_r+0x196>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0c8      	beq.n	800606c <_svfiprintf_r+0x124>
 80060da:	9105      	str	r1, [sp, #20]
 80060dc:	e7c6      	b.n	800606c <_svfiprintf_r+0x124>
 80060de:	fb05 2101 	mla	r1, r5, r1, r2
 80060e2:	2301      	movs	r3, #1
 80060e4:	4607      	mov	r7, r0
 80060e6:	e7f0      	b.n	80060ca <_svfiprintf_r+0x182>
 80060e8:	ab03      	add	r3, sp, #12
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4622      	mov	r2, r4
 80060ee:	4b11      	ldr	r3, [pc, #68]	; (8006134 <_svfiprintf_r+0x1ec>)
 80060f0:	a904      	add	r1, sp, #16
 80060f2:	4640      	mov	r0, r8
 80060f4:	f3af 8000 	nop.w
 80060f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80060fc:	4681      	mov	r9, r0
 80060fe:	d1d6      	bne.n	80060ae <_svfiprintf_r+0x166>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	065b      	lsls	r3, r3, #25
 8006104:	f53f af35 	bmi.w	8005f72 <_svfiprintf_r+0x2a>
 8006108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800610a:	b01d      	add	sp, #116	; 0x74
 800610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006110:	ab03      	add	r3, sp, #12
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4622      	mov	r2, r4
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <_svfiprintf_r+0x1ec>)
 8006118:	a904      	add	r1, sp, #16
 800611a:	4640      	mov	r0, r8
 800611c:	f000 f9c0 	bl	80064a0 <_printf_i>
 8006120:	e7ea      	b.n	80060f8 <_svfiprintf_r+0x1b0>
 8006122:	bf00      	nop
 8006124:	08006b80 	.word	0x08006b80
 8006128:	08006b86 	.word	0x08006b86
 800612c:	08006b8a 	.word	0x08006b8a
 8006130:	00000000 	.word	0x00000000
 8006134:	08005e95 	.word	0x08005e95

08006138 <__sfputc_r>:
 8006138:	6893      	ldr	r3, [r2, #8]
 800613a:	b410      	push	{r4}
 800613c:	3b01      	subs	r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	6093      	str	r3, [r2, #8]
 8006142:	da07      	bge.n	8006154 <__sfputc_r+0x1c>
 8006144:	6994      	ldr	r4, [r2, #24]
 8006146:	42a3      	cmp	r3, r4
 8006148:	db01      	blt.n	800614e <__sfputc_r+0x16>
 800614a:	290a      	cmp	r1, #10
 800614c:	d102      	bne.n	8006154 <__sfputc_r+0x1c>
 800614e:	bc10      	pop	{r4}
 8006150:	f7ff bbcc 	b.w	80058ec <__swbuf_r>
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	1c58      	adds	r0, r3, #1
 8006158:	6010      	str	r0, [r2, #0]
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	4608      	mov	r0, r1
 800615e:	bc10      	pop	{r4}
 8006160:	4770      	bx	lr

08006162 <__sfputs_r>:
 8006162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006164:	4606      	mov	r6, r0
 8006166:	460f      	mov	r7, r1
 8006168:	4614      	mov	r4, r2
 800616a:	18d5      	adds	r5, r2, r3
 800616c:	42ac      	cmp	r4, r5
 800616e:	d101      	bne.n	8006174 <__sfputs_r+0x12>
 8006170:	2000      	movs	r0, #0
 8006172:	e007      	b.n	8006184 <__sfputs_r+0x22>
 8006174:	463a      	mov	r2, r7
 8006176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617a:	4630      	mov	r0, r6
 800617c:	f7ff ffdc 	bl	8006138 <__sfputc_r>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d1f3      	bne.n	800616c <__sfputs_r+0xa>
 8006184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006188 <_vfiprintf_r>:
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	b09d      	sub	sp, #116	; 0x74
 8006190:	4617      	mov	r7, r2
 8006192:	461d      	mov	r5, r3
 8006194:	4606      	mov	r6, r0
 8006196:	b118      	cbz	r0, 80061a0 <_vfiprintf_r+0x18>
 8006198:	6983      	ldr	r3, [r0, #24]
 800619a:	b90b      	cbnz	r3, 80061a0 <_vfiprintf_r+0x18>
 800619c:	f7ff fd78 	bl	8005c90 <__sinit>
 80061a0:	4b7c      	ldr	r3, [pc, #496]	; (8006394 <_vfiprintf_r+0x20c>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	d158      	bne.n	8006258 <_vfiprintf_r+0xd0>
 80061a6:	6874      	ldr	r4, [r6, #4]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	0718      	lsls	r0, r3, #28
 80061ac:	d55e      	bpl.n	800626c <_vfiprintf_r+0xe4>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d05b      	beq.n	800626c <_vfiprintf_r+0xe4>
 80061b4:	2300      	movs	r3, #0
 80061b6:	9309      	str	r3, [sp, #36]	; 0x24
 80061b8:	2320      	movs	r3, #32
 80061ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061be:	2330      	movs	r3, #48	; 0x30
 80061c0:	f04f 0b01 	mov.w	fp, #1
 80061c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c8:	9503      	str	r5, [sp, #12]
 80061ca:	46b8      	mov	r8, r7
 80061cc:	4645      	mov	r5, r8
 80061ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061d2:	b10b      	cbz	r3, 80061d8 <_vfiprintf_r+0x50>
 80061d4:	2b25      	cmp	r3, #37	; 0x25
 80061d6:	d154      	bne.n	8006282 <_vfiprintf_r+0xfa>
 80061d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80061dc:	d00b      	beq.n	80061f6 <_vfiprintf_r+0x6e>
 80061de:	4653      	mov	r3, sl
 80061e0:	463a      	mov	r2, r7
 80061e2:	4621      	mov	r1, r4
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ffbc 	bl	8006162 <__sfputs_r>
 80061ea:	3001      	adds	r0, #1
 80061ec:	f000 80c2 	beq.w	8006374 <_vfiprintf_r+0x1ec>
 80061f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f2:	4453      	add	r3, sl
 80061f4:	9309      	str	r3, [sp, #36]	; 0x24
 80061f6:	f898 3000 	ldrb.w	r3, [r8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80ba 	beq.w	8006374 <_vfiprintf_r+0x1ec>
 8006200:	2300      	movs	r3, #0
 8006202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	9307      	str	r3, [sp, #28]
 800620e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006212:	931a      	str	r3, [sp, #104]	; 0x68
 8006214:	46a8      	mov	r8, r5
 8006216:	2205      	movs	r2, #5
 8006218:	f818 1b01 	ldrb.w	r1, [r8], #1
 800621c:	485e      	ldr	r0, [pc, #376]	; (8006398 <_vfiprintf_r+0x210>)
 800621e:	f000 fa85 	bl	800672c <memchr>
 8006222:	9b04      	ldr	r3, [sp, #16]
 8006224:	bb78      	cbnz	r0, 8006286 <_vfiprintf_r+0xfe>
 8006226:	06d9      	lsls	r1, r3, #27
 8006228:	bf44      	itt	mi
 800622a:	2220      	movmi	r2, #32
 800622c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006230:	071a      	lsls	r2, r3, #28
 8006232:	bf44      	itt	mi
 8006234:	222b      	movmi	r2, #43	; 0x2b
 8006236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800623a:	782a      	ldrb	r2, [r5, #0]
 800623c:	2a2a      	cmp	r2, #42	; 0x2a
 800623e:	d02a      	beq.n	8006296 <_vfiprintf_r+0x10e>
 8006240:	46a8      	mov	r8, r5
 8006242:	2000      	movs	r0, #0
 8006244:	250a      	movs	r5, #10
 8006246:	9a07      	ldr	r2, [sp, #28]
 8006248:	4641      	mov	r1, r8
 800624a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624e:	3b30      	subs	r3, #48	; 0x30
 8006250:	2b09      	cmp	r3, #9
 8006252:	d969      	bls.n	8006328 <_vfiprintf_r+0x1a0>
 8006254:	b360      	cbz	r0, 80062b0 <_vfiprintf_r+0x128>
 8006256:	e024      	b.n	80062a2 <_vfiprintf_r+0x11a>
 8006258:	4b50      	ldr	r3, [pc, #320]	; (800639c <_vfiprintf_r+0x214>)
 800625a:	429c      	cmp	r4, r3
 800625c:	d101      	bne.n	8006262 <_vfiprintf_r+0xda>
 800625e:	68b4      	ldr	r4, [r6, #8]
 8006260:	e7a2      	b.n	80061a8 <_vfiprintf_r+0x20>
 8006262:	4b4f      	ldr	r3, [pc, #316]	; (80063a0 <_vfiprintf_r+0x218>)
 8006264:	429c      	cmp	r4, r3
 8006266:	bf08      	it	eq
 8006268:	68f4      	ldreq	r4, [r6, #12]
 800626a:	e79d      	b.n	80061a8 <_vfiprintf_r+0x20>
 800626c:	4621      	mov	r1, r4
 800626e:	4630      	mov	r0, r6
 8006270:	f7ff fba0 	bl	80059b4 <__swsetup_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	d09d      	beq.n	80061b4 <_vfiprintf_r+0x2c>
 8006278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800627c:	b01d      	add	sp, #116	; 0x74
 800627e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006282:	46a8      	mov	r8, r5
 8006284:	e7a2      	b.n	80061cc <_vfiprintf_r+0x44>
 8006286:	4a44      	ldr	r2, [pc, #272]	; (8006398 <_vfiprintf_r+0x210>)
 8006288:	4645      	mov	r5, r8
 800628a:	1a80      	subs	r0, r0, r2
 800628c:	fa0b f000 	lsl.w	r0, fp, r0
 8006290:	4318      	orrs	r0, r3
 8006292:	9004      	str	r0, [sp, #16]
 8006294:	e7be      	b.n	8006214 <_vfiprintf_r+0x8c>
 8006296:	9a03      	ldr	r2, [sp, #12]
 8006298:	1d11      	adds	r1, r2, #4
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	9103      	str	r1, [sp, #12]
 800629e:	2a00      	cmp	r2, #0
 80062a0:	db01      	blt.n	80062a6 <_vfiprintf_r+0x11e>
 80062a2:	9207      	str	r2, [sp, #28]
 80062a4:	e004      	b.n	80062b0 <_vfiprintf_r+0x128>
 80062a6:	4252      	negs	r2, r2
 80062a8:	f043 0302 	orr.w	r3, r3, #2
 80062ac:	9207      	str	r2, [sp, #28]
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	f898 3000 	ldrb.w	r3, [r8]
 80062b4:	2b2e      	cmp	r3, #46	; 0x2e
 80062b6:	d10e      	bne.n	80062d6 <_vfiprintf_r+0x14e>
 80062b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80062bc:	2b2a      	cmp	r3, #42	; 0x2a
 80062be:	d138      	bne.n	8006332 <_vfiprintf_r+0x1aa>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	f108 0802 	add.w	r8, r8, #2
 80062c6:	1d1a      	adds	r2, r3, #4
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	9203      	str	r2, [sp, #12]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bfb8      	it	lt
 80062d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	4d33      	ldr	r5, [pc, #204]	; (80063a4 <_vfiprintf_r+0x21c>)
 80062d8:	2203      	movs	r2, #3
 80062da:	f898 1000 	ldrb.w	r1, [r8]
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 fa24 	bl	800672c <memchr>
 80062e4:	b140      	cbz	r0, 80062f8 <_vfiprintf_r+0x170>
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	1b40      	subs	r0, r0, r5
 80062ea:	fa03 f000 	lsl.w	r0, r3, r0
 80062ee:	9b04      	ldr	r3, [sp, #16]
 80062f0:	f108 0801 	add.w	r8, r8, #1
 80062f4:	4303      	orrs	r3, r0
 80062f6:	9304      	str	r3, [sp, #16]
 80062f8:	f898 1000 	ldrb.w	r1, [r8]
 80062fc:	2206      	movs	r2, #6
 80062fe:	482a      	ldr	r0, [pc, #168]	; (80063a8 <_vfiprintf_r+0x220>)
 8006300:	f108 0701 	add.w	r7, r8, #1
 8006304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006308:	f000 fa10 	bl	800672c <memchr>
 800630c:	2800      	cmp	r0, #0
 800630e:	d037      	beq.n	8006380 <_vfiprintf_r+0x1f8>
 8006310:	4b26      	ldr	r3, [pc, #152]	; (80063ac <_vfiprintf_r+0x224>)
 8006312:	bb1b      	cbnz	r3, 800635c <_vfiprintf_r+0x1d4>
 8006314:	9b03      	ldr	r3, [sp, #12]
 8006316:	3307      	adds	r3, #7
 8006318:	f023 0307 	bic.w	r3, r3, #7
 800631c:	3308      	adds	r3, #8
 800631e:	9303      	str	r3, [sp, #12]
 8006320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006322:	444b      	add	r3, r9
 8006324:	9309      	str	r3, [sp, #36]	; 0x24
 8006326:	e750      	b.n	80061ca <_vfiprintf_r+0x42>
 8006328:	fb05 3202 	mla	r2, r5, r2, r3
 800632c:	2001      	movs	r0, #1
 800632e:	4688      	mov	r8, r1
 8006330:	e78a      	b.n	8006248 <_vfiprintf_r+0xc0>
 8006332:	2300      	movs	r3, #0
 8006334:	250a      	movs	r5, #10
 8006336:	4619      	mov	r1, r3
 8006338:	f108 0801 	add.w	r8, r8, #1
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	4640      	mov	r0, r8
 8006340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006344:	3a30      	subs	r2, #48	; 0x30
 8006346:	2a09      	cmp	r2, #9
 8006348:	d903      	bls.n	8006352 <_vfiprintf_r+0x1ca>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0c3      	beq.n	80062d6 <_vfiprintf_r+0x14e>
 800634e:	9105      	str	r1, [sp, #20]
 8006350:	e7c1      	b.n	80062d6 <_vfiprintf_r+0x14e>
 8006352:	fb05 2101 	mla	r1, r5, r1, r2
 8006356:	2301      	movs	r3, #1
 8006358:	4680      	mov	r8, r0
 800635a:	e7f0      	b.n	800633e <_vfiprintf_r+0x1b6>
 800635c:	ab03      	add	r3, sp, #12
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4622      	mov	r2, r4
 8006362:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <_vfiprintf_r+0x228>)
 8006364:	a904      	add	r1, sp, #16
 8006366:	4630      	mov	r0, r6
 8006368:	f3af 8000 	nop.w
 800636c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006370:	4681      	mov	r9, r0
 8006372:	d1d5      	bne.n	8006320 <_vfiprintf_r+0x198>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	065b      	lsls	r3, r3, #25
 8006378:	f53f af7e 	bmi.w	8006278 <_vfiprintf_r+0xf0>
 800637c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800637e:	e77d      	b.n	800627c <_vfiprintf_r+0xf4>
 8006380:	ab03      	add	r3, sp, #12
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4622      	mov	r2, r4
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <_vfiprintf_r+0x228>)
 8006388:	a904      	add	r1, sp, #16
 800638a:	4630      	mov	r0, r6
 800638c:	f000 f888 	bl	80064a0 <_printf_i>
 8006390:	e7ec      	b.n	800636c <_vfiprintf_r+0x1e4>
 8006392:	bf00      	nop
 8006394:	08006b40 	.word	0x08006b40
 8006398:	08006b80 	.word	0x08006b80
 800639c:	08006b60 	.word	0x08006b60
 80063a0:	08006b20 	.word	0x08006b20
 80063a4:	08006b86 	.word	0x08006b86
 80063a8:	08006b8a 	.word	0x08006b8a
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006163 	.word	0x08006163

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4691      	mov	r9, r2
 80063ba:	461f      	mov	r7, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	4606      	mov	r6, r0
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bfb8      	it	lt
 80063c6:	4613      	movlt	r3, r2
 80063c8:	f8c9 3000 	str.w	r3, [r9]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d0:	460c      	mov	r4, r1
 80063d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d6:	b112      	cbz	r2, 80063de <_printf_common+0x2a>
 80063d8:	3301      	adds	r3, #1
 80063da:	f8c9 3000 	str.w	r3, [r9]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063e8:	3302      	addmi	r3, #2
 80063ea:	f8c9 3000 	strmi.w	r3, [r9]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	f015 0506 	ands.w	r5, r5, #6
 80063f4:	d107      	bne.n	8006406 <_printf_common+0x52>
 80063f6:	f104 0a19 	add.w	sl, r4, #25
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	42ab      	cmp	r3, r5
 8006404:	dc29      	bgt.n	800645a <_printf_common+0xa6>
 8006406:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	3300      	adds	r3, #0
 800640e:	bf18      	it	ne
 8006410:	2301      	movne	r3, #1
 8006412:	0692      	lsls	r2, r2, #26
 8006414:	d42e      	bmi.n	8006474 <_printf_common+0xc0>
 8006416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800641a:	4639      	mov	r1, r7
 800641c:	4630      	mov	r0, r6
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d021      	beq.n	8006468 <_printf_common+0xb4>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	68e5      	ldr	r5, [r4, #12]
 8006428:	f003 0306 	and.w	r3, r3, #6
 800642c:	2b04      	cmp	r3, #4
 800642e:	bf18      	it	ne
 8006430:	2500      	movne	r5, #0
 8006432:	f8d9 2000 	ldr.w	r2, [r9]
 8006436:	f04f 0900 	mov.w	r9, #0
 800643a:	bf08      	it	eq
 800643c:	1aad      	subeq	r5, r5, r2
 800643e:	68a3      	ldr	r3, [r4, #8]
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	bf08      	it	eq
 8006444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006448:	4293      	cmp	r3, r2
 800644a:	bfc4      	itt	gt
 800644c:	1a9b      	subgt	r3, r3, r2
 800644e:	18ed      	addgt	r5, r5, r3
 8006450:	341a      	adds	r4, #26
 8006452:	454d      	cmp	r5, r9
 8006454:	d11a      	bne.n	800648c <_printf_common+0xd8>
 8006456:	2000      	movs	r0, #0
 8006458:	e008      	b.n	800646c <_printf_common+0xb8>
 800645a:	2301      	movs	r3, #1
 800645c:	4652      	mov	r2, sl
 800645e:	4639      	mov	r1, r7
 8006460:	4630      	mov	r0, r6
 8006462:	47c0      	blx	r8
 8006464:	3001      	adds	r0, #1
 8006466:	d103      	bne.n	8006470 <_printf_common+0xbc>
 8006468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006470:	3501      	adds	r5, #1
 8006472:	e7c2      	b.n	80063fa <_printf_common+0x46>
 8006474:	2030      	movs	r0, #48	; 0x30
 8006476:	18e1      	adds	r1, r4, r3
 8006478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006482:	4422      	add	r2, r4
 8006484:	3302      	adds	r3, #2
 8006486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648a:	e7c4      	b.n	8006416 <_printf_common+0x62>
 800648c:	2301      	movs	r3, #1
 800648e:	4622      	mov	r2, r4
 8006490:	4639      	mov	r1, r7
 8006492:	4630      	mov	r0, r6
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d0e6      	beq.n	8006468 <_printf_common+0xb4>
 800649a:	f109 0901 	add.w	r9, r9, #1
 800649e:	e7d8      	b.n	8006452 <_printf_common+0x9e>

080064a0 <_printf_i>:
 80064a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064a8:	460c      	mov	r4, r1
 80064aa:	7e09      	ldrb	r1, [r1, #24]
 80064ac:	b085      	sub	sp, #20
 80064ae:	296e      	cmp	r1, #110	; 0x6e
 80064b0:	4617      	mov	r7, r2
 80064b2:	4606      	mov	r6, r0
 80064b4:	4698      	mov	r8, r3
 80064b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b8:	f000 80b3 	beq.w	8006622 <_printf_i+0x182>
 80064bc:	d822      	bhi.n	8006504 <_printf_i+0x64>
 80064be:	2963      	cmp	r1, #99	; 0x63
 80064c0:	d036      	beq.n	8006530 <_printf_i+0x90>
 80064c2:	d80a      	bhi.n	80064da <_printf_i+0x3a>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	f000 80b9 	beq.w	800663c <_printf_i+0x19c>
 80064ca:	2958      	cmp	r1, #88	; 0x58
 80064cc:	f000 8083 	beq.w	80065d6 <_printf_i+0x136>
 80064d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064d8:	e032      	b.n	8006540 <_printf_i+0xa0>
 80064da:	2964      	cmp	r1, #100	; 0x64
 80064dc:	d001      	beq.n	80064e2 <_printf_i+0x42>
 80064de:	2969      	cmp	r1, #105	; 0x69
 80064e0:	d1f6      	bne.n	80064d0 <_printf_i+0x30>
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	6813      	ldr	r3, [r2, #0]
 80064e6:	0605      	lsls	r5, r0, #24
 80064e8:	f103 0104 	add.w	r1, r3, #4
 80064ec:	d52a      	bpl.n	8006544 <_printf_i+0xa4>
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da03      	bge.n	80064fe <_printf_i+0x5e>
 80064f6:	222d      	movs	r2, #45	; 0x2d
 80064f8:	425b      	negs	r3, r3
 80064fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064fe:	486f      	ldr	r0, [pc, #444]	; (80066bc <_printf_i+0x21c>)
 8006500:	220a      	movs	r2, #10
 8006502:	e039      	b.n	8006578 <_printf_i+0xd8>
 8006504:	2973      	cmp	r1, #115	; 0x73
 8006506:	f000 809d 	beq.w	8006644 <_printf_i+0x1a4>
 800650a:	d808      	bhi.n	800651e <_printf_i+0x7e>
 800650c:	296f      	cmp	r1, #111	; 0x6f
 800650e:	d020      	beq.n	8006552 <_printf_i+0xb2>
 8006510:	2970      	cmp	r1, #112	; 0x70
 8006512:	d1dd      	bne.n	80064d0 <_printf_i+0x30>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	f043 0320 	orr.w	r3, r3, #32
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	e003      	b.n	8006526 <_printf_i+0x86>
 800651e:	2975      	cmp	r1, #117	; 0x75
 8006520:	d017      	beq.n	8006552 <_printf_i+0xb2>
 8006522:	2978      	cmp	r1, #120	; 0x78
 8006524:	d1d4      	bne.n	80064d0 <_printf_i+0x30>
 8006526:	2378      	movs	r3, #120	; 0x78
 8006528:	4865      	ldr	r0, [pc, #404]	; (80066c0 <_printf_i+0x220>)
 800652a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800652e:	e055      	b.n	80065dc <_printf_i+0x13c>
 8006530:	6813      	ldr	r3, [r2, #0]
 8006532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006536:	1d19      	adds	r1, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6011      	str	r1, [r2, #0]
 800653c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006540:	2301      	movs	r3, #1
 8006542:	e08c      	b.n	800665e <_printf_i+0x1be>
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f010 0f40 	tst.w	r0, #64	; 0x40
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	bf18      	it	ne
 800654e:	b21b      	sxthne	r3, r3
 8006550:	e7cf      	b.n	80064f2 <_printf_i+0x52>
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	6825      	ldr	r5, [r4, #0]
 8006556:	1d18      	adds	r0, r3, #4
 8006558:	6010      	str	r0, [r2, #0]
 800655a:	0628      	lsls	r0, r5, #24
 800655c:	d501      	bpl.n	8006562 <_printf_i+0xc2>
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	e002      	b.n	8006568 <_printf_i+0xc8>
 8006562:	0668      	lsls	r0, r5, #25
 8006564:	d5fb      	bpl.n	800655e <_printf_i+0xbe>
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	296f      	cmp	r1, #111	; 0x6f
 800656a:	bf14      	ite	ne
 800656c:	220a      	movne	r2, #10
 800656e:	2208      	moveq	r2, #8
 8006570:	4852      	ldr	r0, [pc, #328]	; (80066bc <_printf_i+0x21c>)
 8006572:	2100      	movs	r1, #0
 8006574:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006578:	6865      	ldr	r5, [r4, #4]
 800657a:	2d00      	cmp	r5, #0
 800657c:	60a5      	str	r5, [r4, #8]
 800657e:	f2c0 8095 	blt.w	80066ac <_printf_i+0x20c>
 8006582:	6821      	ldr	r1, [r4, #0]
 8006584:	f021 0104 	bic.w	r1, r1, #4
 8006588:	6021      	str	r1, [r4, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d13d      	bne.n	800660a <_printf_i+0x16a>
 800658e:	2d00      	cmp	r5, #0
 8006590:	f040 808e 	bne.w	80066b0 <_printf_i+0x210>
 8006594:	4665      	mov	r5, ip
 8006596:	2a08      	cmp	r2, #8
 8006598:	d10b      	bne.n	80065b2 <_printf_i+0x112>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	07db      	lsls	r3, r3, #31
 800659e:	d508      	bpl.n	80065b2 <_printf_i+0x112>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	bfde      	ittt	le
 80065a8:	2330      	movle	r3, #48	; 0x30
 80065aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065b2:	ebac 0305 	sub.w	r3, ip, r5
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	f8cd 8000 	str.w	r8, [sp]
 80065bc:	463b      	mov	r3, r7
 80065be:	aa03      	add	r2, sp, #12
 80065c0:	4621      	mov	r1, r4
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7ff fef6 	bl	80063b4 <_printf_common>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d14d      	bne.n	8006668 <_printf_i+0x1c8>
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d0:	b005      	add	sp, #20
 80065d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065d6:	4839      	ldr	r0, [pc, #228]	; (80066bc <_printf_i+0x21c>)
 80065d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	6821      	ldr	r1, [r4, #0]
 80065e0:	1d1d      	adds	r5, r3, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6015      	str	r5, [r2, #0]
 80065e6:	060a      	lsls	r2, r1, #24
 80065e8:	d50b      	bpl.n	8006602 <_printf_i+0x162>
 80065ea:	07ca      	lsls	r2, r1, #31
 80065ec:	bf44      	itt	mi
 80065ee:	f041 0120 	orrmi.w	r1, r1, #32
 80065f2:	6021      	strmi	r1, [r4, #0]
 80065f4:	b91b      	cbnz	r3, 80065fe <_printf_i+0x15e>
 80065f6:	6822      	ldr	r2, [r4, #0]
 80065f8:	f022 0220 	bic.w	r2, r2, #32
 80065fc:	6022      	str	r2, [r4, #0]
 80065fe:	2210      	movs	r2, #16
 8006600:	e7b7      	b.n	8006572 <_printf_i+0xd2>
 8006602:	064d      	lsls	r5, r1, #25
 8006604:	bf48      	it	mi
 8006606:	b29b      	uxthmi	r3, r3
 8006608:	e7ef      	b.n	80065ea <_printf_i+0x14a>
 800660a:	4665      	mov	r5, ip
 800660c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006610:	fb02 3311 	mls	r3, r2, r1, r3
 8006614:	5cc3      	ldrb	r3, [r0, r3]
 8006616:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800661a:	460b      	mov	r3, r1
 800661c:	2900      	cmp	r1, #0
 800661e:	d1f5      	bne.n	800660c <_printf_i+0x16c>
 8006620:	e7b9      	b.n	8006596 <_printf_i+0xf6>
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	1d18      	adds	r0, r3, #4
 8006628:	6961      	ldr	r1, [r4, #20]
 800662a:	6010      	str	r0, [r2, #0]
 800662c:	0628      	lsls	r0, r5, #24
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	d501      	bpl.n	8006636 <_printf_i+0x196>
 8006632:	6019      	str	r1, [r3, #0]
 8006634:	e002      	b.n	800663c <_printf_i+0x19c>
 8006636:	066a      	lsls	r2, r5, #25
 8006638:	d5fb      	bpl.n	8006632 <_printf_i+0x192>
 800663a:	8019      	strh	r1, [r3, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	4665      	mov	r5, ip
 8006640:	6123      	str	r3, [r4, #16]
 8006642:	e7b9      	b.n	80065b8 <_printf_i+0x118>
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	1d19      	adds	r1, r3, #4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	681d      	ldr	r5, [r3, #0]
 800664c:	6862      	ldr	r2, [r4, #4]
 800664e:	2100      	movs	r1, #0
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f86b 	bl	800672c <memchr>
 8006656:	b108      	cbz	r0, 800665c <_printf_i+0x1bc>
 8006658:	1b40      	subs	r0, r0, r5
 800665a:	6060      	str	r0, [r4, #4]
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	2300      	movs	r3, #0
 8006662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006666:	e7a7      	b.n	80065b8 <_printf_i+0x118>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	462a      	mov	r2, r5
 800666c:	4639      	mov	r1, r7
 800666e:	4630      	mov	r0, r6
 8006670:	47c0      	blx	r8
 8006672:	3001      	adds	r0, #1
 8006674:	d0aa      	beq.n	80065cc <_printf_i+0x12c>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	079b      	lsls	r3, r3, #30
 800667a:	d413      	bmi.n	80066a4 <_printf_i+0x204>
 800667c:	68e0      	ldr	r0, [r4, #12]
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	4298      	cmp	r0, r3
 8006682:	bfb8      	it	lt
 8006684:	4618      	movlt	r0, r3
 8006686:	e7a3      	b.n	80065d0 <_printf_i+0x130>
 8006688:	2301      	movs	r3, #1
 800668a:	464a      	mov	r2, r9
 800668c:	4639      	mov	r1, r7
 800668e:	4630      	mov	r0, r6
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d09a      	beq.n	80065cc <_printf_i+0x12c>
 8006696:	3501      	adds	r5, #1
 8006698:	68e3      	ldr	r3, [r4, #12]
 800669a:	9a03      	ldr	r2, [sp, #12]
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	42ab      	cmp	r3, r5
 80066a0:	dcf2      	bgt.n	8006688 <_printf_i+0x1e8>
 80066a2:	e7eb      	b.n	800667c <_printf_i+0x1dc>
 80066a4:	2500      	movs	r5, #0
 80066a6:	f104 0919 	add.w	r9, r4, #25
 80066aa:	e7f5      	b.n	8006698 <_printf_i+0x1f8>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1ac      	bne.n	800660a <_printf_i+0x16a>
 80066b0:	7803      	ldrb	r3, [r0, #0]
 80066b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ba:	e76c      	b.n	8006596 <_printf_i+0xf6>
 80066bc:	08006b91 	.word	0x08006b91
 80066c0:	08006ba2 	.word	0x08006ba2

080066c4 <_read_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4605      	mov	r5, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	4611      	mov	r1, r2
 80066cc:	2200      	movs	r2, #0
 80066ce:	4c05      	ldr	r4, [pc, #20]	; (80066e4 <_read_r+0x20>)
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fa fcfe 	bl	80010d4 <_read>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_read_r+0x1e>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_read_r+0x1e>
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20000b60 	.word	0x20000b60

080066e8 <_fstat_r>:
 80066e8:	b538      	push	{r3, r4, r5, lr}
 80066ea:	2300      	movs	r3, #0
 80066ec:	4c06      	ldr	r4, [pc, #24]	; (8006708 <_fstat_r+0x20>)
 80066ee:	4605      	mov	r5, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	f7fa fd15 	bl	8001124 <_fstat>
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	d102      	bne.n	8006704 <_fstat_r+0x1c>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	b103      	cbz	r3, 8006704 <_fstat_r+0x1c>
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	bd38      	pop	{r3, r4, r5, pc}
 8006706:	bf00      	nop
 8006708:	20000b60 	.word	0x20000b60

0800670c <_isatty_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	2300      	movs	r3, #0
 8006710:	4c05      	ldr	r4, [pc, #20]	; (8006728 <_isatty_r+0x1c>)
 8006712:	4605      	mov	r5, r0
 8006714:	4608      	mov	r0, r1
 8006716:	6023      	str	r3, [r4, #0]
 8006718:	f7fa fd13 	bl	8001142 <_isatty>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_isatty_r+0x1a>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	b103      	cbz	r3, 8006726 <_isatty_r+0x1a>
 8006724:	602b      	str	r3, [r5, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20000b60 	.word	0x20000b60

0800672c <memchr>:
 800672c:	b510      	push	{r4, lr}
 800672e:	b2c9      	uxtb	r1, r1
 8006730:	4402      	add	r2, r0
 8006732:	4290      	cmp	r0, r2
 8006734:	4603      	mov	r3, r0
 8006736:	d101      	bne.n	800673c <memchr+0x10>
 8006738:	2300      	movs	r3, #0
 800673a:	e003      	b.n	8006744 <memchr+0x18>
 800673c:	781c      	ldrb	r4, [r3, #0]
 800673e:	3001      	adds	r0, #1
 8006740:	428c      	cmp	r4, r1
 8006742:	d1f6      	bne.n	8006732 <memchr+0x6>
 8006744:	4618      	mov	r0, r3
 8006746:	bd10      	pop	{r4, pc}

08006748 <memmove>:
 8006748:	4288      	cmp	r0, r1
 800674a:	b510      	push	{r4, lr}
 800674c:	eb01 0302 	add.w	r3, r1, r2
 8006750:	d807      	bhi.n	8006762 <memmove+0x1a>
 8006752:	1e42      	subs	r2, r0, #1
 8006754:	4299      	cmp	r1, r3
 8006756:	d00a      	beq.n	800676e <memmove+0x26>
 8006758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006760:	e7f8      	b.n	8006754 <memmove+0xc>
 8006762:	4283      	cmp	r3, r0
 8006764:	d9f5      	bls.n	8006752 <memmove+0xa>
 8006766:	1881      	adds	r1, r0, r2
 8006768:	1ad2      	subs	r2, r2, r3
 800676a:	42d3      	cmn	r3, r2
 800676c:	d100      	bne.n	8006770 <memmove+0x28>
 800676e:	bd10      	pop	{r4, pc}
 8006770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006774:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006778:	e7f7      	b.n	800676a <memmove+0x22>

0800677a <_realloc_r>:
 800677a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677c:	4607      	mov	r7, r0
 800677e:	4614      	mov	r4, r2
 8006780:	460e      	mov	r6, r1
 8006782:	b921      	cbnz	r1, 800678e <_realloc_r+0x14>
 8006784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006788:	4611      	mov	r1, r2
 800678a:	f7fe bf65 	b.w	8005658 <_malloc_r>
 800678e:	b922      	cbnz	r2, 800679a <_realloc_r+0x20>
 8006790:	f7fe ff16 	bl	80055c0 <_free_r>
 8006794:	4625      	mov	r5, r4
 8006796:	4628      	mov	r0, r5
 8006798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800679a:	f000 f814 	bl	80067c6 <_malloc_usable_size_r>
 800679e:	42a0      	cmp	r0, r4
 80067a0:	d20f      	bcs.n	80067c2 <_realloc_r+0x48>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4638      	mov	r0, r7
 80067a6:	f7fe ff57 	bl	8005658 <_malloc_r>
 80067aa:	4605      	mov	r5, r0
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d0f2      	beq.n	8006796 <_realloc_r+0x1c>
 80067b0:	4631      	mov	r1, r6
 80067b2:	4622      	mov	r2, r4
 80067b4:	f7fe fef0 	bl	8005598 <memcpy>
 80067b8:	4631      	mov	r1, r6
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7fe ff00 	bl	80055c0 <_free_r>
 80067c0:	e7e9      	b.n	8006796 <_realloc_r+0x1c>
 80067c2:	4635      	mov	r5, r6
 80067c4:	e7e7      	b.n	8006796 <_realloc_r+0x1c>

080067c6 <_malloc_usable_size_r>:
 80067c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ca:	1f18      	subs	r0, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfbc      	itt	lt
 80067d0:	580b      	ldrlt	r3, [r1, r0]
 80067d2:	18c0      	addlt	r0, r0, r3
 80067d4:	4770      	bx	lr
	...

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
