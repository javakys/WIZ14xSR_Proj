
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007830  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e84  08007e84  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e84  08007e84  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08007e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200000c4  08007f50  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  08007f50  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe5  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6f  00000000  00000000  000320d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00035048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00036150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2a7  00000000  00000000  00037118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012087  00000000  00000000  000533bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1536  00000000  00000000  00065446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010697c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  001069d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000c4 	.word	0x200000c4
 8000200:	00000000 	.word	0x00000000
 8000204:	080079fc 	.word	0x080079fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000c8 	.word	0x200000c8
 8000220:	080079fc 	.word	0x080079fc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Reset_W5300>:

#include "main.h"
#include "W5300BasicFunctions.h"

void Reset_W5300()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4807      	ldr	r0, [pc, #28]	; (800025c <Reset_W5300+0x28>)
 800023e:	f002 fab5 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f001 fba4 	bl	8001990 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_W5300_GPIO_Port, RESET_W5300_Pin, GPIO_PIN_SET);
 8000248:	2201      	movs	r2, #1
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <Reset_W5300+0x28>)
 800024e:	f002 faad 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000252:	2064      	movs	r0, #100	; 0x64
 8000254:	f001 fb9c 	bl	8001990 <HAL_Delay>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40011c00 	.word	0x40011c00

08000260 <W5300_write>:

void W5300_write(uint32_t addr, iodata_t wd)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
	*((uint16_t*)(addr << 1)) = wd;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	005b      	lsls	r3, r3, #1
 8000270:	461a      	mov	r2, r3
 8000272:	887b      	ldrh	r3, [r7, #2]
 8000274:	8013      	strh	r3, [r2, #0]
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <W5300_read>:

iodata_t W5300_read(uint32_t addr)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	return *((uint16_t*)(addr << 1));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	881b      	ldrh	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <W5300Initialize>:

void W5300Initialize(unsigned char * mem_size)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*)mem_size) == -1)
 80002a0:	6879      	ldr	r1, [r7, #4]
 80002a2:	2001      	movs	r0, #1
 80002a4:	f005 fcd4 	bl	8005c50 <ctlwizchip>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002ae:	d102      	bne.n	80002b6 <W5300Initialize+0x1e>
	{
		printf("W5300 memory initialization failed\r\n");
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <W5300Initialize+0x28>)
 80002b2:	f006 fb35 	bl	8006920 <puts>
	}
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	08007a14 	.word	0x08007a14

080002c4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart5, (uint8_t *)ptr, len, 10);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	230a      	movs	r3, #10
 80002d6:	68b9      	ldr	r1, [r7, #8]
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <_write+0x24>)
 80002da:	f003 fb7a 	bl	80039d2 <HAL_UART_Transmit>
	return len;
 80002de:	687b      	ldr	r3, [r7, #4]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200005e0 	.word	0x200005e0

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ee:	b089      	sub	sp, #36	; 0x24
 80002f0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f001 faeb 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f985 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 fb49 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 80002fe:	f000 fae5 	bl	80008cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000302:	f000 fa8f 	bl	8000824 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000306:	f000 f9c3 	bl	8000690 <MX_TIM2_Init>
  MX_UART4_Init();
 800030a:	f000 fa0d 	bl	8000728 <MX_UART4_Init>
  MX_UART5_Init();
 800030e:	f000 fa35 	bl	800077c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000312:	f000 fa5d 	bl	80007d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000316:	f000 faaf 	bl	8000878 <MX_USART3_UART_Init>
  MX_FSMC_Init();
 800031a:	f000 fc1f 	bl	8000b5c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800031e:	4888      	ldr	r0, [pc, #544]	; (8000540 <main+0x254>)
 8000320:	f002 ff2c 	bl	800317c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  Reset_W5300();
 8000324:	f7ff ff86 	bl	8000234 <Reset_W5300>

  reg_wizchip_bus_cbfunc(W5300_read, W5300_write);
 8000328:	4986      	ldr	r1, [pc, #536]	; (8000544 <main+0x258>)
 800032a:	4887      	ldr	r0, [pc, #540]	; (8000548 <main+0x25c>)
 800032c:	f005 fc64 	bl	8005bf8 <reg_wizchip_bus_cbfunc>

  printf("GetMR()=%04X\r\n", getMR());
 8000330:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8000334:	f004 fae8 	bl	8004908 <WIZCHIP_READ>
 8000338:	4603      	mov	r3, r0
 800033a:	4619      	mov	r1, r3
 800033c:	4883      	ldr	r0, [pc, #524]	; (800054c <main+0x260>)
 800033e:	f006 fa69 	bl	8006814 <iprintf>
//  setSHAR(gWIZNETINFO.mac);
//  setSIPR(gWIZNETINFO.ip);
//  setGAR(gWIZNETINFO.gw);
//  setSUBR(gWIZNETINFO.sn);

  W5300Initialize(W5300_memsize);
 8000342:	4883      	ldr	r0, [pc, #524]	; (8000550 <main+0x264>)
 8000344:	f7ff ffa8 	bl	8000298 <W5300Initialize>
  printf("GetTMS01R()\%04X\r\n", getTMS01R());
 8000348:	4882      	ldr	r0, [pc, #520]	; (8000554 <main+0x268>)
 800034a:	f004 fadd 	bl	8004908 <WIZCHIP_READ>
 800034e:	4603      	mov	r3, r0
 8000350:	4619      	mov	r1, r3
 8000352:	4881      	ldr	r0, [pc, #516]	; (8000558 <main+0x26c>)
 8000354:	f006 fa5e 	bl	8006814 <iprintf>
  printf("GetTMS23R()\%04X\r\n", getTMS23R());
 8000358:	4880      	ldr	r0, [pc, #512]	; (800055c <main+0x270>)
 800035a:	f004 fad5 	bl	8004908 <WIZCHIP_READ>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	487f      	ldr	r0, [pc, #508]	; (8000560 <main+0x274>)
 8000364:	f006 fa56 	bl	8006814 <iprintf>
  printf("GetTMS45R()\%04X\r\n", getTMS45R());
 8000368:	487e      	ldr	r0, [pc, #504]	; (8000564 <main+0x278>)
 800036a:	f004 facd 	bl	8004908 <WIZCHIP_READ>
 800036e:	4603      	mov	r3, r0
 8000370:	4619      	mov	r1, r3
 8000372:	487d      	ldr	r0, [pc, #500]	; (8000568 <main+0x27c>)
 8000374:	f006 fa4e 	bl	8006814 <iprintf>
  printf("GetTMS67R()\%04X\r\n", getTMS67R());
 8000378:	487c      	ldr	r0, [pc, #496]	; (800056c <main+0x280>)
 800037a:	f004 fac5 	bl	8004908 <WIZCHIP_READ>
 800037e:	4603      	mov	r3, r0
 8000380:	4619      	mov	r1, r3
 8000382:	487b      	ldr	r0, [pc, #492]	; (8000570 <main+0x284>)
 8000384:	f006 fa46 	bl	8006814 <iprintf>
  printf("GetRMS01R()\%04X\r\n", getRMS01R());
 8000388:	487a      	ldr	r0, [pc, #488]	; (8000574 <main+0x288>)
 800038a:	f004 fabd 	bl	8004908 <WIZCHIP_READ>
 800038e:	4603      	mov	r3, r0
 8000390:	4619      	mov	r1, r3
 8000392:	4879      	ldr	r0, [pc, #484]	; (8000578 <main+0x28c>)
 8000394:	f006 fa3e 	bl	8006814 <iprintf>
  printf("GetRMS23R()\%04X\r\n", getRMS23R());
 8000398:	4878      	ldr	r0, [pc, #480]	; (800057c <main+0x290>)
 800039a:	f004 fab5 	bl	8004908 <WIZCHIP_READ>
 800039e:	4603      	mov	r3, r0
 80003a0:	4619      	mov	r1, r3
 80003a2:	4877      	ldr	r0, [pc, #476]	; (8000580 <main+0x294>)
 80003a4:	f006 fa36 	bl	8006814 <iprintf>
  printf("GetRMS45R()\%04X\r\n", getRMS45R());
 80003a8:	4876      	ldr	r0, [pc, #472]	; (8000584 <main+0x298>)
 80003aa:	f004 faad 	bl	8004908 <WIZCHIP_READ>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4619      	mov	r1, r3
 80003b2:	4875      	ldr	r0, [pc, #468]	; (8000588 <main+0x29c>)
 80003b4:	f006 fa2e 	bl	8006814 <iprintf>
  printf("GetRMS67R()\%04X\r\n", getRMS67R());
 80003b8:	4874      	ldr	r0, [pc, #464]	; (800058c <main+0x2a0>)
 80003ba:	f004 faa5 	bl	8004908 <WIZCHIP_READ>
 80003be:	4603      	mov	r3, r0
 80003c0:	4619      	mov	r1, r3
 80003c2:	4873      	ldr	r0, [pc, #460]	; (8000590 <main+0x2a4>)
 80003c4:	f006 fa26 	bl	8006814 <iprintf>

  ctlnetwork(CN_SET_NETINFO, (void *)&gWIZNETINFO);
 80003c8:	4972      	ldr	r1, [pc, #456]	; (8000594 <main+0x2a8>)
 80003ca:	2000      	movs	r0, #0
 80003cc:	f005 fcee 	bl	8005dac <ctlnetwork>
  print_network_information();
 80003d0:	f000 fd00 	bl	8000dd4 <print_network_information>

//  memset(tmpbuf, 0, MAX_RX_BUF);
//  HAL_UART_Receive_DMA(&huart1, &rxByte1, 1);
//  HAL_UART_Receive_DMA(&huart2, &rxByte2, 1);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 80003d4:	4b70      	ldr	r3, [pc, #448]	; (8000598 <main+0x2ac>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	4b6f      	ldr	r3, [pc, #444]	; (8000598 <main+0x2ac>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f042 0210 	orr.w	r2, r2, #16
 80003e2:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart3, RxBuffer, MAX_RX_BUF + 16);
 80003e4:	f44f 7204 	mov.w	r2, #528	; 0x210
 80003e8:	496c      	ldr	r1, [pc, #432]	; (800059c <main+0x2b0>)
 80003ea:	486b      	ldr	r0, [pc, #428]	; (8000598 <main+0x2ac>)
 80003ec:	f003 fbf0 	bl	8003bd0 <HAL_UART_Receive_DMA>
//  HAL_UART_Receive_DMA(&huart4, &rxByte4, 1);

  memset(message, 0, MAX_RX_BUF);
 80003f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f4:	2100      	movs	r1, #0
 80003f6:	486a      	ldr	r0, [pc, #424]	; (80005a0 <main+0x2b4>)
 80003f8:	f006 f95e 	bl	80066b8 <memset>
  for(uint16_t i; i<MAX_RX_BUF - 1; i++)
 80003fc:	e013      	b.n	8000426 <main+0x13a>
  {
	message[i] = '0' + (i % 10);
 80003fe:	88fa      	ldrh	r2, [r7, #6]
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <main+0x2b8>)
 8000402:	fba3 1302 	umull	r1, r3, r3, r2
 8000406:	08d9      	lsrs	r1, r3, #3
 8000408:	460b      	mov	r3, r1
 800040a:	009b      	lsls	r3, r3, #2
 800040c:	440b      	add	r3, r1
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29b      	uxth	r3, r3
 8000414:	b2da      	uxtb	r2, r3
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	3230      	adds	r2, #48	; 0x30
 800041a:	b2d1      	uxtb	r1, r2
 800041c:	4a60      	ldr	r2, [pc, #384]	; (80005a0 <main+0x2b4>)
 800041e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i; i<MAX_RX_BUF - 1; i++)
 8000420:	88fb      	ldrh	r3, [r7, #6]
 8000422:	3301      	adds	r3, #1
 8000424:	80fb      	strh	r3, [r7, #6]
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800042c:	d9e7      	bls.n	80003fe <main+0x112>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(onesecondElapsed)
 800042e:	4b5e      	ldr	r3, [pc, #376]	; (80005a8 <main+0x2bc>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d040      	beq.n	80004b8 <main+0x1cc>
	  {
		  onesecondElapsed = 0;
 8000436:	4b5c      	ldr	r3, [pc, #368]	; (80005a8 <main+0x2bc>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
		  count++;	// increment count
 800043c:	4b5b      	ldr	r3, [pc, #364]	; (80005ac <main+0x2c0>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b59      	ldr	r3, [pc, #356]	; (80005ac <main+0x2c0>)
 8000446:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	4859      	ldr	r0, [pc, #356]	; (80005b0 <main+0x2c4>)
 800044c:	f002 f9c6 	bl	80027dc <HAL_GPIO_TogglePin>
		  memset(dma_buf, 0, MAX_RX_BUF + 16);
 8000450:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000454:	2100      	movs	r1, #0
 8000456:	4857      	ldr	r0, [pc, #348]	; (80005b4 <main+0x2c8>)
 8000458:	f006 f92e 	bl	80066b8 <memset>
		  printf("message: [%d] bytes, %s\r\n", strlen(message), message);
 800045c:	4850      	ldr	r0, [pc, #320]	; (80005a0 <main+0x2b4>)
 800045e:	f7ff fee1 	bl	8000224 <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	4a4e      	ldr	r2, [pc, #312]	; (80005a0 <main+0x2b4>)
 8000466:	4619      	mov	r1, r3
 8000468:	4853      	ldr	r0, [pc, #332]	; (80005b8 <main+0x2cc>)
 800046a:	f006 f9d3 	bl	8006814 <iprintf>
		  sprintf((char *)dma_buf, "UART4: %s\r\n", message);
 800046e:	4a4c      	ldr	r2, [pc, #304]	; (80005a0 <main+0x2b4>)
 8000470:	4952      	ldr	r1, [pc, #328]	; (80005bc <main+0x2d0>)
 8000472:	4850      	ldr	r0, [pc, #320]	; (80005b4 <main+0x2c8>)
 8000474:	f006 fa6c 	bl	8006950 <siprintf>
		  printf("dma_buf: %s\r\n", dma_buf);
 8000478:	494e      	ldr	r1, [pc, #312]	; (80005b4 <main+0x2c8>)
 800047a:	4851      	ldr	r0, [pc, #324]	; (80005c0 <main+0x2d4>)
 800047c:	f006 f9ca 	bl	8006814 <iprintf>
		  sentbytes = strlen((const char*)dma_buf);
 8000480:	484c      	ldr	r0, [pc, #304]	; (80005b4 <main+0x2c8>)
 8000482:	f7ff fecf 	bl	8000224 <strlen>
 8000486:	4603      	mov	r3, r0
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b4e      	ldr	r3, [pc, #312]	; (80005c4 <main+0x2d8>)
 800048c:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit_DMA(&huart4, dma_buf, sentbytes);
 800048e:	4b4d      	ldr	r3, [pc, #308]	; (80005c4 <main+0x2d8>)
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	461a      	mov	r2, r3
 8000494:	4947      	ldr	r1, [pc, #284]	; (80005b4 <main+0x2c8>)
 8000496:	484c      	ldr	r0, [pc, #304]	; (80005c8 <main+0x2dc>)
 8000498:	f003 fb2e 	bl	8003af8 <HAL_UART_Transmit_DMA>
		  printf("UART4 HAL_UART_Transmit_DMA sent: %d bytes\r\n", sentbytes);
 800049c:	4b49      	ldr	r3, [pc, #292]	; (80005c4 <main+0x2d8>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	484a      	ldr	r0, [pc, #296]	; (80005cc <main+0x2e0>)
 80004a4:	f006 f9b6 	bl	8006814 <iprintf>
		  totalSentBytes += sentbytes;
 80004a8:	4b46      	ldr	r3, [pc, #280]	; (80005c4 <main+0x2d8>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b48      	ldr	r3, [pc, #288]	; (80005d0 <main+0x2e4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a46      	ldr	r2, [pc, #280]	; (80005d0 <main+0x2e4>)
 80004b6:	6013      	str	r3, [r2, #0]
	  }
	  loopback_tcps(0, ethBuf0, 5000);
 80004b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80004bc:	4945      	ldr	r1, [pc, #276]	; (80005d4 <main+0x2e8>)
 80004be:	2000      	movs	r0, #0
 80004c0:	f004 f8c0 	bl	8004644 <loopback_tcps>
	  if(rcvFlag)
 80004c4:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <main+0x2ec>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d0b0      	beq.n	800042e <main+0x142>
	  {
		  rcvFlag = 0;
 80004cc:	4b42      	ldr	r3, [pc, #264]	; (80005d8 <main+0x2ec>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
		  UART_Data_Process(&huart3);
 80004d2:	4831      	ldr	r0, [pc, #196]	; (8000598 <main+0x2ac>)
 80004d4:	f000 fbcc 	bl	8000c70 <UART_Data_Process>
		  totalRcvdBytes += rcvdLen;
 80004d8:	4b40      	ldr	r3, [pc, #256]	; (80005dc <main+0x2f0>)
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <main+0x2f4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4413      	add	r3, r2
 80004e4:	4a3e      	ldr	r2, [pc, #248]	; (80005e0 <main+0x2f4>)
 80004e6:	6013      	str	r3, [r2, #0]
		  printf("RxBuf3: [%d] bytes, %s\r\n", strlen(RxBuf3), RxBuf3);
 80004e8:	483e      	ldr	r0, [pc, #248]	; (80005e4 <main+0x2f8>)
 80004ea:	f7ff fe9b 	bl	8000224 <strlen>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a3c      	ldr	r2, [pc, #240]	; (80005e4 <main+0x2f8>)
 80004f2:	4619      	mov	r1, r3
 80004f4:	483c      	ldr	r0, [pc, #240]	; (80005e8 <main+0x2fc>)
 80004f6:	f006 f98d 	bl	8006814 <iprintf>
		  printf("_HT_Count: %d, _TC_Count: %d, _IDLE_Count: %d, rdPtr: %d, wrPtr: %d, rcvdLen: %d, totalSentBytes: %d, totalRcvdBytes: %d\r\n",
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <main+0x300>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	461d      	mov	r5, r3
 8000500:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <main+0x304>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	461e      	mov	r6, r3
 8000506:	4b3b      	ldr	r3, [pc, #236]	; (80005f4 <main+0x308>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	469c      	mov	ip, r3
 800050c:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <main+0x30c>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <main+0x310>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <main+0x2f0>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	461c      	mov	r4, r3
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <main+0x2e4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a2f      	ldr	r2, [pc, #188]	; (80005e0 <main+0x2f4>)
 8000524:	6812      	ldr	r2, [r2, #0]
 8000526:	9204      	str	r2, [sp, #16]
 8000528:	9303      	str	r3, [sp, #12]
 800052a:	9402      	str	r4, [sp, #8]
 800052c:	9001      	str	r0, [sp, #4]
 800052e:	9100      	str	r1, [sp, #0]
 8000530:	4663      	mov	r3, ip
 8000532:	4632      	mov	r2, r6
 8000534:	4629      	mov	r1, r5
 8000536:	4832      	ldr	r0, [pc, #200]	; (8000600 <main+0x314>)
 8000538:	f006 f96c 	bl	8006814 <iprintf>
  {
 800053c:	e777      	b.n	800042e <main+0x142>
 800053e:	bf00      	nop
 8000540:	20000d5c 	.word	0x20000d5c
 8000544:	08000261 	.word	0x08000261
 8000548:	08000281 	.word	0x08000281
 800054c:	08007a38 	.word	0x08007a38
 8000550:	20000018 	.word	0x20000018
 8000554:	34000020 	.word	0x34000020
 8000558:	08007a48 	.word	0x08007a48
 800055c:	34000022 	.word	0x34000022
 8000560:	08007a5c 	.word	0x08007a5c
 8000564:	34000024 	.word	0x34000024
 8000568:	08007a70 	.word	0x08007a70
 800056c:	34000026 	.word	0x34000026
 8000570:	08007a84 	.word	0x08007a84
 8000574:	34000028 	.word	0x34000028
 8000578:	08007a98 	.word	0x08007a98
 800057c:	3400002a 	.word	0x3400002a
 8000580:	08007aac 	.word	0x08007aac
 8000584:	3400002c 	.word	0x3400002c
 8000588:	08007ac0 	.word	0x08007ac0
 800058c:	3400002e 	.word	0x3400002e
 8000590:	08007ad4 	.word	0x08007ad4
 8000594:	20000000 	.word	0x20000000
 8000598:	20000208 	.word	0x20000208
 800059c:	200008f8 	.word	0x200008f8
 80005a0:	2000039c 	.word	0x2000039c
 80005a4:	cccccccd 	.word	0xcccccccd
 80005a8:	200000e4 	.word	0x200000e4
 80005ac:	200000e0 	.word	0x200000e0
 80005b0:	40011c00 	.word	0x40011c00
 80005b4:	20000620 	.word	0x20000620
 80005b8:	08007ae8 	.word	0x08007ae8
 80005bc:	08007b04 	.word	0x08007b04
 80005c0:	08007b10 	.word	0x08007b10
 80005c4:	200000f8 	.word	0x200000f8
 80005c8:	20000d1c 	.word	0x20000d1c
 80005cc:	08007b20 	.word	0x08007b20
 80005d0:	200000f0 	.word	0x200000f0
 80005d4:	20000e28 	.word	0x20000e28
 80005d8:	200000ec 	.word	0x200000ec
 80005dc:	200000ea 	.word	0x200000ea
 80005e0:	200000f4 	.word	0x200000f4
 80005e4:	20000b0c 	.word	0x20000b0c
 80005e8:	08007b50 	.word	0x08007b50
 80005ec:	200000fa 	.word	0x200000fa
 80005f0:	200000fc 	.word	0x200000fc
 80005f4:	200000fe 	.word	0x200000fe
 80005f8:	200000e8 	.word	0x200000e8
 80005fc:	200000e6 	.word	0x200000e6
 8000600:	08007b6c 	.word	0x08007b6c

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b090      	sub	sp, #64	; 0x40
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2228      	movs	r2, #40	; 0x28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f850 	bl	80066b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f8df 	bl	8002810 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000658:	f000 fc2c 	bl	8000eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fb4a 	bl	8002d10 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000682:	f000 fc17 	bl	8000eb4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3740      	adds	r7, #64	; 0x40
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_TIM2_Init+0x94>)
 80006b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_TIM2_Init+0x94>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_TIM2_Init+0x94>)
 80006c4:	2248      	movs	r2, #72	; 0x48
 80006c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_TIM2_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_TIM2_Init+0x94>)
 80006d6:	f002 fd02 	bl	80030de <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 fbe8 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_TIM2_Init+0x94>)
 80006f2:	f002 feab 	bl	800344c <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 fbda 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_TIM2_Init+0x94>)
 800070e:	f003 f895 	bl	800383c <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 fbcc 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000d5c 	.word	0x20000d5c

08000728 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_UART4_Init+0x48>)
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <MX_UART4_Init+0x4c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_UART4_Init+0x48>)
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <MX_UART4_Init+0x50>)
 8000736:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_UART4_Init+0x48>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_UART4_Init+0x48>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_UART4_Init+0x48>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_UART4_Init+0x48>)
 800074c:	220c      	movs	r2, #12
 800074e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_UART4_Init+0x48>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_UART4_Init+0x48>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_UART4_Init+0x48>)
 800075e:	f003 f8eb 	bl	8003938 <HAL_UART_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_UART4_Init+0x44>
  {
    Error_Handler();
 8000768:	f000 fba4 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000d1c 	.word	0x20000d1c
 8000774:	40004c00 	.word	0x40004c00
 8000778:	001e8480 	.word	0x001e8480

0800077c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_UART5_Init+0x48>)
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <MX_UART5_Init+0x4c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 2000000;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_UART5_Init+0x48>)
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_UART5_Init+0x50>)
 800078a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_UART5_Init+0x48>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_UART5_Init+0x48>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_UART5_Init+0x48>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_UART5_Init+0x48>)
 80007a0:	220c      	movs	r2, #12
 80007a2:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_UART5_Init+0x48>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_UART5_Init+0x48>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_UART5_Init+0x48>)
 80007b2:	f003 f8c1 	bl	8003938 <HAL_UART_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 80007bc:	f000 fb7a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200005e0 	.word	0x200005e0
 80007c8:	40005000 	.word	0x40005000
 80007cc:	001e8480 	.word	0x001e8480

080007d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007d6:	4a11      	ldr	r2, [pc, #68]	; (800081c <MX_USART1_UART_Init+0x4c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <MX_USART1_UART_Init+0x50>)
 80007de:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007f4:	220c      	movs	r2, #12
 80007f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_USART1_UART_Init+0x48>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART1_UART_Init+0x48>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_USART1_UART_Init+0x48>)
 8000806:	f003 f897 	bl	8003938 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8000810:	f000 fb50 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200008b8 	.word	0x200008b8
 800081c:	40013800 	.word	0x40013800
 8000820:	001e8480 	.word	0x001e8480

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x48>)
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_USART2_UART_Init+0x48>)
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x50>)
 8000832:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_USART2_UART_Init+0x48>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x48>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_USART2_UART_Init+0x48>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x48>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_USART2_UART_Init+0x48>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x48>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_USART2_UART_Init+0x48>)
 800085a:	f003 f86d 	bl	8003938 <HAL_UART_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000864:	f000 fb26 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000da4 	.word	0x20000da4
 8000870:	40004400 	.word	0x40004400
 8000874:	001e8480 	.word	0x001e8480

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <MX_USART3_UART_Init+0x4c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <MX_USART3_UART_Init+0x50>)
 8000886:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000888:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 800089c:	220c      	movs	r2, #12
 800089e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_USART3_UART_Init+0x48>)
 80008ae:	f003 f843 	bl	8003938 <HAL_UART_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80008b8:	f000 fafc 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000208 	.word	0x20000208
 80008c4:	40004800 	.word	0x40004800
 80008c8:	001e8480 	.word	0x001e8480

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <MX_DMA_Init+0xc0>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a2d      	ldr	r2, [pc, #180]	; (800098c <MX_DMA_Init+0xc0>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_DMA_Init+0xc0>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_DMA_Init+0xc0>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a27      	ldr	r2, [pc, #156]	; (800098c <MX_DMA_Init+0xc0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <MX_DMA_Init+0xc0>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200c      	movs	r0, #12
 8000908:	f001 f93d 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800090c:	200c      	movs	r0, #12
 800090e:	f001 f956 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	200d      	movs	r0, #13
 8000918:	f001 f935 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800091c:	200d      	movs	r0, #13
 800091e:	f001 f94e 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200e      	movs	r0, #14
 8000928:	f001 f92d 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800092c:	200e      	movs	r0, #14
 800092e:	f001 f946 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200f      	movs	r0, #15
 8000938:	f001 f925 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800093c:	200f      	movs	r0, #15
 800093e:	f001 f93e 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2010      	movs	r0, #16
 8000948:	f001 f91d 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800094c:	2010      	movs	r0, #16
 800094e:	f001 f936 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2011      	movs	r0, #17
 8000958:	f001 f915 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800095c:	2011      	movs	r0, #17
 800095e:	f001 f92e 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	203a      	movs	r0, #58	; 0x3a
 8000968:	f001 f90d 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800096c:	203a      	movs	r0, #58	; 0x3a
 800096e:	f001 f926 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	203b      	movs	r0, #59	; 0x3b
 8000978:	f001 f905 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 800097c:	203b      	movs	r0, #59	; 0x3b
 800097e:	f001 f91e 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	4b68      	ldr	r3, [pc, #416]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a67      	ldr	r2, [pc, #412]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b65      	ldr	r3, [pc, #404]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009bc:	4b62      	ldr	r3, [pc, #392]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a61      	ldr	r2, [pc, #388]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b5f      	ldr	r3, [pc, #380]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b5c      	ldr	r3, [pc, #368]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a5b      	ldr	r2, [pc, #364]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b59      	ldr	r3, [pc, #356]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b56      	ldr	r3, [pc, #344]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b53      	ldr	r3, [pc, #332]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a04:	4b50      	ldr	r3, [pc, #320]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b4d      	ldr	r3, [pc, #308]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1c:	4b4a      	ldr	r3, [pc, #296]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a49      	ldr	r2, [pc, #292]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a43      	ldr	r2, [pc, #268]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_GPIO_Init+0x1b8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	21c0      	movs	r1, #192	; 0xc0
 8000a50:	483e      	ldr	r0, [pc, #248]	; (8000b4c <MX_GPIO_Init+0x1bc>)
 8000a52:	f001 feab 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000a5c:	483c      	ldr	r0, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x1c0>)
 8000a5e:	f001 fea5 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000a62:	2200      	movs	r2, #0
 8000a64:	f244 11e0 	movw	r1, #16864	; 0x41e0
 8000a68:	483a      	ldr	r0, [pc, #232]	; (8000b54 <MX_GPIO_Init+0x1c4>)
 8000a6a:	f001 fe9f 	bl	80027ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	4838      	ldr	r0, [pc, #224]	; (8000b58 <MX_GPIO_Init+0x1c8>)
 8000a76:	f001 fe99 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000a7a:	f242 130f 	movw	r3, #8463	; 0x210f
 8000a7e:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4830      	ldr	r0, [pc, #192]	; (8000b50 <MX_GPIO_Init+0x1c0>)
 8000a90:	f001 fcf8 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	23c0      	movs	r3, #192	; 0xc0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa4:	f107 0320 	add.w	r3, r7, #32
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4828      	ldr	r0, [pc, #160]	; (8000b4c <MX_GPIO_Init+0x1bc>)
 8000aac:	f001 fcea 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 8000ab0:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4821      	ldr	r0, [pc, #132]	; (8000b50 <MX_GPIO_Init+0x1c0>)
 8000aca:	f001 fcdb 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 8000ace:	f242 0301 	movw	r3, #8193	; 0x2001
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481c      	ldr	r0, [pc, #112]	; (8000b54 <MX_GPIO_Init+0x1c4>)
 8000ae4:	f001 fcce 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000ae8:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000aec:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2302      	movs	r3, #2
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4619      	mov	r1, r3
 8000b00:	4814      	ldr	r0, [pc, #80]	; (8000b54 <MX_GPIO_Init+0x1c4>)
 8000b02:	f001 fcbf 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480f      	ldr	r0, [pc, #60]	; (8000b58 <MX_GPIO_Init+0x1c8>)
 8000b1c:	f001 fcb2 	bl	8002484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4619      	mov	r1, r3
 8000b38:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_GPIO_Init+0x1c8>)
 8000b3a:	f001 fca3 	bl	8002484 <HAL_GPIO_Init>

}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40011c00 	.word	0x40011c00
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40010800 	.word	0x40010800

08000b5c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b76:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000b7a:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b7e:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <MX_FSMC_Init+0xc0>)
 8000b80:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b88:	4b23      	ldr	r3, [pc, #140]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b94:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b96:	2210      	movs	r2, #16
 8000b98:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 3;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000be2:	2310      	movs	r3, #16
 8000be4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000be6:	2311      	movs	r3, #17
 8000be8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_FSMC_Init+0xbc>)
 8000bf6:	f002 fa25 	bl	8003044 <HAL_SRAM_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000c00:	f000 f958 	bl	8000eb4 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_FSMC_Init+0xc4>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <MX_FSMC_Init+0xc4>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c10:	bf00      	nop
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000248 	.word	0x20000248
 8000c1c:	a0000104 	.word	0xa0000104
 8000c20:	40010000 	.word	0x40010000

08000c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d110      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		ms_count++;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c42:	801a      	strh	r2, [r3, #0]

		if(ms_count >= 1000)
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4c:	d305      	bcc.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			onesecondElapsed = 1;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
			ms_count = 0;
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	801a      	strh	r2, [r3, #0]
		}
		/* Toggle LEDs */
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000d5c 	.word	0x20000d5c
 8000c68:	200000e2 	.word	0x200000e2
 8000c6c:	200000e4 	.word	0x200000e4

08000c70 <UART_Data_Process>:

void UART_Data_Process(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

	wrPtr = ARRAY_LEN(RxBuffer) - huart->hdmarx->Instance->CNDTR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <UART_Data_Process+0xcc>)
 8000c8a:	801a      	strh	r2, [r3, #0]
	if(wrPtr != rdPtr)
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <UART_Data_Process+0xcc>)
 8000c8e:	881a      	ldrh	r2, [r3, #0]
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <UART_Data_Process+0xd0>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d04c      	beq.n	8000d32 <UART_Data_Process+0xc2>
	{
		memset(RxBuf3, 0, MAX_RX_BUF + 16);
 8000c98:	f44f 7204 	mov.w	r2, #528	; 0x210
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4829      	ldr	r0, [pc, #164]	; (8000d44 <UART_Data_Process+0xd4>)
 8000ca0:	f005 fd0a 	bl	80066b8 <memset>

		if (wrPtr > rdPtr)
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <UART_Data_Process+0xcc>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <UART_Data_Process+0xd0>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d913      	bls.n	8000cd8 <UART_Data_Process+0x68>
		{
			rcvdLen = wrPtr - rdPtr;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <UART_Data_Process+0xcc>)
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <UART_Data_Process+0xd0>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <UART_Data_Process+0xd8>)
 8000cbe:	801a      	strh	r2, [r3, #0]
			memcpy(RxBuf3, RxBuffer + rdPtr, rcvdLen);
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <UART_Data_Process+0xd0>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <UART_Data_Process+0xdc>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <UART_Data_Process+0xd8>)
 8000ccc:	8812      	ldrh	r2, [r2, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481c      	ldr	r0, [pc, #112]	; (8000d44 <UART_Data_Process+0xd4>)
 8000cd2:	f005 fce3 	bl	800669c <memcpy>
 8000cd6:	e028      	b.n	8000d2a <UART_Data_Process+0xba>
		}else
		{
			rcvdLen = ARRAY_LEN(RxBuffer) - rdPtr;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <UART_Data_Process+0xd0>)
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	f5c3 7304 	rsb	r3, r3, #528	; 0x210
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <UART_Data_Process+0xd8>)
 8000ce4:	801a      	strh	r2, [r3, #0]
			memcpy(RxBuf3, RxBuffer + rdPtr, rcvdLen);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <UART_Data_Process+0xd0>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <UART_Data_Process+0xdc>)
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <UART_Data_Process+0xd8>)
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <UART_Data_Process+0xd4>)
 8000cf8:	f005 fcd0 	bl	800669c <memcpy>
			if(wrPtr > 0)
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <UART_Data_Process+0xcc>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d012      	beq.n	8000d2a <UART_Data_Process+0xba>
			{
				rcvdLen += wrPtr;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <UART_Data_Process+0xd8>)
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <UART_Data_Process+0xcc>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <UART_Data_Process+0xd8>)
 8000d12:	801a      	strh	r2, [r3, #0]
				memcpy(RxBuf3 + rcvdLen, RxBuffer, wrPtr);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <UART_Data_Process+0xd8>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <UART_Data_Process+0xd4>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <UART_Data_Process+0xcc>)
 8000d20:	8812      	ldrh	r2, [r2, #0]
 8000d22:	490a      	ldr	r1, [pc, #40]	; (8000d4c <UART_Data_Process+0xdc>)
 8000d24:	4618      	mov	r0, r3
 8000d26:	f005 fcb9 	bl	800669c <memcpy>
			}
		}
		rdPtr = wrPtr;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <UART_Data_Process+0xcc>)
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <UART_Data_Process+0xd0>)
 8000d30:	801a      	strh	r2, [r3, #0]
	}
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000e6 	.word	0x200000e6
 8000d40:	200000e8 	.word	0x200000e8
 8000d44:	20000b0c 	.word	0x20000b0c
 8000d48:	200000ea 	.word	0x200000ea
 8000d4c:	200008f8 	.word	0x200008f8

08000d50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	_TC_Count++;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_UART_RxCpltCallback+0x24>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_UART_RxCpltCallback+0x24>)
 8000d62:	801a      	strh	r2, [r3, #0]
	rcvFlag = 1;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_UART_RxCpltCallback+0x28>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	200000fc 	.word	0x200000fc
 8000d78:	200000ec 	.word	0x200000ec

08000d7c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	_HT_Count++;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_UART_RxHalfCpltCallback+0x24>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_UART_RxHalfCpltCallback+0x24>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	rcvFlag = 1;
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_UART_RxHalfCpltCallback+0x28>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	200000fa 	.word	0x200000fa
 8000da4:	200000ec 	.word	0x200000ec

08000da8 <UART_IDLECallback>:


void UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	_IDLE_Count++;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <UART_IDLECallback+0x24>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <UART_IDLECallback+0x24>)
 8000dba:	801a      	strh	r2, [r3, #0]
	rcvFlag = 1;
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <UART_IDLECallback+0x28>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	200000fe 	.word	0x200000fe
 8000dd0:	200000ec 	.word	0x200000ec

08000dd4 <print_network_information>:

void print_network_information(void)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af04      	add	r7, sp, #16

    wizchip_getnetinfo(&gWIZNETINFO);
 8000dda:	4830      	ldr	r0, [pc, #192]	; (8000e9c <print_network_information+0xc8>)
 8000ddc:	f005 fb0e 	bl	80063fc <wizchip_getnetinfo>
    printf("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 8000de0:	4b2e      	ldr	r3, [pc, #184]	; (8000e9c <print_network_information+0xc8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <print_network_information+0xc8>)
 8000de8:	785b      	ldrb	r3, [r3, #1]
 8000dea:	461c      	mov	r4, r3
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <print_network_information+0xc8>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	461d      	mov	r5, r3
 8000df2:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <print_network_information+0xc8>)
 8000df4:	78db      	ldrb	r3, [r3, #3]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <print_network_information+0xc8>)
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <print_network_information+0xc8>)
 8000e00:	795b      	ldrb	r3, [r3, #5]
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	9101      	str	r1, [sp, #4]
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	462b      	mov	r3, r5
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	4601      	mov	r1, r0
 8000e0e:	4824      	ldr	r0, [pc, #144]	; (8000ea0 <print_network_information+0xcc>)
 8000e10:	f005 fd00 	bl	8006814 <iprintf>
    printf("IP address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <print_network_information+0xc8>)
 8000e16:	799b      	ldrb	r3, [r3, #6]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <print_network_information+0xc8>)
 8000e1c:	79db      	ldrb	r3, [r3, #7]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <print_network_information+0xc8>)
 8000e22:	7a1b      	ldrb	r3, [r3, #8]
 8000e24:	4618      	mov	r0, r3
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <print_network_information+0xc8>)
 8000e28:	7a5b      	ldrb	r3, [r3, #9]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	481d      	ldr	r0, [pc, #116]	; (8000ea4 <print_network_information+0xd0>)
 8000e30:	f005 fcf0 	bl	8006814 <iprintf>
    printf("SM Mask    : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <print_network_information+0xc8>)
 8000e36:	7a9b      	ldrb	r3, [r3, #10]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <print_network_information+0xc8>)
 8000e3c:	7adb      	ldrb	r3, [r3, #11]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <print_network_information+0xc8>)
 8000e42:	7b1b      	ldrb	r3, [r3, #12]
 8000e44:	4618      	mov	r0, r3
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <print_network_information+0xc8>)
 8000e48:	7b5b      	ldrb	r3, [r3, #13]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <print_network_information+0xd4>)
 8000e50:	f005 fce0 	bl	8006814 <iprintf>
    printf("Gate way   : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <print_network_information+0xc8>)
 8000e56:	7b9b      	ldrb	r3, [r3, #14]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <print_network_information+0xc8>)
 8000e5c:	7bdb      	ldrb	r3, [r3, #15]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <print_network_information+0xc8>)
 8000e62:	7c1b      	ldrb	r3, [r3, #16]
 8000e64:	4618      	mov	r0, r3
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <print_network_information+0xc8>)
 8000e68:	7c5b      	ldrb	r3, [r3, #17]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	480f      	ldr	r0, [pc, #60]	; (8000eac <print_network_information+0xd8>)
 8000e70:	f005 fcd0 	bl	8006814 <iprintf>
    printf("DNS Server : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <print_network_information+0xc8>)
 8000e76:	7c9b      	ldrb	r3, [r3, #18]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <print_network_information+0xc8>)
 8000e7c:	7cdb      	ldrb	r3, [r3, #19]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <print_network_information+0xc8>)
 8000e82:	7d1b      	ldrb	r3, [r3, #20]
 8000e84:	4618      	mov	r0, r3
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <print_network_information+0xc8>)
 8000e88:	7d5b      	ldrb	r3, [r3, #21]
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <print_network_information+0xdc>)
 8000e90:	f005 fcc0 	bl	8006814 <iprintf>
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	08007be8 	.word	0x08007be8
 8000ea4:	08007c18 	.word	0x08007c18
 8000ea8:	08007c34 	.word	0x08007c34
 8000eac:	08007c50 	.word	0x08007c50
 8000eb0:	08007c6c 	.word	0x08007c6c

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6193      	str	r3, [r2, #24]
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <HAL_MspInit+0x5c>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_MspInit+0x5c>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_MspInit+0x60>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_MspInit+0x60>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000

08000f24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f34:	d113      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_TIM_Base_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 fe17 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 fe30 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b092      	sub	sp, #72	; 0x48
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a6b      	ldr	r2, [pc, #428]	; (8001134 <HAL_UART_MspInit+0x1c8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	f040 8088 	bne.w	800109e <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f8e:	4b6a      	ldr	r3, [pc, #424]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a69      	ldr	r2, [pc, #420]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b64      	ldr	r3, [pc, #400]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a63      	ldr	r2, [pc, #396]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b61      	ldr	r3, [pc, #388]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	485a      	ldr	r0, [pc, #360]	; (800113c <HAL_UART_MspInit+0x1d0>)
 8000fd4:	f001 fa56 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fea:	4619      	mov	r1, r3
 8000fec:	4853      	ldr	r0, [pc, #332]	; (800113c <HAL_UART_MspInit+0x1d0>)
 8000fee:	f001 fa49 	bl	8002484 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8000ff2:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8000ff4:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_UART_MspInit+0x1d8>)
 8000ff6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff8:	4b51      	ldr	r3, [pc, #324]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b50      	ldr	r3, [pc, #320]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100a:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001016:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800101c:	4b48      	ldr	r3, [pc, #288]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001022:	4847      	ldr	r0, [pc, #284]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001024:	f000 fde6 	bl	8001bf4 <HAL_DMA_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800102e:	f7ff ff41 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a42      	ldr	r2, [pc, #264]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 8001036:	631a      	str	r2, [r3, #48]	; 0x30
 8001038:	4a41      	ldr	r2, [pc, #260]	; (8001140 <HAL_UART_MspInit+0x1d4>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001040:	4a42      	ldr	r2, [pc, #264]	; (800114c <HAL_UART_MspInit+0x1e0>)
 8001042:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800104a:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001064:	2220      	movs	r2, #32
 8001066:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001068:	4b37      	ldr	r3, [pc, #220]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 800106a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001070:	4835      	ldr	r0, [pc, #212]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001072:	f000 fdbf 	bl	8001bf4 <HAL_DMA_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 800107c:	f7ff ff1a 	bl	8000eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <HAL_UART_MspInit+0x1dc>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2034      	movs	r0, #52	; 0x34
 8001092:	f000 fd78 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001096:	2034      	movs	r0, #52	; 0x34
 8001098:	f000 fd91 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800109c:	e219      	b.n	80014d2 <HAL_UART_MspInit+0x566>
  else if(huart->Instance==UART5)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <HAL_UART_MspInit+0x1e4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d157      	bne.n	8001158 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_UART5_CLK_ENABLE();
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010b2:	61d3      	str	r3, [r2, #28]
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a16      	ldr	r2, [pc, #88]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010de:	f043 0320 	orr.w	r3, r3, #32
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0x1cc>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001102:	4619      	mov	r1, r3
 8001104:	480d      	ldr	r0, [pc, #52]	; (800113c <HAL_UART_MspInit+0x1d0>)
 8001106:	f001 f9bd 	bl	8002484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800110a:	2304      	movs	r3, #4
 800110c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800111a:	4619      	mov	r1, r3
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <HAL_UART_MspInit+0x1e8>)
 800111e:	f001 f9b1 	bl	8002484 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2035      	movs	r0, #53	; 0x35
 8001128:	f000 fd2d 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800112c:	2035      	movs	r0, #53	; 0x35
 800112e:	f000 fd46 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 8001132:	e1ce      	b.n	80014d2 <HAL_UART_MspInit+0x566>
 8001134:	40004c00 	.word	0x40004c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000
 8001140:	20000de4 	.word	0x20000de4
 8001144:	40020458 	.word	0x40020458
 8001148:	2000013c 	.word	0x2000013c
 800114c:	40020430 	.word	0x40020430
 8001150:	40005000 	.word	0x40005000
 8001154:	40011400 	.word	0x40011400
  else if(huart->Instance==USART1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a8a      	ldr	r2, [pc, #552]	; (8001388 <HAL_UART_MspInit+0x41c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 8087 	bne.w	8001272 <HAL_UART_MspInit+0x306>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001164:	4b89      	ldr	r3, [pc, #548]	; (800138c <HAL_UART_MspInit+0x420>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a88      	ldr	r2, [pc, #544]	; (800138c <HAL_UART_MspInit+0x420>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b86      	ldr	r3, [pc, #536]	; (800138c <HAL_UART_MspInit+0x420>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b83      	ldr	r3, [pc, #524]	; (800138c <HAL_UART_MspInit+0x420>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a82      	ldr	r2, [pc, #520]	; (800138c <HAL_UART_MspInit+0x420>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b80      	ldr	r3, [pc, #512]	; (800138c <HAL_UART_MspInit+0x420>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011a6:	4619      	mov	r1, r3
 80011a8:	4879      	ldr	r0, [pc, #484]	; (8001390 <HAL_UART_MspInit+0x424>)
 80011aa:	f001 f96b 	bl	8002484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c0:	4619      	mov	r1, r3
 80011c2:	4873      	ldr	r0, [pc, #460]	; (8001390 <HAL_UART_MspInit+0x424>)
 80011c4:	f001 f95e 	bl	8002484 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011c8:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011ca:	4a73      	ldr	r2, [pc, #460]	; (8001398 <HAL_UART_MspInit+0x42c>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ce:	4b71      	ldr	r3, [pc, #452]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011d0:	2210      	movs	r2, #16
 80011d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b6e      	ldr	r3, [pc, #440]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e0:	4b6c      	ldr	r3, [pc, #432]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e6:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011f2:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011f8:	4866      	ldr	r0, [pc, #408]	; (8001394 <HAL_UART_MspInit+0x428>)
 80011fa:	f000 fcfb 	bl	8001bf4 <HAL_DMA_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8001204:	f7ff fe56 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a62      	ldr	r2, [pc, #392]	; (8001394 <HAL_UART_MspInit+0x428>)
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
 800120e:	4a61      	ldr	r2, [pc, #388]	; (8001394 <HAL_UART_MspInit+0x428>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001214:	4b61      	ldr	r3, [pc, #388]	; (800139c <HAL_UART_MspInit+0x430>)
 8001216:	4a62      	ldr	r2, [pc, #392]	; (80013a0 <HAL_UART_MspInit+0x434>)
 8001218:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121a:	4b60      	ldr	r3, [pc, #384]	; (800139c <HAL_UART_MspInit+0x430>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001220:	4b5e      	ldr	r3, [pc, #376]	; (800139c <HAL_UART_MspInit+0x430>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_UART_MspInit+0x430>)
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800122c:	4b5b      	ldr	r3, [pc, #364]	; (800139c <HAL_UART_MspInit+0x430>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <HAL_UART_MspInit+0x430>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_UART_MspInit+0x430>)
 800123a:	2220      	movs	r2, #32
 800123c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800123e:	4b57      	ldr	r3, [pc, #348]	; (800139c <HAL_UART_MspInit+0x430>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001244:	4855      	ldr	r0, [pc, #340]	; (800139c <HAL_UART_MspInit+0x430>)
 8001246:	f000 fcd5 	bl	8001bf4 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_UART_MspInit+0x2e8>
      Error_Handler();
 8001250:	f7ff fe30 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_UART_MspInit+0x430>)
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_UART_MspInit+0x430>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2025      	movs	r0, #37	; 0x25
 8001266:	f000 fc8e 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800126a:	2025      	movs	r0, #37	; 0x25
 800126c:	f000 fca7 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 8001270:	e12f      	b.n	80014d2 <HAL_UART_MspInit+0x566>
  else if(huart->Instance==USART2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <HAL_UART_MspInit+0x438>)
 8001278:	4293      	cmp	r3, r2
 800127a:	f040 809d 	bne.w	80013b8 <HAL_UART_MspInit+0x44c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_UART_MspInit+0x420>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_UART_MspInit+0x420>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b40      	ldr	r3, [pc, #256]	; (800138c <HAL_UART_MspInit+0x420>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b3d      	ldr	r3, [pc, #244]	; (800138c <HAL_UART_MspInit+0x420>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a3c      	ldr	r2, [pc, #240]	; (800138c <HAL_UART_MspInit+0x420>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <HAL_UART_MspInit+0x420>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012be:	4619      	mov	r1, r3
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <HAL_UART_MspInit+0x424>)
 80012c2:	f001 f8df 	bl	8002484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012c6:	2308      	movs	r3, #8
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d6:	4619      	mov	r1, r3
 80012d8:	482d      	ldr	r0, [pc, #180]	; (8001390 <HAL_UART_MspInit+0x424>)
 80012da:	f001 f8d3 	bl	8002484 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012de:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012e0:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_UART_MspInit+0x440>)
 80012e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e4:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012e6:	2210      	movs	r2, #16
 80012e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 8001310:	f000 fc70 	bl	8001bf4 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_UART_MspInit+0x3b2>
      Error_Handler();
 800131a:	f7ff fdcb 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <HAL_UART_MspInit+0x43c>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_UART_MspInit+0x444>)
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_UART_MspInit+0x448>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001330:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HAL_UART_MspInit+0x444>)
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_UART_MspInit+0x444>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001350:	2220      	movs	r2, #32
 8001352:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x444>)
 800135c:	f000 fc4a 	bl	8001bf4 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_UART_MspInit+0x3fe>
      Error_Handler();
 8001366:	f7ff fda5 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x444>)
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_UART_MspInit+0x444>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2026      	movs	r0, #38	; 0x26
 800137c:	f000 fc03 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001380:	2026      	movs	r0, #38	; 0x26
 8001382:	f000 fc1c 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 8001386:	e0a4      	b.n	80014d2 <HAL_UART_MspInit+0x566>
 8001388:	40013800 	.word	0x40013800
 800138c:	40021000 	.word	0x40021000
 8001390:	40010800 	.word	0x40010800
 8001394:	2000059c 	.word	0x2000059c
 8001398:	40020044 	.word	0x40020044
 800139c:	20000830 	.word	0x20000830
 80013a0:	40020058 	.word	0x40020058
 80013a4:	40004400 	.word	0x40004400
 80013a8:	20000874 	.word	0x20000874
 80013ac:	40020080 	.word	0x40020080
 80013b0:	20000180 	.word	0x20000180
 80013b4:	4002006c 	.word	0x4002006c
  else if(huart->Instance==USART3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a47      	ldr	r2, [pc, #284]	; (80014dc <HAL_UART_MspInit+0x570>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	f040 8087 	bne.w	80014d2 <HAL_UART_MspInit+0x566>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c4:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	4a45      	ldr	r2, [pc, #276]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ce:	61d3      	str	r3, [r2, #28]
 80013d0:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_UART_MspInit+0x574>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001406:	4619      	mov	r1, r3
 8001408:	4836      	ldr	r0, [pc, #216]	; (80014e4 <HAL_UART_MspInit+0x578>)
 800140a:	f001 f83b 	bl	8002484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800140e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001420:	4619      	mov	r1, r3
 8001422:	4830      	ldr	r0, [pc, #192]	; (80014e4 <HAL_UART_MspInit+0x578>)
 8001424:	f001 f82e 	bl	8002484 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 800142a:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_UART_MspInit+0x580>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001430:	2210      	movs	r2, #16
 8001432:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001440:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001458:	4823      	ldr	r0, [pc, #140]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 800145a:	f000 fbcb 	bl	8001bf4 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x4fc>
      Error_Handler();
 8001464:	f7ff fd26 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a1f      	ldr	r2, [pc, #124]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_UART_MspInit+0x57c>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_UART_MspInit+0x584>)
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <HAL_UART_MspInit+0x588>)
 8001478:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_UART_MspInit+0x584>)
 800147c:	2200      	movs	r2, #0
 800147e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x584>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HAL_UART_MspInit+0x584>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_UART_MspInit+0x584>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_UART_MspInit+0x584>)
 8001494:	2200      	movs	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001498:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_UART_MspInit+0x584>)
 800149a:	2220      	movs	r2, #32
 800149c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_UART_MspInit+0x584>)
 80014a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014a6:	4812      	ldr	r0, [pc, #72]	; (80014f0 <HAL_UART_MspInit+0x584>)
 80014a8:	f000 fba4 	bl	8001bf4 <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_UART_MspInit+0x54a>
      Error_Handler();
 80014b2:	f7ff fcff 	bl	8000eb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_UART_MspInit+0x584>)
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_UART_MspInit+0x584>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2027      	movs	r0, #39	; 0x27
 80014c8:	f000 fb5d 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014cc:	2027      	movs	r0, #39	; 0x27
 80014ce:	f000 fb76 	bl	8001bbe <HAL_NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3748      	adds	r7, #72	; 0x48
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40004800 	.word	0x40004800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010c00 	.word	0x40010c00
 80014e8:	20000358 	.word	0x20000358
 80014ec:	4002001c 	.word	0x4002001c
 80014f0:	200001c4 	.word	0x200001c4
 80014f4:	40020030 	.word	0x40020030

080014f8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_FSMC_MspInit+0xac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d143      	bne.n	800159c <HAL_FSMC_MspInit+0xa4>
    return;
  }
  FSMC_Initialized = 1;
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_FSMC_MspInit+0xac>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_FSMC_MspInit+0xb0>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <HAL_FSMC_MspInit+0xb0>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6153      	str	r3, [r2, #20]
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <HAL_FSMC_MspInit+0xb0>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001532:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001536:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	4819      	ldr	r0, [pc, #100]	; (80015ac <HAL_FSMC_MspInit+0xb4>)
 8001548:	f000 ff9c 	bl	8002484 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800154c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001550:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <HAL_FSMC_MspInit+0xb8>)
 8001562:	f000 ff8f 	bl	8002484 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001566:	f24c 7333 	movw	r3, #50995	; 0xc733
 800156a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4619      	mov	r1, r3
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <HAL_FSMC_MspInit+0xbc>)
 800157c:	f000 ff82 	bl	8002484 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	4808      	ldr	r0, [pc, #32]	; (80015b8 <HAL_FSMC_MspInit+0xc0>)
 8001596:	f000 ff75 	bl	8002484 <HAL_GPIO_Init>
 800159a:	e000      	b.n	800159e <HAL_FSMC_MspInit+0xa6>
    return;
 800159c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000100 	.word	0x20000100
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40011c00 	.word	0x40011c00
 80015b0:	40011800 	.word	0x40011800
 80015b4:	40011400 	.word	0x40011400
 80015b8:	40012000 	.word	0x40012000

080015bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015c4:	f7ff ff98 	bl	80014f8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <HardFault_Handler+0x4>

080015e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <MemManage_Handler+0x4>

080015e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <BusFault_Handler+0x4>

080015ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161c:	f000 f99c 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <DMA1_Channel2_IRQHandler+0x10>)
 800162a:	f000 fcc1 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000358 	.word	0x20000358

08001638 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA1_Channel3_IRQHandler+0x10>)
 800163e:	f000 fcb7 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001c4 	.word	0x200001c4

0800164c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Channel4_IRQHandler+0x10>)
 8001652:	f000 fcad 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000059c 	.word	0x2000059c

08001660 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Channel5_IRQHandler+0x10>)
 8001666:	f000 fca3 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000830 	.word	0x20000830

08001674 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Channel6_IRQHandler+0x10>)
 800167a:	f000 fc99 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000180 	.word	0x20000180

08001688 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Channel7_IRQHandler+0x10>)
 800168e:	f000 fc8f 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000874 	.word	0x20000874

0800169c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM2_IRQHandler+0x10>)
 80016a2:	f001 fdcb 	bl	800323c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000d5c 	.word	0x20000d5c

080016b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <USART1_IRQHandler+0x10>)
 80016b6:	f002 fb0b 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200008b8 	.word	0x200008b8

080016c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <USART2_IRQHandler+0x10>)
 80016ca:	f002 fb01 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000da4 	.word	0x20000da4

080016d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  if(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE) != RESET)
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <USART3_IRQHandler+0x40>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d10d      	bne.n	8001708 <USART3_IRQHandler+0x30>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <USART3_IRQHandler+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <USART3_IRQHandler+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
	  UART_IDLECallback(&huart3);
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <USART3_IRQHandler+0x40>)
 8001704:	f7ff fb50 	bl	8000da8 <UART_IDLECallback>
  }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <USART3_IRQHandler+0x40>)
 800170a:	f002 fae1 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000208 	.word	0x20000208

0800171c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <UART4_IRQHandler+0x10>)
 8001722:	f002 fad5 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000d1c 	.word	0x20000d1c

08001730 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <UART5_IRQHandler+0x10>)
 8001736:	f002 facb 	bl	8003cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200005e0 	.word	0x200005e0

08001744 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <DMA2_Channel3_IRQHandler+0x10>)
 800174a:	f000 fc31 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000013c 	.word	0x2000013c

08001758 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA2_Channel4_5_IRQHandler+0x10>)
 800175e:	f000 fc27 	bl	8001fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000de4 	.word	0x20000de4

0800176c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
	}

return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017cc:	605a      	str	r2, [r3, #4]
	return 0;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr

080017ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b085      	sub	sp, #20
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
	return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f004 ff06 	bl	8006648 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20010000 	.word	0x20010000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000104 	.word	0x20000104
 8001870:	20001640 	.word	0x20001640

08001874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001882:	e003      	b.n	800188c <LoopCopyDataInit>

08001884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800188a:	3104      	adds	r1, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800188c:	480a      	ldr	r0, [pc, #40]	; (80018b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001894:	d3f6      	bcc.n	8001884 <CopyDataInit>
  ldr r2, =_sbss
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001898:	e002      	b.n	80018a0 <LoopFillZerobss>

0800189a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800189c:	f842 3b04 	str.w	r3, [r2], #4

080018a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018a4:	d3f9      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a6:	f7ff ffe5 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f004 fed3 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ae:	f7fe fd1d 	bl	80002ec <main>
  bx lr
 80018b2:	4770      	bx	lr
  ldr r3, =_sidata
 80018b4:	08007e8c 	.word	0x08007e8c
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018bc:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 80018c0:	200000c4 	.word	0x200000c4
  ldr r3, = _ebss
 80018c4:	2000163c 	.word	0x2000163c

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f000 f947 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff faea 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f95f 	bl	8001bda <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001934:	f000 f927 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000028 	.word	0x20000028
 8001950:	20000030 	.word	0x20000030
 8001954:	2000002c 	.word	0x2000002c

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x1c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x20>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x20>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000030 	.word	0x20000030
 8001978:	20001628 	.word	0x20001628

0800197c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_GetTick+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20001628 	.word	0x20001628

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff fff0 	bl	800197c <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffe0 	bl	800197c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000030 	.word	0x20000030

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <__NVIC_EnableIRQ+0x34>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b50:	f7ff ff90 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff2d 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff42 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff90 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5f 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff35 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e059      	b.n	8001cbe <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_DMA_Init+0xd4>)
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d80f      	bhi.n	8001c36 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_DMA_Init+0xd8>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_DMA_Init+0xdc>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	009a      	lsls	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_DMA_Init+0xe0>)
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c34:	e00e      	b.n	8001c54 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_DMA_Init+0xe4>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_DMA_Init+0xdc>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	009a      	lsls	r2, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <HAL_DMA_Init+0xe8>)
 8001c52:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40020407 	.word	0x40020407
 8001ccc:	bffdfff8 	.word	0xbffdfff8
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	bffdfbf8 	.word	0xbffdfbf8
 8001cdc:	40020400 	.word	0x40020400

08001ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_DMA_Start_IT+0x20>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e04a      	b.n	8001d96 <HAL_DMA_Start_IT+0xb6>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d13a      	bne.n	8001d88 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb76 	bl	8002428 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d008      	beq.n	8001d56 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 020e 	orr.w	r2, r2, #14
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e00f      	b.n	8001d76 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 020a 	orr.w	r2, r2, #10
 8001d74:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e005      	b.n	8001d94 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
 8001d92:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d005      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e0d6      	b.n	8001f70 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020e 	bic.w	r2, r2, #14
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_DMA_Abort_IT+0x1dc>)
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d958      	bls.n	8001ea0 <HAL_DMA_Abort_IT+0x100>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_DMA_Abort_IT+0x1e0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d04f      	beq.n	8001e98 <HAL_DMA_Abort_IT+0xf8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a61      	ldr	r2, [pc, #388]	; (8001f84 <HAL_DMA_Abort_IT+0x1e4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d048      	beq.n	8001e94 <HAL_DMA_Abort_IT+0xf4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a60      	ldr	r2, [pc, #384]	; (8001f88 <HAL_DMA_Abort_IT+0x1e8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d040      	beq.n	8001e8e <HAL_DMA_Abort_IT+0xee>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5e      	ldr	r2, [pc, #376]	; (8001f8c <HAL_DMA_Abort_IT+0x1ec>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d038      	beq.n	8001e88 <HAL_DMA_Abort_IT+0xe8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <HAL_DMA_Abort_IT+0x1f0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d030      	beq.n	8001e82 <HAL_DMA_Abort_IT+0xe2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5b      	ldr	r2, [pc, #364]	; (8001f94 <HAL_DMA_Abort_IT+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d028      	beq.n	8001e7c <HAL_DMA_Abort_IT+0xdc>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a53      	ldr	r2, [pc, #332]	; (8001f7c <HAL_DMA_Abort_IT+0x1dc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d020      	beq.n	8001e76 <HAL_DMA_Abort_IT+0xd6>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_DMA_Abort_IT+0x1f8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_DMA_Abort_IT+0xd2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_DMA_Abort_IT+0x1fc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_Abort_IT+0xce>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_DMA_Abort_IT+0x200>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00a      	beq.n	8001e68 <HAL_DMA_Abort_IT+0xc8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_DMA_Abort_IT+0x204>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d102      	bne.n	8001e62 <HAL_DMA_Abort_IT+0xc2>
 8001e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e60:	e01b      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e66:	e018      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6c:	e015      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e6e:	2310      	movs	r3, #16
 8001e70:	e013      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e011      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e7a:	e00e      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e80:	e00b      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e86:	e008      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	e005      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	e002      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e94:	2310      	movs	r3, #16
 8001e96:	e000      	b.n	8001e9a <HAL_DMA_Abort_IT+0xfa>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <HAL_DMA_Abort_IT+0x208>)
 8001e9c:	6053      	str	r3, [r2, #4]
 8001e9e:	e057      	b.n	8001f50 <HAL_DMA_Abort_IT+0x1b0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_DMA_Abort_IT+0x1e0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d04f      	beq.n	8001f4a <HAL_DMA_Abort_IT+0x1aa>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a35      	ldr	r2, [pc, #212]	; (8001f84 <HAL_DMA_Abort_IT+0x1e4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d048      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x1a6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a33      	ldr	r2, [pc, #204]	; (8001f88 <HAL_DMA_Abort_IT+0x1e8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d040      	beq.n	8001f40 <HAL_DMA_Abort_IT+0x1a0>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <HAL_DMA_Abort_IT+0x1ec>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d038      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x19a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a30      	ldr	r2, [pc, #192]	; (8001f90 <HAL_DMA_Abort_IT+0x1f0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d030      	beq.n	8001f34 <HAL_DMA_Abort_IT+0x194>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <HAL_DMA_Abort_IT+0x1f4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d028      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x18e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_DMA_Abort_IT+0x1dc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d020      	beq.n	8001f28 <HAL_DMA_Abort_IT+0x188>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <HAL_DMA_Abort_IT+0x1f8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d019      	beq.n	8001f24 <HAL_DMA_Abort_IT+0x184>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_DMA_Abort_IT+0x1fc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d012      	beq.n	8001f20 <HAL_DMA_Abort_IT+0x180>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_DMA_Abort_IT+0x200>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00a      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x17a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a26      	ldr	r2, [pc, #152]	; (8001fa4 <HAL_DMA_Abort_IT+0x204>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d102      	bne.n	8001f14 <HAL_DMA_Abort_IT+0x174>
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	e01b      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f18:	e018      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1e:	e015      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f20:	2310      	movs	r3, #16
 8001f22:	e013      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e011      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f2c:	e00e      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f32:	e00b      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f38:	e008      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3e:	e005      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f44:	e002      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f46:	2310      	movs	r3, #16
 8001f48:	e000      	b.n	8001f4c <HAL_DMA_Abort_IT+0x1ac>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4a17      	ldr	r2, [pc, #92]	; (8001fac <HAL_DMA_Abort_IT+0x20c>)
 8001f4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
    } 
  }
  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40020080 	.word	0x40020080
 8001f80:	40020008 	.word	0x40020008
 8001f84:	4002001c 	.word	0x4002001c
 8001f88:	40020030 	.word	0x40020030
 8001f8c:	40020044 	.word	0x40020044
 8001f90:	40020058 	.word	0x40020058
 8001f94:	4002006c 	.word	0x4002006c
 8001f98:	40020408 	.word	0x40020408
 8001f9c:	4002041c 	.word	0x4002041c
 8001fa0:	40020430 	.word	0x40020430
 8001fa4:	40020444 	.word	0x40020444
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020000 	.word	0x40020000

08001fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2204      	movs	r2, #4
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80d6 	beq.w	8002186 <HAL_DMA_IRQHandler+0x1d6>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80d0 	beq.w	8002186 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b9b      	ldr	r3, [pc, #620]	; (8002278 <HAL_DMA_IRQHandler+0x2c8>)
 800200c:	429a      	cmp	r2, r3
 800200e:	d958      	bls.n	80020c2 <HAL_DMA_IRQHandler+0x112>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a99      	ldr	r2, [pc, #612]	; (800227c <HAL_DMA_IRQHandler+0x2cc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04f      	beq.n	80020ba <HAL_DMA_IRQHandler+0x10a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_DMA_IRQHandler+0x2d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d048      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x106>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_DMA_IRQHandler+0x2d4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d040      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x100>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a95      	ldr	r2, [pc, #596]	; (8002288 <HAL_DMA_IRQHandler+0x2d8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d038      	beq.n	80020aa <HAL_DMA_IRQHandler+0xfa>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a93      	ldr	r2, [pc, #588]	; (800228c <HAL_DMA_IRQHandler+0x2dc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d030      	beq.n	80020a4 <HAL_DMA_IRQHandler+0xf4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a92      	ldr	r2, [pc, #584]	; (8002290 <HAL_DMA_IRQHandler+0x2e0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d028      	beq.n	800209e <HAL_DMA_IRQHandler+0xee>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a89      	ldr	r2, [pc, #548]	; (8002278 <HAL_DMA_IRQHandler+0x2c8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d020      	beq.n	8002098 <HAL_DMA_IRQHandler+0xe8>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <HAL_DMA_IRQHandler+0x2e4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d019      	beq.n	8002094 <HAL_DMA_IRQHandler+0xe4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a8c      	ldr	r2, [pc, #560]	; (8002298 <HAL_DMA_IRQHandler+0x2e8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d012      	beq.n	8002090 <HAL_DMA_IRQHandler+0xe0>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a8b      	ldr	r2, [pc, #556]	; (800229c <HAL_DMA_IRQHandler+0x2ec>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00a      	beq.n	800208a <HAL_DMA_IRQHandler+0xda>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a89      	ldr	r2, [pc, #548]	; (80022a0 <HAL_DMA_IRQHandler+0x2f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d102      	bne.n	8002084 <HAL_DMA_IRQHandler+0xd4>
 800207e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002082:	e01b      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 8002084:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002088:	e018      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 800208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208e:	e015      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 8002090:	2340      	movs	r3, #64	; 0x40
 8002092:	e013      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 8002094:	2304      	movs	r3, #4
 8002096:	e011      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 8002098:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800209c:	e00e      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 800209e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a2:	e00b      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 80020a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020a8:	e008      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 80020aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ae:	e005      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b4:	e002      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	e000      	b.n	80020bc <HAL_DMA_IRQHandler+0x10c>
 80020ba:	2304      	movs	r3, #4
 80020bc:	4a79      	ldr	r2, [pc, #484]	; (80022a4 <HAL_DMA_IRQHandler+0x2f4>)
 80020be:	6053      	str	r3, [r2, #4]
 80020c0:	e057      	b.n	8002172 <HAL_DMA_IRQHandler+0x1c2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6d      	ldr	r2, [pc, #436]	; (800227c <HAL_DMA_IRQHandler+0x2cc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d04f      	beq.n	800216c <HAL_DMA_IRQHandler+0x1bc>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6b      	ldr	r2, [pc, #428]	; (8002280 <HAL_DMA_IRQHandler+0x2d0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d048      	beq.n	8002168 <HAL_DMA_IRQHandler+0x1b8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <HAL_DMA_IRQHandler+0x2d4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d040      	beq.n	8002162 <HAL_DMA_IRQHandler+0x1b2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a68      	ldr	r2, [pc, #416]	; (8002288 <HAL_DMA_IRQHandler+0x2d8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d038      	beq.n	800215c <HAL_DMA_IRQHandler+0x1ac>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a67      	ldr	r2, [pc, #412]	; (800228c <HAL_DMA_IRQHandler+0x2dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d030      	beq.n	8002156 <HAL_DMA_IRQHandler+0x1a6>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a65      	ldr	r2, [pc, #404]	; (8002290 <HAL_DMA_IRQHandler+0x2e0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d028      	beq.n	8002150 <HAL_DMA_IRQHandler+0x1a0>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5d      	ldr	r2, [pc, #372]	; (8002278 <HAL_DMA_IRQHandler+0x2c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d020      	beq.n	800214a <HAL_DMA_IRQHandler+0x19a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a61      	ldr	r2, [pc, #388]	; (8002294 <HAL_DMA_IRQHandler+0x2e4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_DMA_IRQHandler+0x196>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a60      	ldr	r2, [pc, #384]	; (8002298 <HAL_DMA_IRQHandler+0x2e8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d012      	beq.n	8002142 <HAL_DMA_IRQHandler+0x192>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5e      	ldr	r2, [pc, #376]	; (800229c <HAL_DMA_IRQHandler+0x2ec>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00a      	beq.n	800213c <HAL_DMA_IRQHandler+0x18c>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <HAL_DMA_IRQHandler+0x2f0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d102      	bne.n	8002136 <HAL_DMA_IRQHandler+0x186>
 8002130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002134:	e01b      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002136:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800213a:	e018      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 800213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002140:	e015      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002142:	2340      	movs	r3, #64	; 0x40
 8002144:	e013      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002146:	2304      	movs	r3, #4
 8002148:	e011      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 800214a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800214e:	e00e      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002150:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002154:	e00b      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002156:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800215a:	e008      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 800215c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002160:	e005      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	e002      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 8002168:	2340      	movs	r3, #64	; 0x40
 800216a:	e000      	b.n	800216e <HAL_DMA_IRQHandler+0x1be>
 800216c:	2304      	movs	r3, #4
 800216e:	4a4e      	ldr	r2, [pc, #312]	; (80022a8 <HAL_DMA_IRQHandler+0x2f8>)
 8002170:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8136 	beq.w	80023e8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002184:	e130      	b.n	80023e8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2202      	movs	r2, #2
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80f8 	beq.w	8002388 <HAL_DMA_IRQHandler+0x3d8>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80f2 	beq.w	8002388 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 020a 	bic.w	r2, r2, #10
 80021c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <HAL_DMA_IRQHandler+0x2c8>)
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d973      	bls.n	80022be <HAL_DMA_IRQHandler+0x30e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_DMA_IRQHandler+0x2cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d06a      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x306>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_DMA_IRQHandler+0x2d0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d063      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x302>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a25      	ldr	r2, [pc, #148]	; (8002284 <HAL_DMA_IRQHandler+0x2d4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d05b      	beq.n	80022ac <HAL_DMA_IRQHandler+0x2fc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_DMA_IRQHandler+0x2d8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d038      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2c0>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_DMA_IRQHandler+0x2dc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d030      	beq.n	800226a <HAL_DMA_IRQHandler+0x2ba>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_DMA_IRQHandler+0x2e0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d028      	beq.n	8002264 <HAL_DMA_IRQHandler+0x2b4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_DMA_IRQHandler+0x2c8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d020      	beq.n	800225e <HAL_DMA_IRQHandler+0x2ae>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1c      	ldr	r2, [pc, #112]	; (8002294 <HAL_DMA_IRQHandler+0x2e4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_DMA_IRQHandler+0x2aa>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <HAL_DMA_IRQHandler+0x2e8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d012      	beq.n	8002256 <HAL_DMA_IRQHandler+0x2a6>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <HAL_DMA_IRQHandler+0x2ec>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00a      	beq.n	8002250 <HAL_DMA_IRQHandler+0x2a0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_DMA_IRQHandler+0x2f0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d102      	bne.n	800224a <HAL_DMA_IRQHandler+0x29a>
 8002244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002248:	e036      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 800224a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224e:	e033      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 8002250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002254:	e030      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 8002256:	2320      	movs	r3, #32
 8002258:	e02e      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 800225a:	2302      	movs	r3, #2
 800225c:	e02c      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 800225e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002262:	e029      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 8002264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002268:	e026      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 800226a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800226e:	e023      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 8002270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002274:	e020      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 8002276:	bf00      	nop
 8002278:	40020080 	.word	0x40020080
 800227c:	40020008 	.word	0x40020008
 8002280:	4002001c 	.word	0x4002001c
 8002284:	40020030 	.word	0x40020030
 8002288:	40020044 	.word	0x40020044
 800228c:	40020058 	.word	0x40020058
 8002290:	4002006c 	.word	0x4002006c
 8002294:	40020408 	.word	0x40020408
 8002298:	4002041c 	.word	0x4002041c
 800229c:	40020430 	.word	0x40020430
 80022a0:	40020444 	.word	0x40020444
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020000 	.word	0x40020000
 80022ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b0:	e002      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 80022b2:	2320      	movs	r3, #32
 80022b4:	e000      	b.n	80022b8 <HAL_DMA_IRQHandler+0x308>
 80022b6:	2302      	movs	r3, #2
 80022b8:	4a4e      	ldr	r2, [pc, #312]	; (80023f4 <HAL_DMA_IRQHandler+0x444>)
 80022ba:	6053      	str	r3, [r2, #4]
 80022bc:	e057      	b.n	800236e <HAL_DMA_IRQHandler+0x3be>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <HAL_DMA_IRQHandler+0x448>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d04f      	beq.n	8002368 <HAL_DMA_IRQHandler+0x3b8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_DMA_IRQHandler+0x44c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d048      	beq.n	8002364 <HAL_DMA_IRQHandler+0x3b4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_DMA_IRQHandler+0x450>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d040      	beq.n	800235e <HAL_DMA_IRQHandler+0x3ae>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a48      	ldr	r2, [pc, #288]	; (8002404 <HAL_DMA_IRQHandler+0x454>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d038      	beq.n	8002358 <HAL_DMA_IRQHandler+0x3a8>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a47      	ldr	r2, [pc, #284]	; (8002408 <HAL_DMA_IRQHandler+0x458>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d030      	beq.n	8002352 <HAL_DMA_IRQHandler+0x3a2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a45      	ldr	r2, [pc, #276]	; (800240c <HAL_DMA_IRQHandler+0x45c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d028      	beq.n	800234c <HAL_DMA_IRQHandler+0x39c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a44      	ldr	r2, [pc, #272]	; (8002410 <HAL_DMA_IRQHandler+0x460>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d020      	beq.n	8002346 <HAL_DMA_IRQHandler+0x396>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	; (8002414 <HAL_DMA_IRQHandler+0x464>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_DMA_IRQHandler+0x392>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a41      	ldr	r2, [pc, #260]	; (8002418 <HAL_DMA_IRQHandler+0x468>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d012      	beq.n	800233e <HAL_DMA_IRQHandler+0x38e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_DMA_IRQHandler+0x46c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00a      	beq.n	8002338 <HAL_DMA_IRQHandler+0x388>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a3e      	ldr	r2, [pc, #248]	; (8002420 <HAL_DMA_IRQHandler+0x470>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d102      	bne.n	8002332 <HAL_DMA_IRQHandler+0x382>
 800232c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002330:	e01b      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002336:	e018      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233c:	e015      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 800233e:	2320      	movs	r3, #32
 8002340:	e013      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002342:	2302      	movs	r3, #2
 8002344:	e011      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234a:	e00e      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 800234c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002350:	e00b      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002356:	e008      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235c:	e005      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 800235e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002362:	e002      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002364:	2320      	movs	r3, #32
 8002366:	e000      	b.n	800236a <HAL_DMA_IRQHandler+0x3ba>
 8002368:	2302      	movs	r3, #2
 800236a:	4a2e      	ldr	r2, [pc, #184]	; (8002424 <HAL_DMA_IRQHandler+0x474>)
 800236c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	2b00      	cmp	r3, #0
 800237c:	d034      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002386:	e02f      	b.n	80023e8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	2208      	movs	r2, #8
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d028      	beq.n	80023ea <HAL_DMA_IRQHandler+0x43a>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d023      	beq.n	80023ea <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 020e 	bic.w	r2, r2, #14
 80023b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
    }
  }
  return;
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
}
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020008 	.word	0x40020008
 80023fc:	4002001c 	.word	0x4002001c
 8002400:	40020030 	.word	0x40020030
 8002404:	40020044 	.word	0x40020044
 8002408:	40020058 	.word	0x40020058
 800240c:	4002006c 	.word	0x4002006c
 8002410:	40020080 	.word	0x40020080
 8002414:	40020408 	.word	0x40020408
 8002418:	4002041c 	.word	0x4002041c
 800241c:	40020430 	.word	0x40020430
 8002420:	40020444 	.word	0x40020444
 8002424:	40020000 	.word	0x40020000

08002428 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b10      	cmp	r3, #16
 8002454:	d108      	bne.n	8002468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002466:	e007      	b.n	8002478 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e179      	b.n	800278c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002498:	2201      	movs	r2, #1
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8168 	bne.w	8002786 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4aa0      	ldr	r2, [pc, #640]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d05e      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024c0:	4a9e      	ldr	r2, [pc, #632]	; (800273c <HAL_GPIO_Init+0x2b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d875      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024c6:	4a9e      	ldr	r2, [pc, #632]	; (8002740 <HAL_GPIO_Init+0x2bc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d058      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024cc:	4a9c      	ldr	r2, [pc, #624]	; (8002740 <HAL_GPIO_Init+0x2bc>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d86f      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024d2:	4a9c      	ldr	r2, [pc, #624]	; (8002744 <HAL_GPIO_Init+0x2c0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d052      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024d8:	4a9a      	ldr	r2, [pc, #616]	; (8002744 <HAL_GPIO_Init+0x2c0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d869      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024de:	4a9a      	ldr	r2, [pc, #616]	; (8002748 <HAL_GPIO_Init+0x2c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d04c      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024e4:	4a98      	ldr	r2, [pc, #608]	; (8002748 <HAL_GPIO_Init+0x2c4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d863      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024ea:	4a98      	ldr	r2, [pc, #608]	; (800274c <HAL_GPIO_Init+0x2c8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d046      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024f0:	4a96      	ldr	r2, [pc, #600]	; (800274c <HAL_GPIO_Init+0x2c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d85d      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d82a      	bhi.n	8002550 <HAL_GPIO_Init+0xcc>
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d859      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <HAL_GPIO_Init+0x80>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	0800257f 	.word	0x0800257f
 8002508:	08002559 	.word	0x08002559
 800250c:	0800256b 	.word	0x0800256b
 8002510:	080025ad 	.word	0x080025ad
 8002514:	080025b3 	.word	0x080025b3
 8002518:	080025b3 	.word	0x080025b3
 800251c:	080025b3 	.word	0x080025b3
 8002520:	080025b3 	.word	0x080025b3
 8002524:	080025b3 	.word	0x080025b3
 8002528:	080025b3 	.word	0x080025b3
 800252c:	080025b3 	.word	0x080025b3
 8002530:	080025b3 	.word	0x080025b3
 8002534:	080025b3 	.word	0x080025b3
 8002538:	080025b3 	.word	0x080025b3
 800253c:	080025b3 	.word	0x080025b3
 8002540:	080025b3 	.word	0x080025b3
 8002544:	080025b3 	.word	0x080025b3
 8002548:	08002561 	.word	0x08002561
 800254c:	08002575 	.word	0x08002575
 8002550:	4a7f      	ldr	r2, [pc, #508]	; (8002750 <HAL_GPIO_Init+0x2cc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002556:	e02c      	b.n	80025b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e029      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	3304      	adds	r3, #4
 8002566:	623b      	str	r3, [r7, #32]
          break;
 8002568:	e024      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e01f      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	330c      	adds	r3, #12
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e01a      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002586:	2304      	movs	r3, #4
 8002588:	623b      	str	r3, [r7, #32]
          break;
 800258a:	e013      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002594:	2308      	movs	r3, #8
 8002596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	611a      	str	r2, [r3, #16]
          break;
 800259e:	e009      	b.n	80025b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a0:	2308      	movs	r3, #8
 80025a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	615a      	str	r2, [r3, #20]
          break;
 80025aa:	e003      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025ac:	2300      	movs	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e000      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          break;
 80025b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	d801      	bhi.n	80025be <HAL_GPIO_Init+0x13a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_Init+0x13e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d802      	bhi.n	80025d0 <HAL_GPIO_Init+0x14c>
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_Init+0x152>
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3b08      	subs	r3, #8
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	210f      	movs	r1, #15
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	401a      	ands	r2, r3
 80025e8:	6a39      	ldr	r1, [r7, #32]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80c1 	beq.w	8002786 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x2d4>)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a46      	ldr	r2, [pc, #280]	; (800275c <HAL_GPIO_Init+0x2d8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d01f      	beq.n	8002688 <HAL_GPIO_Init+0x204>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a45      	ldr	r2, [pc, #276]	; (8002760 <HAL_GPIO_Init+0x2dc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d019      	beq.n	8002684 <HAL_GPIO_Init+0x200>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a44      	ldr	r2, [pc, #272]	; (8002764 <HAL_GPIO_Init+0x2e0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_GPIO_Init+0x1fc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <HAL_GPIO_Init+0x2e4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00d      	beq.n	800267c <HAL_GPIO_Init+0x1f8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_GPIO_Init+0x2e8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <HAL_GPIO_Init+0x1f4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a41      	ldr	r2, [pc, #260]	; (8002770 <HAL_GPIO_Init+0x2ec>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_GPIO_Init+0x1f0>
 8002670:	2305      	movs	r3, #5
 8002672:	e00a      	b.n	800268a <HAL_GPIO_Init+0x206>
 8002674:	2306      	movs	r3, #6
 8002676:	e008      	b.n	800268a <HAL_GPIO_Init+0x206>
 8002678:	2304      	movs	r3, #4
 800267a:	e006      	b.n	800268a <HAL_GPIO_Init+0x206>
 800267c:	2303      	movs	r3, #3
 800267e:	e004      	b.n	800268a <HAL_GPIO_Init+0x206>
 8002680:	2302      	movs	r3, #2
 8002682:	e002      	b.n	800268a <HAL_GPIO_Init+0x206>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_GPIO_Init+0x206>
 8002688:	2300      	movs	r3, #0
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	f002 0203 	and.w	r2, r2, #3
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	4093      	lsls	r3, r2
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800269a:	492f      	ldr	r1, [pc, #188]	; (8002758 <HAL_GPIO_Init+0x2d4>)
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026b4:	4b2f      	ldr	r3, [pc, #188]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	492e      	ldr	r1, [pc, #184]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	492a      	ldr	r1, [pc, #168]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4924      	ldr	r1, [pc, #144]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4920      	ldr	r1, [pc, #128]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	491a      	ldr	r1, [pc, #104]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	43db      	mvns	r3, r3
 800271a:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 800271c:	4013      	ands	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d025      	beq.n	8002778 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	4910      	ldr	r1, [pc, #64]	; (8002774 <HAL_GPIO_Init+0x2f0>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	60cb      	str	r3, [r1, #12]
 8002738:	e025      	b.n	8002786 <HAL_GPIO_Init+0x302>
 800273a:	bf00      	nop
 800273c:	10320000 	.word	0x10320000
 8002740:	10310000 	.word	0x10310000
 8002744:	10220000 	.word	0x10220000
 8002748:	10210000 	.word	0x10210000
 800274c:	10120000 	.word	0x10120000
 8002750:	10110000 	.word	0x10110000
 8002754:	40021000 	.word	0x40021000
 8002758:	40010000 	.word	0x40010000
 800275c:	40010800 	.word	0x40010800
 8002760:	40010c00 	.word	0x40010c00
 8002764:	40011000 	.word	0x40011000
 8002768:	40011400 	.word	0x40011400
 800276c:	40011800 	.word	0x40011800
 8002770:	40011c00 	.word	0x40011c00
 8002774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_GPIO_Init+0x324>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	43db      	mvns	r3, r3
 8002780:	4909      	ldr	r1, [pc, #36]	; (80027a8 <HAL_GPIO_Init+0x324>)
 8002782:	4013      	ands	r3, r2
 8002784:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	3301      	adds	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f ae7e 	bne.w	8002498 <HAL_GPIO_Init+0x14>
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	372c      	adds	r7, #44	; 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
 80027b8:	4613      	mov	r3, r2
 80027ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027bc:	787b      	ldrb	r3, [r7, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c2:	887a      	ldrh	r2, [r7, #2]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027c8:	e003      	b.n	80027d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	041a      	lsls	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4013      	ands	r3, r2
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43d9      	mvns	r1, r3
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	400b      	ands	r3, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	611a      	str	r2, [r3, #16]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
	...

08002810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e26c      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8087 	beq.w	800293e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002830:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b04      	cmp	r3, #4
 800283a:	d00c      	beq.n	8002856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800283c:	4b8f      	ldr	r3, [pc, #572]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d112      	bne.n	800286e <HAL_RCC_OscConfig+0x5e>
 8002848:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d10b      	bne.n	800286e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d06c      	beq.n	800293c <HAL_RCC_OscConfig+0x12c>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d168      	bne.n	800293c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e246      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x76>
 8002878:	4b80      	ldr	r3, [pc, #512]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7f      	ldr	r2, [pc, #508]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e02e      	b.n	80028e4 <HAL_RCC_OscConfig+0xd4>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x98>
 800288e:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7a      	ldr	r2, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xd4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xbc>
 80028b2:	4b72      	ldr	r3, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a71      	ldr	r2, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd4>
 80028cc:	4b6b      	ldr	r3, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a67      	ldr	r2, [pc, #412]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f846 	bl	800197c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f842 	bl	800197c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1fa      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe4>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff f832 	bl	800197c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800291c:	f7ff f82e 	bl	800197c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	; 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e1e6      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x10c>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d063      	beq.n	8002a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294a:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002956:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b08      	cmp	r3, #8
 8002960:	d11c      	bne.n	800299c <HAL_RCC_OscConfig+0x18c>
 8002962:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	4b43      	ldr	r3, [pc, #268]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x176>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1ba      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4939      	ldr	r1, [pc, #228]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	e03a      	b.n	8002a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ffe7 	bl	800197c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fe ffe3 	bl	800197c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e19b      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4927      	ldr	r1, [pc, #156]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
 80029e4:	e015      	b.n	8002a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x270>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe ffc6 	bl	800197c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f4:	f7fe ffc2 	bl	800197c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e17a      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03a      	beq.n	8002a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d019      	beq.n	8002a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <HAL_RCC_OscConfig+0x274>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe ffa6 	bl	800197c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe ffa2 	bl	800197c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e15a      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCC_OscConfig+0x26c>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f000 fad8 	bl	8003008 <RCC_Delay>
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe ff8c 	bl	800197c <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a66:	e00f      	b.n	8002a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fe ff88 	bl	800197c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d908      	bls.n	8002a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e140      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	42420000 	.word	0x42420000
 8002a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a88:	4b9e      	ldr	r3, [pc, #632]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e9      	bne.n	8002a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a6 	beq.w	8002bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b97      	ldr	r3, [pc, #604]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b94      	ldr	r3, [pc, #592]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	4a93      	ldr	r2, [pc, #588]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002abc:	61d3      	str	r3, [r2, #28]
 8002abe:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ace:	4b8e      	ldr	r3, [pc, #568]	; (8002d08 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d118      	bne.n	8002b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ada:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x4f8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a8a      	ldr	r2, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x4f8>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe ff49 	bl	800197c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aee:	f7fe ff45 	bl	800197c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0fd      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x4f8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d106      	bne.n	8002b22 <HAL_RCC_OscConfig+0x312>
 8002b14:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a7a      	ldr	r2, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	e02d      	b.n	8002b7e <HAL_RCC_OscConfig+0x36e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x334>
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a72      	ldr	r2, [pc, #456]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	e01c      	b.n	8002b7e <HAL_RCC_OscConfig+0x36e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2b05      	cmp	r3, #5
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x356>
 8002b4c:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a6c      	ldr	r2, [pc, #432]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	6213      	str	r3, [r2, #32]
 8002b58:	4b6a      	ldr	r3, [pc, #424]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6213      	str	r3, [r2, #32]
 8002b64:	e00b      	b.n	8002b7e <HAL_RCC_OscConfig+0x36e>
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4a66      	ldr	r2, [pc, #408]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6213      	str	r3, [r2, #32]
 8002b72:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fe fef9 	bl	800197c <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fef5 	bl	800197c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e0ab      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ee      	beq.n	8002b8e <HAL_RCC_OscConfig+0x37e>
 8002bb0:	e014      	b.n	8002bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fee3 	bl	800197c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bba:	f7fe fedf 	bl	800197c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e095      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd0:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1ee      	bne.n	8002bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d105      	bne.n	8002bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be2:	4b48      	ldr	r3, [pc, #288]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	4a47      	ldr	r2, [pc, #284]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8081 	beq.w	8002cfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d061      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d146      	bne.n	8002c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_OscConfig+0x4fc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe feb3 	bl	800197c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe feaf 	bl	800197c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e067      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f0      	bne.n	8002c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d108      	bne.n	8002c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c42:	4b30      	ldr	r3, [pc, #192]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	492d      	ldr	r1, [pc, #180]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c54:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a19      	ldr	r1, [r3, #32]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	430b      	orrs	r3, r1
 8002c66:	4927      	ldr	r1, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x4fc>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fe83 	bl	800197c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe fe7f 	bl	800197c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e037      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x46a>
 8002c98:	e02f      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_RCC_OscConfig+0x4fc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fe6c 	bl	800197c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fe68 	bl	800197c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e020      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x498>
 8002cc6:	e018      	b.n	8002cfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e013      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42420060 	.word	0x42420060

08002d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0d0      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b6a      	ldr	r3, [pc, #424]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b67      	ldr	r3, [pc, #412]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4965      	ldr	r1, [pc, #404]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d115      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e073      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06b      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4b39      	ldr	r3, [pc, #228]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4936      	ldr	r1, [pc, #216]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fdbc 	bl	800197c <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe fdb8 	bl	800197c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e053      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 020c 	and.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1eb      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d210      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4922      	ldr	r1, [pc, #136]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1cc>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fd1a 	bl	80018f8 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08007dd4 	.word	0x08007dd4
 8002edc:	20000028 	.word	0x20000028
 8002ee0:	2000002c 	.word	0x2000002c

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	b490      	push	{r4, r7}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eea:	4b2a      	ldr	r3, [pc, #168]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eec:	1d3c      	adds	r4, r7, #4
 8002eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ef4:	f240 2301 	movw	r3, #513	; 0x201
 8002ef8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d002      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x46>
 8002f22:	e02d      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f26:	623b      	str	r3, [r7, #32]
      break;
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f36:	4413      	add	r3, r2
 8002f38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c5b      	lsrs	r3, r3, #17
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f56:	4413      	add	r3, r2
 8002f58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f62:	fb02 f203 	mul.w	r2, r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	e004      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	4a0b      	ldr	r2, [pc, #44]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	623b      	str	r3, [r7, #32]
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f82:	623b      	str	r3, [r7, #32]
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3728      	adds	r7, #40	; 0x28
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc90      	pop	{r4, r7}
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	08007c88 	.word	0x08007c88
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	007a1200 	.word	0x007a1200
 8002fa0:	003d0900 	.word	0x003d0900

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000028 	.word	0x20000028

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff2 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0a1b      	lsrs	r3, r3, #8
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08007de4 	.word	0x08007de4

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	08007de4 	.word	0x08007de4

08003008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <RCC_Delay+0x34>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <RCC_Delay+0x38>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0a5b      	lsrs	r3, r3, #9
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003024:	bf00      	nop
  }
  while (Delay --);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	60fa      	str	r2, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f9      	bne.n	8003024 <RCC_Delay+0x1c>
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000028 	.word	0x20000028
 8003040:	10624dd3 	.word	0x10624dd3

08003044 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_SRAM_Init+0x1c>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305e:	d101      	bne.n	8003064 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e038      	b.n	80030d6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7fe fa9f 	bl	80015bc <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3308      	adds	r3, #8
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f001 fa05 	bl	8004498 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	f001 fa67 	bl	800456c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6858      	ldr	r0, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f001 fa92 	bl	80045d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	f041 0101 	orr.w	r1, r1, #1
 80030c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e041      	b.n	8003174 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7fd ff0d 	bl	8000f24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f000 fa7d 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d001      	beq.n	8003194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e044      	b.n	800321e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_TIM_Base_Start_IT+0xac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d018      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_TIM_Base_Start_IT+0xb0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d00e      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_TIM_Base_Start_IT+0xb4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d009      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a16      	ldr	r2, [pc, #88]	; (8003234 <HAL_TIM_Base_Start_IT+0xb8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_TIM_Base_Start_IT+0x6c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <HAL_TIM_Base_Start_IT+0xbc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d111      	bne.n	800320c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d010      	beq.n	800321c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	e007      	b.n	800321c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40013400 	.word	0x40013400
 8003230:	40000400 	.word	0x40000400
 8003234:	40000800 	.word	0x40000800
 8003238:	40000c00 	.word	0x40000c00

0800323c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b02      	cmp	r3, #2
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0202 	mvn.w	r2, #2
 8003268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9b1 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9a4 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f9b3 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0204 	mvn.w	r2, #4
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f987 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f97a 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f989 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0208 	mvn.w	r2, #8
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f95d 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f950 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f95f 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b10      	cmp	r3, #16
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0210 	mvn.w	r2, #16
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2208      	movs	r2, #8
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f933 	bl	80035e6 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f926 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f935 	bl	80035f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0201 	mvn.w	r2, #1
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fc32 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa9d 	bl	8003926 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	2b40      	cmp	r3, #64	; 0x40
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d107      	bne.n	8003418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8f9 	bl	800360a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b20      	cmp	r3, #32
 8003424:	d10e      	bne.n	8003444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d107      	bne.n	8003444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fa68 	bl	8003914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_ConfigClockSource+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e0b3      	b.n	80035cc <HAL_TIM_ConfigClockSource+0x180>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349c:	d03e      	beq.n	800351c <HAL_TIM_ConfigClockSource+0xd0>
 800349e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a2:	f200 8087 	bhi.w	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034aa:	f000 8085 	beq.w	80035b8 <HAL_TIM_ConfigClockSource+0x16c>
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d87f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d01a      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xa2>
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d87b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d050      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x116>
 80034c0:	2b60      	cmp	r3, #96	; 0x60
 80034c2:	d877      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d03c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xf6>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d873      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d058      	beq.n	8003582 <HAL_TIM_ConfigClockSource+0x136>
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d86f      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d064      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d86b      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d060      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d867      	bhi.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d05c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d05a      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ec:	e062      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 f97e 	bl	80037fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003510:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	609a      	str	r2, [r3, #8]
      break;
 800351a:	e04e      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f000 f967 	bl	80037fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353e:	609a      	str	r2, [r3, #8]
      break;
 8003540:	e03b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	461a      	mov	r2, r3
 8003550:	f000 f8de 	bl	8003710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2150      	movs	r1, #80	; 0x50
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f935 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8003560:	e02b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	461a      	mov	r2, r3
 8003570:	f000 f8fc 	bl	800376c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2160      	movs	r1, #96	; 0x60
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f925 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 8003580:	e01b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	461a      	mov	r2, r3
 8003590:	f000 f8be 	bl	8003710 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2140      	movs	r1, #64	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f915 	bl	80037ca <TIM_ITRx_SetConfig>
      break;
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f000 f90c 	bl	80037ca <TIM_ITRx_SetConfig>
        break;
 80035b2:	e002      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a33      	ldr	r2, [pc, #204]	; (80036fc <TIM_Base_SetConfig+0xe0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a32      	ldr	r2, [pc, #200]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0xe8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2e      	ldr	r2, [pc, #184]	; (8003708 <TIM_Base_SetConfig+0xec>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a2d      	ldr	r2, [pc, #180]	; (800370c <TIM_Base_SetConfig+0xf0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <TIM_Base_SetConfig+0xe0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0x82>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0x82>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0x82>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <TIM_Base_SetConfig+0xe8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0x82>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <TIM_Base_SetConfig+0xec>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0x82>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_Base_SetConfig+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <TIM_Base_SetConfig+0xe0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xc8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <TIM_Base_SetConfig+0xe4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00

08003710 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 030a 	bic.w	r3, r3, #10
 800374c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0210 	bic.w	r2, r3, #16
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003796:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	031b      	lsls	r3, r3, #12
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	621a      	str	r2, [r3, #32]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr

080037ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b085      	sub	sp, #20
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f043 0307 	orr.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037fe:	b480      	push	{r7}
 8003800:	b087      	sub	sp, #28
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003818:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	021a      	lsls	r2, r3, #8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	431a      	orrs	r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	4313      	orrs	r3, r2
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003850:	2302      	movs	r3, #2
 8003852:	e050      	b.n	80038f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038aa:	d00e      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a15      	ldr	r2, [pc, #84]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a12      	ldr	r2, [pc, #72]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10c      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00

08003914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e03f      	b.n	80039ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd fb04 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2224      	movs	r2, #36	; 0x24
 8003968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fcfd 	bl	800437c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08a      	sub	sp, #40	; 0x28
 80039d6:	af02      	add	r7, sp, #8
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d17c      	bne.n	8003aec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_UART_Transmit+0x2c>
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e075      	b.n	8003aee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_UART_Transmit+0x3e>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e06e      	b.n	8003aee <HAL_UART_Transmit+0x11c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2221      	movs	r2, #33	; 0x21
 8003a22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003a26:	f7fd ffa9 	bl	800197c <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	88fa      	ldrh	r2, [r7, #6]
 8003a36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a40:	d108      	bne.n	8003a54 <HAL_UART_Transmit+0x82>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e003      	b.n	8003a5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003a64:	e02a      	b.n	8003abc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fb0b 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e036      	b.n	8003aee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e007      	b.n	8003aae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1cf      	bne.n	8003a66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fadb 	bl	800408c <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e006      	b.n	8003aee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d153      	bne.n	8003bba <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit_DMA+0x26>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e04c      	b.n	8003bbc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit_DMA+0x38>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e045      	b.n	8003bbc <HAL_UART_Transmit_DMA+0xc4>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2221      	movs	r2, #33	; 0x21
 8003b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <HAL_UART_Transmit_DMA+0xcc>)
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_UART_Transmit_DMA+0xd0>)
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_UART_Transmit_DMA+0xd4>)
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	2200      	movs	r2, #0
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	f7fe f8a6 	bl	8001ce0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bb4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08003f07 	.word	0x08003f07
 8003bc8:	08003f59 	.word	0x08003f59
 8003bcc:	08003ff9 	.word	0x08003ff9

08003bd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d166      	bne.n	8003cb8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_UART_Receive_DMA+0x26>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e05f      	b.n	8003cba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_UART_Receive_DMA+0x38>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e058      	b.n	8003cba <HAL_UART_Receive_DMA+0xea>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	88fa      	ldrh	r2, [r7, #6]
 8003c1a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2222      	movs	r2, #34	; 0x22
 8003c26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <HAL_UART_Receive_DMA+0xf4>)
 8003c30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <HAL_UART_Receive_DMA+0xf8>)
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_UART_Receive_DMA+0xfc>)
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	2200      	movs	r2, #0
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	f7fe f83d 	bl	8001ce0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c92:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08003f75 	.word	0x08003f75
 8003cc8:	08003fdd 	.word	0x08003fdd
 8003ccc:	08003ff9 	.word	0x08003ff9

08003cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_UART_IRQHandler+0x52>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 faad 	bl	800427a <UART_Receive_IT>
      return;
 8003d20:	e0d0      	b.n	8003ec4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 80b0 	beq.w	8003e8a <HAL_UART_IRQHandler+0x1ba>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_UART_IRQHandler+0x70>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80a5 	beq.w	8003e8a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_UART_IRQHandler+0x90>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	f043 0201 	orr.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_UART_IRQHandler+0xb0>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	f043 0202 	orr.w	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_UART_IRQHandler+0xd0>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00f      	beq.n	8003dca <HAL_UART_IRQHandler+0xfa>
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_UART_IRQHandler+0xee>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	f043 0208 	orr.w	r2, r3, #8
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d077      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_UART_IRQHandler+0x11c>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fa47 	bl	800427a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_UART_IRQHandler+0x144>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d031      	beq.n	8003e78 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f998 	bl	800414a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e36:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e44:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_UART_IRQHandler+0x1fc>)
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd ffa7 	bl	8001da0 <HAL_DMA_Abort_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e62:	4610      	mov	r0, r2
 8003e64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e66:	e00e      	b.n	8003e86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f843 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6e:	e00a      	b.n	8003e86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f83f 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e76:	e006      	b.n	8003e86 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f83b 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e84:	e01d      	b.n	8003ec2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	bf00      	nop
    return;
 8003e88:	e01b      	b.n	8003ec2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1d6>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f984 	bl	80041ac <UART_Transmit_IT>
    return;
 8003ea4:	e00e      	b.n	8003ec4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x1f4>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9c5 	bl	800424a <UART_EndTransmit_IT>
    return;
 8003ec0:	e000      	b.n	8003ec4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003ec2:	bf00      	nop
  }
}
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08004185 	.word	0x08004185

08003ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d113      	bne.n	8003f4a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f36:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f46:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f48:	e002      	b.n	8003f50 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ffc0 	bl	8003ed0 <HAL_UART_TxCpltCallback>
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f7ff ffbb 	bl	8003ee2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11e      	bne.n	8003fce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f7fc febe 	bl	8000d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7fc fec6 	bl	8000d7c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b21      	cmp	r3, #33	; 0x21
 800402a:	d108      	bne.n	800403e <UART_DMAError+0x46>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004038:	68b8      	ldr	r0, [r7, #8]
 800403a:	f000 f871 	bl	8004120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b22      	cmp	r3, #34	; 0x22
 800405e:	d108      	bne.n	8004072 <UART_DMAError+0x7a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f000 f86c 	bl	800414a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800407e:	68b8      	ldr	r0, [r7, #8]
 8004080:	f7ff ff38 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004084:	bf00      	nop
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800409c:	e02c      	b.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d028      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <UART_WaitOnFlagUntilTimeout+0x30>
 80040ac:	f7fd fc66 	bl	800197c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d21d      	bcs.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e00f      	b.n	8004118 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	429a      	cmp	r2, r3
 8004114:	d0c3      	beq.n	800409e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004136:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004160:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f7ff fea8 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a4:	bf00      	nop
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b21      	cmp	r3, #33	; 0x21
 80041be:	d13e      	bne.n	800423e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c8:	d114      	bne.n	80041f4 <UART_Transmit_IT+0x48>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d110      	bne.n	80041f4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	1c9a      	adds	r2, r3, #2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	621a      	str	r2, [r3, #32]
 80041f2:	e008      	b.n	8004206 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	1c59      	adds	r1, r3, #1
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6211      	str	r1, [r2, #32]
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4619      	mov	r1, r3
 8004214:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004238:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe30 	bl	8003ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	d170      	bne.n	8004370 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d117      	bne.n	80042c8 <UART_Receive_IT+0x4e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d113      	bne.n	80042c8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	1c9a      	adds	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	629a      	str	r2, [r3, #40]	; 0x28
 80042c6:	e026      	b.n	8004316 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d007      	beq.n	80042ec <UART_Receive_IT+0x72>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <UART_Receive_IT+0x80>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e008      	b.n	800430c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29b      	uxth	r3, r3
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4619      	mov	r1, r3
 8004324:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004326:	2b00      	cmp	r3, #0
 8004328:	d120      	bne.n	800436c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0220 	bic.w	r2, r2, #32
 8004338:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fc fcf4 	bl	8000d50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e002      	b.n	8004372 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043b6:	f023 030c 	bic.w	r3, r3, #12
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <UART_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043e4:	f7fe fdfc 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	e002      	b.n	80043f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe fde4 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80043f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009a      	lsls	r2, r3, #2
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <UART_SetConfig+0x118>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	0119      	lsls	r1, r3, #4
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009a      	lsls	r2, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	fbb2 f2f3 	udiv	r2, r2, r3
 8004428:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <UART_SetConfig+0x118>)
 800442a:	fba3 0302 	umull	r0, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	2064      	movs	r0, #100	; 0x64
 8004432:	fb00 f303 	mul.w	r3, r0, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	3332      	adds	r3, #50	; 0x32
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <UART_SetConfig+0x118>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004448:	4419      	add	r1, r3
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <UART_SetConfig+0x118>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	; 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <UART_SetConfig+0x118>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 020f 	and.w	r2, r3, #15
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	440a      	add	r2, r1
 8004486:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40013800 	.word	0x40013800
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	f023 0101 	bic.w	r1, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d102      	bne.n	80044c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80044c2:	2340      	movs	r3, #64	; 0x40
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e001      	b.n	80044cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80044d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80044de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80044e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80044ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80044f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80044f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80044fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004502:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004508:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <FSMC_NORSRAM_Init+0xd0>)
 8004528:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004530:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004538:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	43db      	mvns	r3, r3
 8004548:	ea02 0103 	and.w	r1, r2, r3
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4319      	orrs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	0008fb7f 	.word	0x0008fb7f

0800456c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004582:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	431a      	orrs	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	431a      	orrs	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	051b      	lsls	r3, r3, #20
 80045aa:	431a      	orrs	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	3b02      	subs	r3, #2
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	3201      	adds	r2, #1
 80045c0:	4319      	orrs	r1, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045e8:	d11d      	bne.n	8004626 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	6811      	ldr	r1, [r2, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	6852      	ldr	r2, [r2, #4]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	4311      	orrs	r1, r2
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	6892      	ldr	r2, [r2, #8]
 8004606:	0212      	lsls	r2, r2, #8
 8004608:	4311      	orrs	r1, r2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	6992      	ldr	r2, [r2, #24]
 800460e:	4311      	orrs	r1, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	68d2      	ldr	r2, [r2, #12]
 8004614:	0412      	lsls	r2, r2, #16
 8004616:	430a      	orrs	r2, r1
 8004618:	ea43 0102 	orr.w	r1, r3, r2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004624:	e005      	b.n	8004632 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	cff00000 	.word	0xcff00000

08004644 <loopback_tcps>:
#include "wizchip_conf.h"

#if LOOPBACK_MODE == LOOPBACK_MAIN_NOBLCOK

int32_t loopback_tcps(uint8_t sn, uint8_t* buf, uint16_t port)
{
 8004644:	b5b0      	push	{r4, r5, r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af04      	add	r7, sp, #16
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
 8004650:	4613      	mov	r3, r2
 8004652:	80bb      	strh	r3, [r7, #4]
   int32_t ret;
   uint16_t size = 0, sentsize=0;
 8004654:	2300      	movs	r3, #0
 8004656:	82fb      	strh	r3, [r7, #22]
 8004658:	2300      	movs	r3, #0
 800465a:	82bb      	strh	r3, [r7, #20]
#ifdef _LOOPBACK_DEBUG_
   uint8_t destip[4];
   uint16_t destport;
#endif

   switch(getSn_SR(sn))
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004662:	3308      	adds	r3, #8
 8004664:	019b      	lsls	r3, r3, #6
 8004666:	3308      	adds	r3, #8
 8004668:	4618      	mov	r0, r3
 800466a:	f000 f94d 	bl	8004908 <WIZCHIP_READ>
 800466e:	4603      	mov	r3, r0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b1c      	cmp	r3, #28
 8004674:	f200 8118 	bhi.w	80048a8 <loopback_tcps+0x264>
 8004678:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <loopback_tcps+0x3c>)
 800467a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467e:	bf00      	nop
 8004680:	0800488d 	.word	0x0800488d
 8004684:	080048a9 	.word	0x080048a9
 8004688:	080048a9 	.word	0x080048a9
 800468c:	080048a9 	.word	0x080048a9
 8004690:	080048a9 	.word	0x080048a9
 8004694:	080048a9 	.word	0x080048a9
 8004698:	080048a9 	.word	0x080048a9
 800469c:	080048a9 	.word	0x080048a9
 80046a0:	080048a9 	.word	0x080048a9
 80046a4:	080048a9 	.word	0x080048a9
 80046a8:	080048a9 	.word	0x080048a9
 80046ac:	080048a9 	.word	0x080048a9
 80046b0:	080048a9 	.word	0x080048a9
 80046b4:	080048a9 	.word	0x080048a9
 80046b8:	080048a9 	.word	0x080048a9
 80046bc:	080048a9 	.word	0x080048a9
 80046c0:	080048a9 	.word	0x080048a9
 80046c4:	080048a9 	.word	0x080048a9
 80046c8:	080048a9 	.word	0x080048a9
 80046cc:	0800486b 	.word	0x0800486b
 80046d0:	080048a9 	.word	0x080048a9
 80046d4:	080048a9 	.word	0x080048a9
 80046d8:	080048a9 	.word	0x080048a9
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080048a9 	.word	0x080048a9
 80046e4:	080048a9 	.word	0x080048a9
 80046e8:	080048a9 	.word	0x080048a9
 80046ec:	080048a9 	.word	0x080048a9
 80046f0:	08004849 	.word	0x08004849
   {
      case SOCK_ESTABLISHED :
         if(getSn_IR(sn) & Sn_IR_CON)
 80046f4:	79fb      	ldrb	r3, [r7, #7]
 80046f6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80046fa:	3308      	adds	r3, #8
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	3306      	adds	r3, #6
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f901 	bl	8004908 <WIZCHIP_READ>
 8004706:	4603      	mov	r3, r0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d05a      	beq.n	80047c8 <loopback_tcps+0x184>
         {
#ifdef _LOOPBACK_DEBUG_
			getSn_DIPR(sn, destip);
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004718:	3308      	adds	r3, #8
 800471a:	019b      	lsls	r3, r3, #6
 800471c:	3314      	adds	r3, #20
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8f2 	bl	8004908 <WIZCHIP_READ>
 8004724:	4603      	mov	r3, r0
 8004726:	0a1b      	lsrs	r3, r3, #8
 8004728:	b29b      	uxth	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	723b      	strb	r3, [r7, #8]
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004734:	3308      	adds	r3, #8
 8004736:	019b      	lsls	r3, r3, #6
 8004738:	3314      	adds	r3, #20
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f8e4 	bl	8004908 <WIZCHIP_READ>
 8004740:	4603      	mov	r3, r0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	727b      	strb	r3, [r7, #9]
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800474c:	3308      	adds	r3, #8
 800474e:	019b      	lsls	r3, r3, #6
 8004750:	3316      	adds	r3, #22
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f8d8 	bl	8004908 <WIZCHIP_READ>
 8004758:	4603      	mov	r3, r0
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	b29b      	uxth	r3, r3
 800475e:	b2db      	uxtb	r3, r3
 8004760:	72bb      	strb	r3, [r7, #10]
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004768:	3308      	adds	r3, #8
 800476a:	019b      	lsls	r3, r3, #6
 800476c:	3316      	adds	r3, #22
 800476e:	4618      	mov	r0, r3
 8004770:	f000 f8ca 	bl	8004908 <WIZCHIP_READ>
 8004774:	4603      	mov	r3, r0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	72fb      	strb	r3, [r7, #11]
			destport = getSn_DPORT(sn);
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004780:	3308      	adds	r3, #8
 8004782:	019b      	lsls	r3, r3, #6
 8004784:	3312      	adds	r3, #18
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f8be 	bl	8004908 <WIZCHIP_READ>
 800478c:	4603      	mov	r3, r0
 800478e:	81fb      	strh	r3, [r7, #14]

			printf("%d:Connected - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
 8004790:	79f9      	ldrb	r1, [r7, #7]
 8004792:	7a3b      	ldrb	r3, [r7, #8]
 8004794:	461c      	mov	r4, r3
 8004796:	7a7b      	ldrb	r3, [r7, #9]
 8004798:	461d      	mov	r5, r3
 800479a:	7abb      	ldrb	r3, [r7, #10]
 800479c:	461a      	mov	r2, r3
 800479e:	7afb      	ldrb	r3, [r7, #11]
 80047a0:	4618      	mov	r0, r3
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	9302      	str	r3, [sp, #8]
 80047a6:	9001      	str	r0, [sp, #4]
 80047a8:	9200      	str	r2, [sp, #0]
 80047aa:	462b      	mov	r3, r5
 80047ac:	4622      	mov	r2, r4
 80047ae:	4844      	ldr	r0, [pc, #272]	; (80048c0 <loopback_tcps+0x27c>)
 80047b0:	f002 f830 	bl	8006814 <iprintf>
#endif
			setSn_IR(sn,Sn_IR_CON);
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80047ba:	3308      	adds	r3, #8
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	3306      	adds	r3, #6
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f882 	bl	80048cc <WIZCHIP_WRITE>
         }
		 if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9b0 	bl	8004b30 <getSn_RX_RSR>
 80047d0:	4603      	mov	r3, r0
 80047d2:	82fb      	strh	r3, [r7, #22]
 80047d4:	8afb      	ldrh	r3, [r7, #22]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d068      	beq.n	80048ac <loopback_tcps+0x268>
         {
			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d902      	bls.n	80047e8 <loopback_tcps+0x1a4>
 80047e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047e6:	82fb      	strh	r3, [r7, #22]
			ret = recv(sn, buf, size);
 80047e8:	8afa      	ldrh	r2, [r7, #22]
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	6839      	ldr	r1, [r7, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fe2e 	bl	8005450 <recv>
 80047f4:	6138      	str	r0, [r7, #16]

			if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dc01      	bgt.n	8004800 <loopback_tcps+0x1bc>
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	e05b      	b.n	80048b8 <loopback_tcps+0x274>
			size = (uint16_t) ret;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	82fb      	strh	r3, [r7, #22]
			sentsize = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	82bb      	strh	r3, [r7, #20]

			while(size != sentsize)
 8004808:	e019      	b.n	800483e <loopback_tcps+0x1fa>
			{
				ret = send(sn, buf+sentsize, size-sentsize);
 800480a:	8abb      	ldrh	r3, [r7, #20]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	18d1      	adds	r1, r2, r3
 8004810:	8afa      	ldrh	r2, [r7, #22]
 8004812:	8abb      	ldrh	r3, [r7, #20]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	b29a      	uxth	r2, r3
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd0a 	bl	8005234 <send>
 8004820:	6138      	str	r0, [r7, #16]
				if(ret < 0)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da05      	bge.n	8004834 <loopback_tcps+0x1f0>
				{
					close(sn);
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fb58 	bl	8004ee0 <close>
					return ret;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	e041      	b.n	80048b8 <loopback_tcps+0x274>
				}
				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	b29a      	uxth	r2, r3
 8004838:	8abb      	ldrh	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	82bb      	strh	r3, [r7, #20]
			while(size != sentsize)
 800483e:	8afa      	ldrh	r2, [r7, #22]
 8004840:	8abb      	ldrh	r3, [r7, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d1e1      	bne.n	800480a <loopback_tcps+0x1c6>
			}
         }
         break;
 8004846:	e031      	b.n	80048ac <loopback_tcps+0x268>
      case SOCK_CLOSE_WAIT :
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:CloseWait\r\n",sn);
#endif
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fc78 	bl	8005140 <disconnect>
 8004850:	4603      	mov	r3, r0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <loopback_tcps+0x21a>
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	e02c      	b.n	80048b8 <loopback_tcps+0x274>
#ifdef _LOOPBACK_DEBUG_
         printf("%d:Socket Closed\r\n", sn);
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	4619      	mov	r1, r3
 8004862:	4818      	ldr	r0, [pc, #96]	; (80048c4 <loopback_tcps+0x280>)
 8004864:	f001 ffd6 	bl	8006814 <iprintf>
#endif
         break;
 8004868:	e025      	b.n	80048b6 <loopback_tcps+0x272>
      case SOCK_INIT :
#ifdef _LOOPBACK_DEBUG_
    	 printf("%d:Listen, TCP server loopback, port [%d]\r\n", sn, port);
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	88ba      	ldrh	r2, [r7, #4]
 800486e:	4619      	mov	r1, r3
 8004870:	4815      	ldr	r0, [pc, #84]	; (80048c8 <loopback_tcps+0x284>)
 8004872:	f001 ffcf 	bl	8006814 <iprintf>
#endif
         if( (ret = listen(sn)) != SOCK_OK) return ret;
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 fc03 	bl	8005084 <listen>
 800487e:	4603      	mov	r3, r0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d013      	beq.n	80048b0 <loopback_tcps+0x26c>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	e015      	b.n	80048b8 <loopback_tcps+0x274>
         break;
      case SOCK_CLOSED:
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:TCP server loopback start\r\n",sn);
#endif
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
 800488c:	88ba      	ldrh	r2, [r7, #4]
 800488e:	79f8      	ldrb	r0, [r7, #7]
 8004890:	2300      	movs	r3, #0
 8004892:	2101      	movs	r1, #1
 8004894:	f000 f9fa 	bl	8004c8c <socket>
 8004898:	4603      	mov	r3, r0
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d007      	beq.n	80048b4 <loopback_tcps+0x270>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	e007      	b.n	80048b8 <loopback_tcps+0x274>
#ifdef _LOOPBACK_DEBUG_
         //printf("%d:Socket opened\r\n",sn);
#endif
         break;
      default:
         break;
 80048a8:	bf00      	nop
 80048aa:	e004      	b.n	80048b6 <loopback_tcps+0x272>
         break;
 80048ac:	bf00      	nop
 80048ae:	e002      	b.n	80048b6 <loopback_tcps+0x272>
         break;
 80048b0:	bf00      	nop
 80048b2:	e000      	b.n	80048b6 <loopback_tcps+0x272>
         break;
 80048b4:	bf00      	nop
   }
   return 1;
 80048b6:	2301      	movs	r3, #1
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bdb0      	pop	{r4, r5, r7, pc}
 80048c0:	08007c98 	.word	0x08007c98
 80048c4:	08007cbc 	.word	0x08007cbc
 80048c8:	08007cd0 	.word	0x08007cd0

080048cc <WIZCHIP_WRITE>:
/***********************
 * Basic I/O  Function *
 ***********************/
 
void     WIZCHIP_WRITE(uint32_t AddrSel, uint16_t wb )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]
   WIZCHIP_CRITICAL_ENTER();
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <WIZCHIP_WRITE+0x38>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <WIZCHIP_WRITE+0x38>)
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if(_WIZCHIP_IO_BUS_WIDTH_ == 8)
      WIZCHIP.IF.BUS._write_data(AddrSel,  (uint8_t)(wb>>8));
      WIZCHIP.IF.BUS._write_data(WIZCHIP_OFFSET_INC(AddrSel,1),(uint8_t)wb);
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      WIZCHIP.IF.BUS._write_data(AddrSel,  wb);   
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <WIZCHIP_WRITE+0x38>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	887a      	ldrh	r2, [r7, #2]
 80048ea:	4611      	mov	r1, r2
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 80048f0:	4b04      	ldr	r3, [pc, #16]	; (8004904 <WIZCHIP_WRITE+0x38>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80048f6:	4b03      	ldr	r3, [pc, #12]	; (8004904 <WIZCHIP_WRITE+0x38>)
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	4798      	blx	r3
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000034 	.word	0x20000034

08004908 <WIZCHIP_READ>:

uint16_t WIZCHIP_READ(uint32_t AddrSel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
   uint16_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <WIZCHIP_READ+0x38>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004916:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <WIZCHIP_READ+0x38>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4798      	blx	r3
#if ( (_WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_) )
   #if (_WIZCHIP_IO_BUS_WIDTH_ == 8)
      ret = (((uint16_t)WIZCHIP.IF.BUS._read_data(AddrSel)) << 8) | 
            (((uint16_t)WIZCHIP.IF.BUS._read_data(WIZCHIP_OFFSET_INC(AddrSel,1))) & 0x00FF) ;   
   #elif(_WIZCHIP_IO_BUS_WIDTH_ == 16)
      ret = WIZCHIP.IF.BUS._read_data(AddrSel);
 800491c:	4b08      	ldr	r3, [pc, #32]	; (8004940 <WIZCHIP_READ+0x38>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
 8004924:	4603      	mov	r3, r0
 8004926:	81fb      	strh	r3, [r7, #14]
   #endif
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5300. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <WIZCHIP_READ+0x38>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <WIZCHIP_READ+0x38>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4798      	blx	r3
   return ret;
 8004934:	89fb      	ldrh	r3, [r7, #14]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000034 	.word	0x20000034

08004944 <setTMSR>:


void setTMSR(uint8_t sn,uint8_t tmsr)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	460a      	mov	r2, r1
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	4613      	mov	r3, r2
 8004952:	71bb      	strb	r3, [r7, #6]
   uint16_t tmem;
   tmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)));
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800495a:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 800495e:	3320      	adds	r3, #32
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ffd1 	bl	8004908 <WIZCHIP_READ>
 8004966:	4603      	mov	r3, r0
 8004968:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  tmem = (tmem & 0xFF00) | (((uint16_t)tmsr ) & 0x00FF) ;
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <setTMSR+0x46>
 8004974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004978:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800497c:	b21a      	sxth	r2, r3
 800497e:	79bb      	ldrb	r3, [r7, #6]
 8004980:	b21b      	sxth	r3, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	b21b      	sxth	r3, r3
 8004986:	81fb      	strh	r3, [r7, #14]
 8004988:	e009      	b.n	800499e <setTMSR+0x5a>
   else tmem =  (tmem & 0x00FF) | (((uint16_t)tmsr) << 8) ;
 800498a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	b21a      	sxth	r2, r3
 8004992:	79bb      	ldrb	r3, [r7, #6]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	b21b      	sxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	b21b      	sxth	r3, r3
 800499c:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE)),tmem);
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049a4:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80049a8:	3320      	adds	r3, #32
 80049aa:	461a      	mov	r2, r3
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7ff ff8b 	bl	80048cc <WIZCHIP_WRITE>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <getTMSR>:
   
uint8_t getTMSR(uint8_t sn)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	4603      	mov	r3, r0
 80049c6:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <getTMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) & 0x00FF);
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049d8:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80049dc:	3320      	adds	r3, #32
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff ff92 	bl	8004908 <WIZCHIP_READ>
 80049e4:	4603      	mov	r3, r0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e00c      	b.n	8004a04 <getTMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(TMS01R, (sn & 0xFE))) >> 8);
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80049f0:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 80049f4:	3320      	adds	r3, #32
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ff86 	bl	8004908 <WIZCHIP_READ>
 80049fc:	4603      	mov	r3, r0
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <setRMSR>:

void setRMSR(uint8_t sn,uint8_t rmsr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	460a      	mov	r2, r1
 8004a16:	71fb      	strb	r3, [r7, #7]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71bb      	strb	r3, [r7, #6]
   uint16_t rmem;
   rmem = WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)));
 8004a1c:	79fb      	ldrb	r3, [r7, #7]
 8004a1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a22:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004a26:	3328      	adds	r3, #40	; 0x28
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ff6d 	bl	8004908 <WIZCHIP_READ>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	81fb      	strh	r3, [r7, #14]
   if(sn & 0x01)  rmem = (rmem & 0xFF00) | (((uint16_t)rmsr ) & 0x00FF) ;
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <setRMSR+0x46>
 8004a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a44:	b21a      	sxth	r2, r3
 8004a46:	79bb      	ldrb	r3, [r7, #6]
 8004a48:	b21b      	sxth	r3, r3
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	81fb      	strh	r3, [r7, #14]
 8004a50:	e009      	b.n	8004a66 <setRMSR+0x5a>
   else rmem =  (rmem & 0x00FF) | (((uint16_t)rmsr) << 8) ;
 8004a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	b21a      	sxth	r2, r3
 8004a5a:	79bb      	ldrb	r3, [r7, #6]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	b21b      	sxth	r3, r3
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b21b      	sxth	r3, r3
 8004a64:	81fb      	strh	r3, [r7, #14]
   WIZCHIP_WRITE(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE)),rmem);
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004a6c:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004a70:	3328      	adds	r3, #40	; 0x28
 8004a72:	461a      	mov	r2, r3
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7ff ff27 	bl	80048cc <WIZCHIP_WRITE>
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <getRMSR>:
   
uint8_t getRMSR(uint8_t sn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
   if(sn & 0x01)
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <getRMSR+0x2c>
      return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) & 0x00FF);
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004aa0:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004aa4:	3328      	adds	r3, #40	; 0x28
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff ff2e 	bl	8004908 <WIZCHIP_READ>
 8004aac:	4603      	mov	r3, r0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e00c      	b.n	8004acc <getRMSR+0x46>
   return (uint8_t)(WIZCHIP_READ(WIZCHIP_OFFSET_INC(RMS01R, (sn & 0xFE))) >> 8);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ab8:	f103 5350 	add.w	r3, r3, #872415232	; 0x34000000
 8004abc:	3328      	adds	r3, #40	; 0x28
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff ff22 	bl	8004908 <WIZCHIP_READ>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	b2db      	uxtb	r3, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <getSn_TX_FSR>:

uint32_t getSn_TX_FSR(uint8_t sn)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
   uint32_t free_tx_size=0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60bb      	str	r3, [r7, #8]
   uint32_t free_tx_size1=1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004aec:	3308      	adds	r3, #8
 8004aee:	019b      	lsls	r3, r3, #6
 8004af0:	3324      	adds	r3, #36	; 0x24
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ff08 	bl	8004908 <WIZCHIP_READ>
 8004af8:	4603      	mov	r3, r0
 8004afa:	041c      	lsls	r4, r3, #16
                     (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),2))) & 0x0000FFFF);                           // read
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004b02:	3308      	adds	r3, #8
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	3326      	adds	r3, #38	; 0x26
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff fefd 	bl	8004908 <WIZCHIP_READ>
 8004b0e:	4603      	mov	r3, r0
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b10:	4323      	orrs	r3, r4
 8004b12:	60bb      	str	r3, [r7, #8]
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d002      	beq.n	8004b22 <getSn_TX_FSR+0x4e>
      free_tx_size1 = free_tx_size;             // save second value into first                                                   
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	60fb      	str	r3, [r7, #12]
      free_tx_size = (((uint32_t)WIZCHIP_READ(Sn_TX_FSR(sn))) << 16) | 
 8004b20:	e7e1      	b.n	8004ae6 <getSn_TX_FSR+0x12>
      if(free_tx_size == free_tx_size1) break;  // if first == sencond, Sn_TX_FSR value is valid.                                                          
 8004b22:	bf00      	nop
   }                                                                       
   return free_tx_size;                                                    
 8004b24:	68bb      	ldr	r3, [r7, #8]
}                                                                          
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd90      	pop	{r4, r7, pc}
	...

08004b30 <getSn_RX_RSR>:

uint32_t getSn_RX_RSR(uint8_t sn)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	71fb      	strb	r3, [r7, #7]
   uint32_t received_rx_size=0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
   uint32_t received_rx_size1=1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
   while(1)
   {
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004b48:	3308      	adds	r3, #8
 8004b4a:	019b      	lsls	r3, r3, #6
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff feda 	bl	8004908 <WIZCHIP_READ>
 8004b54:	4603      	mov	r3, r0
 8004b56:	041c      	lsls	r4, r3, #16
                         (((uint32_t)WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),2))) & 0x0000FFFF);
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004b5e:	3308      	adds	r3, #8
 8004b60:	019b      	lsls	r3, r3, #6
 8004b62:	332a      	adds	r3, #42	; 0x2a
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fecf 	bl	8004908 <WIZCHIP_READ>
 8004b6a:	4603      	mov	r3, r0
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004b6c:	4323      	orrs	r3, r4
 8004b6e:	60bb      	str	r3, [r7, #8]
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d002      	beq.n	8004b7e <getSn_RX_RSR+0x4e>
      received_rx_size1 = received_rx_size;                                      // if first == sencond, Sn_RX_RSR value is valid.
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60fb      	str	r3, [r7, #12]
      received_rx_size = (((uint32_t)WIZCHIP_READ(Sn_RX_RSR(sn))) << 16) | 
 8004b7c:	e7e1      	b.n	8004b42 <getSn_RX_RSR+0x12>
      if(received_rx_size == received_rx_size1) break;                                                                         
 8004b7e:	bf00      	nop
   }                                                                             // save second value into first                
   return received_rx_size + (uint32_t)((sock_pack_info[sn] & 0x02) ? 1 : 0);   
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	4a05      	ldr	r2, [pc, #20]	; (8004b98 <getSn_RX_RSR+0x68>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	105b      	asrs	r3, r3, #1
 8004b88:	f003 0201 	and.w	r2, r3, #1
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4413      	add	r3, r2
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd90      	pop	{r4, r7, pc}
 8004b98:	2000011c 	.word	0x2000011c

08004b9c <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	73fb      	strb	r3, [r7, #15]
   uint32_t i = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
   if(len == 0)  return;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <wiz_send_data+0x60>
   
   for(i = 0; i < len ; i += 2)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e01b      	b.n	8004bf2 <wiz_send_data+0x56>
      setSn_TX_FIFOR(sn, (((uint16_t)wizdata[i]) << 8) | (((uint16_t)wizdata[i+1]) & 0x00FF))
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	019b      	lsls	r3, r3, #6
 8004bc4:	332e      	adds	r3, #46	; 0x2e
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	b21a      	sxth	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	440b      	add	r3, r1
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	b21b      	sxth	r3, r3
 8004be0:	4313      	orrs	r3, r2
 8004be2:	b21b      	sxth	r3, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	f7ff fe70 	bl	80048cc <WIZCHIP_WRITE>
   for(i = 0; i < len ; i += 2)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3302      	adds	r3, #2
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3df      	bcc.n	8004bba <wiz_send_data+0x1e>
 8004bfa:	e000      	b.n	8004bfe <wiz_send_data+0x62>
   if(len == 0)  return;
 8004bfc:	bf00      	nop
}
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint32_t len)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	73fb      	strb	r3, [r7, #15]
   uint16_t rd = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	82fb      	strh	r3, [r7, #22]
   uint32_t i = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
   
   if(len == 0) return;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02e      	beq.n	8004c7e <wiz_recv_data+0x7a>
      
   for(i = 0; i < len; i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e021      	b.n	8004c6a <wiz_recv_data+0x66>
   {
      if((i & 0x01)==0)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d113      	bne.n	8004c58 <wiz_recv_data+0x54>
      {
         rd = getSn_RX_FIFOR(sn);
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004c36:	3308      	adds	r3, #8
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	3330      	adds	r3, #48	; 0x30
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fe63 	bl	8004908 <WIZCHIP_READ>
 8004c42:	4603      	mov	r3, r0
 8004c44:	82fb      	strh	r3, [r7, #22]
         wizdata[i]   = (uint8_t)(rd >> 8);
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	b299      	uxth	r1, r3
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4413      	add	r3, r2
 8004c52:	b2ca      	uxtb	r2, r1
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e005      	b.n	8004c64 <wiz_recv_data+0x60>
      }
      else  wizdata[i] = (uint8_t)rd;  // For checking the memory access violation
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	8afa      	ldrh	r2, [r7, #22]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < len; i++)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3301      	adds	r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d3d9      	bcc.n	8004c26 <wiz_recv_data+0x22>
   }
   sock_remained_byte[sn] = (uint8_t)rd; // back up the remaind fifo byte.
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	8afa      	ldrh	r2, [r7, #22]
 8004c76:	b2d1      	uxtb	r1, r2
 8004c78:	4a03      	ldr	r2, [pc, #12]	; (8004c88 <wiz_recv_data+0x84>)
 8004c7a:	54d1      	strb	r1, [r2, r3]
 8004c7c:	e000      	b.n	8004c80 <wiz_recv_data+0x7c>
   if(len == 0) return;
 8004c7e:	bf00      	nop
}
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000124 	.word	0x20000124

08004c8c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	71fb      	strb	r3, [r7, #7]
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	71bb      	strb	r3, [r7, #6]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	80bb      	strh	r3, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d902      	bls.n	8004cb6 <socket+0x2a>
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb4:	e102      	b.n	8004ebc <socket+0x230>
	switch(protocol)
 8004cb6:	79bb      	ldrb	r3, [r7, #6]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d005      	beq.n	8004cc8 <socket+0x3c>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	dd32      	ble.n	8004d26 <socket+0x9a>
 8004cc0:	3b02      	subs	r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d82f      	bhi.n	8004d26 <socket+0x9a>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8004cc6:	e032      	b.n	8004d2e <socket+0xa2>
            getSIPR((uint8_t*)&taddr);
 8004cc8:	487e      	ldr	r0, [pc, #504]	; (8004ec4 <socket+0x238>)
 8004cca:	f7ff fe1d 	bl	8004908 <WIZCHIP_READ>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	4879      	ldr	r0, [pc, #484]	; (8004ec4 <socket+0x238>)
 8004cde:	f7ff fe13 	bl	8004908 <WIZCHIP_READ>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f107 030c 	add.w	r3, r7, #12
 8004cea:	3301      	adds	r3, #1
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	4875      	ldr	r0, [pc, #468]	; (8004ec8 <socket+0x23c>)
 8004cf2:	f7ff fe09 	bl	8004908 <WIZCHIP_READ>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f107 030c 	add.w	r3, r7, #12
 8004d00:	3302      	adds	r3, #2
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	4870      	ldr	r0, [pc, #448]	; (8004ec8 <socket+0x23c>)
 8004d08:	f7ff fdfe 	bl	8004908 <WIZCHIP_READ>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	3303      	adds	r3, #3
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <socket+0xa0>
 8004d20:	f06f 0302 	mvn.w	r3, #2
 8004d24:	e0ca      	b.n	8004ebc <socket+0x230>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004d26:	f06f 0304 	mvn.w	r3, #4
 8004d2a:	e0c7      	b.n	8004ebc <socket+0x230>
	    break;
 8004d2c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <socket+0xb2>
 8004d38:	f06f 0305 	mvn.w	r3, #5
 8004d3c:	e0be      	b.n	8004ebc <socket+0x230>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d019      	beq.n	8004d78 <socket+0xec>
	{
   	switch(protocol)
 8004d44:	79bb      	ldrb	r3, [r7, #6]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d002      	beq.n	8004d50 <socket+0xc4>
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d008      	beq.n	8004d60 <socket+0xd4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004d4e:	e018      	b.n	8004d82 <socket+0xf6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK|SF_TCP_ALIGN))==0) return SOCKERR_SOCKFLAG;
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 0323 	and.w	r3, r3, #35	; 0x23
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d110      	bne.n	8004d7c <socket+0xf0>
 8004d5a:	f06f 0305 	mvn.w	r3, #5
 8004d5e:	e0ad      	b.n	8004ebc <socket+0x230>
   	      if(flag & SF_IGMP_VER2)
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <socket+0xf4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db06      	blt.n	8004d80 <socket+0xf4>
 8004d72:	f06f 0305 	mvn.w	r3, #5
 8004d76:	e0a1      	b.n	8004ebc <socket+0x230>
   	}
   }
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <socket+0xf6>
   	      break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <socket+0xf6>
   	      break;
 8004d80:	bf00      	nop
	close(sn);
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f8ab 	bl	8004ee0 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004d90:	3308      	adds	r3, #8
 8004d92:	019b      	lsls	r3, r3, #6
 8004d94:	4618      	mov	r0, r3
 8004d96:	79bb      	ldrb	r3, [r7, #6]
 8004d98:	b21a      	sxth	r2, r3
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004da2:	b21b      	sxth	r3, r3
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b21a      	sxth	r2, r3
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	01db      	lsls	r3, r3, #7
 8004dac:	b21b      	sxth	r3, r3
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	f7ff fd86 	bl	80048cc <WIZCHIP_WRITE>
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    #endif
	if(!port)
 8004dc0:	88bb      	ldrh	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d110      	bne.n	8004de8 <socket+0x15c>
	{
	   port = sock_any_port++;
 8004dc6:	4b41      	ldr	r3, [pc, #260]	; (8004ecc <socket+0x240>)
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	b291      	uxth	r1, r2
 8004dce:	4a3f      	ldr	r2, [pc, #252]	; (8004ecc <socket+0x240>)
 8004dd0:	8011      	strh	r1, [r2, #0]
 8004dd2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004dd4:	4b3d      	ldr	r3, [pc, #244]	; (8004ecc <socket+0x240>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d103      	bne.n	8004de8 <socket+0x15c>
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <socket+0x240>)
 8004de2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004de6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004dee:	3308      	adds	r3, #8
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	330a      	adds	r3, #10
 8004df4:	461a      	mov	r2, r3
 8004df6:	88bb      	ldrh	r3, [r7, #4]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7ff fd66 	bl	80048cc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004e06:	3308      	adds	r3, #8
 8004e08:	019b      	lsls	r3, r3, #6
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fd5c 	bl	80048cc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004e14:	bf00      	nop
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	019b      	lsls	r3, r3, #6
 8004e20:	3302      	adds	r3, #2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fd70 	bl	8004908 <WIZCHIP_READ>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f2      	bne.n	8004e16 <socket+0x18a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	2201      	movs	r2, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	b21b      	sxth	r3, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	b21a      	sxth	r2, r3
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <socket+0x244>)
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	4013      	ands	r3, r2
 8004e46:	b21b      	sxth	r3, r3
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <socket+0x244>)
 8004e4c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004e4e:	78fb      	ldrb	r3, [r7, #3]
 8004e50:	f003 0201 	and.w	r2, r3, #1
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	b21a      	sxth	r2, r3
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <socket+0x244>)
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b21b      	sxth	r3, r3
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b21b      	sxth	r3, r3
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <socket+0x244>)
 8004e6a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	b21b      	sxth	r3, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	b21a      	sxth	r2, r3
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <socket+0x248>)
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b21b      	sxth	r3, r3
 8004e80:	4013      	ands	r3, r2
 8004e82:	b21b      	sxth	r3, r3
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <socket+0x248>)
 8004e88:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <socket+0x24c>)
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	4a11      	ldr	r2, [pc, #68]	; (8004edc <socket+0x250>)
 8004e98:	2100      	movs	r1, #0
 8004e9a:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004e9c:	bf00      	nop
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	3308      	adds	r3, #8
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fd2c 	bl	8004908 <WIZCHIP_READ>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f2      	beq.n	8004e9e <socket+0x212>
   return (int8_t)sn;
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd90      	pop	{r4, r7, pc}
 8004ec4:	34000018 	.word	0x34000018
 8004ec8:	3400001a 	.word	0x3400001a
 8004ecc:	20000032 	.word	0x20000032
 8004ed0:	20000108 	.word	0x20000108
 8004ed4:	2000010a 	.word	0x2000010a
 8004ed8:	2000010c 	.word	0x2000010c
 8004edc:	2000011c 	.word	0x2000011c

08004ee0 <close>:

int8_t close(uint8_t sn)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d902      	bls.n	8004ef6 <close+0x16>
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ef4:	e0b9      	b.n	800506a <close+0x18a>
//A20160426 : Applied the erratum 1 of W5300
#if   (_WIZCHIP_ == 5300) 
   //M20160503 : Wrong socket parameter. s -> sn 
   //if( ((getSn_MR(s)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(s) != getSn_TxMAX(s)) ) 
   if( ((getSn_MR(sn)& 0x0F) == Sn_MR_TCP) && (getSn_TX_FSR(sn) != getSn_TxMAX(sn)) ) 
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004efc:	3308      	adds	r3, #8
 8004efe:	019b      	lsls	r3, r3, #6
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fd01 	bl	8004908 <WIZCHIP_READ>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f003 030f 	and.w	r3, r3, #15
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d154      	bne.n	8004fba <close+0xda>
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fdde 	bl	8004ad4 <getSn_TX_FSR>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff fd4e 	bl	80049be <getTMSR>
 8004f22:	4603      	mov	r3, r0
 8004f24:	029b      	lsls	r3, r3, #10
 8004f26:	429c      	cmp	r4, r3
 8004f28:	d047      	beq.n	8004fba <close+0xda>
   { 
      uint8_t destip[4] = {0, 0, 0, 1};
 8004f2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f2e:	60fb      	str	r3, [r7, #12]
      //     if (getSn_TX_FSR(s) == getSn_TxMAX(s)) continue;
      // 
      //M20160503 : The socket() of close() calls close() itself again. It occures a infinite loop - close()->socket()->close()->socket()-> ~
      //socket(s,Sn_MR_UDP,0x3000,0);
      //sendto(s,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
      setSn_MR(sn,Sn_MR_UDP);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004f36:	3308      	adds	r3, #8
 8004f38:	019b      	lsls	r3, r3, #6
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fcc5 	bl	80048cc <WIZCHIP_WRITE>
      setSn_PORTR(sn, 0x3000);
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004f48:	3308      	adds	r3, #8
 8004f4a:	019b      	lsls	r3, r3, #6
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fcba 	bl	80048cc <WIZCHIP_WRITE>
      setSn_CR(sn,Sn_CR_OPEN);
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004f5e:	3308      	adds	r3, #8
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	3302      	adds	r3, #2
 8004f64:	2101      	movs	r1, #1
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fcb0 	bl	80048cc <WIZCHIP_WRITE>
      while(getSn_CR(sn) != 0);
 8004f6c:	bf00      	nop
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004f74:	3308      	adds	r3, #8
 8004f76:	019b      	lsls	r3, r3, #6
 8004f78:	3302      	adds	r3, #2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fcc4 	bl	8004908 <WIZCHIP_READ>
 8004f80:	4603      	mov	r3, r0
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f2      	bne.n	8004f6e <close+0x8e>
      while(getSn_SR(sn) != SOCK_UDP);
 8004f88:	bf00      	nop
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004f90:	3308      	adds	r3, #8
 8004f92:	019b      	lsls	r3, r3, #6
 8004f94:	3308      	adds	r3, #8
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fcb6 	bl	8004908 <WIZCHIP_READ>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b22      	cmp	r3, #34	; 0x22
 8004fa2:	d1f2      	bne.n	8004f8a <close+0xaa>
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
 8004fa4:	f107 030c 	add.w	r3, r7, #12
 8004fa8:	f107 010c 	add.w	r1, r7, #12
 8004fac:	79f8      	ldrb	r0, [r7, #7]
 8004fae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004fb2:	9200      	str	r2, [sp, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f000 fbbf 	bl	8005738 <sendto>
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	019b      	lsls	r3, r3, #6
 8004fc4:	3302      	adds	r3, #2
 8004fc6:	2110      	movs	r1, #16
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fc7f 	bl	80048cc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004fce:	bf00      	nop
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	019b      	lsls	r3, r3, #6
 8004fda:	3302      	adds	r3, #2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fc93 	bl	8004908 <WIZCHIP_READ>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f2      	bne.n	8004fd0 <close+0xf0>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	019b      	lsls	r3, r3, #6
 8004ff4:	3306      	adds	r3, #6
 8004ff6:	21ff      	movs	r1, #255	; 0xff
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fc67 	bl	80048cc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	2201      	movs	r2, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	b21b      	sxth	r3, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	b21a      	sxth	r2, r3
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <close+0x194>)
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	b21b      	sxth	r3, r3
 8005012:	4013      	ands	r3, r2
 8005014:	b21b      	sxth	r3, r3
 8005016:	b29a      	uxth	r2, r3
 8005018:	4b16      	ldr	r3, [pc, #88]	; (8005074 <close+0x194>)
 800501a:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	2201      	movs	r2, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	b21b      	sxth	r3, r3
 8005026:	43db      	mvns	r3, r3
 8005028:	b21a      	sxth	r2, r3
 800502a:	4b13      	ldr	r3, [pc, #76]	; (8005078 <close+0x198>)
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b21b      	sxth	r3, r3
 8005030:	4013      	ands	r3, r2
 8005032:	b21b      	sxth	r3, r3
 8005034:	b29a      	uxth	r2, r3
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <close+0x198>)
 8005038:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	4a0f      	ldr	r2, [pc, #60]	; (800507c <close+0x19c>)
 800503e:	2100      	movs	r1, #0
 8005040:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <close+0x1a0>)
 8005048:	2100      	movs	r1, #0
 800504a:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800504c:	bf00      	nop
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005054:	3308      	adds	r3, #8
 8005056:	019b      	lsls	r3, r3, #6
 8005058:	3308      	adds	r3, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fc54 	bl	8004908 <WIZCHIP_READ>
 8005060:	4603      	mov	r3, r0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f2      	bne.n	800504e <close+0x16e>
	return SOCK_OK;
 8005068:	2301      	movs	r3, #1
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bd90      	pop	{r4, r7, pc}
 8005072:	bf00      	nop
 8005074:	20000108 	.word	0x20000108
 8005078:	2000010a 	.word	0x2000010a
 800507c:	2000010c 	.word	0x2000010c
 8005080:	2000011c 	.word	0x2000011c

08005084 <listen>:

int8_t listen(uint8_t sn)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d902      	bls.n	800509a <listen+0x16>
 8005094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005098:	e04d      	b.n	8005136 <listen+0xb2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050a0:	3308      	adds	r3, #8
 80050a2:	019b      	lsls	r3, r3, #6
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fc2f 	bl	8004908 <WIZCHIP_READ>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d002      	beq.n	80050ba <listen+0x36>
 80050b4:	f06f 0304 	mvn.w	r3, #4
 80050b8:	e03d      	b.n	8005136 <listen+0xb2>
	CHECK_SOCKINIT();
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050c0:	3308      	adds	r3, #8
 80050c2:	019b      	lsls	r3, r3, #6
 80050c4:	3308      	adds	r3, #8
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fc1e 	bl	8004908 <WIZCHIP_READ>
 80050cc:	4603      	mov	r3, r0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b13      	cmp	r3, #19
 80050d2:	d002      	beq.n	80050da <listen+0x56>
 80050d4:	f06f 0302 	mvn.w	r3, #2
 80050d8:	e02d      	b.n	8005136 <listen+0xb2>
	setSn_CR(sn,Sn_CR_LISTEN);
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050e0:	3308      	adds	r3, #8
 80050e2:	019b      	lsls	r3, r3, #6
 80050e4:	3302      	adds	r3, #2
 80050e6:	2102      	movs	r1, #2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff fbef 	bl	80048cc <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80050ee:	bf00      	nop
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80050f6:	3308      	adds	r3, #8
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	3302      	adds	r3, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fc03 	bl	8004908 <WIZCHIP_READ>
 8005102:	4603      	mov	r3, r0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f2      	bne.n	80050f0 <listen+0x6c>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800510a:	e006      	b.n	800511a <listen+0x96>
   {
         close(sn);
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fee6 	bl	8004ee0 <close>
         return SOCKERR_SOCKCLOSED;
 8005114:	f06f 0303 	mvn.w	r3, #3
 8005118:	e00d      	b.n	8005136 <listen+0xb2>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005120:	3308      	adds	r3, #8
 8005122:	019b      	lsls	r3, r3, #6
 8005124:	3308      	adds	r3, #8
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fbee 	bl	8004908 <WIZCHIP_READ>
 800512c:	4603      	mov	r3, r0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b14      	cmp	r3, #20
 8005132:	d1eb      	bne.n	800510c <listen+0x88>
   }
   return SOCK_OK;
 8005134:	2301      	movs	r3, #1
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d902      	bls.n	8005156 <disconnect+0x16>
 8005150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005154:	e066      	b.n	8005224 <disconnect+0xe4>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800515c:	3308      	adds	r3, #8
 800515e:	019b      	lsls	r3, r3, #6
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fbd1 	bl	8004908 <WIZCHIP_READ>
 8005166:	4603      	mov	r3, r0
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	2b01      	cmp	r3, #1
 800516e:	d002      	beq.n	8005176 <disconnect+0x36>
 8005170:	f06f 0304 	mvn.w	r3, #4
 8005174:	e056      	b.n	8005224 <disconnect+0xe4>
	setSn_CR(sn,Sn_CR_DISCON);
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800517c:	3308      	adds	r3, #8
 800517e:	019b      	lsls	r3, r3, #6
 8005180:	3302      	adds	r3, #2
 8005182:	2108      	movs	r1, #8
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fba1 	bl	80048cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800518a:	bf00      	nop
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005192:	3308      	adds	r3, #8
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	3302      	adds	r3, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fbb5 	bl	8004908 <WIZCHIP_READ>
 800519e:	4603      	mov	r3, r0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f2      	bne.n	800518c <disconnect+0x4c>
	sock_is_sending &= ~(1<<sn);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	b21b      	sxth	r3, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	b21a      	sxth	r2, r3
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <disconnect+0xec>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b21b      	sxth	r3, r3
 80051ba:	4013      	ands	r3, r2
 80051bc:	b21b      	sxth	r3, r3
 80051be:	b29a      	uxth	r2, r3
 80051c0:	4b1a      	ldr	r3, [pc, #104]	; (800522c <disconnect+0xec>)
 80051c2:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <disconnect+0xf0>)
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	fa42 f303 	asr.w	r3, r2, r3
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d017      	beq.n	8005208 <disconnect+0xc8>
 80051d8:	2300      	movs	r3, #0
 80051da:	e023      	b.n	8005224 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80051e2:	3308      	adds	r3, #8
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	3306      	adds	r3, #6
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fb8d 	bl	8004908 <WIZCHIP_READ>
 80051ee:	4603      	mov	r3, r0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <disconnect+0xc8>
	   {
	      close(sn);
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fe6f 	bl	8004ee0 <close>
	      return SOCKERR_TIMEOUT;
 8005202:	f06f 030c 	mvn.w	r3, #12
 8005206:	e00d      	b.n	8005224 <disconnect+0xe4>
	while(getSn_SR(sn) != SOCK_CLOSED)
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800520e:	3308      	adds	r3, #8
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	3308      	adds	r3, #8
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fb77 	bl	8004908 <WIZCHIP_READ>
 800521a:	4603      	mov	r3, r0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1dc      	bne.n	80051dc <disconnect+0x9c>
	   }
	}
	return SOCK_OK;
 8005222:	2301      	movs	r3, #1
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	2000010a 	.word	0x2000010a
 8005230:	20000108 	.word	0x20000108

08005234 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	71fb      	strb	r3, [r7, #7]
 8005240:	4613      	mov	r3, r2
 8005242:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005248:	2300      	movs	r3, #0
 800524a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800524c:	79fb      	ldrb	r3, [r7, #7]
 800524e:	2b08      	cmp	r3, #8
 8005250:	d902      	bls.n	8005258 <send+0x24>
 8005252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005256:	e0f3      	b.n	8005440 <send+0x20c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800525e:	3308      	adds	r3, #8
 8005260:	019b      	lsls	r3, r3, #6
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fb50 	bl	8004908 <WIZCHIP_READ>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	2b01      	cmp	r3, #1
 8005270:	d002      	beq.n	8005278 <send+0x44>
 8005272:	f06f 0304 	mvn.w	r3, #4
 8005276:	e0e3      	b.n	8005440 <send+0x20c>
   CHECK_SOCKDATA();
 8005278:	88bb      	ldrh	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <send+0x50>
 800527e:	f06f 030d 	mvn.w	r3, #13
 8005282:	e0dd      	b.n	8005440 <send+0x20c>
   tmp = getSn_SR(sn);
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800528a:	3308      	adds	r3, #8
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	3308      	adds	r3, #8
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fb39 	bl	8004908 <WIZCHIP_READ>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800529a:	7bfb      	ldrb	r3, [r7, #15]
 800529c:	2b17      	cmp	r3, #23
 800529e:	d005      	beq.n	80052ac <send+0x78>
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	2b1c      	cmp	r3, #28
 80052a4:	d002      	beq.n	80052ac <send+0x78>
 80052a6:	f06f 0306 	mvn.w	r3, #6
 80052aa:	e0c9      	b.n	8005440 <send+0x20c>
   if( sock_is_sending & (1<<sn) )
 80052ac:	4b66      	ldr	r3, [pc, #408]	; (8005448 <send+0x214>)
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	fa42 f303 	asr.w	r3, r2, r3
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d037      	beq.n	8005330 <send+0xfc>
   {
      tmp = getSn_IR(sn);
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80052c6:	3308      	adds	r3, #8
 80052c8:	019b      	lsls	r3, r3, #6
 80052ca:	3306      	adds	r3, #6
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fb1b 	bl	8004908 <WIZCHIP_READ>
 80052d2:	4603      	mov	r3, r0
 80052d4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d019      	beq.n	8005314 <send+0xe0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80052e0:	79fb      	ldrb	r3, [r7, #7]
 80052e2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80052e6:	3308      	adds	r3, #8
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	3306      	adds	r3, #6
 80052ec:	2110      	movs	r1, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff faec 	bl	80048cc <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	2201      	movs	r2, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	b21a      	sxth	r2, r3
 8005302:	4b51      	ldr	r3, [pc, #324]	; (8005448 <send+0x214>)
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b21b      	sxth	r3, r3
 8005308:	4013      	ands	r3, r2
 800530a:	b21b      	sxth	r3, r3
 800530c:	b29a      	uxth	r2, r3
 800530e:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <send+0x214>)
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e00d      	b.n	8005330 <send+0xfc>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d006      	beq.n	800532c <send+0xf8>
      {
         close(sn);
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fddd 	bl	8004ee0 <close>
         return SOCKERR_TIMEOUT;
 8005326:	f06f 030c 	mvn.w	r3, #12
 800532a:	e089      	b.n	8005440 <send+0x20c>
      }
      else return SOCK_BUSY;
 800532c:	2300      	movs	r3, #0
 800532e:	e087      	b.n	8005440 <send+0x20c>
   }
   freesize = getSn_TxMAX(sn);
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fb43 	bl	80049be <getTMSR>
 8005338:	4603      	mov	r3, r0
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005340:	88ba      	ldrh	r2, [r7, #4]
 8005342:	89bb      	ldrh	r3, [r7, #12]
 8005344:	429a      	cmp	r2, r3
 8005346:	d901      	bls.n	800534c <send+0x118>
 8005348:	89bb      	ldrh	r3, [r7, #12]
 800534a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fbc0 	bl	8004ad4 <getSn_TX_FSR>
 8005354:	4603      	mov	r3, r0
 8005356:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800535e:	3308      	adds	r3, #8
 8005360:	019b      	lsls	r3, r3, #6
 8005362:	3308      	adds	r3, #8
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff facf 	bl	8004908 <WIZCHIP_READ>
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b17      	cmp	r3, #23
 8005372:	d009      	beq.n	8005388 <send+0x154>
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	2b1c      	cmp	r3, #28
 8005378:	d006      	beq.n	8005388 <send+0x154>
      {
         close(sn);
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fdaf 	bl	8004ee0 <close>
         return SOCKERR_SOCKSTATUS;
 8005382:	f06f 0306 	mvn.w	r3, #6
 8005386:	e05b      	b.n	8005440 <send+0x20c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <send+0x218>)
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	fa42 f303 	asr.w	r3, r2, r3
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <send+0x174>
 800539c:	88ba      	ldrh	r2, [r7, #4]
 800539e:	89bb      	ldrh	r3, [r7, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d901      	bls.n	80053a8 <send+0x174>
 80053a4:	2300      	movs	r3, #0
 80053a6:	e04b      	b.n	8005440 <send+0x20c>
      if(len <= freesize) break;
 80053a8:	88ba      	ldrh	r2, [r7, #4]
 80053aa:	89bb      	ldrh	r3, [r7, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d900      	bls.n	80053b2 <send+0x17e>
      freesize = getSn_TX_FSR(sn);
 80053b0:	e7cc      	b.n	800534c <send+0x118>
      if(len <= freesize) break;
 80053b2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80053b4:	88ba      	ldrh	r2, [r7, #4]
 80053b6:	79fb      	ldrb	r3, [r7, #7]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7ff fbee 	bl	8004b9c <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053c6:	3308      	adds	r3, #8
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	3320      	adds	r3, #32
 80053cc:	461a      	mov	r2, r3
 80053ce:	88bb      	ldrh	r3, [r7, #4]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff fa78 	bl	80048cc <WIZCHIP_WRITE>
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053e2:	3308      	adds	r3, #8
 80053e4:	019b      	lsls	r3, r3, #6
 80053e6:	3322      	adds	r3, #34	; 0x22
 80053e8:	461a      	mov	r2, r3
 80053ea:	88bb      	ldrh	r3, [r7, #4]
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7ff fa6c 	bl	80048cc <WIZCHIP_WRITE>
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80053fa:	3308      	adds	r3, #8
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	3302      	adds	r3, #2
 8005400:	2120      	movs	r1, #32
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fa62 	bl	80048cc <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005408:	bf00      	nop
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005410:	3308      	adds	r3, #8
 8005412:	019b      	lsls	r3, r3, #6
 8005414:	3302      	adds	r3, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff fa76 	bl	8004908 <WIZCHIP_READ>
 800541c:	4603      	mov	r3, r0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f2      	bne.n	800540a <send+0x1d6>
   sock_is_sending |= (1 << sn);
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2201      	movs	r2, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	b21a      	sxth	r2, r3
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <send+0x214>)
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b21b      	sxth	r3, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	b21b      	sxth	r3, r3
 8005438:	b29a      	uxth	r2, r3
 800543a:	4b03      	ldr	r3, [pc, #12]	; (8005448 <send+0x214>)
 800543c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800543e:	88bb      	ldrh	r3, [r7, #4]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	2000010a 	.word	0x2000010a
 800544c:	20000108 	.word	0x20000108

08005450 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
 800545c:	4613      	mov	r3, r2
 800545e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	737b      	strb	r3, [r7, #13]
   uint16_t recvsize = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	81fb      	strh	r3, [r7, #14]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d902      	bls.n	8005474 <recv+0x24>
 800546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005472:	e154      	b.n	800571e <recv+0x2ce>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800547a:	3308      	adds	r3, #8
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fa42 	bl	8004908 <WIZCHIP_READ>
 8005484:	4603      	mov	r3, r0
 8005486:	f003 030f 	and.w	r3, r3, #15
 800548a:	2b01      	cmp	r3, #1
 800548c:	d002      	beq.n	8005494 <recv+0x44>
 800548e:	f06f 0304 	mvn.w	r3, #4
 8005492:	e144      	b.n	800571e <recv+0x2ce>
   CHECK_SOCKDATA();
 8005494:	88bb      	ldrh	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d102      	bne.n	80054a0 <recv+0x50>
 800549a:	f06f 030d 	mvn.w	r3, #13
 800549e:	e13e      	b.n	800571e <recv+0x2ce>
   
   recvsize = getSn_RxMAX(sn);
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff faef 	bl	8004a86 <getRMSR>
 80054a8:	4603      	mov	r3, r0
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	029b      	lsls	r3, r3, #10
 80054ae:	81fb      	strh	r3, [r7, #14]
   if(recvsize < len) len = recvsize;
 80054b0:	89fa      	ldrh	r2, [r7, #14]
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d201      	bcs.n	80054bc <recv+0x6c>
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	80bb      	strh	r3, [r7, #4]
      
//A20150601 : For Integrating with W5300
#if _WIZCHIP_ == 5300
   //sock_pack_info[sn] = PACK_COMPLETED;    // for clear      
   if(sock_remained_size[sn] == 0)
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	4a9a      	ldr	r2, [pc, #616]	; (8005728 <recv+0x2d8>)
 80054c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d14a      	bne.n	800555e <recv+0x10e>
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fb30 	bl	8004b30 <getSn_RX_RSR>
 80054d0:	4603      	mov	r3, r0
 80054d2:	81fb      	strh	r3, [r7, #14]
         tmp = getSn_SR(sn);
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80054da:	3308      	adds	r3, #8
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	3308      	adds	r3, #8
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff fa11 	bl	8004908 <WIZCHIP_READ>
 80054e6:	4603      	mov	r3, r0
 80054e8:	737b      	strb	r3, [r7, #13]
         if (tmp != SOCK_ESTABLISHED)
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	2b17      	cmp	r3, #23
 80054ee:	d020      	beq.n	8005532 <recv+0xe2>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80054f0:	7b7b      	ldrb	r3, [r7, #13]
 80054f2:	2b1c      	cmp	r3, #28
 80054f4:	d116      	bne.n	8005524 <recv+0xd4>
            {
               if(recvsize != 0) break;
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d12d      	bne.n	8005558 <recv+0x108>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff fae8 	bl	8004ad4 <getSn_TX_FSR>
 8005504:	4604      	mov	r4, r0
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fa58 	bl	80049be <getTMSR>
 800550e:	4603      	mov	r3, r0
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	429c      	cmp	r4, r3
 8005514:	d10d      	bne.n	8005532 <recv+0xe2>
               {
                  close(sn);
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fce1 	bl	8004ee0 <close>
                  return SOCKERR_SOCKSTATUS;
 800551e:	f06f 0306 	mvn.w	r3, #6
 8005522:	e0fc      	b.n	800571e <recv+0x2ce>
               }
            }
            else
            {
               close(sn);
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fcda 	bl	8004ee0 <close>
               return SOCKERR_SOCKSTATUS;
 800552c:	f06f 0306 	mvn.w	r3, #6
 8005530:	e0f5      	b.n	800571e <recv+0x2ce>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005532:	4b7e      	ldr	r3, [pc, #504]	; (800572c <recv+0x2dc>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	fa42 f303 	asr.w	r3, r2, r3
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <recv+0x100>
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <recv+0x100>
 800554c:	2300      	movs	r3, #0
 800554e:	e0e6      	b.n	800571e <recv+0x2ce>
         if(recvsize != 0) break;
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <recv+0x10c>
         recvsize = getSn_RX_RSR(sn);
 8005556:	e7b7      	b.n	80054c8 <recv+0x78>
               if(recvsize != 0) break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <recv+0x10e>
         if(recvsize != 0) break;
 800555c:	bf00      	nop
   }
#endif

//A20150601 : For integrating with W5300
#if _WIZCHIP_ == 5300
   if((sock_remained_size[sn] == 0) || (getSn_MR(sn) & Sn_MR_ALIGN))
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	4a71      	ldr	r2, [pc, #452]	; (8005728 <recv+0x2d8>)
 8005562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00c      	beq.n	8005584 <recv+0x134>
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005570:	3308      	adds	r3, #8
 8005572:	019b      	lsls	r3, r3, #6
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff f9c7 	bl	8004908 <WIZCHIP_READ>
 800557a:	4603      	mov	r3, r0
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d038      	beq.n	80055f6 <recv+0x1a6>
   {
      mr = getMR();
 8005584:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8005588:	f7ff f9be 	bl	8004908 <WIZCHIP_READ>
 800558c:	4603      	mov	r3, r0
 800558e:	817b      	strh	r3, [r7, #10]
      if((getSn_MR(sn) & Sn_MR_ALIGN)==0)
 8005590:	79fb      	ldrb	r3, [r7, #7]
 8005592:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005596:	3308      	adds	r3, #8
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f9b4 	bl	8004908 <WIZCHIP_READ>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d120      	bne.n	80055ec <recv+0x19c>
      {
         wiz_recv_data(sn,head,2);
 80055aa:	f107 0108 	add.w	r1, r7, #8
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	2202      	movs	r2, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fb26 	bl	8004c04 <wiz_recv_data>
         if(mr & MR_FS)
 80055b8:	897b      	ldrh	r3, [r7, #10]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <recv+0x184>
            recvsize = (((uint16_t)head[1]) << 8) | ((uint16_t)head[0]);
 80055c2:	7a7b      	ldrb	r3, [r7, #9]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	7a3b      	ldrb	r3, [r7, #8]
 80055ca:	b21b      	sxth	r3, r3
 80055cc:	4313      	orrs	r3, r2
 80055ce:	b21b      	sxth	r3, r3
 80055d0:	81fb      	strh	r3, [r7, #14]
 80055d2:	e007      	b.n	80055e4 <recv+0x194>
         else
            recvsize = (((uint16_t)head[0]) << 8) | ((uint16_t)head[1]);
 80055d4:	7a3b      	ldrb	r3, [r7, #8]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	b21a      	sxth	r2, r3
 80055da:	7a7b      	ldrb	r3, [r7, #9]
 80055dc:	b21b      	sxth	r3, r3
 80055de:	4313      	orrs	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	81fb      	strh	r3, [r7, #14]
         sock_pack_info[sn] = PACK_FIRST;
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	4a52      	ldr	r2, [pc, #328]	; (8005730 <recv+0x2e0>)
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	54d1      	strb	r1, [r2, r3]
      }
      sock_remained_size[sn] = recvsize;
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	494e      	ldr	r1, [pc, #312]	; (8005728 <recv+0x2d8>)
 80055f0:	89fa      	ldrh	r2, [r7, #14]
 80055f2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
   }
   if(len > sock_remained_size[sn]) len = sock_remained_size[sn];
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	4a4b      	ldr	r2, [pc, #300]	; (8005728 <recv+0x2d8>)
 80055fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055fe:	88ba      	ldrh	r2, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d904      	bls.n	800560e <recv+0x1be>
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	4a48      	ldr	r2, [pc, #288]	; (8005728 <recv+0x2d8>)
 8005608:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560c:	80bb      	strh	r3, [r7, #4]
   recvsize = len;   
 800560e:	88bb      	ldrh	r3, [r7, #4]
 8005610:	81fb      	strh	r3, [r7, #14]
   if(sock_pack_info[sn] & PACK_FIFOBYTE)
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	4a46      	ldr	r2, [pc, #280]	; (8005730 <recv+0x2e0>)
 8005616:	5cd3      	ldrb	r3, [r2, r3]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01d      	beq.n	800565c <recv+0x20c>
   {
      *buf = sock_remained_byte[sn];
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	4a44      	ldr	r2, [pc, #272]	; (8005734 <recv+0x2e4>)
 8005624:	5cd2      	ldrb	r2, [r2, r3]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	701a      	strb	r2, [r3, #0]
      buf++;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	603b      	str	r3, [r7, #0]
      sock_pack_info[sn] &= ~(PACK_FIFOBYTE);
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	4a3f      	ldr	r2, [pc, #252]	; (8005730 <recv+0x2e0>)
 8005634:	5cd2      	ldrb	r2, [r2, r3]
 8005636:	79fb      	ldrb	r3, [r7, #7]
 8005638:	f022 0202 	bic.w	r2, r2, #2
 800563c:	b2d1      	uxtb	r1, r2
 800563e:	4a3c      	ldr	r2, [pc, #240]	; (8005730 <recv+0x2e0>)
 8005640:	54d1      	strb	r1, [r2, r3]
      recvsize -= 1;
 8005642:	89fb      	ldrh	r3, [r7, #14]
 8005644:	3b01      	subs	r3, #1
 8005646:	81fb      	strh	r3, [r7, #14]
      sock_remained_size[sn] -= 1;
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	4a37      	ldr	r2, [pc, #220]	; (8005728 <recv+0x2d8>)
 800564c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	3a01      	subs	r2, #1
 8005654:	b291      	uxth	r1, r2
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <recv+0x2d8>)
 8005658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   }
   if(recvsize != 0)
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01d      	beq.n	800569e <recv+0x24e>
   {
      wiz_recv_data(sn, buf, recvsize);
 8005662:	89fa      	ldrh	r2, [r7, #14]
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff facb 	bl	8004c04 <wiz_recv_data>
      setSn_CR(sn,Sn_CR_RECV);
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005674:	3308      	adds	r3, #8
 8005676:	019b      	lsls	r3, r3, #6
 8005678:	3302      	adds	r3, #2
 800567a:	2140      	movs	r1, #64	; 0x40
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff f925 	bl	80048cc <WIZCHIP_WRITE>
      while(getSn_CR(sn));
 8005682:	bf00      	nop
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800568a:	3308      	adds	r3, #8
 800568c:	019b      	lsls	r3, r3, #6
 800568e:	3302      	adds	r3, #2
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff f939 	bl	8004908 <WIZCHIP_READ>
 8005696:	4603      	mov	r3, r0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f2      	bne.n	8005684 <recv+0x234>
   }
   sock_remained_size[sn] -= recvsize;
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	4a21      	ldr	r2, [pc, #132]	; (8005728 <recv+0x2d8>)
 80056a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	89fa      	ldrh	r2, [r7, #14]
 80056aa:	1a8a      	subs	r2, r1, r2
 80056ac:	b291      	uxth	r1, r2
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <recv+0x2d8>)
 80056b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   if(sock_remained_size[sn] != 0)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <recv+0x2d8>)
 80056b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <recv+0x2a0>
   {
      sock_pack_info[sn] |= PACK_REMAINED;
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	; (8005730 <recv+0x2e0>)
 80056c4:	5cd2      	ldrb	r2, [r2, r3]
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	b2d1      	uxtb	r1, r2
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <recv+0x2e0>)
 80056d0:	54d1      	strb	r1, [r2, r3]
      if(recvsize & 0x1) sock_pack_info[sn] |= PACK_FIFOBYTE;
 80056d2:	89fb      	ldrh	r3, [r7, #14]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <recv+0x2a8>
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	4a14      	ldr	r2, [pc, #80]	; (8005730 <recv+0x2e0>)
 80056e0:	5cd2      	ldrb	r2, [r2, r3]
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	f042 0202 	orr.w	r2, r2, #2
 80056e8:	b2d1      	uxtb	r1, r2
 80056ea:	4a11      	ldr	r2, [pc, #68]	; (8005730 <recv+0x2e0>)
 80056ec:	54d1      	strb	r1, [r2, r3]
 80056ee:	e003      	b.n	80056f8 <recv+0x2a8>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4a0f      	ldr	r2, [pc, #60]	; (8005730 <recv+0x2e0>)
 80056f4:	2100      	movs	r1, #0
 80056f6:	54d1      	strb	r1, [r2, r3]
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80056fe:	3308      	adds	r3, #8
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff f900 	bl	8004908 <WIZCHIP_READ>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <recv+0x2cc>
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	4a04      	ldr	r2, [pc, #16]	; (8005728 <recv+0x2d8>)
 8005716:	2100      	movs	r1, #0
 8005718:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   while(getSn_CR(sn));
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800571c:	88bb      	ldrh	r3, [r7, #4]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	bd90      	pop	{r4, r7, pc}
 8005726:	bf00      	nop
 8005728:	2000010c 	.word	0x2000010c
 800572c:	20000108 	.word	0x20000108
 8005730:	2000011c 	.word	0x2000011c
 8005734:	20000124 	.word	0x20000124

08005738 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	4603      	mov	r3, r0
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	4613      	mov	r3, r2
 8005748:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d902      	bls.n	800575e <sendto+0x26>
 8005758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800575c:	e204      	b.n	8005b68 <sendto+0x430>
   switch(getSn_MR(sn) & 0x0F)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005764:	3308      	adds	r3, #8
 8005766:	019b      	lsls	r3, r3, #6
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff f8cd 	bl	8004908 <WIZCHIP_READ>
 800576e:	4603      	mov	r3, r0
 8005770:	f003 030f 	and.w	r3, r3, #15
 8005774:	3b02      	subs	r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <sendto+0x48>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800577a:	f06f 0304 	mvn.w	r3, #4
 800577e:	e1f3      	b.n	8005b68 <sendto+0x430>
         break;
 8005780:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005782:	89bb      	ldrh	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <sendto+0x56>
 8005788:	f06f 030d 	mvn.w	r3, #13
 800578c:	e1ec      	b.n	8005b68 <sendto+0x430>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	3201      	adds	r2, #1
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	021b      	lsls	r3, r3, #8
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	3202      	adds	r2, #2
 80057aa:	7812      	ldrb	r2, [r2, #0]
 80057ac:	4413      	add	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	3203      	adds	r2, #3
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10f      	bne.n	80057e4 <sendto+0xac>
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80057ca:	3308      	adds	r3, #8
 80057cc:	019b      	lsls	r3, r3, #6
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff f89a 	bl	8004908 <WIZCHIP_READ>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d002      	beq.n	80057e4 <sendto+0xac>
 80057de:	f06f 030b 	mvn.w	r3, #11
 80057e2:	e1c1      	b.n	8005b68 <sendto+0x430>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80057e4:	8c3b      	ldrh	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10f      	bne.n	800580a <sendto+0xd2>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80057f0:	3308      	adds	r3, #8
 80057f2:	019b      	lsls	r3, r3, #6
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff f887 	bl	8004908 <WIZCHIP_READ>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b04      	cmp	r3, #4
 8005802:	d002      	beq.n	800580a <sendto+0xd2>
 8005804:	f06f 030a 	mvn.w	r3, #10
 8005808:	e1ae      	b.n	8005b68 <sendto+0x430>
   tmp = getSn_SR(sn);
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005810:	3308      	adds	r3, #8
 8005812:	019b      	lsls	r3, r3, #6
 8005814:	3308      	adds	r3, #8
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff f876 	bl	8004908 <WIZCHIP_READ>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b42      	cmp	r3, #66	; 0x42
 8005824:	d008      	beq.n	8005838 <sendto+0x100>
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b22      	cmp	r3, #34	; 0x22
 800582a:	d005      	beq.n	8005838 <sendto+0x100>
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b32      	cmp	r3, #50	; 0x32
 8005830:	d002      	beq.n	8005838 <sendto+0x100>
 8005832:	f06f 0306 	mvn.w	r3, #6
 8005836:	e197      	b.n	8005b68 <sendto+0x430>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 800583e:	3308      	adds	r3, #8
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	3314      	adds	r3, #20
 8005844:	4618      	mov	r0, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3301      	adds	r3, #1
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	4413      	add	r3, r2
 800585a:	b29b      	uxth	r3, r3
 800585c:	4619      	mov	r1, r3
 800585e:	f7ff f835 	bl	80048cc <WIZCHIP_WRITE>
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005868:	3308      	adds	r3, #8
 800586a:	019b      	lsls	r3, r3, #6
 800586c:	3316      	adds	r3, #22
 800586e:	4618      	mov	r0, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3302      	adds	r3, #2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3303      	adds	r3, #3
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	4413      	add	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	f7ff f81f 	bl	80048cc <WIZCHIP_WRITE>
   setSn_DPORT(sn,port);      
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005894:	3308      	adds	r3, #8
 8005896:	019b      	lsls	r3, r3, #6
 8005898:	3312      	adds	r3, #18
 800589a:	461a      	mov	r2, r3
 800589c:	8c3b      	ldrh	r3, [r7, #32]
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f7ff f813 	bl	80048cc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff f888 	bl	80049be <getTMSR>
 80058ae:	4603      	mov	r3, r0
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80058b6:	89ba      	ldrh	r2, [r7, #12]
 80058b8:	8abb      	ldrh	r3, [r7, #20]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d901      	bls.n	80058c2 <sendto+0x18a>
 80058be:	8abb      	ldrh	r3, [r7, #20]
 80058c0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff f905 	bl	8004ad4 <getSn_TX_FSR>
 80058ca:	4603      	mov	r3, r0
 80058cc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 80058d4:	3308      	adds	r3, #8
 80058d6:	019b      	lsls	r3, r3, #6
 80058d8:	3308      	adds	r3, #8
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff f814 	bl	8004908 <WIZCHIP_READ>
 80058e0:	4603      	mov	r3, r0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d102      	bne.n	80058ee <sendto+0x1b6>
 80058e8:	f06f 0303 	mvn.w	r3, #3
 80058ec:	e13c      	b.n	8005b68 <sendto+0x430>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80058ee:	4ba0      	ldr	r3, [pc, #640]	; (8005b70 <sendto+0x438>)
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	fa42 f303 	asr.w	r3, r2, r3
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d005      	beq.n	800590e <sendto+0x1d6>
 8005902:	89ba      	ldrh	r2, [r7, #12]
 8005904:	8abb      	ldrh	r3, [r7, #20]
 8005906:	429a      	cmp	r2, r3
 8005908:	d901      	bls.n	800590e <sendto+0x1d6>
 800590a:	2300      	movs	r3, #0
 800590c:	e12c      	b.n	8005b68 <sendto+0x430>
      if(len <= freesize) break;
 800590e:	89ba      	ldrh	r2, [r7, #12]
 8005910:	8abb      	ldrh	r3, [r7, #20]
 8005912:	429a      	cmp	r2, r3
 8005914:	d900      	bls.n	8005918 <sendto+0x1e0>
      freesize = getSn_TX_FSR(sn);
 8005916:	e7d4      	b.n	80058c2 <sendto+0x18a>
      if(len <= freesize) break;
 8005918:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800591a:	89ba      	ldrh	r2, [r7, #12]
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f93b 	bl	8004b9c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8005926:	4893      	ldr	r0, [pc, #588]	; (8005b74 <sendto+0x43c>)
 8005928:	f7fe ffee 	bl	8004908 <WIZCHIP_READ>
 800592c:	4603      	mov	r3, r0
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	b29a      	uxth	r2, r3
 8005932:	f107 0310 	add.w	r3, r7, #16
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	488e      	ldr	r0, [pc, #568]	; (8005b74 <sendto+0x43c>)
 800593c:	f7fe ffe4 	bl	8004908 <WIZCHIP_READ>
 8005940:	4603      	mov	r3, r0
 8005942:	461a      	mov	r2, r3
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	3301      	adds	r3, #1
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	488a      	ldr	r0, [pc, #552]	; (8005b78 <sendto+0x440>)
 8005950:	f7fe ffda 	bl	8004908 <WIZCHIP_READ>
 8005954:	4603      	mov	r3, r0
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	b29a      	uxth	r2, r3
 800595a:	f107 0310 	add.w	r3, r7, #16
 800595e:	3302      	adds	r3, #2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	4884      	ldr	r0, [pc, #528]	; (8005b78 <sendto+0x440>)
 8005966:	f7fe ffcf 	bl	8004908 <WIZCHIP_READ>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f107 0310 	add.w	r3, r7, #16
 8005972:	3303      	adds	r3, #3
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]
      if(taddr == 0)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d145      	bne.n	8005a0a <sendto+0x2d2>
      {
         getSUBR((uint8_t*)&taddr);
 800597e:	487f      	ldr	r0, [pc, #508]	; (8005b7c <sendto+0x444>)
 8005980:	f7fe ffc2 	bl	8004908 <WIZCHIP_READ>
 8005984:	4603      	mov	r3, r0
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b29a      	uxth	r2, r3
 800598a:	f107 0310 	add.w	r3, r7, #16
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	487a      	ldr	r0, [pc, #488]	; (8005b7c <sendto+0x444>)
 8005994:	f7fe ffb8 	bl	8004908 <WIZCHIP_READ>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	f107 0310 	add.w	r3, r7, #16
 80059a0:	3301      	adds	r3, #1
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	4876      	ldr	r0, [pc, #472]	; (8005b80 <sendto+0x448>)
 80059a8:	f7fe ffae 	bl	8004908 <WIZCHIP_READ>
 80059ac:	4603      	mov	r3, r0
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	3302      	adds	r3, #2
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	4870      	ldr	r0, [pc, #448]	; (8005b80 <sendto+0x448>)
 80059be:	f7fe ffa3 	bl	8004908 <WIZCHIP_READ>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	f107 0310 	add.w	r3, r7, #16
 80059ca:	3303      	adds	r3, #3
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80059d0:	4b6c      	ldr	r3, [pc, #432]	; (8005b84 <sendto+0x44c>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	b29a      	uxth	r2, r3
 80059da:	4b6b      	ldr	r3, [pc, #428]	; (8005b88 <sendto+0x450>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	4865      	ldr	r0, [pc, #404]	; (8005b7c <sendto+0x444>)
 80059e8:	f7fe ff70 	bl	80048cc <WIZCHIP_WRITE>
 80059ec:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <sendto+0x454>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	4b66      	ldr	r3, [pc, #408]	; (8005b90 <sendto+0x458>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4619      	mov	r1, r3
 8005a02:	485f      	ldr	r0, [pc, #380]	; (8005b80 <sendto+0x448>)
 8005a04:	f7fe ff62 	bl	80048cc <WIZCHIP_WRITE>
 8005a08:	e001      	b.n	8005a0e <sendto+0x2d6>
      }
      else taddr = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
   #endif

//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a14:	3308      	adds	r3, #8
 8005a16:	019b      	lsls	r3, r3, #6
 8005a18:	3320      	adds	r3, #32
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	89bb      	ldrh	r3, [r7, #12]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fe ff51 	bl	80048cc <WIZCHIP_WRITE>
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a30:	3308      	adds	r3, #8
 8005a32:	019b      	lsls	r3, r3, #6
 8005a34:	3322      	adds	r3, #34	; 0x22
 8005a36:	461a      	mov	r2, r3
 8005a38:	89bb      	ldrh	r3, [r7, #12]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fe ff45 	bl	80048cc <WIZCHIP_WRITE>
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a48:	3308      	adds	r3, #8
 8005a4a:	019b      	lsls	r3, r3, #6
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	2120      	movs	r1, #32
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe ff3b 	bl	80048cc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005a56:	bf00      	nop
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a5e:	3308      	adds	r3, #8
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	3302      	adds	r3, #2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe ff4f 	bl	8004908 <WIZCHIP_READ>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f2      	bne.n	8005a58 <sendto+0x320>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a78:	3308      	adds	r3, #8
 8005a7a:	019b      	lsls	r3, r3, #6
 8005a7c:	3306      	adds	r3, #6
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe ff42 	bl	8004908 <WIZCHIP_READ>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00e      	beq.n	8005ab0 <sendto+0x378>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005a98:	3308      	adds	r3, #8
 8005a9a:	019b      	lsls	r3, r3, #6
 8005a9c:	3306      	adds	r3, #6
 8005a9e:	2110      	movs	r1, #16
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ff13 	bl	80048cc <WIZCHIP_WRITE>
         break;
 8005aa6:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d05b      	beq.n	8005b66 <sendto+0x42e>
 8005aae:	e037      	b.n	8005b20 <sendto+0x3e8>
      else if(tmp & Sn_IR_TIMEOUT)
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0db      	beq.n	8005a72 <sendto+0x33a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	f503 0350 	add.w	r3, r3, #13631488	; 0xd00000
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	019b      	lsls	r3, r3, #6
 8005ac4:	3306      	adds	r3, #6
 8005ac6:	2108      	movs	r1, #8
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe feff 	bl	80048cc <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d022      	beq.n	8005b1a <sendto+0x3e2>
 8005ad4:	f107 0310 	add.w	r3, r7, #16
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f107 0310 	add.w	r3, r7, #16
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4413      	add	r3, r2
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	4619      	mov	r1, r3
 8005af0:	4822      	ldr	r0, [pc, #136]	; (8005b7c <sendto+0x444>)
 8005af2:	f7fe feeb 	bl	80048cc <WIZCHIP_WRITE>
 8005af6:	f107 0310 	add.w	r3, r7, #16
 8005afa:	3302      	adds	r3, #2
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	f107 0310 	add.w	r3, r7, #16
 8005b08:	3303      	adds	r3, #3
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	4619      	mov	r1, r3
 8005b14:	481a      	ldr	r0, [pc, #104]	; (8005b80 <sendto+0x448>)
 8005b16:	f7fe fed9 	bl	80048cc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005b1a:	f06f 030c 	mvn.w	r3, #12
 8005b1e:	e023      	b.n	8005b68 <sendto+0x430>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8005b20:	f107 0310 	add.w	r3, r7, #16
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	f107 0310 	add.w	r3, r7, #16
 8005b30:	3301      	adds	r3, #1
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	480f      	ldr	r0, [pc, #60]	; (8005b7c <sendto+0x444>)
 8005b3e:	f7fe fec5 	bl	80048cc <WIZCHIP_WRITE>
 8005b42:	f107 0310 	add.w	r3, r7, #16
 8005b46:	3302      	adds	r3, #2
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	f107 0310 	add.w	r3, r7, #16
 8005b54:	3303      	adds	r3, #3
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4807      	ldr	r0, [pc, #28]	; (8005b80 <sendto+0x448>)
 8005b62:	f7fe feb3 	bl	80048cc <WIZCHIP_WRITE>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005b66:	89bb      	ldrh	r3, [r7, #12]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000108 	.word	0x20000108
 8005b74:	34000018 	.word	0x34000018
 8005b78:	3400001a 	.word	0x3400001a
 8005b7c:	34000014 	.word	0x34000014
 8005b80:	34000016 	.word	0x34000016
 8005b84:	08007dac 	.word	0x08007dac
 8005b88:	08007dad 	.word	0x08007dad
 8005b8c:	08007dae 	.word	0x08007dae
 8005b90:	08007daf 	.word	0x08007daf

08005b94 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bc80      	pop	{r7}
 8005baa:	4770      	bx	lr

08005bac <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	bf00      	nop
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr

08005bdc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <reg_wizchip_bus_cbfunc>:
}

//M20150515 : For integrating with W5300
//void reg_wizchip_bus_cbfunc(uint8_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, uint8_t wb))
void reg_wizchip_bus_cbfunc(iodata_t(*bus_rb)(uint32_t addr), void (*bus_wb)(uint32_t addr, iodata_t wb))
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_BUS_));
 8005c02:	bf00      	nop
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <reg_wizchip_bus_cbfunc+0x4c>)
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f9      	beq.n	8005c04 <reg_wizchip_bus_cbfunc+0xc>
   {
      WIZCHIP.IF.BUS._read_byte   = bus_rb;
      WIZCHIP.IF.BUS._write_byte  = bus_wb;
   }
   */
   if(!bus_rb || !bus_wb)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <reg_wizchip_bus_cbfunc+0x24>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <reg_wizchip_bus_cbfunc+0x32>
   {
      WIZCHIP.IF.BUS._read_data   = wizchip_bus_readdata;
 8005c1c:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <reg_wizchip_bus_cbfunc+0x4c>)
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <reg_wizchip_bus_cbfunc+0x50>)
 8005c20:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.BUS._write_data  = wizchip_bus_writedata;
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <reg_wizchip_bus_cbfunc+0x4c>)
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <reg_wizchip_bus_cbfunc+0x54>)
 8005c26:	621a      	str	r2, [r3, #32]
 8005c28:	e006      	b.n	8005c38 <reg_wizchip_bus_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.BUS._read_data   = bus_rb;
 8005c2a:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <reg_wizchip_bus_cbfunc+0x4c>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.BUS._write_data  = bus_wb;
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <reg_wizchip_bus_cbfunc+0x4c>)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6213      	str	r3, [r2, #32]
   }
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	20000034 	.word	0x20000034
 8005c48:	08005bc5 	.word	0x08005bc5
 8005c4c:	08005bdd 	.word	0x08005bdd

08005c50 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
   uint8_t i;
   switch(cwtype)
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	f200 808e 	bhi.w	8005d88 <ctlwizchip+0x138>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <ctlwizchip+0x24>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005c9f 	.word	0x08005c9f
 8005c7c:	08005d27 	.word	0x08005d27
 8005c80:	08005d1b 	.word	0x08005d1b
 8005c84:	08005d35 	.word	0x08005d35
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d89 	.word	0x08005d89
 8005c90:	08005d89 	.word	0x08005d89
 8005c94:	08005d4f 	.word	0x08005d4f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005c98:	f000 f8c6 	bl	8005e28 <wizchip_sw_reset>
         break;
 8005c9c:	e077      	b.n	8005d8e <ctlwizchip+0x13e>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <ctlwizchip+0x5e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3308      	adds	r3, #8
 8005cac:	613b      	str	r3, [r7, #16]
         }
         printf("tx mem: ");
 8005cae:	483a      	ldr	r0, [pc, #232]	; (8005d98 <ctlwizchip+0x148>)
 8005cb0:	f000 fdb0 	bl	8006814 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75fb      	strb	r3, [r7, #23]
 8005cb8:	e00a      	b.n	8005cd0 <ctlwizchip+0x80>
         {
        	 printf("%d,", ptmp[0][i]);
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4835      	ldr	r0, [pc, #212]	; (8005d9c <ctlwizchip+0x14c>)
 8005cc6:	f000 fda5 	bl	8006814 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b07      	cmp	r3, #7
 8005cd4:	d9f1      	bls.n	8005cba <ctlwizchip+0x6a>
         }
         printf("\r\n");
 8005cd6:	4832      	ldr	r0, [pc, #200]	; (8005da0 <ctlwizchip+0x150>)
 8005cd8:	f000 fe22 	bl	8006920 <puts>
         printf("rx mem: ");
 8005cdc:	4831      	ldr	r0, [pc, #196]	; (8005da4 <ctlwizchip+0x154>)
 8005cde:	f000 fd99 	bl	8006814 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
 8005ce6:	e00a      	b.n	8005cfe <ctlwizchip+0xae>
         {
        	 printf("%d,", ptmp[1][i]);
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
 8005cec:	4413      	add	r3, r2
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	482a      	ldr	r0, [pc, #168]	; (8005d9c <ctlwizchip+0x14c>)
 8005cf4:	f000 fd8e 	bl	8006814 <iprintf>
         for(i=0; i<_WIZCHIP_SOCK_NUM_; i++)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2b07      	cmp	r3, #7
 8005d02:	d9f1      	bls.n	8005ce8 <ctlwizchip+0x98>
         }
         printf("\r\n");
 8005d04:	4826      	ldr	r0, [pc, #152]	; (8005da0 <ctlwizchip+0x150>)
 8005d06:	f000 fe0b 	bl	8006920 <puts>
         return wizchip_init(ptmp[0], ptmp[1]);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 f995 	bl	8006040 <wizchip_init>
 8005d16:	4603      	mov	r3, r0
 8005d18:	e03a      	b.n	8005d90 <ctlwizchip+0x140>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fa24 	bl	800616c <wizchip_clrinterrupt>
         break;
 8005d24:	e033      	b.n	8005d8e <ctlwizchip+0x13e>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005d26:	f000 fa45 	bl	80061b4 <wizchip_getinterrupt>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	801a      	strh	r2, [r3, #0]
         break;
 8005d32:	e02c      	b.n	8005d8e <ctlwizchip+0x13e>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 fa61 	bl	8006200 <wizchip_setinterruptmask>
         break;         
 8005d3e:	e026      	b.n	8005d8e <ctlwizchip+0x13e>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005d40:	f000 fa82 	bl	8006248 <wizchip_getinterruptmask>
 8005d44:	4603      	mov	r3, r0
 8005d46:	461a      	mov	r2, r3
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	801a      	strh	r2, [r3, #0]
         break;
 8005d4c:	e01f      	b.n	8005d8e <ctlwizchip+0x13e>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005d4e:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <ctlwizchip+0x158>)
 8005d50:	789a      	ldrb	r2, [r3, #2]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <ctlwizchip+0x158>)
 8005d5c:	78d2      	ldrb	r2, [r2, #3]
 8005d5e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3302      	adds	r3, #2
 8005d64:	4a10      	ldr	r2, [pc, #64]	; (8005da8 <ctlwizchip+0x158>)
 8005d66:	7912      	ldrb	r2, [r2, #4]
 8005d68:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3303      	adds	r3, #3
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <ctlwizchip+0x158>)
 8005d70:	7952      	ldrb	r2, [r2, #5]
 8005d72:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <ctlwizchip+0x158>)
 8005d7a:	7992      	ldrb	r2, [r2, #6]
 8005d7c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	3305      	adds	r3, #5
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
         break;
 8005d86:	e002      	b.n	8005d8e <ctlwizchip+0x13e>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d8c:	e000      	b.n	8005d90 <ctlwizchip+0x140>
   }
   return 0;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	08007db4 	.word	0x08007db4
 8005d9c:	08007dc0 	.word	0x08007dc0
 8005da0:	08007dc4 	.word	0x08007dc4
 8005da4:	08007dc8 	.word	0x08007dc8
 8005da8:	20000034 	.word	0x20000034

08005dac <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d82c      	bhi.n	8005e18 <ctlnetwork+0x6c>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <ctlnetwork+0x18>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005ddd 	.word	0x08005ddd
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	08005ded 	.word	0x08005ded
 8005dd0:	08005dfb 	.word	0x08005dfb
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e11 	.word	0x08005e11
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005ddc:	6838      	ldr	r0, [r7, #0]
 8005dde:	f000 fa5d 	bl	800629c <wizchip_setnetinfo>
         break;
 8005de2:	e01c      	b.n	8005e1e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005de4:	6838      	ldr	r0, [r7, #0]
 8005de6:	f000 fb09 	bl	80063fc <wizchip_getnetinfo>
         break;
 8005dea:	e018      	b.n	8005e1e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fbc5 	bl	8006580 <wizchip_setnetmode>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e012      	b.n	8005e20 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005dfa:	f000 fbe6 	bl	80065ca <wizchip_getnetmode>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	461a      	mov	r2, r3
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	701a      	strb	r2, [r3, #0]
         break;
 8005e06:	e00a      	b.n	8005e1e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005e08:	6838      	ldr	r0, [r7, #0]
 8005e0a:	f000 fbe9 	bl	80065e0 <wizchip_settimeout>
         break;
 8005e0e:	e006      	b.n	8005e1e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005e10:	6838      	ldr	r0, [r7, #0]
 8005e12:	f000 fbff 	bl	8006614 <wizchip_gettimeout>
         break;
 8005e16:	e002      	b.n	8005e1e <ctlnetwork+0x72>
      default:
         return -1;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e1c:	e000      	b.n	8005e20 <ctlnetwork+0x74>
   }
   return 0;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005e2e:	487b      	ldr	r0, [pc, #492]	; (800601c <wizchip_sw_reset+0x1f4>)
 8005e30:	f7fe fd6a 	bl	8004908 <WIZCHIP_READ>
 8005e34:	4603      	mov	r3, r0
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	713b      	strb	r3, [r7, #4]
 8005e3e:	4877      	ldr	r0, [pc, #476]	; (800601c <wizchip_sw_reset+0x1f4>)
 8005e40:	f7fe fd62 	bl	8004908 <WIZCHIP_READ>
 8005e44:	4603      	mov	r3, r0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	717b      	strb	r3, [r7, #5]
 8005e4a:	4875      	ldr	r0, [pc, #468]	; (8006020 <wizchip_sw_reset+0x1f8>)
 8005e4c:	f7fe fd5c 	bl	8004908 <WIZCHIP_READ>
 8005e50:	4603      	mov	r3, r0
 8005e52:	0a1b      	lsrs	r3, r3, #8
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	71bb      	strb	r3, [r7, #6]
 8005e5a:	4871      	ldr	r0, [pc, #452]	; (8006020 <wizchip_sw_reset+0x1f8>)
 8005e5c:	f7fe fd54 	bl	8004908 <WIZCHIP_READ>
 8005e60:	4603      	mov	r3, r0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	71fb      	strb	r3, [r7, #7]
 8005e66:	486f      	ldr	r0, [pc, #444]	; (8006024 <wizchip_sw_reset+0x1fc>)
 8005e68:	f7fe fd4e 	bl	8004908 <WIZCHIP_READ>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	723b      	strb	r3, [r7, #8]
 8005e76:	486b      	ldr	r0, [pc, #428]	; (8006024 <wizchip_sw_reset+0x1fc>)
 8005e78:	f7fe fd46 	bl	8004908 <WIZCHIP_READ>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	727b      	strb	r3, [r7, #9]
   getSIPR(sip);
 8005e82:	4869      	ldr	r0, [pc, #420]	; (8006028 <wizchip_sw_reset+0x200>)
 8005e84:	f7fe fd40 	bl	8004908 <WIZCHIP_READ>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	733b      	strb	r3, [r7, #12]
 8005e92:	4865      	ldr	r0, [pc, #404]	; (8006028 <wizchip_sw_reset+0x200>)
 8005e94:	f7fe fd38 	bl	8004908 <WIZCHIP_READ>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	737b      	strb	r3, [r7, #13]
 8005e9e:	4863      	ldr	r0, [pc, #396]	; (800602c <wizchip_sw_reset+0x204>)
 8005ea0:	f7fe fd32 	bl	8004908 <WIZCHIP_READ>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	73bb      	strb	r3, [r7, #14]
 8005eae:	485f      	ldr	r0, [pc, #380]	; (800602c <wizchip_sw_reset+0x204>)
 8005eb0:	f7fe fd2a 	bl	8004908 <WIZCHIP_READ>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	73fb      	strb	r3, [r7, #15]
   getGAR(gw);
 8005eba:	485d      	ldr	r0, [pc, #372]	; (8006030 <wizchip_sw_reset+0x208>)
 8005ebc:	f7fe fd24 	bl	8004908 <WIZCHIP_READ>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	753b      	strb	r3, [r7, #20]
 8005eca:	4859      	ldr	r0, [pc, #356]	; (8006030 <wizchip_sw_reset+0x208>)
 8005ecc:	f7fe fd1c 	bl	8004908 <WIZCHIP_READ>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	757b      	strb	r3, [r7, #21]
 8005ed6:	4857      	ldr	r0, [pc, #348]	; (8006034 <wizchip_sw_reset+0x20c>)
 8005ed8:	f7fe fd16 	bl	8004908 <WIZCHIP_READ>
 8005edc:	4603      	mov	r3, r0
 8005ede:	0a1b      	lsrs	r3, r3, #8
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	75bb      	strb	r3, [r7, #22]
 8005ee6:	4853      	ldr	r0, [pc, #332]	; (8006034 <wizchip_sw_reset+0x20c>)
 8005ee8:	f7fe fd0e 	bl	8004908 <WIZCHIP_READ>
 8005eec:	4603      	mov	r3, r0
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	75fb      	strb	r3, [r7, #23]
   getSUBR(sn);
 8005ef2:	4851      	ldr	r0, [pc, #324]	; (8006038 <wizchip_sw_reset+0x210>)
 8005ef4:	f7fe fd08 	bl	8004908 <WIZCHIP_READ>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	743b      	strb	r3, [r7, #16]
 8005f02:	484d      	ldr	r0, [pc, #308]	; (8006038 <wizchip_sw_reset+0x210>)
 8005f04:	f7fe fd00 	bl	8004908 <WIZCHIP_READ>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	747b      	strb	r3, [r7, #17]
 8005f0e:	484b      	ldr	r0, [pc, #300]	; (800603c <wizchip_sw_reset+0x214>)
 8005f10:	f7fe fcfa 	bl	8004908 <WIZCHIP_READ>
 8005f14:	4603      	mov	r3, r0
 8005f16:	0a1b      	lsrs	r3, r3, #8
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	74bb      	strb	r3, [r7, #18]
 8005f1e:	4847      	ldr	r0, [pc, #284]	; (800603c <wizchip_sw_reset+0x214>)
 8005f20:	f7fe fcf2 	bl	8004908 <WIZCHIP_READ>
 8005f24:	4603      	mov	r3, r0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	74fb      	strb	r3, [r7, #19]
   setMR(MR_RST);
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8005f30:	f7fe fccc 	bl	80048cc <WIZCHIP_WRITE>
   getMR(); // for delay
 8005f34:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 8005f38:	f7fe fce6 	bl	8004908 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005f3c:	793b      	ldrb	r3, [r7, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	021b      	lsls	r3, r3, #8
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	797b      	ldrb	r3, [r7, #5]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	4413      	add	r3, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4833      	ldr	r0, [pc, #204]	; (800601c <wizchip_sw_reset+0x1f4>)
 8005f50:	f7fe fcbc 	bl	80048cc <WIZCHIP_WRITE>
 8005f54:	79bb      	ldrb	r3, [r7, #6]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	4619      	mov	r1, r3
 8005f66:	482e      	ldr	r0, [pc, #184]	; (8006020 <wizchip_sw_reset+0x1f8>)
 8005f68:	f7fe fcb0 	bl	80048cc <WIZCHIP_WRITE>
 8005f6c:	7a3b      	ldrb	r3, [r7, #8]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	7a7b      	ldrb	r3, [r7, #9]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	4413      	add	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4829      	ldr	r0, [pc, #164]	; (8006024 <wizchip_sw_reset+0x1fc>)
 8005f80:	f7fe fca4 	bl	80048cc <WIZCHIP_WRITE>
   setGAR(gw);
 8005f84:	7d3b      	ldrb	r3, [r7, #20]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	7d7b      	ldrb	r3, [r7, #21]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4619      	mov	r1, r3
 8005f96:	4826      	ldr	r0, [pc, #152]	; (8006030 <wizchip_sw_reset+0x208>)
 8005f98:	f7fe fc98 	bl	80048cc <WIZCHIP_WRITE>
 8005f9c:	7dbb      	ldrb	r3, [r7, #22]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4619      	mov	r1, r3
 8005fae:	4821      	ldr	r0, [pc, #132]	; (8006034 <wizchip_sw_reset+0x20c>)
 8005fb0:	f7fe fc8c 	bl	80048cc <WIZCHIP_WRITE>
   setSUBR(sn);
 8005fb4:	7c3b      	ldrb	r3, [r7, #16]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	7c7b      	ldrb	r3, [r7, #17]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	4413      	add	r3, r2
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	481c      	ldr	r0, [pc, #112]	; (8006038 <wizchip_sw_reset+0x210>)
 8005fc8:	f7fe fc80 	bl	80048cc <WIZCHIP_WRITE>
 8005fcc:	7cbb      	ldrb	r3, [r7, #18]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	021b      	lsls	r3, r3, #8
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4817      	ldr	r0, [pc, #92]	; (800603c <wizchip_sw_reset+0x214>)
 8005fe0:	f7fe fc74 	bl	80048cc <WIZCHIP_WRITE>
   setSIPR(sip);
 8005fe4:	7b3b      	ldrb	r3, [r7, #12]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	7b7b      	ldrb	r3, [r7, #13]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	480c      	ldr	r0, [pc, #48]	; (8006028 <wizchip_sw_reset+0x200>)
 8005ff8:	f7fe fc68 	bl	80048cc <WIZCHIP_WRITE>
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	b29a      	uxth	r2, r3
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	b29b      	uxth	r3, r3
 8006008:	4413      	add	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	4619      	mov	r1, r3
 800600e:	4807      	ldr	r0, [pc, #28]	; (800602c <wizchip_sw_reset+0x204>)
 8006010:	f7fe fc5c 	bl	80048cc <WIZCHIP_WRITE>
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	34000008 	.word	0x34000008
 8006020:	3400000a 	.word	0x3400000a
 8006024:	3400000c 	.word	0x3400000c
 8006028:	34000018 	.word	0x34000018
 800602c:	3400001a 	.word	0x3400001a
 8006030:	34000010 	.word	0x34000010
 8006034:	34000012 	.word	0x34000012
 8006038:	34000014 	.word	0x34000014
 800603c:	34000016 	.word	0x34000016

08006040 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800604e:	f7ff feeb 	bl	8005e28 <wizchip_sw_reset>
   if(txsize)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d040      	beq.n	80060da <wizchip_init+0x9a>
   {
      tmp = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	73bb      	strb	r3, [r7, #14]
   //M20150601 : For integrating with W5300
   #if _WIZCHIP_ == W5300
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
 8006060:	e018      	b.n	8006094 <wizchip_init+0x54>
		{
			if(txsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 8006062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b3f      	cmp	r3, #63	; 0x3f
 800606e:	d902      	bls.n	8006076 <wizchip_init+0x36>
 8006070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006074:	e076      	b.n	8006164 <wizchip_init+0x124>
			tmp += txsize[i];
 8006076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	4413      	add	r3, r2
 8006084:	b2db      	uxtb	r3, r3
 8006086:	73bb      	strb	r3, [r7, #14]
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	3301      	adds	r3, #1
 8006090:	b2db      	uxtb	r3, r3
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006098:	2b07      	cmp	r3, #7
 800609a:	dde2      	ble.n	8006062 <wizchip_init+0x22>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <wizchip_init+0x6e>
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ac:	e05a      	b.n	8006164 <wizchip_init+0x124>
		#else
			if(tmp > 16) return -1;
		#endif
		}
	#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	73fb      	strb	r3, [r7, #15]
 80060b2:	e00e      	b.n	80060d2 <wizchip_init+0x92>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80060b4:	7bf8      	ldrb	r0, [r7, #15]
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f7fe fc3f 	bl	8004944 <setTMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	3301      	adds	r3, #1
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	73fb      	strb	r3, [r7, #15]
 80060d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d6:	2b07      	cmp	r3, #7
 80060d8:	ddec      	ble.n	80060b4 <wizchip_init+0x74>
		#endif
		}

   }

   if(rxsize)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d040      	beq.n	8006162 <wizchip_init+0x122>
   {
      tmp = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73bb      	strb	r3, [r7, #14]
   #if _WIZCHIP_ == W5300
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	e018      	b.n	800611c <wizchip_init+0xdc>
		{
			if(rxsize[i] >= 64) return -1;   //No use 64KB even if W5300 support max 64KB memory allocation
 80060ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4413      	add	r3, r2
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b3f      	cmp	r3, #63	; 0x3f
 80060f6:	d902      	bls.n	80060fe <wizchip_init+0xbe>
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060fc:	e032      	b.n	8006164 <wizchip_init+0x124>
			tmp += rxsize[i];
 80060fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4413      	add	r3, r2
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	4413      	add	r3, r2
 800610c:	b2db      	uxtb	r3, r3
 800610e:	73bb      	strb	r3, [r7, #14]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006114:	b2db      	uxtb	r3, r3
 8006116:	3301      	adds	r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006120:	2b07      	cmp	r3, #7
 8006122:	dde2      	ble.n	80060ea <wizchip_init+0xaa>
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <wizchip_init+0xf6>
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006134:	e016      	b.n	8006164 <wizchip_init+0x124>
			if(tmp > 16) return -1;
		#endif
		}
	#endif

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
 800613a:	e00e      	b.n	800615a <wizchip_init+0x11a>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800613c:	7bf8      	ldrb	r0, [r7, #15]
 800613e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	4619      	mov	r1, r3
 800614a:	f7fe fc5f 	bl	8004a0c <setRMSR>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800614e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	3301      	adds	r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	73fb      	strb	r3, [r7, #15]
 800615a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800615e:	2b07      	cmp	r3, #7
 8006160:	ddec      	ble.n	800613c <wizchip_init+0xfc>
		#endif
		}
   }
   return 0;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b29b      	uxth	r3, r3
 8006180:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	f043 0310 	orr.w	r3, r3, #16
 8006188:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ <= W5100S
   ir |= sir;
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	021b      	lsls	r3, r3, #8
 800618e:	b21a      	sxth	r2, r3
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	b21b      	sxth	r3, r3
 8006194:	4313      	orrs	r3, r2
 8006196:	b21b      	sxth	r3, r3
 8006198:	b29b      	uxth	r3, r3
 800619a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	4803      	ldr	r0, [pc, #12]	; (80061b0 <wizchip_clrinterrupt+0x44>)
 80061a4:	f7fe fb92 	bl	80048cc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	34000002 	.word	0x34000002

080061b4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
   sir = ir & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_  == W5300
   ret = getIR();
 80061c6:	480d      	ldr	r0, [pc, #52]	; (80061fc <wizchip_getinterrupt+0x48>)
 80061c8:	f7fe fb9e 	bl	8004908 <WIZCHIP_READ>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061d2:	80bb      	strh	r3, [r7, #4]
   ir = (uint8_t)(ret >> 8);
 80061d4:	88bb      	ldrh	r3, [r7, #4]
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	b29b      	uxth	r3, r3
 80061da:	71fb      	strb	r3, [r7, #7]
   sir = (uint8_t)ret;
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80061e0:	79bb      	ldrb	r3, [r7, #6]
 80061e2:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80061e4:	88bb      	ldrh	r3, [r7, #4]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80061f2:	88bb      	ldrh	r3, [r7, #4]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	34000002 	.word	0x34000002

08006200 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	0a1b      	lsrs	r3, r3, #8
 8006212:	b29b      	uxth	r3, r3
 8006214:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	f023 0310 	bic.w	r3, r3, #16
 800621c:	73fb      	strb	r3, [r7, #15]
   simr &= 0x0F;
   imr |= simr;
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	b21a      	sxth	r2, r3
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	b21b      	sxth	r3, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	b21b      	sxth	r3, r3
 800622c:	b29b      	uxth	r3, r3
 800622e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006232:	b29b      	uxth	r3, r3
 8006234:	4619      	mov	r1, r3
 8006236:	4803      	ldr	r0, [pc, #12]	; (8006244 <wizchip_setinterruptmask+0x44>)
 8006238:	f7fe fb48 	bl	80048cc <WIZCHIP_WRITE>
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	34000004 	.word	0x34000004

08006248 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006256:	2300      	movs	r3, #0
 8006258:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
   simr = imr & 0x0F;
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   ret = getIMR();
 800625a:	480f      	ldr	r0, [pc, #60]	; (8006298 <wizchip_getinterruptmask+0x50>)
 800625c:	f7fe fb54 	bl	8004908 <WIZCHIP_READ>
 8006260:	4603      	mov	r3, r0
 8006262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006266:	80bb      	strh	r3, [r7, #4]
   imr = (uint8_t)(ret >> 8);
 8006268:	88bb      	ldrh	r3, [r7, #4]
 800626a:	0a1b      	lsrs	r3, r3, #8
 800626c:	b29b      	uxth	r3, r3
 800626e:	71fb      	strb	r3, [r7, #7]
   simr = (uint8_t)ret;
 8006270:	88bb      	ldrh	r3, [r7, #4]
 8006272:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	f023 0310 	bic.w	r3, r3, #16
 800627a:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800627c:	79bb      	ldrb	r3, [r7, #6]
 800627e:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006280:	88bb      	ldrh	r3, [r7, #4]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b29a      	uxth	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	b29b      	uxth	r3, r3
 800628a:	4413      	add	r3, r2
 800628c:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800628e:	88bb      	ldrh	r3, [r7, #4]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	34000004 	.word	0x34000004

0800629c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4619      	mov	r1, r3
 80062ba:	4845      	ldr	r0, [pc, #276]	; (80063d0 <wizchip_setnetinfo+0x134>)
 80062bc:	f7fe fb06 	bl	80048cc <WIZCHIP_WRITE>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	78db      	ldrb	r3, [r3, #3]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	4413      	add	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4619      	mov	r1, r3
 80062d6:	483f      	ldr	r0, [pc, #252]	; (80063d4 <wizchip_setnetinfo+0x138>)
 80062d8:	f7fe faf8 	bl	80048cc <WIZCHIP_WRITE>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	791b      	ldrb	r3, [r3, #4]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	795b      	ldrb	r3, [r3, #5]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	4839      	ldr	r0, [pc, #228]	; (80063d8 <wizchip_setnetinfo+0x13c>)
 80062f4:	f7fe faea 	bl	80048cc <WIZCHIP_WRITE>
   setGAR(pnetinfo->gw);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7b9b      	ldrb	r3, [r3, #14]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	7bdb      	ldrb	r3, [r3, #15]
 8006306:	b29b      	uxth	r3, r3
 8006308:	4413      	add	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	4619      	mov	r1, r3
 800630e:	4833      	ldr	r0, [pc, #204]	; (80063dc <wizchip_setnetinfo+0x140>)
 8006310:	f7fe fadc 	bl	80048cc <WIZCHIP_WRITE>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7c1b      	ldrb	r3, [r3, #16]
 8006318:	b29b      	uxth	r3, r3
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7c5b      	ldrb	r3, [r3, #17]
 8006322:	b29b      	uxth	r3, r3
 8006324:	4413      	add	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	4619      	mov	r1, r3
 800632a:	482d      	ldr	r0, [pc, #180]	; (80063e0 <wizchip_setnetinfo+0x144>)
 800632c:	f7fe face 	bl	80048cc <WIZCHIP_WRITE>
   setSUBR(pnetinfo->sn);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7a9b      	ldrb	r3, [r3, #10]
 8006334:	b29b      	uxth	r3, r3
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	b29a      	uxth	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7adb      	ldrb	r3, [r3, #11]
 800633e:	b29b      	uxth	r3, r3
 8006340:	4413      	add	r3, r2
 8006342:	b29b      	uxth	r3, r3
 8006344:	4619      	mov	r1, r3
 8006346:	4827      	ldr	r0, [pc, #156]	; (80063e4 <wizchip_setnetinfo+0x148>)
 8006348:	f7fe fac0 	bl	80048cc <WIZCHIP_WRITE>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7b1b      	ldrb	r3, [r3, #12]
 8006350:	b29b      	uxth	r3, r3
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7b5b      	ldrb	r3, [r3, #13]
 800635a:	b29b      	uxth	r3, r3
 800635c:	4413      	add	r3, r2
 800635e:	b29b      	uxth	r3, r3
 8006360:	4619      	mov	r1, r3
 8006362:	4821      	ldr	r0, [pc, #132]	; (80063e8 <wizchip_setnetinfo+0x14c>)
 8006364:	f7fe fab2 	bl	80048cc <WIZCHIP_WRITE>
   setSIPR(pnetinfo->ip);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	799b      	ldrb	r3, [r3, #6]
 800636c:	b29b      	uxth	r3, r3
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	b29a      	uxth	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	79db      	ldrb	r3, [r3, #7]
 8006376:	b29b      	uxth	r3, r3
 8006378:	4413      	add	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	4619      	mov	r1, r3
 800637e:	481b      	ldr	r0, [pc, #108]	; (80063ec <wizchip_setnetinfo+0x150>)
 8006380:	f7fe faa4 	bl	80048cc <WIZCHIP_WRITE>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7a1b      	ldrb	r3, [r3, #8]
 8006388:	b29b      	uxth	r3, r3
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	b29a      	uxth	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	7a5b      	ldrb	r3, [r3, #9]
 8006392:	b29b      	uxth	r3, r3
 8006394:	4413      	add	r3, r2
 8006396:	b29b      	uxth	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	4815      	ldr	r0, [pc, #84]	; (80063f0 <wizchip_setnetinfo+0x154>)
 800639c:	f7fe fa96 	bl	80048cc <WIZCHIP_WRITE>
   _DNS_[0] = pnetinfo->dns[0];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7c9a      	ldrb	r2, [r3, #18]
 80063a4:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <wizchip_setnetinfo+0x158>)
 80063a6:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7cda      	ldrb	r2, [r3, #19]
 80063ac:	4b11      	ldr	r3, [pc, #68]	; (80063f4 <wizchip_setnetinfo+0x158>)
 80063ae:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7d1a      	ldrb	r2, [r3, #20]
 80063b4:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <wizchip_setnetinfo+0x158>)
 80063b6:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7d5a      	ldrb	r2, [r3, #21]
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <wizchip_setnetinfo+0x158>)
 80063be:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7d9a      	ldrb	r2, [r3, #22]
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <wizchip_setnetinfo+0x15c>)
 80063c6:	701a      	strb	r2, [r3, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	34000008 	.word	0x34000008
 80063d4:	3400000a 	.word	0x3400000a
 80063d8:	3400000c 	.word	0x3400000c
 80063dc:	34000010 	.word	0x34000010
 80063e0:	34000012 	.word	0x34000012
 80063e4:	34000014 	.word	0x34000014
 80063e8:	34000016 	.word	0x34000016
 80063ec:	34000018 	.word	0x34000018
 80063f0:	3400001a 	.word	0x3400001a
 80063f4:	2000012c 	.word	0x2000012c
 80063f8:	20000130 	.word	0x20000130

080063fc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006404:	4853      	ldr	r0, [pc, #332]	; (8006554 <wizchip_getnetinfo+0x158>)
 8006406:	f7fe fa7f 	bl	8004908 <WIZCHIP_READ>
 800640a:	4603      	mov	r3, r0
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	b29b      	uxth	r3, r3
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	484f      	ldr	r0, [pc, #316]	; (8006554 <wizchip_getnetinfo+0x158>)
 8006418:	f7fe fa76 	bl	8004908 <WIZCHIP_READ>
 800641c:	4603      	mov	r3, r0
 800641e:	b2da      	uxtb	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	705a      	strb	r2, [r3, #1]
 8006424:	484c      	ldr	r0, [pc, #304]	; (8006558 <wizchip_getnetinfo+0x15c>)
 8006426:	f7fe fa6f 	bl	8004908 <WIZCHIP_READ>
 800642a:	4603      	mov	r3, r0
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	b29b      	uxth	r3, r3
 8006430:	b2da      	uxtb	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	709a      	strb	r2, [r3, #2]
 8006436:	4848      	ldr	r0, [pc, #288]	; (8006558 <wizchip_getnetinfo+0x15c>)
 8006438:	f7fe fa66 	bl	8004908 <WIZCHIP_READ>
 800643c:	4603      	mov	r3, r0
 800643e:	b2da      	uxtb	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	70da      	strb	r2, [r3, #3]
 8006444:	4845      	ldr	r0, [pc, #276]	; (800655c <wizchip_getnetinfo+0x160>)
 8006446:	f7fe fa5f 	bl	8004908 <WIZCHIP_READ>
 800644a:	4603      	mov	r3, r0
 800644c:	0a1b      	lsrs	r3, r3, #8
 800644e:	b29b      	uxth	r3, r3
 8006450:	b2da      	uxtb	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	711a      	strb	r2, [r3, #4]
 8006456:	4841      	ldr	r0, [pc, #260]	; (800655c <wizchip_getnetinfo+0x160>)
 8006458:	f7fe fa56 	bl	8004908 <WIZCHIP_READ>
 800645c:	4603      	mov	r3, r0
 800645e:	b2da      	uxtb	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	715a      	strb	r2, [r3, #5]
   getGAR(pnetinfo->gw);
 8006464:	483e      	ldr	r0, [pc, #248]	; (8006560 <wizchip_getnetinfo+0x164>)
 8006466:	f7fe fa4f 	bl	8004908 <WIZCHIP_READ>
 800646a:	4603      	mov	r3, r0
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	b29b      	uxth	r3, r3
 8006470:	b2da      	uxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	739a      	strb	r2, [r3, #14]
 8006476:	483a      	ldr	r0, [pc, #232]	; (8006560 <wizchip_getnetinfo+0x164>)
 8006478:	f7fe fa46 	bl	8004908 <WIZCHIP_READ>
 800647c:	4603      	mov	r3, r0
 800647e:	b2da      	uxtb	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	73da      	strb	r2, [r3, #15]
 8006484:	4837      	ldr	r0, [pc, #220]	; (8006564 <wizchip_getnetinfo+0x168>)
 8006486:	f7fe fa3f 	bl	8004908 <WIZCHIP_READ>
 800648a:	4603      	mov	r3, r0
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	b29b      	uxth	r3, r3
 8006490:	b2da      	uxtb	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	741a      	strb	r2, [r3, #16]
 8006496:	4833      	ldr	r0, [pc, #204]	; (8006564 <wizchip_getnetinfo+0x168>)
 8006498:	f7fe fa36 	bl	8004908 <WIZCHIP_READ>
 800649c:	4603      	mov	r3, r0
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	745a      	strb	r2, [r3, #17]
   getSUBR(pnetinfo->sn);
 80064a4:	4830      	ldr	r0, [pc, #192]	; (8006568 <wizchip_getnetinfo+0x16c>)
 80064a6:	f7fe fa2f 	bl	8004908 <WIZCHIP_READ>
 80064aa:	4603      	mov	r3, r0
 80064ac:	0a1b      	lsrs	r3, r3, #8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	729a      	strb	r2, [r3, #10]
 80064b6:	482c      	ldr	r0, [pc, #176]	; (8006568 <wizchip_getnetinfo+0x16c>)
 80064b8:	f7fe fa26 	bl	8004908 <WIZCHIP_READ>
 80064bc:	4603      	mov	r3, r0
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	72da      	strb	r2, [r3, #11]
 80064c4:	4829      	ldr	r0, [pc, #164]	; (800656c <wizchip_getnetinfo+0x170>)
 80064c6:	f7fe fa1f 	bl	8004908 <WIZCHIP_READ>
 80064ca:	4603      	mov	r3, r0
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	731a      	strb	r2, [r3, #12]
 80064d6:	4825      	ldr	r0, [pc, #148]	; (800656c <wizchip_getnetinfo+0x170>)
 80064d8:	f7fe fa16 	bl	8004908 <WIZCHIP_READ>
 80064dc:	4603      	mov	r3, r0
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	735a      	strb	r2, [r3, #13]
   getSIPR(pnetinfo->ip);
 80064e4:	4822      	ldr	r0, [pc, #136]	; (8006570 <wizchip_getnetinfo+0x174>)
 80064e6:	f7fe fa0f 	bl	8004908 <WIZCHIP_READ>
 80064ea:	4603      	mov	r3, r0
 80064ec:	0a1b      	lsrs	r3, r3, #8
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	719a      	strb	r2, [r3, #6]
 80064f6:	481e      	ldr	r0, [pc, #120]	; (8006570 <wizchip_getnetinfo+0x174>)
 80064f8:	f7fe fa06 	bl	8004908 <WIZCHIP_READ>
 80064fc:	4603      	mov	r3, r0
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	71da      	strb	r2, [r3, #7]
 8006504:	481b      	ldr	r0, [pc, #108]	; (8006574 <wizchip_getnetinfo+0x178>)
 8006506:	f7fe f9ff 	bl	8004908 <WIZCHIP_READ>
 800650a:	4603      	mov	r3, r0
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	b29b      	uxth	r3, r3
 8006510:	b2da      	uxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	721a      	strb	r2, [r3, #8]
 8006516:	4817      	ldr	r0, [pc, #92]	; (8006574 <wizchip_getnetinfo+0x178>)
 8006518:	f7fe f9f6 	bl	8004908 <WIZCHIP_READ>
 800651c:	4603      	mov	r3, r0
 800651e:	b2da      	uxtb	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	725a      	strb	r2, [r3, #9]
   pnetinfo->dns[0]= _DNS_[0];
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <wizchip_getnetinfo+0x17c>)
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <wizchip_getnetinfo+0x17c>)
 800652e:	785a      	ldrb	r2, [r3, #1]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006534:	4b10      	ldr	r3, [pc, #64]	; (8006578 <wizchip_getnetinfo+0x17c>)
 8006536:	789a      	ldrb	r2, [r3, #2]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800653c:	4b0e      	ldr	r3, [pc, #56]	; (8006578 <wizchip_getnetinfo+0x17c>)
 800653e:	78da      	ldrb	r2, [r3, #3]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <wizchip_getnetinfo+0x180>)
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	759a      	strb	r2, [r3, #22]
}
 800654c:	bf00      	nop
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	34000008 	.word	0x34000008
 8006558:	3400000a 	.word	0x3400000a
 800655c:	3400000c 	.word	0x3400000c
 8006560:	34000010 	.word	0x34000010
 8006564:	34000012 	.word	0x34000012
 8006568:	34000014 	.word	0x34000014
 800656c:	34000016 	.word	0x34000016
 8006570:	34000018 	.word	0x34000018
 8006574:	3400001a 	.word	0x3400001a
 8006578:	2000012c 	.word	0x2000012c
 800657c:	20000130 	.word	0x20000130

08006580 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <wizchip_setnetmode+0x1e>
 8006598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800659c:	e011      	b.n	80065c2 <wizchip_setnetmode+0x42>
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
#endif      
   tmp = getMR();
 800659e:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 80065a2:	f7fe f9b1 	bl	8004908 <WIZCHIP_READ>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 80065bc:	f7fe f986 	bl	80048cc <WIZCHIP_WRITE>
   return 0;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80065ce:	f04f 5050 	mov.w	r0, #872415232	; 0x34000000
 80065d2:	f7fe f999 	bl	8004908 <WIZCHIP_READ>
 80065d6:	4603      	mov	r3, r0
 80065d8:	b2db      	uxtb	r3, r3
}
 80065da:	4618      	mov	r0, r3
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	4806      	ldr	r0, [pc, #24]	; (800660c <wizchip_settimeout+0x2c>)
 80065f2:	f7fe f96b 	bl	80048cc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	4619      	mov	r1, r3
 80065fc:	4804      	ldr	r0, [pc, #16]	; (8006610 <wizchip_settimeout+0x30>)
 80065fe:	f7fe f965 	bl	80048cc <WIZCHIP_WRITE>
}
 8006602:	bf00      	nop
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	3400001e 	.word	0x3400001e
 8006610:	3400001c 	.word	0x3400001c

08006614 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800661c:	4808      	ldr	r0, [pc, #32]	; (8006640 <wizchip_gettimeout+0x2c>)
 800661e:	f7fe f973 	bl	8004908 <WIZCHIP_READ>
 8006622:	4603      	mov	r3, r0
 8006624:	b2da      	uxtb	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800662a:	4806      	ldr	r0, [pc, #24]	; (8006644 <wizchip_gettimeout+0x30>)
 800662c:	f7fe f96c 	bl	8004908 <WIZCHIP_READ>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	805a      	strh	r2, [r3, #2]
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	3400001e 	.word	0x3400001e
 8006644:	3400001c 	.word	0x3400001c

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	; (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000060 	.word	0x20000060

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	2600      	movs	r6, #0
 8006658:	4d0c      	ldr	r5, [pc, #48]	; (800668c <__libc_init_array+0x38>)
 800665a:	4c0d      	ldr	r4, [pc, #52]	; (8006690 <__libc_init_array+0x3c>)
 800665c:	1b64      	subs	r4, r4, r5
 800665e:	10a4      	asrs	r4, r4, #2
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	f001 f9ca 	bl	80079fc <_init>
 8006668:	2600      	movs	r6, #0
 800666a:	4d0a      	ldr	r5, [pc, #40]	; (8006694 <__libc_init_array+0x40>)
 800666c:	4c0a      	ldr	r4, [pc, #40]	; (8006698 <__libc_init_array+0x44>)
 800666e:	1b64      	subs	r4, r4, r5
 8006670:	10a4      	asrs	r4, r4, #2
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08007e84 	.word	0x08007e84
 8006690:	08007e84 	.word	0x08007e84
 8006694:	08007e84 	.word	0x08007e84
 8006698:	08007e88 	.word	0x08007e88

0800669c <memcpy>:
 800669c:	440a      	add	r2, r1
 800669e:	4291      	cmp	r1, r2
 80066a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066a4:	d100      	bne.n	80066a8 <memcpy+0xc>
 80066a6:	4770      	bx	lr
 80066a8:	b510      	push	{r4, lr}
 80066aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ae:	4291      	cmp	r1, r2
 80066b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b4:	d1f9      	bne.n	80066aa <memcpy+0xe>
 80066b6:	bd10      	pop	{r4, pc}

080066b8 <memset>:
 80066b8:	4603      	mov	r3, r0
 80066ba:	4402      	add	r2, r0
 80066bc:	4293      	cmp	r3, r2
 80066be:	d100      	bne.n	80066c2 <memset+0xa>
 80066c0:	4770      	bx	lr
 80066c2:	f803 1b01 	strb.w	r1, [r3], #1
 80066c6:	e7f9      	b.n	80066bc <memset+0x4>

080066c8 <_free_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4605      	mov	r5, r0
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d043      	beq.n	8006758 <_free_r+0x90>
 80066d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d4:	1f0c      	subs	r4, r1, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfb8      	it	lt
 80066da:	18e4      	addlt	r4, r4, r3
 80066dc:	f000 fcae 	bl	800703c <__malloc_lock>
 80066e0:	4a1e      	ldr	r2, [pc, #120]	; (800675c <_free_r+0x94>)
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	4610      	mov	r0, r2
 80066e6:	b933      	cbnz	r3, 80066f6 <_free_r+0x2e>
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	6014      	str	r4, [r2, #0]
 80066ec:	4628      	mov	r0, r5
 80066ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f2:	f000 bca9 	b.w	8007048 <__malloc_unlock>
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	d90a      	bls.n	8006710 <_free_r+0x48>
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	1862      	adds	r2, r4, r1
 80066fe:	4293      	cmp	r3, r2
 8006700:	bf01      	itttt	eq
 8006702:	681a      	ldreq	r2, [r3, #0]
 8006704:	685b      	ldreq	r3, [r3, #4]
 8006706:	1852      	addeq	r2, r2, r1
 8006708:	6022      	streq	r2, [r4, #0]
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	6004      	str	r4, [r0, #0]
 800670e:	e7ed      	b.n	80066ec <_free_r+0x24>
 8006710:	461a      	mov	r2, r3
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	b10b      	cbz	r3, 800671a <_free_r+0x52>
 8006716:	42a3      	cmp	r3, r4
 8006718:	d9fa      	bls.n	8006710 <_free_r+0x48>
 800671a:	6811      	ldr	r1, [r2, #0]
 800671c:	1850      	adds	r0, r2, r1
 800671e:	42a0      	cmp	r0, r4
 8006720:	d10b      	bne.n	800673a <_free_r+0x72>
 8006722:	6820      	ldr	r0, [r4, #0]
 8006724:	4401      	add	r1, r0
 8006726:	1850      	adds	r0, r2, r1
 8006728:	4283      	cmp	r3, r0
 800672a:	6011      	str	r1, [r2, #0]
 800672c:	d1de      	bne.n	80066ec <_free_r+0x24>
 800672e:	6818      	ldr	r0, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4401      	add	r1, r0
 8006734:	6011      	str	r1, [r2, #0]
 8006736:	6053      	str	r3, [r2, #4]
 8006738:	e7d8      	b.n	80066ec <_free_r+0x24>
 800673a:	d902      	bls.n	8006742 <_free_r+0x7a>
 800673c:	230c      	movs	r3, #12
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	e7d4      	b.n	80066ec <_free_r+0x24>
 8006742:	6820      	ldr	r0, [r4, #0]
 8006744:	1821      	adds	r1, r4, r0
 8006746:	428b      	cmp	r3, r1
 8006748:	bf01      	itttt	eq
 800674a:	6819      	ldreq	r1, [r3, #0]
 800674c:	685b      	ldreq	r3, [r3, #4]
 800674e:	1809      	addeq	r1, r1, r0
 8006750:	6021      	streq	r1, [r4, #0]
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	6054      	str	r4, [r2, #4]
 8006756:	e7c9      	b.n	80066ec <_free_r+0x24>
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	20000134 	.word	0x20000134

08006760 <_malloc_r>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	1ccd      	adds	r5, r1, #3
 8006764:	f025 0503 	bic.w	r5, r5, #3
 8006768:	3508      	adds	r5, #8
 800676a:	2d0c      	cmp	r5, #12
 800676c:	bf38      	it	cc
 800676e:	250c      	movcc	r5, #12
 8006770:	2d00      	cmp	r5, #0
 8006772:	4606      	mov	r6, r0
 8006774:	db01      	blt.n	800677a <_malloc_r+0x1a>
 8006776:	42a9      	cmp	r1, r5
 8006778:	d903      	bls.n	8006782 <_malloc_r+0x22>
 800677a:	230c      	movs	r3, #12
 800677c:	6033      	str	r3, [r6, #0]
 800677e:	2000      	movs	r0, #0
 8006780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006782:	f000 fc5b 	bl	800703c <__malloc_lock>
 8006786:	4921      	ldr	r1, [pc, #132]	; (800680c <_malloc_r+0xac>)
 8006788:	680a      	ldr	r2, [r1, #0]
 800678a:	4614      	mov	r4, r2
 800678c:	b99c      	cbnz	r4, 80067b6 <_malloc_r+0x56>
 800678e:	4f20      	ldr	r7, [pc, #128]	; (8006810 <_malloc_r+0xb0>)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	b923      	cbnz	r3, 800679e <_malloc_r+0x3e>
 8006794:	4621      	mov	r1, r4
 8006796:	4630      	mov	r0, r6
 8006798:	f000 f8ca 	bl	8006930 <_sbrk_r>
 800679c:	6038      	str	r0, [r7, #0]
 800679e:	4629      	mov	r1, r5
 80067a0:	4630      	mov	r0, r6
 80067a2:	f000 f8c5 	bl	8006930 <_sbrk_r>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d123      	bne.n	80067f2 <_malloc_r+0x92>
 80067aa:	230c      	movs	r3, #12
 80067ac:	4630      	mov	r0, r6
 80067ae:	6033      	str	r3, [r6, #0]
 80067b0:	f000 fc4a 	bl	8007048 <__malloc_unlock>
 80067b4:	e7e3      	b.n	800677e <_malloc_r+0x1e>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	1b5b      	subs	r3, r3, r5
 80067ba:	d417      	bmi.n	80067ec <_malloc_r+0x8c>
 80067bc:	2b0b      	cmp	r3, #11
 80067be:	d903      	bls.n	80067c8 <_malloc_r+0x68>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	441c      	add	r4, r3
 80067c4:	6025      	str	r5, [r4, #0]
 80067c6:	e004      	b.n	80067d2 <_malloc_r+0x72>
 80067c8:	6863      	ldr	r3, [r4, #4]
 80067ca:	42a2      	cmp	r2, r4
 80067cc:	bf0c      	ite	eq
 80067ce:	600b      	streq	r3, [r1, #0]
 80067d0:	6053      	strne	r3, [r2, #4]
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 fc38 	bl	8007048 <__malloc_unlock>
 80067d8:	f104 000b 	add.w	r0, r4, #11
 80067dc:	1d23      	adds	r3, r4, #4
 80067de:	f020 0007 	bic.w	r0, r0, #7
 80067e2:	1ac2      	subs	r2, r0, r3
 80067e4:	d0cc      	beq.n	8006780 <_malloc_r+0x20>
 80067e6:	1a1b      	subs	r3, r3, r0
 80067e8:	50a3      	str	r3, [r4, r2]
 80067ea:	e7c9      	b.n	8006780 <_malloc_r+0x20>
 80067ec:	4622      	mov	r2, r4
 80067ee:	6864      	ldr	r4, [r4, #4]
 80067f0:	e7cc      	b.n	800678c <_malloc_r+0x2c>
 80067f2:	1cc4      	adds	r4, r0, #3
 80067f4:	f024 0403 	bic.w	r4, r4, #3
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d0e3      	beq.n	80067c4 <_malloc_r+0x64>
 80067fc:	1a21      	subs	r1, r4, r0
 80067fe:	4630      	mov	r0, r6
 8006800:	f000 f896 	bl	8006930 <_sbrk_r>
 8006804:	3001      	adds	r0, #1
 8006806:	d1dd      	bne.n	80067c4 <_malloc_r+0x64>
 8006808:	e7cf      	b.n	80067aa <_malloc_r+0x4a>
 800680a:	bf00      	nop
 800680c:	20000134 	.word	0x20000134
 8006810:	20000138 	.word	0x20000138

08006814 <iprintf>:
 8006814:	b40f      	push	{r0, r1, r2, r3}
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <iprintf+0x2c>)
 8006818:	b513      	push	{r0, r1, r4, lr}
 800681a:	681c      	ldr	r4, [r3, #0]
 800681c:	b124      	cbz	r4, 8006828 <iprintf+0x14>
 800681e:	69a3      	ldr	r3, [r4, #24]
 8006820:	b913      	cbnz	r3, 8006828 <iprintf+0x14>
 8006822:	4620      	mov	r0, r4
 8006824:	f000 faf4 	bl	8006e10 <__sinit>
 8006828:	ab05      	add	r3, sp, #20
 800682a:	4620      	mov	r0, r4
 800682c:	9a04      	ldr	r2, [sp, #16]
 800682e:	68a1      	ldr	r1, [r4, #8]
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	f000 fd93 	bl	800735c <_vfiprintf_r>
 8006836:	b002      	add	sp, #8
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	b004      	add	sp, #16
 800683e:	4770      	bx	lr
 8006840:	20000060 	.word	0x20000060

08006844 <_puts_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	4605      	mov	r5, r0
 800684a:	b118      	cbz	r0, 8006854 <_puts_r+0x10>
 800684c:	6983      	ldr	r3, [r0, #24]
 800684e:	b90b      	cbnz	r3, 8006854 <_puts_r+0x10>
 8006850:	f000 fade 	bl	8006e10 <__sinit>
 8006854:	69ab      	ldr	r3, [r5, #24]
 8006856:	68ac      	ldr	r4, [r5, #8]
 8006858:	b913      	cbnz	r3, 8006860 <_puts_r+0x1c>
 800685a:	4628      	mov	r0, r5
 800685c:	f000 fad8 	bl	8006e10 <__sinit>
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <_puts_r+0xd0>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d120      	bne.n	80068a8 <_puts_r+0x64>
 8006866:	686c      	ldr	r4, [r5, #4]
 8006868:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800686a:	07db      	lsls	r3, r3, #31
 800686c:	d405      	bmi.n	800687a <_puts_r+0x36>
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	0598      	lsls	r0, r3, #22
 8006872:	d402      	bmi.n	800687a <_puts_r+0x36>
 8006874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006876:	f000 fb69 	bl	8006f4c <__retarget_lock_acquire_recursive>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	0719      	lsls	r1, r3, #28
 800687e:	d51d      	bpl.n	80068bc <_puts_r+0x78>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	b1db      	cbz	r3, 80068bc <_puts_r+0x78>
 8006884:	3e01      	subs	r6, #1
 8006886:	68a3      	ldr	r3, [r4, #8]
 8006888:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800688c:	3b01      	subs	r3, #1
 800688e:	60a3      	str	r3, [r4, #8]
 8006890:	bb39      	cbnz	r1, 80068e2 <_puts_r+0x9e>
 8006892:	2b00      	cmp	r3, #0
 8006894:	da38      	bge.n	8006908 <_puts_r+0xc4>
 8006896:	4622      	mov	r2, r4
 8006898:	210a      	movs	r1, #10
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f8bc 	bl	8006a18 <__swbuf_r>
 80068a0:	3001      	adds	r0, #1
 80068a2:	d011      	beq.n	80068c8 <_puts_r+0x84>
 80068a4:	250a      	movs	r5, #10
 80068a6:	e011      	b.n	80068cc <_puts_r+0x88>
 80068a8:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <_puts_r+0xd4>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <_puts_r+0x6e>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7da      	b.n	8006868 <_puts_r+0x24>
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <_puts_r+0xd8>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7d5      	b.n	8006868 <_puts_r+0x24>
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f90e 	bl	8006ae0 <__swsetup_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d0dd      	beq.n	8006884 <_puts_r+0x40>
 80068c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80068cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ce:	07da      	lsls	r2, r3, #31
 80068d0:	d405      	bmi.n	80068de <_puts_r+0x9a>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	059b      	lsls	r3, r3, #22
 80068d6:	d402      	bmi.n	80068de <_puts_r+0x9a>
 80068d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068da:	f000 fb38 	bl	8006f4e <__retarget_lock_release_recursive>
 80068de:	4628      	mov	r0, r5
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da04      	bge.n	80068f0 <_puts_r+0xac>
 80068e6:	69a2      	ldr	r2, [r4, #24]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	dc06      	bgt.n	80068fa <_puts_r+0xb6>
 80068ec:	290a      	cmp	r1, #10
 80068ee:	d004      	beq.n	80068fa <_puts_r+0xb6>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	7019      	strb	r1, [r3, #0]
 80068f8:	e7c5      	b.n	8006886 <_puts_r+0x42>
 80068fa:	4622      	mov	r2, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f88b 	bl	8006a18 <__swbuf_r>
 8006902:	3001      	adds	r0, #1
 8006904:	d1bf      	bne.n	8006886 <_puts_r+0x42>
 8006906:	e7df      	b.n	80068c8 <_puts_r+0x84>
 8006908:	250a      	movs	r5, #10
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	6022      	str	r2, [r4, #0]
 8006910:	701d      	strb	r5, [r3, #0]
 8006912:	e7db      	b.n	80068cc <_puts_r+0x88>
 8006914:	08007e10 	.word	0x08007e10
 8006918:	08007e30 	.word	0x08007e30
 800691c:	08007df0 	.word	0x08007df0

08006920 <puts>:
 8006920:	4b02      	ldr	r3, [pc, #8]	; (800692c <puts+0xc>)
 8006922:	4601      	mov	r1, r0
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	f7ff bf8d 	b.w	8006844 <_puts_r>
 800692a:	bf00      	nop
 800692c:	20000060 	.word	0x20000060

08006930 <_sbrk_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	2300      	movs	r3, #0
 8006934:	4d05      	ldr	r5, [pc, #20]	; (800694c <_sbrk_r+0x1c>)
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fa ff64 	bl	8001808 <_sbrk>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_sbrk_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_sbrk_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20001638 	.word	0x20001638

08006950 <siprintf>:
 8006950:	b40e      	push	{r1, r2, r3}
 8006952:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006956:	b500      	push	{lr}
 8006958:	b09c      	sub	sp, #112	; 0x70
 800695a:	ab1d      	add	r3, sp, #116	; 0x74
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	9006      	str	r0, [sp, #24]
 8006960:	9107      	str	r1, [sp, #28]
 8006962:	9104      	str	r1, [sp, #16]
 8006964:	4808      	ldr	r0, [pc, #32]	; (8006988 <siprintf+0x38>)
 8006966:	4909      	ldr	r1, [pc, #36]	; (800698c <siprintf+0x3c>)
 8006968:	f853 2b04 	ldr.w	r2, [r3], #4
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	6800      	ldr	r0, [r0, #0]
 8006970:	a902      	add	r1, sp, #8
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	f000 fbca 	bl	800710c <_svfiprintf_r>
 8006978:	2200      	movs	r2, #0
 800697a:	9b02      	ldr	r3, [sp, #8]
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	b01c      	add	sp, #112	; 0x70
 8006980:	f85d eb04 	ldr.w	lr, [sp], #4
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	20000060 	.word	0x20000060
 800698c:	ffff0208 	.word	0xffff0208

08006990 <__sread>:
 8006990:	b510      	push	{r4, lr}
 8006992:	460c      	mov	r4, r1
 8006994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006998:	f000 ffa6 	bl	80078e8 <_read_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	bfab      	itete	ge
 80069a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069a2:	89a3      	ldrhlt	r3, [r4, #12]
 80069a4:	181b      	addge	r3, r3, r0
 80069a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069aa:	bfac      	ite	ge
 80069ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80069ae:	81a3      	strhlt	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__swrite>:
 80069b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b6:	461f      	mov	r7, r3
 80069b8:	898b      	ldrh	r3, [r1, #12]
 80069ba:	4605      	mov	r5, r0
 80069bc:	05db      	lsls	r3, r3, #23
 80069be:	460c      	mov	r4, r1
 80069c0:	4616      	mov	r6, r2
 80069c2:	d505      	bpl.n	80069d0 <__swrite+0x1e>
 80069c4:	2302      	movs	r3, #2
 80069c6:	2200      	movs	r2, #0
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	f000 fac0 	bl	8006f50 <_lseek_r>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	4632      	mov	r2, r6
 80069d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	4628      	mov	r0, r5
 80069dc:	463b      	mov	r3, r7
 80069de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	f000 b869 	b.w	8006abc <_write_r>

080069ea <__sseek>:
 80069ea:	b510      	push	{r4, lr}
 80069ec:	460c      	mov	r4, r1
 80069ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f2:	f000 faad 	bl	8006f50 <_lseek_r>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	bf15      	itete	ne
 80069fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a06:	81a3      	strheq	r3, [r4, #12]
 8006a08:	bf18      	it	ne
 8006a0a:	81a3      	strhne	r3, [r4, #12]
 8006a0c:	bd10      	pop	{r4, pc}

08006a0e <__sclose>:
 8006a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a12:	f000 b8d3 	b.w	8006bbc <_close_r>
	...

08006a18 <__swbuf_r>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	460e      	mov	r6, r1
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	4605      	mov	r5, r0
 8006a20:	b118      	cbz	r0, 8006a2a <__swbuf_r+0x12>
 8006a22:	6983      	ldr	r3, [r0, #24]
 8006a24:	b90b      	cbnz	r3, 8006a2a <__swbuf_r+0x12>
 8006a26:	f000 f9f3 	bl	8006e10 <__sinit>
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <__swbuf_r+0x98>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d12b      	bne.n	8006a88 <__swbuf_r+0x70>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	69a3      	ldr	r3, [r4, #24]
 8006a34:	60a3      	str	r3, [r4, #8]
 8006a36:	89a3      	ldrh	r3, [r4, #12]
 8006a38:	071a      	lsls	r2, r3, #28
 8006a3a:	d52f      	bpl.n	8006a9c <__swbuf_r+0x84>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	b36b      	cbz	r3, 8006a9c <__swbuf_r+0x84>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	b2f6      	uxtb	r6, r6
 8006a46:	1ac0      	subs	r0, r0, r3
 8006a48:	6963      	ldr	r3, [r4, #20]
 8006a4a:	4637      	mov	r7, r6
 8006a4c:	4283      	cmp	r3, r0
 8006a4e:	dc04      	bgt.n	8006a5a <__swbuf_r+0x42>
 8006a50:	4621      	mov	r1, r4
 8006a52:	4628      	mov	r0, r5
 8006a54:	f000 f948 	bl	8006ce8 <_fflush_r>
 8006a58:	bb30      	cbnz	r0, 8006aa8 <__swbuf_r+0x90>
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	701e      	strb	r6, [r3, #0]
 8006a6a:	6963      	ldr	r3, [r4, #20]
 8006a6c:	4283      	cmp	r3, r0
 8006a6e:	d004      	beq.n	8006a7a <__swbuf_r+0x62>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	07db      	lsls	r3, r3, #31
 8006a74:	d506      	bpl.n	8006a84 <__swbuf_r+0x6c>
 8006a76:	2e0a      	cmp	r6, #10
 8006a78:	d104      	bne.n	8006a84 <__swbuf_r+0x6c>
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 f933 	bl	8006ce8 <_fflush_r>
 8006a82:	b988      	cbnz	r0, 8006aa8 <__swbuf_r+0x90>
 8006a84:	4638      	mov	r0, r7
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <__swbuf_r+0x9c>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <__swbuf_r+0x7a>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7cf      	b.n	8006a32 <__swbuf_r+0x1a>
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <__swbuf_r+0xa0>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7ca      	b.n	8006a32 <__swbuf_r+0x1a>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f81e 	bl	8006ae0 <__swsetup_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d0cb      	beq.n	8006a40 <__swbuf_r+0x28>
 8006aa8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006aac:	e7ea      	b.n	8006a84 <__swbuf_r+0x6c>
 8006aae:	bf00      	nop
 8006ab0:	08007e10 	.word	0x08007e10
 8006ab4:	08007e30 	.word	0x08007e30
 8006ab8:	08007df0 	.word	0x08007df0

08006abc <_write_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4d05      	ldr	r5, [pc, #20]	; (8006adc <_write_r+0x20>)
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7f9 fbfa 	bl	80002c4 <_write>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_write_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_write_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20001638 	.word	0x20001638

08006ae0 <__swsetup_r>:
 8006ae0:	4b32      	ldr	r3, [pc, #200]	; (8006bac <__swsetup_r+0xcc>)
 8006ae2:	b570      	push	{r4, r5, r6, lr}
 8006ae4:	681d      	ldr	r5, [r3, #0]
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460c      	mov	r4, r1
 8006aea:	b125      	cbz	r5, 8006af6 <__swsetup_r+0x16>
 8006aec:	69ab      	ldr	r3, [r5, #24]
 8006aee:	b913      	cbnz	r3, 8006af6 <__swsetup_r+0x16>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f000 f98d 	bl	8006e10 <__sinit>
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <__swsetup_r+0xd0>)
 8006af8:	429c      	cmp	r4, r3
 8006afa:	d10f      	bne.n	8006b1c <__swsetup_r+0x3c>
 8006afc:	686c      	ldr	r4, [r5, #4]
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b04:	0719      	lsls	r1, r3, #28
 8006b06:	d42c      	bmi.n	8006b62 <__swsetup_r+0x82>
 8006b08:	06dd      	lsls	r5, r3, #27
 8006b0a:	d411      	bmi.n	8006b30 <__swsetup_r+0x50>
 8006b0c:	2309      	movs	r3, #9
 8006b0e:	6033      	str	r3, [r6, #0]
 8006b10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e03e      	b.n	8006b9a <__swsetup_r+0xba>
 8006b1c:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <__swsetup_r+0xd4>)
 8006b1e:	429c      	cmp	r4, r3
 8006b20:	d101      	bne.n	8006b26 <__swsetup_r+0x46>
 8006b22:	68ac      	ldr	r4, [r5, #8]
 8006b24:	e7eb      	b.n	8006afe <__swsetup_r+0x1e>
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <__swsetup_r+0xd8>)
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	bf08      	it	eq
 8006b2c:	68ec      	ldreq	r4, [r5, #12]
 8006b2e:	e7e6      	b.n	8006afe <__swsetup_r+0x1e>
 8006b30:	0758      	lsls	r0, r3, #29
 8006b32:	d512      	bpl.n	8006b5a <__swsetup_r+0x7a>
 8006b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b36:	b141      	cbz	r1, 8006b4a <__swsetup_r+0x6a>
 8006b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b3c:	4299      	cmp	r1, r3
 8006b3e:	d002      	beq.n	8006b46 <__swsetup_r+0x66>
 8006b40:	4630      	mov	r0, r6
 8006b42:	f7ff fdc1 	bl	80066c8 <_free_r>
 8006b46:	2300      	movs	r3, #0
 8006b48:	6363      	str	r3, [r4, #52]	; 0x34
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b50:	81a3      	strh	r3, [r4, #12]
 8006b52:	2300      	movs	r3, #0
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	f043 0308 	orr.w	r3, r3, #8
 8006b60:	81a3      	strh	r3, [r4, #12]
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	b94b      	cbnz	r3, 8006b7a <__swsetup_r+0x9a>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b70:	d003      	beq.n	8006b7a <__swsetup_r+0x9a>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 fa21 	bl	8006fbc <__smakebuf_r>
 8006b7a:	89a0      	ldrh	r0, [r4, #12]
 8006b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b80:	f010 0301 	ands.w	r3, r0, #1
 8006b84:	d00a      	beq.n	8006b9c <__swsetup_r+0xbc>
 8006b86:	2300      	movs	r3, #0
 8006b88:	60a3      	str	r3, [r4, #8]
 8006b8a:	6963      	ldr	r3, [r4, #20]
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	61a3      	str	r3, [r4, #24]
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	b943      	cbnz	r3, 8006ba6 <__swsetup_r+0xc6>
 8006b94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b98:	d1ba      	bne.n	8006b10 <__swsetup_r+0x30>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	0781      	lsls	r1, r0, #30
 8006b9e:	bf58      	it	pl
 8006ba0:	6963      	ldrpl	r3, [r4, #20]
 8006ba2:	60a3      	str	r3, [r4, #8]
 8006ba4:	e7f4      	b.n	8006b90 <__swsetup_r+0xb0>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e7f7      	b.n	8006b9a <__swsetup_r+0xba>
 8006baa:	bf00      	nop
 8006bac:	20000060 	.word	0x20000060
 8006bb0:	08007e10 	.word	0x08007e10
 8006bb4:	08007e30 	.word	0x08007e30
 8006bb8:	08007df0 	.word	0x08007df0

08006bbc <_close_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4d05      	ldr	r5, [pc, #20]	; (8006bd8 <_close_r+0x1c>)
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	602b      	str	r3, [r5, #0]
 8006bc8:	f7fa fded 	bl	80017a6 <_close>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_close_r+0x1a>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_close_r+0x1a>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20001638 	.word	0x20001638

08006bdc <__sflush_r>:
 8006bdc:	898a      	ldrh	r2, [r1, #12]
 8006bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be2:	4605      	mov	r5, r0
 8006be4:	0710      	lsls	r0, r2, #28
 8006be6:	460c      	mov	r4, r1
 8006be8:	d458      	bmi.n	8006c9c <__sflush_r+0xc0>
 8006bea:	684b      	ldr	r3, [r1, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc05      	bgt.n	8006bfc <__sflush_r+0x20>
 8006bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dc02      	bgt.n	8006bfc <__sflush_r+0x20>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d0f9      	beq.n	8006bf6 <__sflush_r+0x1a>
 8006c02:	2300      	movs	r3, #0
 8006c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c08:	682f      	ldr	r7, [r5, #0]
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	d032      	beq.n	8006c74 <__sflush_r+0x98>
 8006c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	075a      	lsls	r2, r3, #29
 8006c14:	d505      	bpl.n	8006c22 <__sflush_r+0x46>
 8006c16:	6863      	ldr	r3, [r4, #4]
 8006c18:	1ac0      	subs	r0, r0, r3
 8006c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c1c:	b10b      	cbz	r3, 8006c22 <__sflush_r+0x46>
 8006c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c20:	1ac0      	subs	r0, r0, r3
 8006c22:	2300      	movs	r3, #0
 8006c24:	4602      	mov	r2, r0
 8006c26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c28:	4628      	mov	r0, r5
 8006c2a:	6a21      	ldr	r1, [r4, #32]
 8006c2c:	47b0      	blx	r6
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	d106      	bne.n	8006c42 <__sflush_r+0x66>
 8006c34:	6829      	ldr	r1, [r5, #0]
 8006c36:	291d      	cmp	r1, #29
 8006c38:	d82c      	bhi.n	8006c94 <__sflush_r+0xb8>
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <__sflush_r+0x108>)
 8006c3c:	40ca      	lsrs	r2, r1
 8006c3e:	07d6      	lsls	r6, r2, #31
 8006c40:	d528      	bpl.n	8006c94 <__sflush_r+0xb8>
 8006c42:	2200      	movs	r2, #0
 8006c44:	6062      	str	r2, [r4, #4]
 8006c46:	6922      	ldr	r2, [r4, #16]
 8006c48:	04d9      	lsls	r1, r3, #19
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	d504      	bpl.n	8006c58 <__sflush_r+0x7c>
 8006c4e:	1c42      	adds	r2, r0, #1
 8006c50:	d101      	bne.n	8006c56 <__sflush_r+0x7a>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b903      	cbnz	r3, 8006c58 <__sflush_r+0x7c>
 8006c56:	6560      	str	r0, [r4, #84]	; 0x54
 8006c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c5a:	602f      	str	r7, [r5, #0]
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d0ca      	beq.n	8006bf6 <__sflush_r+0x1a>
 8006c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c64:	4299      	cmp	r1, r3
 8006c66:	d002      	beq.n	8006c6e <__sflush_r+0x92>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	f7ff fd2d 	bl	80066c8 <_free_r>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	6360      	str	r0, [r4, #52]	; 0x34
 8006c72:	e7c1      	b.n	8006bf8 <__sflush_r+0x1c>
 8006c74:	6a21      	ldr	r1, [r4, #32]
 8006c76:	2301      	movs	r3, #1
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b0      	blx	r6
 8006c7c:	1c41      	adds	r1, r0, #1
 8006c7e:	d1c7      	bne.n	8006c10 <__sflush_r+0x34>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0c4      	beq.n	8006c10 <__sflush_r+0x34>
 8006c86:	2b1d      	cmp	r3, #29
 8006c88:	d001      	beq.n	8006c8e <__sflush_r+0xb2>
 8006c8a:	2b16      	cmp	r3, #22
 8006c8c:	d101      	bne.n	8006c92 <__sflush_r+0xb6>
 8006c8e:	602f      	str	r7, [r5, #0]
 8006c90:	e7b1      	b.n	8006bf6 <__sflush_r+0x1a>
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	e7ad      	b.n	8006bf8 <__sflush_r+0x1c>
 8006c9c:	690f      	ldr	r7, [r1, #16]
 8006c9e:	2f00      	cmp	r7, #0
 8006ca0:	d0a9      	beq.n	8006bf6 <__sflush_r+0x1a>
 8006ca2:	0793      	lsls	r3, r2, #30
 8006ca4:	bf18      	it	ne
 8006ca6:	2300      	movne	r3, #0
 8006ca8:	680e      	ldr	r6, [r1, #0]
 8006caa:	bf08      	it	eq
 8006cac:	694b      	ldreq	r3, [r1, #20]
 8006cae:	eba6 0807 	sub.w	r8, r6, r7
 8006cb2:	600f      	str	r7, [r1, #0]
 8006cb4:	608b      	str	r3, [r1, #8]
 8006cb6:	f1b8 0f00 	cmp.w	r8, #0
 8006cba:	dd9c      	ble.n	8006bf6 <__sflush_r+0x1a>
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	6a21      	ldr	r1, [r4, #32]
 8006cc4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cc6:	47b0      	blx	r6
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dc06      	bgt.n	8006cda <__sflush_r+0xfe>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	e78e      	b.n	8006bf8 <__sflush_r+0x1c>
 8006cda:	4407      	add	r7, r0
 8006cdc:	eba8 0800 	sub.w	r8, r8, r0
 8006ce0:	e7e9      	b.n	8006cb6 <__sflush_r+0xda>
 8006ce2:	bf00      	nop
 8006ce4:	20400001 	.word	0x20400001

08006ce8 <_fflush_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_fflush_r+0x10>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	b118      	cbz	r0, 8006d02 <_fflush_r+0x1a>
 8006cfa:	6983      	ldr	r3, [r0, #24]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <_fflush_r+0x1a>
 8006cfe:	f000 f887 	bl	8006e10 <__sinit>
 8006d02:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <_fflush_r+0x6c>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	d11b      	bne.n	8006d40 <_fflush_r+0x58>
 8006d08:	686c      	ldr	r4, [r5, #4]
 8006d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d0ef      	beq.n	8006cf2 <_fflush_r+0xa>
 8006d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d14:	07d0      	lsls	r0, r2, #31
 8006d16:	d404      	bmi.n	8006d22 <_fflush_r+0x3a>
 8006d18:	0599      	lsls	r1, r3, #22
 8006d1a:	d402      	bmi.n	8006d22 <_fflush_r+0x3a>
 8006d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1e:	f000 f915 	bl	8006f4c <__retarget_lock_acquire_recursive>
 8006d22:	4628      	mov	r0, r5
 8006d24:	4621      	mov	r1, r4
 8006d26:	f7ff ff59 	bl	8006bdc <__sflush_r>
 8006d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	07da      	lsls	r2, r3, #31
 8006d30:	d4e0      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	059b      	lsls	r3, r3, #22
 8006d36:	d4dd      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d3a:	f000 f908 	bl	8006f4e <__retarget_lock_release_recursive>
 8006d3e:	e7d9      	b.n	8006cf4 <_fflush_r+0xc>
 8006d40:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <_fflush_r+0x70>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <_fflush_r+0x62>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7df      	b.n	8006d0a <_fflush_r+0x22>
 8006d4a:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <_fflush_r+0x74>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7da      	b.n	8006d0a <_fflush_r+0x22>
 8006d54:	08007e10 	.word	0x08007e10
 8006d58:	08007e30 	.word	0x08007e30
 8006d5c:	08007df0 	.word	0x08007df0

08006d60 <std>:
 8006d60:	2300      	movs	r3, #0
 8006d62:	b510      	push	{r4, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	e9c0 3300 	strd	r3, r3, [r0]
 8006d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d6e:	6083      	str	r3, [r0, #8]
 8006d70:	8181      	strh	r1, [r0, #12]
 8006d72:	6643      	str	r3, [r0, #100]	; 0x64
 8006d74:	81c2      	strh	r2, [r0, #14]
 8006d76:	6183      	str	r3, [r0, #24]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	305c      	adds	r0, #92	; 0x5c
 8006d7e:	f7ff fc9b 	bl	80066b8 <memset>
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <std+0x38>)
 8006d84:	6224      	str	r4, [r4, #32]
 8006d86:	6263      	str	r3, [r4, #36]	; 0x24
 8006d88:	4b04      	ldr	r3, [pc, #16]	; (8006d9c <std+0x3c>)
 8006d8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d8c:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <std+0x40>)
 8006d8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <std+0x44>)
 8006d92:	6323      	str	r3, [r4, #48]	; 0x30
 8006d94:	bd10      	pop	{r4, pc}
 8006d96:	bf00      	nop
 8006d98:	08006991 	.word	0x08006991
 8006d9c:	080069b3 	.word	0x080069b3
 8006da0:	080069eb 	.word	0x080069eb
 8006da4:	08006a0f 	.word	0x08006a0f

08006da8 <_cleanup_r>:
 8006da8:	4901      	ldr	r1, [pc, #4]	; (8006db0 <_cleanup_r+0x8>)
 8006daa:	f000 b8af 	b.w	8006f0c <_fwalk_reent>
 8006dae:	bf00      	nop
 8006db0:	08006ce9 	.word	0x08006ce9

08006db4 <__sfmoreglue>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	2568      	movs	r5, #104	; 0x68
 8006db8:	1e4a      	subs	r2, r1, #1
 8006dba:	4355      	muls	r5, r2
 8006dbc:	460e      	mov	r6, r1
 8006dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dc2:	f7ff fccd 	bl	8006760 <_malloc_r>
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	b140      	cbz	r0, 8006ddc <__sfmoreglue+0x28>
 8006dca:	2100      	movs	r1, #0
 8006dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8006dd0:	300c      	adds	r0, #12
 8006dd2:	60a0      	str	r0, [r4, #8]
 8006dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006dd8:	f7ff fc6e 	bl	80066b8 <memset>
 8006ddc:	4620      	mov	r0, r4
 8006dde:	bd70      	pop	{r4, r5, r6, pc}

08006de0 <__sfp_lock_acquire>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__sfp_lock_acquire+0x8>)
 8006de2:	f000 b8b3 	b.w	8006f4c <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	20001634 	.word	0x20001634

08006dec <__sfp_lock_release>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__sfp_lock_release+0x8>)
 8006dee:	f000 b8ae 	b.w	8006f4e <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	20001634 	.word	0x20001634

08006df8 <__sinit_lock_acquire>:
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <__sinit_lock_acquire+0x8>)
 8006dfa:	f000 b8a7 	b.w	8006f4c <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	2000162f 	.word	0x2000162f

08006e04 <__sinit_lock_release>:
 8006e04:	4801      	ldr	r0, [pc, #4]	; (8006e0c <__sinit_lock_release+0x8>)
 8006e06:	f000 b8a2 	b.w	8006f4e <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	2000162f 	.word	0x2000162f

08006e10 <__sinit>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	f7ff fff0 	bl	8006df8 <__sinit_lock_acquire>
 8006e18:	69a3      	ldr	r3, [r4, #24]
 8006e1a:	b11b      	cbz	r3, 8006e24 <__sinit+0x14>
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e20:	f7ff bff0 	b.w	8006e04 <__sinit_lock_release>
 8006e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e28:	6523      	str	r3, [r4, #80]	; 0x50
 8006e2a:	4b13      	ldr	r3, [pc, #76]	; (8006e78 <__sinit+0x68>)
 8006e2c:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <__sinit+0x6c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	bf08      	it	eq
 8006e36:	2301      	moveq	r3, #1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	bf08      	it	eq
 8006e3c:	61a3      	streq	r3, [r4, #24]
 8006e3e:	f000 f81f 	bl	8006e80 <__sfp>
 8006e42:	6060      	str	r0, [r4, #4]
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 f81b 	bl	8006e80 <__sfp>
 8006e4a:	60a0      	str	r0, [r4, #8]
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f000 f817 	bl	8006e80 <__sfp>
 8006e52:	2200      	movs	r2, #0
 8006e54:	2104      	movs	r1, #4
 8006e56:	60e0      	str	r0, [r4, #12]
 8006e58:	6860      	ldr	r0, [r4, #4]
 8006e5a:	f7ff ff81 	bl	8006d60 <std>
 8006e5e:	2201      	movs	r2, #1
 8006e60:	2109      	movs	r1, #9
 8006e62:	68a0      	ldr	r0, [r4, #8]
 8006e64:	f7ff ff7c 	bl	8006d60 <std>
 8006e68:	2202      	movs	r2, #2
 8006e6a:	2112      	movs	r1, #18
 8006e6c:	68e0      	ldr	r0, [r4, #12]
 8006e6e:	f7ff ff77 	bl	8006d60 <std>
 8006e72:	2301      	movs	r3, #1
 8006e74:	61a3      	str	r3, [r4, #24]
 8006e76:	e7d1      	b.n	8006e1c <__sinit+0xc>
 8006e78:	08007dec 	.word	0x08007dec
 8006e7c:	08006da9 	.word	0x08006da9

08006e80 <__sfp>:
 8006e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e82:	4607      	mov	r7, r0
 8006e84:	f7ff ffac 	bl	8006de0 <__sfp_lock_acquire>
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <__sfp+0x84>)
 8006e8a:	681e      	ldr	r6, [r3, #0]
 8006e8c:	69b3      	ldr	r3, [r6, #24]
 8006e8e:	b913      	cbnz	r3, 8006e96 <__sfp+0x16>
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbd 	bl	8006e10 <__sinit>
 8006e96:	3648      	adds	r6, #72	; 0x48
 8006e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	d503      	bpl.n	8006ea8 <__sfp+0x28>
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	b30b      	cbz	r3, 8006ee8 <__sfp+0x68>
 8006ea4:	6836      	ldr	r6, [r6, #0]
 8006ea6:	e7f7      	b.n	8006e98 <__sfp+0x18>
 8006ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006eac:	b9d5      	cbnz	r5, 8006ee4 <__sfp+0x64>
 8006eae:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <__sfp+0x88>)
 8006eb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006eb4:	60e3      	str	r3, [r4, #12]
 8006eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8006eb8:	f000 f847 	bl	8006f4a <__retarget_lock_init_recursive>
 8006ebc:	f7ff ff96 	bl	8006dec <__sfp_lock_release>
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006ecc:	6025      	str	r5, [r4, #0]
 8006ece:	61a5      	str	r5, [r4, #24]
 8006ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ed4:	f7ff fbf0 	bl	80066b8 <memset>
 8006ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee4:	3468      	adds	r4, #104	; 0x68
 8006ee6:	e7d9      	b.n	8006e9c <__sfp+0x1c>
 8006ee8:	2104      	movs	r1, #4
 8006eea:	4638      	mov	r0, r7
 8006eec:	f7ff ff62 	bl	8006db4 <__sfmoreglue>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	6030      	str	r0, [r6, #0]
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d1d5      	bne.n	8006ea4 <__sfp+0x24>
 8006ef8:	f7ff ff78 	bl	8006dec <__sfp_lock_release>
 8006efc:	230c      	movs	r3, #12
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	e7ee      	b.n	8006ee0 <__sfp+0x60>
 8006f02:	bf00      	nop
 8006f04:	08007dec 	.word	0x08007dec
 8006f08:	ffff0001 	.word	0xffff0001

08006f0c <_fwalk_reent>:
 8006f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f10:	4606      	mov	r6, r0
 8006f12:	4688      	mov	r8, r1
 8006f14:	2700      	movs	r7, #0
 8006f16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8006f22:	d505      	bpl.n	8006f30 <_fwalk_reent+0x24>
 8006f24:	6824      	ldr	r4, [r4, #0]
 8006f26:	2c00      	cmp	r4, #0
 8006f28:	d1f7      	bne.n	8006f1a <_fwalk_reent+0xe>
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f30:	89ab      	ldrh	r3, [r5, #12]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d907      	bls.n	8006f46 <_fwalk_reent+0x3a>
 8006f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	d003      	beq.n	8006f46 <_fwalk_reent+0x3a>
 8006f3e:	4629      	mov	r1, r5
 8006f40:	4630      	mov	r0, r6
 8006f42:	47c0      	blx	r8
 8006f44:	4307      	orrs	r7, r0
 8006f46:	3568      	adds	r5, #104	; 0x68
 8006f48:	e7e9      	b.n	8006f1e <_fwalk_reent+0x12>

08006f4a <__retarget_lock_init_recursive>:
 8006f4a:	4770      	bx	lr

08006f4c <__retarget_lock_acquire_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <__retarget_lock_release_recursive>:
 8006f4e:	4770      	bx	lr

08006f50 <_lseek_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4d05      	ldr	r5, [pc, #20]	; (8006f70 <_lseek_r+0x20>)
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7fa fc45 	bl	80017ee <_lseek>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_lseek_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_lseek_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20001638 	.word	0x20001638

08006f74 <__swhatbuf_r>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	460e      	mov	r6, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	461d      	mov	r5, r3
 8006f82:	b096      	sub	sp, #88	; 0x58
 8006f84:	da07      	bge.n	8006f96 <__swhatbuf_r+0x22>
 8006f86:	2300      	movs	r3, #0
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	89b3      	ldrh	r3, [r6, #12]
 8006f8c:	061a      	lsls	r2, r3, #24
 8006f8e:	d410      	bmi.n	8006fb2 <__swhatbuf_r+0x3e>
 8006f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f94:	e00e      	b.n	8006fb4 <__swhatbuf_r+0x40>
 8006f96:	466a      	mov	r2, sp
 8006f98:	f000 fcb8 	bl	800790c <_fstat_r>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	dbf2      	blt.n	8006f86 <__swhatbuf_r+0x12>
 8006fa0:	9a01      	ldr	r2, [sp, #4]
 8006fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006faa:	425a      	negs	r2, r3
 8006fac:	415a      	adcs	r2, r3
 8006fae:	602a      	str	r2, [r5, #0]
 8006fb0:	e7ee      	b.n	8006f90 <__swhatbuf_r+0x1c>
 8006fb2:	2340      	movs	r3, #64	; 0x40
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	b016      	add	sp, #88	; 0x58
 8006fba:	bd70      	pop	{r4, r5, r6, pc}

08006fbc <__smakebuf_r>:
 8006fbc:	898b      	ldrh	r3, [r1, #12]
 8006fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006fc0:	079d      	lsls	r5, r3, #30
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	d507      	bpl.n	8006fd8 <__smakebuf_r+0x1c>
 8006fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6163      	str	r3, [r4, #20]
 8006fd4:	b002      	add	sp, #8
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	466a      	mov	r2, sp
 8006fda:	ab01      	add	r3, sp, #4
 8006fdc:	f7ff ffca 	bl	8006f74 <__swhatbuf_r>
 8006fe0:	9900      	ldr	r1, [sp, #0]
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff fbbb 	bl	8006760 <_malloc_r>
 8006fea:	b948      	cbnz	r0, 8007000 <__smakebuf_r+0x44>
 8006fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff0:	059a      	lsls	r2, r3, #22
 8006ff2:	d4ef      	bmi.n	8006fd4 <__smakebuf_r+0x18>
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	f043 0302 	orr.w	r3, r3, #2
 8006ffc:	81a3      	strh	r3, [r4, #12]
 8006ffe:	e7e3      	b.n	8006fc8 <__smakebuf_r+0xc>
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <__smakebuf_r+0x7c>)
 8007002:	62b3      	str	r3, [r6, #40]	; 0x28
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	6020      	str	r0, [r4, #0]
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	6120      	str	r0, [r4, #16]
 8007012:	6163      	str	r3, [r4, #20]
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	b15b      	cbz	r3, 8007030 <__smakebuf_r+0x74>
 8007018:	4630      	mov	r0, r6
 800701a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701e:	f000 fc87 	bl	8007930 <_isatty_r>
 8007022:	b128      	cbz	r0, 8007030 <__smakebuf_r+0x74>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	81a3      	strh	r3, [r4, #12]
 8007030:	89a0      	ldrh	r0, [r4, #12]
 8007032:	4305      	orrs	r5, r0
 8007034:	81a5      	strh	r5, [r4, #12]
 8007036:	e7cd      	b.n	8006fd4 <__smakebuf_r+0x18>
 8007038:	08006da9 	.word	0x08006da9

0800703c <__malloc_lock>:
 800703c:	4801      	ldr	r0, [pc, #4]	; (8007044 <__malloc_lock+0x8>)
 800703e:	f7ff bf85 	b.w	8006f4c <__retarget_lock_acquire_recursive>
 8007042:	bf00      	nop
 8007044:	20001630 	.word	0x20001630

08007048 <__malloc_unlock>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__malloc_unlock+0x8>)
 800704a:	f7ff bf80 	b.w	8006f4e <__retarget_lock_release_recursive>
 800704e:	bf00      	nop
 8007050:	20001630 	.word	0x20001630

08007054 <__ssputs_r>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	688e      	ldr	r6, [r1, #8]
 800705a:	4682      	mov	sl, r0
 800705c:	429e      	cmp	r6, r3
 800705e:	460c      	mov	r4, r1
 8007060:	4690      	mov	r8, r2
 8007062:	461f      	mov	r7, r3
 8007064:	d838      	bhi.n	80070d8 <__ssputs_r+0x84>
 8007066:	898a      	ldrh	r2, [r1, #12]
 8007068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800706c:	d032      	beq.n	80070d4 <__ssputs_r+0x80>
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	6909      	ldr	r1, [r1, #16]
 8007072:	3301      	adds	r3, #1
 8007074:	eba5 0901 	sub.w	r9, r5, r1
 8007078:	6965      	ldr	r5, [r4, #20]
 800707a:	444b      	add	r3, r9
 800707c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007084:	106d      	asrs	r5, r5, #1
 8007086:	429d      	cmp	r5, r3
 8007088:	bf38      	it	cc
 800708a:	461d      	movcc	r5, r3
 800708c:	0553      	lsls	r3, r2, #21
 800708e:	d531      	bpl.n	80070f4 <__ssputs_r+0xa0>
 8007090:	4629      	mov	r1, r5
 8007092:	f7ff fb65 	bl	8006760 <_malloc_r>
 8007096:	4606      	mov	r6, r0
 8007098:	b950      	cbnz	r0, 80070b0 <__ssputs_r+0x5c>
 800709a:	230c      	movs	r3, #12
 800709c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070a0:	f8ca 3000 	str.w	r3, [sl]
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	464a      	mov	r2, r9
 80070b2:	6921      	ldr	r1, [r4, #16]
 80070b4:	f7ff faf2 	bl	800669c <memcpy>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c2:	81a3      	strh	r3, [r4, #12]
 80070c4:	6126      	str	r6, [r4, #16]
 80070c6:	444e      	add	r6, r9
 80070c8:	6026      	str	r6, [r4, #0]
 80070ca:	463e      	mov	r6, r7
 80070cc:	6165      	str	r5, [r4, #20]
 80070ce:	eba5 0509 	sub.w	r5, r5, r9
 80070d2:	60a5      	str	r5, [r4, #8]
 80070d4:	42be      	cmp	r6, r7
 80070d6:	d900      	bls.n	80070da <__ssputs_r+0x86>
 80070d8:	463e      	mov	r6, r7
 80070da:	4632      	mov	r2, r6
 80070dc:	4641      	mov	r1, r8
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	f000 fc44 	bl	800796c <memmove>
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	1b9b      	subs	r3, r3, r6
 80070ea:	4432      	add	r2, r6
 80070ec:	2000      	movs	r0, #0
 80070ee:	60a3      	str	r3, [r4, #8]
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	e7db      	b.n	80070ac <__ssputs_r+0x58>
 80070f4:	462a      	mov	r2, r5
 80070f6:	f000 fc53 	bl	80079a0 <_realloc_r>
 80070fa:	4606      	mov	r6, r0
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d1e1      	bne.n	80070c4 <__ssputs_r+0x70>
 8007100:	4650      	mov	r0, sl
 8007102:	6921      	ldr	r1, [r4, #16]
 8007104:	f7ff fae0 	bl	80066c8 <_free_r>
 8007108:	e7c7      	b.n	800709a <__ssputs_r+0x46>
	...

0800710c <_svfiprintf_r>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	4698      	mov	r8, r3
 8007112:	898b      	ldrh	r3, [r1, #12]
 8007114:	4607      	mov	r7, r0
 8007116:	061b      	lsls	r3, r3, #24
 8007118:	460d      	mov	r5, r1
 800711a:	4614      	mov	r4, r2
 800711c:	b09d      	sub	sp, #116	; 0x74
 800711e:	d50e      	bpl.n	800713e <_svfiprintf_r+0x32>
 8007120:	690b      	ldr	r3, [r1, #16]
 8007122:	b963      	cbnz	r3, 800713e <_svfiprintf_r+0x32>
 8007124:	2140      	movs	r1, #64	; 0x40
 8007126:	f7ff fb1b 	bl	8006760 <_malloc_r>
 800712a:	6028      	str	r0, [r5, #0]
 800712c:	6128      	str	r0, [r5, #16]
 800712e:	b920      	cbnz	r0, 800713a <_svfiprintf_r+0x2e>
 8007130:	230c      	movs	r3, #12
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007138:	e0d1      	b.n	80072de <_svfiprintf_r+0x1d2>
 800713a:	2340      	movs	r3, #64	; 0x40
 800713c:	616b      	str	r3, [r5, #20]
 800713e:	2300      	movs	r3, #0
 8007140:	9309      	str	r3, [sp, #36]	; 0x24
 8007142:	2320      	movs	r3, #32
 8007144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007148:	2330      	movs	r3, #48	; 0x30
 800714a:	f04f 0901 	mov.w	r9, #1
 800714e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007152:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072f8 <_svfiprintf_r+0x1ec>
 8007156:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800715a:	4623      	mov	r3, r4
 800715c:	469a      	mov	sl, r3
 800715e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007162:	b10a      	cbz	r2, 8007168 <_svfiprintf_r+0x5c>
 8007164:	2a25      	cmp	r2, #37	; 0x25
 8007166:	d1f9      	bne.n	800715c <_svfiprintf_r+0x50>
 8007168:	ebba 0b04 	subs.w	fp, sl, r4
 800716c:	d00b      	beq.n	8007186 <_svfiprintf_r+0x7a>
 800716e:	465b      	mov	r3, fp
 8007170:	4622      	mov	r2, r4
 8007172:	4629      	mov	r1, r5
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff ff6d 	bl	8007054 <__ssputs_r>
 800717a:	3001      	adds	r0, #1
 800717c:	f000 80aa 	beq.w	80072d4 <_svfiprintf_r+0x1c8>
 8007180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007182:	445a      	add	r2, fp
 8007184:	9209      	str	r2, [sp, #36]	; 0x24
 8007186:	f89a 3000 	ldrb.w	r3, [sl]
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80a2 	beq.w	80072d4 <_svfiprintf_r+0x1c8>
 8007190:	2300      	movs	r3, #0
 8007192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800719a:	f10a 0a01 	add.w	sl, sl, #1
 800719e:	9304      	str	r3, [sp, #16]
 80071a0:	9307      	str	r3, [sp, #28]
 80071a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071a6:	931a      	str	r3, [sp, #104]	; 0x68
 80071a8:	4654      	mov	r4, sl
 80071aa:	2205      	movs	r2, #5
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	4851      	ldr	r0, [pc, #324]	; (80072f8 <_svfiprintf_r+0x1ec>)
 80071b2:	f000 fbcd 	bl	8007950 <memchr>
 80071b6:	9a04      	ldr	r2, [sp, #16]
 80071b8:	b9d8      	cbnz	r0, 80071f2 <_svfiprintf_r+0xe6>
 80071ba:	06d0      	lsls	r0, r2, #27
 80071bc:	bf44      	itt	mi
 80071be:	2320      	movmi	r3, #32
 80071c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071c4:	0711      	lsls	r1, r2, #28
 80071c6:	bf44      	itt	mi
 80071c8:	232b      	movmi	r3, #43	; 0x2b
 80071ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ce:	f89a 3000 	ldrb.w	r3, [sl]
 80071d2:	2b2a      	cmp	r3, #42	; 0x2a
 80071d4:	d015      	beq.n	8007202 <_svfiprintf_r+0xf6>
 80071d6:	4654      	mov	r4, sl
 80071d8:	2000      	movs	r0, #0
 80071da:	f04f 0c0a 	mov.w	ip, #10
 80071de:	9a07      	ldr	r2, [sp, #28]
 80071e0:	4621      	mov	r1, r4
 80071e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e6:	3b30      	subs	r3, #48	; 0x30
 80071e8:	2b09      	cmp	r3, #9
 80071ea:	d94e      	bls.n	800728a <_svfiprintf_r+0x17e>
 80071ec:	b1b0      	cbz	r0, 800721c <_svfiprintf_r+0x110>
 80071ee:	9207      	str	r2, [sp, #28]
 80071f0:	e014      	b.n	800721c <_svfiprintf_r+0x110>
 80071f2:	eba0 0308 	sub.w	r3, r0, r8
 80071f6:	fa09 f303 	lsl.w	r3, r9, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	46a2      	mov	sl, r4
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	e7d2      	b.n	80071a8 <_svfiprintf_r+0x9c>
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	1d19      	adds	r1, r3, #4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	9103      	str	r1, [sp, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	bfbb      	ittet	lt
 800720e:	425b      	neglt	r3, r3
 8007210:	f042 0202 	orrlt.w	r2, r2, #2
 8007214:	9307      	strge	r3, [sp, #28]
 8007216:	9307      	strlt	r3, [sp, #28]
 8007218:	bfb8      	it	lt
 800721a:	9204      	strlt	r2, [sp, #16]
 800721c:	7823      	ldrb	r3, [r4, #0]
 800721e:	2b2e      	cmp	r3, #46	; 0x2e
 8007220:	d10c      	bne.n	800723c <_svfiprintf_r+0x130>
 8007222:	7863      	ldrb	r3, [r4, #1]
 8007224:	2b2a      	cmp	r3, #42	; 0x2a
 8007226:	d135      	bne.n	8007294 <_svfiprintf_r+0x188>
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	3402      	adds	r4, #2
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9203      	str	r2, [sp, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	bfb8      	it	lt
 8007236:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007308 <_svfiprintf_r+0x1fc>
 8007240:	2203      	movs	r2, #3
 8007242:	4650      	mov	r0, sl
 8007244:	7821      	ldrb	r1, [r4, #0]
 8007246:	f000 fb83 	bl	8007950 <memchr>
 800724a:	b140      	cbz	r0, 800725e <_svfiprintf_r+0x152>
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	eba0 000a 	sub.w	r0, r0, sl
 8007252:	fa03 f000 	lsl.w	r0, r3, r0
 8007256:	9b04      	ldr	r3, [sp, #16]
 8007258:	3401      	adds	r4, #1
 800725a:	4303      	orrs	r3, r0
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007262:	2206      	movs	r2, #6
 8007264:	4825      	ldr	r0, [pc, #148]	; (80072fc <_svfiprintf_r+0x1f0>)
 8007266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726a:	f000 fb71 	bl	8007950 <memchr>
 800726e:	2800      	cmp	r0, #0
 8007270:	d038      	beq.n	80072e4 <_svfiprintf_r+0x1d8>
 8007272:	4b23      	ldr	r3, [pc, #140]	; (8007300 <_svfiprintf_r+0x1f4>)
 8007274:	bb1b      	cbnz	r3, 80072be <_svfiprintf_r+0x1b2>
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	3307      	adds	r3, #7
 800727a:	f023 0307 	bic.w	r3, r3, #7
 800727e:	3308      	adds	r3, #8
 8007280:	9303      	str	r3, [sp, #12]
 8007282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007284:	4433      	add	r3, r6
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	e767      	b.n	800715a <_svfiprintf_r+0x4e>
 800728a:	460c      	mov	r4, r1
 800728c:	2001      	movs	r0, #1
 800728e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007292:	e7a5      	b.n	80071e0 <_svfiprintf_r+0xd4>
 8007294:	2300      	movs	r3, #0
 8007296:	f04f 0c0a 	mov.w	ip, #10
 800729a:	4619      	mov	r1, r3
 800729c:	3401      	adds	r4, #1
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	4620      	mov	r0, r4
 80072a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a6:	3a30      	subs	r2, #48	; 0x30
 80072a8:	2a09      	cmp	r2, #9
 80072aa:	d903      	bls.n	80072b4 <_svfiprintf_r+0x1a8>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d0c5      	beq.n	800723c <_svfiprintf_r+0x130>
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	e7c3      	b.n	800723c <_svfiprintf_r+0x130>
 80072b4:	4604      	mov	r4, r0
 80072b6:	2301      	movs	r3, #1
 80072b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072bc:	e7f0      	b.n	80072a0 <_svfiprintf_r+0x194>
 80072be:	ab03      	add	r3, sp, #12
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	462a      	mov	r2, r5
 80072c4:	4638      	mov	r0, r7
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <_svfiprintf_r+0x1f8>)
 80072c8:	a904      	add	r1, sp, #16
 80072ca:	f3af 8000 	nop.w
 80072ce:	1c42      	adds	r2, r0, #1
 80072d0:	4606      	mov	r6, r0
 80072d2:	d1d6      	bne.n	8007282 <_svfiprintf_r+0x176>
 80072d4:	89ab      	ldrh	r3, [r5, #12]
 80072d6:	065b      	lsls	r3, r3, #25
 80072d8:	f53f af2c 	bmi.w	8007134 <_svfiprintf_r+0x28>
 80072dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072de:	b01d      	add	sp, #116	; 0x74
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	ab03      	add	r3, sp, #12
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	462a      	mov	r2, r5
 80072ea:	4638      	mov	r0, r7
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <_svfiprintf_r+0x1f8>)
 80072ee:	a904      	add	r1, sp, #16
 80072f0:	f000 f9d4 	bl	800769c <_printf_i>
 80072f4:	e7eb      	b.n	80072ce <_svfiprintf_r+0x1c2>
 80072f6:	bf00      	nop
 80072f8:	08007e50 	.word	0x08007e50
 80072fc:	08007e5a 	.word	0x08007e5a
 8007300:	00000000 	.word	0x00000000
 8007304:	08007055 	.word	0x08007055
 8007308:	08007e56 	.word	0x08007e56

0800730c <__sfputc_r>:
 800730c:	6893      	ldr	r3, [r2, #8]
 800730e:	b410      	push	{r4}
 8007310:	3b01      	subs	r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	6093      	str	r3, [r2, #8]
 8007316:	da07      	bge.n	8007328 <__sfputc_r+0x1c>
 8007318:	6994      	ldr	r4, [r2, #24]
 800731a:	42a3      	cmp	r3, r4
 800731c:	db01      	blt.n	8007322 <__sfputc_r+0x16>
 800731e:	290a      	cmp	r1, #10
 8007320:	d102      	bne.n	8007328 <__sfputc_r+0x1c>
 8007322:	bc10      	pop	{r4}
 8007324:	f7ff bb78 	b.w	8006a18 <__swbuf_r>
 8007328:	6813      	ldr	r3, [r2, #0]
 800732a:	1c58      	adds	r0, r3, #1
 800732c:	6010      	str	r0, [r2, #0]
 800732e:	7019      	strb	r1, [r3, #0]
 8007330:	4608      	mov	r0, r1
 8007332:	bc10      	pop	{r4}
 8007334:	4770      	bx	lr

08007336 <__sfputs_r>:
 8007336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007338:	4606      	mov	r6, r0
 800733a:	460f      	mov	r7, r1
 800733c:	4614      	mov	r4, r2
 800733e:	18d5      	adds	r5, r2, r3
 8007340:	42ac      	cmp	r4, r5
 8007342:	d101      	bne.n	8007348 <__sfputs_r+0x12>
 8007344:	2000      	movs	r0, #0
 8007346:	e007      	b.n	8007358 <__sfputs_r+0x22>
 8007348:	463a      	mov	r2, r7
 800734a:	4630      	mov	r0, r6
 800734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007350:	f7ff ffdc 	bl	800730c <__sfputc_r>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d1f3      	bne.n	8007340 <__sfputs_r+0xa>
 8007358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800735c <_vfiprintf_r>:
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	460d      	mov	r5, r1
 8007362:	4614      	mov	r4, r2
 8007364:	4698      	mov	r8, r3
 8007366:	4606      	mov	r6, r0
 8007368:	b09d      	sub	sp, #116	; 0x74
 800736a:	b118      	cbz	r0, 8007374 <_vfiprintf_r+0x18>
 800736c:	6983      	ldr	r3, [r0, #24]
 800736e:	b90b      	cbnz	r3, 8007374 <_vfiprintf_r+0x18>
 8007370:	f7ff fd4e 	bl	8006e10 <__sinit>
 8007374:	4b89      	ldr	r3, [pc, #548]	; (800759c <_vfiprintf_r+0x240>)
 8007376:	429d      	cmp	r5, r3
 8007378:	d11b      	bne.n	80073b2 <_vfiprintf_r+0x56>
 800737a:	6875      	ldr	r5, [r6, #4]
 800737c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800737e:	07d9      	lsls	r1, r3, #31
 8007380:	d405      	bmi.n	800738e <_vfiprintf_r+0x32>
 8007382:	89ab      	ldrh	r3, [r5, #12]
 8007384:	059a      	lsls	r2, r3, #22
 8007386:	d402      	bmi.n	800738e <_vfiprintf_r+0x32>
 8007388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800738a:	f7ff fddf 	bl	8006f4c <__retarget_lock_acquire_recursive>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	071b      	lsls	r3, r3, #28
 8007392:	d501      	bpl.n	8007398 <_vfiprintf_r+0x3c>
 8007394:	692b      	ldr	r3, [r5, #16]
 8007396:	b9eb      	cbnz	r3, 80073d4 <_vfiprintf_r+0x78>
 8007398:	4629      	mov	r1, r5
 800739a:	4630      	mov	r0, r6
 800739c:	f7ff fba0 	bl	8006ae0 <__swsetup_r>
 80073a0:	b1c0      	cbz	r0, 80073d4 <_vfiprintf_r+0x78>
 80073a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a4:	07dc      	lsls	r4, r3, #31
 80073a6:	d50e      	bpl.n	80073c6 <_vfiprintf_r+0x6a>
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073ac:	b01d      	add	sp, #116	; 0x74
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	4b7b      	ldr	r3, [pc, #492]	; (80075a0 <_vfiprintf_r+0x244>)
 80073b4:	429d      	cmp	r5, r3
 80073b6:	d101      	bne.n	80073bc <_vfiprintf_r+0x60>
 80073b8:	68b5      	ldr	r5, [r6, #8]
 80073ba:	e7df      	b.n	800737c <_vfiprintf_r+0x20>
 80073bc:	4b79      	ldr	r3, [pc, #484]	; (80075a4 <_vfiprintf_r+0x248>)
 80073be:	429d      	cmp	r5, r3
 80073c0:	bf08      	it	eq
 80073c2:	68f5      	ldreq	r5, [r6, #12]
 80073c4:	e7da      	b.n	800737c <_vfiprintf_r+0x20>
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	0598      	lsls	r0, r3, #22
 80073ca:	d4ed      	bmi.n	80073a8 <_vfiprintf_r+0x4c>
 80073cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073ce:	f7ff fdbe 	bl	8006f4e <__retarget_lock_release_recursive>
 80073d2:	e7e9      	b.n	80073a8 <_vfiprintf_r+0x4c>
 80073d4:	2300      	movs	r3, #0
 80073d6:	9309      	str	r3, [sp, #36]	; 0x24
 80073d8:	2320      	movs	r3, #32
 80073da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073de:	2330      	movs	r3, #48	; 0x30
 80073e0:	f04f 0901 	mov.w	r9, #1
 80073e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80075a8 <_vfiprintf_r+0x24c>
 80073ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073f0:	4623      	mov	r3, r4
 80073f2:	469a      	mov	sl, r3
 80073f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f8:	b10a      	cbz	r2, 80073fe <_vfiprintf_r+0xa2>
 80073fa:	2a25      	cmp	r2, #37	; 0x25
 80073fc:	d1f9      	bne.n	80073f2 <_vfiprintf_r+0x96>
 80073fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007402:	d00b      	beq.n	800741c <_vfiprintf_r+0xc0>
 8007404:	465b      	mov	r3, fp
 8007406:	4622      	mov	r2, r4
 8007408:	4629      	mov	r1, r5
 800740a:	4630      	mov	r0, r6
 800740c:	f7ff ff93 	bl	8007336 <__sfputs_r>
 8007410:	3001      	adds	r0, #1
 8007412:	f000 80aa 	beq.w	800756a <_vfiprintf_r+0x20e>
 8007416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007418:	445a      	add	r2, fp
 800741a:	9209      	str	r2, [sp, #36]	; 0x24
 800741c:	f89a 3000 	ldrb.w	r3, [sl]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80a2 	beq.w	800756a <_vfiprintf_r+0x20e>
 8007426:	2300      	movs	r3, #0
 8007428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007430:	f10a 0a01 	add.w	sl, sl, #1
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	9307      	str	r3, [sp, #28]
 8007438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800743c:	931a      	str	r3, [sp, #104]	; 0x68
 800743e:	4654      	mov	r4, sl
 8007440:	2205      	movs	r2, #5
 8007442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007446:	4858      	ldr	r0, [pc, #352]	; (80075a8 <_vfiprintf_r+0x24c>)
 8007448:	f000 fa82 	bl	8007950 <memchr>
 800744c:	9a04      	ldr	r2, [sp, #16]
 800744e:	b9d8      	cbnz	r0, 8007488 <_vfiprintf_r+0x12c>
 8007450:	06d1      	lsls	r1, r2, #27
 8007452:	bf44      	itt	mi
 8007454:	2320      	movmi	r3, #32
 8007456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800745a:	0713      	lsls	r3, r2, #28
 800745c:	bf44      	itt	mi
 800745e:	232b      	movmi	r3, #43	; 0x2b
 8007460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007464:	f89a 3000 	ldrb.w	r3, [sl]
 8007468:	2b2a      	cmp	r3, #42	; 0x2a
 800746a:	d015      	beq.n	8007498 <_vfiprintf_r+0x13c>
 800746c:	4654      	mov	r4, sl
 800746e:	2000      	movs	r0, #0
 8007470:	f04f 0c0a 	mov.w	ip, #10
 8007474:	9a07      	ldr	r2, [sp, #28]
 8007476:	4621      	mov	r1, r4
 8007478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800747c:	3b30      	subs	r3, #48	; 0x30
 800747e:	2b09      	cmp	r3, #9
 8007480:	d94e      	bls.n	8007520 <_vfiprintf_r+0x1c4>
 8007482:	b1b0      	cbz	r0, 80074b2 <_vfiprintf_r+0x156>
 8007484:	9207      	str	r2, [sp, #28]
 8007486:	e014      	b.n	80074b2 <_vfiprintf_r+0x156>
 8007488:	eba0 0308 	sub.w	r3, r0, r8
 800748c:	fa09 f303 	lsl.w	r3, r9, r3
 8007490:	4313      	orrs	r3, r2
 8007492:	46a2      	mov	sl, r4
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	e7d2      	b.n	800743e <_vfiprintf_r+0xe2>
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	1d19      	adds	r1, r3, #4
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	9103      	str	r1, [sp, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	bfbb      	ittet	lt
 80074a4:	425b      	neglt	r3, r3
 80074a6:	f042 0202 	orrlt.w	r2, r2, #2
 80074aa:	9307      	strge	r3, [sp, #28]
 80074ac:	9307      	strlt	r3, [sp, #28]
 80074ae:	bfb8      	it	lt
 80074b0:	9204      	strlt	r2, [sp, #16]
 80074b2:	7823      	ldrb	r3, [r4, #0]
 80074b4:	2b2e      	cmp	r3, #46	; 0x2e
 80074b6:	d10c      	bne.n	80074d2 <_vfiprintf_r+0x176>
 80074b8:	7863      	ldrb	r3, [r4, #1]
 80074ba:	2b2a      	cmp	r3, #42	; 0x2a
 80074bc:	d135      	bne.n	800752a <_vfiprintf_r+0x1ce>
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	3402      	adds	r4, #2
 80074c2:	1d1a      	adds	r2, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9203      	str	r2, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfb8      	it	lt
 80074cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075b8 <_vfiprintf_r+0x25c>
 80074d6:	2203      	movs	r2, #3
 80074d8:	4650      	mov	r0, sl
 80074da:	7821      	ldrb	r1, [r4, #0]
 80074dc:	f000 fa38 	bl	8007950 <memchr>
 80074e0:	b140      	cbz	r0, 80074f4 <_vfiprintf_r+0x198>
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	eba0 000a 	sub.w	r0, r0, sl
 80074e8:	fa03 f000 	lsl.w	r0, r3, r0
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	3401      	adds	r4, #1
 80074f0:	4303      	orrs	r3, r0
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074f8:	2206      	movs	r2, #6
 80074fa:	482c      	ldr	r0, [pc, #176]	; (80075ac <_vfiprintf_r+0x250>)
 80074fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007500:	f000 fa26 	bl	8007950 <memchr>
 8007504:	2800      	cmp	r0, #0
 8007506:	d03f      	beq.n	8007588 <_vfiprintf_r+0x22c>
 8007508:	4b29      	ldr	r3, [pc, #164]	; (80075b0 <_vfiprintf_r+0x254>)
 800750a:	bb1b      	cbnz	r3, 8007554 <_vfiprintf_r+0x1f8>
 800750c:	9b03      	ldr	r3, [sp, #12]
 800750e:	3307      	adds	r3, #7
 8007510:	f023 0307 	bic.w	r3, r3, #7
 8007514:	3308      	adds	r3, #8
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751a:	443b      	add	r3, r7
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	e767      	b.n	80073f0 <_vfiprintf_r+0x94>
 8007520:	460c      	mov	r4, r1
 8007522:	2001      	movs	r0, #1
 8007524:	fb0c 3202 	mla	r2, ip, r2, r3
 8007528:	e7a5      	b.n	8007476 <_vfiprintf_r+0x11a>
 800752a:	2300      	movs	r3, #0
 800752c:	f04f 0c0a 	mov.w	ip, #10
 8007530:	4619      	mov	r1, r3
 8007532:	3401      	adds	r4, #1
 8007534:	9305      	str	r3, [sp, #20]
 8007536:	4620      	mov	r0, r4
 8007538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800753c:	3a30      	subs	r2, #48	; 0x30
 800753e:	2a09      	cmp	r2, #9
 8007540:	d903      	bls.n	800754a <_vfiprintf_r+0x1ee>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0c5      	beq.n	80074d2 <_vfiprintf_r+0x176>
 8007546:	9105      	str	r1, [sp, #20]
 8007548:	e7c3      	b.n	80074d2 <_vfiprintf_r+0x176>
 800754a:	4604      	mov	r4, r0
 800754c:	2301      	movs	r3, #1
 800754e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007552:	e7f0      	b.n	8007536 <_vfiprintf_r+0x1da>
 8007554:	ab03      	add	r3, sp, #12
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	462a      	mov	r2, r5
 800755a:	4630      	mov	r0, r6
 800755c:	4b15      	ldr	r3, [pc, #84]	; (80075b4 <_vfiprintf_r+0x258>)
 800755e:	a904      	add	r1, sp, #16
 8007560:	f3af 8000 	nop.w
 8007564:	4607      	mov	r7, r0
 8007566:	1c78      	adds	r0, r7, #1
 8007568:	d1d6      	bne.n	8007518 <_vfiprintf_r+0x1bc>
 800756a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800756c:	07d9      	lsls	r1, r3, #31
 800756e:	d405      	bmi.n	800757c <_vfiprintf_r+0x220>
 8007570:	89ab      	ldrh	r3, [r5, #12]
 8007572:	059a      	lsls	r2, r3, #22
 8007574:	d402      	bmi.n	800757c <_vfiprintf_r+0x220>
 8007576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007578:	f7ff fce9 	bl	8006f4e <__retarget_lock_release_recursive>
 800757c:	89ab      	ldrh	r3, [r5, #12]
 800757e:	065b      	lsls	r3, r3, #25
 8007580:	f53f af12 	bmi.w	80073a8 <_vfiprintf_r+0x4c>
 8007584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007586:	e711      	b.n	80073ac <_vfiprintf_r+0x50>
 8007588:	ab03      	add	r3, sp, #12
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	462a      	mov	r2, r5
 800758e:	4630      	mov	r0, r6
 8007590:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <_vfiprintf_r+0x258>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	f000 f882 	bl	800769c <_printf_i>
 8007598:	e7e4      	b.n	8007564 <_vfiprintf_r+0x208>
 800759a:	bf00      	nop
 800759c:	08007e10 	.word	0x08007e10
 80075a0:	08007e30 	.word	0x08007e30
 80075a4:	08007df0 	.word	0x08007df0
 80075a8:	08007e50 	.word	0x08007e50
 80075ac:	08007e5a 	.word	0x08007e5a
 80075b0:	00000000 	.word	0x00000000
 80075b4:	08007337 	.word	0x08007337
 80075b8:	08007e56 	.word	0x08007e56

080075bc <_printf_common>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	4616      	mov	r6, r2
 80075c2:	4699      	mov	r9, r3
 80075c4:	688a      	ldr	r2, [r1, #8]
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4607      	mov	r7, r0
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bfb8      	it	lt
 80075ce:	4613      	movlt	r3, r2
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075d6:	460c      	mov	r4, r1
 80075d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075dc:	b10a      	cbz	r2, 80075e2 <_printf_common+0x26>
 80075de:	3301      	adds	r3, #1
 80075e0:	6033      	str	r3, [r6, #0]
 80075e2:	6823      	ldr	r3, [r4, #0]
 80075e4:	0699      	lsls	r1, r3, #26
 80075e6:	bf42      	ittt	mi
 80075e8:	6833      	ldrmi	r3, [r6, #0]
 80075ea:	3302      	addmi	r3, #2
 80075ec:	6033      	strmi	r3, [r6, #0]
 80075ee:	6825      	ldr	r5, [r4, #0]
 80075f0:	f015 0506 	ands.w	r5, r5, #6
 80075f4:	d106      	bne.n	8007604 <_printf_common+0x48>
 80075f6:	f104 0a19 	add.w	sl, r4, #25
 80075fa:	68e3      	ldr	r3, [r4, #12]
 80075fc:	6832      	ldr	r2, [r6, #0]
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	42ab      	cmp	r3, r5
 8007602:	dc28      	bgt.n	8007656 <_printf_common+0x9a>
 8007604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007608:	1e13      	subs	r3, r2, #0
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	bf18      	it	ne
 800760e:	2301      	movne	r3, #1
 8007610:	0692      	lsls	r2, r2, #26
 8007612:	d42d      	bmi.n	8007670 <_printf_common+0xb4>
 8007614:	4649      	mov	r1, r9
 8007616:	4638      	mov	r0, r7
 8007618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800761c:	47c0      	blx	r8
 800761e:	3001      	adds	r0, #1
 8007620:	d020      	beq.n	8007664 <_printf_common+0xa8>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	68e5      	ldr	r5, [r4, #12]
 8007626:	f003 0306 	and.w	r3, r3, #6
 800762a:	2b04      	cmp	r3, #4
 800762c:	bf18      	it	ne
 800762e:	2500      	movne	r5, #0
 8007630:	6832      	ldr	r2, [r6, #0]
 8007632:	f04f 0600 	mov.w	r6, #0
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	bf08      	it	eq
 800763a:	1aad      	subeq	r5, r5, r2
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	bf08      	it	eq
 8007640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007644:	4293      	cmp	r3, r2
 8007646:	bfc4      	itt	gt
 8007648:	1a9b      	subgt	r3, r3, r2
 800764a:	18ed      	addgt	r5, r5, r3
 800764c:	341a      	adds	r4, #26
 800764e:	42b5      	cmp	r5, r6
 8007650:	d11a      	bne.n	8007688 <_printf_common+0xcc>
 8007652:	2000      	movs	r0, #0
 8007654:	e008      	b.n	8007668 <_printf_common+0xac>
 8007656:	2301      	movs	r3, #1
 8007658:	4652      	mov	r2, sl
 800765a:	4649      	mov	r1, r9
 800765c:	4638      	mov	r0, r7
 800765e:	47c0      	blx	r8
 8007660:	3001      	adds	r0, #1
 8007662:	d103      	bne.n	800766c <_printf_common+0xb0>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766c:	3501      	adds	r5, #1
 800766e:	e7c4      	b.n	80075fa <_printf_common+0x3e>
 8007670:	2030      	movs	r0, #48	; 0x30
 8007672:	18e1      	adds	r1, r4, r3
 8007674:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800767e:	4422      	add	r2, r4
 8007680:	3302      	adds	r3, #2
 8007682:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007686:	e7c5      	b.n	8007614 <_printf_common+0x58>
 8007688:	2301      	movs	r3, #1
 800768a:	4622      	mov	r2, r4
 800768c:	4649      	mov	r1, r9
 800768e:	4638      	mov	r0, r7
 8007690:	47c0      	blx	r8
 8007692:	3001      	adds	r0, #1
 8007694:	d0e6      	beq.n	8007664 <_printf_common+0xa8>
 8007696:	3601      	adds	r6, #1
 8007698:	e7d9      	b.n	800764e <_printf_common+0x92>
	...

0800769c <_printf_i>:
 800769c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	460c      	mov	r4, r1
 80076a2:	7e27      	ldrb	r7, [r4, #24]
 80076a4:	4691      	mov	r9, r2
 80076a6:	2f78      	cmp	r7, #120	; 0x78
 80076a8:	4680      	mov	r8, r0
 80076aa:	469a      	mov	sl, r3
 80076ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80076ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076b2:	d807      	bhi.n	80076c4 <_printf_i+0x28>
 80076b4:	2f62      	cmp	r7, #98	; 0x62
 80076b6:	d80a      	bhi.n	80076ce <_printf_i+0x32>
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	f000 80d9 	beq.w	8007870 <_printf_i+0x1d4>
 80076be:	2f58      	cmp	r7, #88	; 0x58
 80076c0:	f000 80a4 	beq.w	800780c <_printf_i+0x170>
 80076c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80076c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076cc:	e03a      	b.n	8007744 <_printf_i+0xa8>
 80076ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076d2:	2b15      	cmp	r3, #21
 80076d4:	d8f6      	bhi.n	80076c4 <_printf_i+0x28>
 80076d6:	a001      	add	r0, pc, #4	; (adr r0, 80076dc <_printf_i+0x40>)
 80076d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80076dc:	08007735 	.word	0x08007735
 80076e0:	08007749 	.word	0x08007749
 80076e4:	080076c5 	.word	0x080076c5
 80076e8:	080076c5 	.word	0x080076c5
 80076ec:	080076c5 	.word	0x080076c5
 80076f0:	080076c5 	.word	0x080076c5
 80076f4:	08007749 	.word	0x08007749
 80076f8:	080076c5 	.word	0x080076c5
 80076fc:	080076c5 	.word	0x080076c5
 8007700:	080076c5 	.word	0x080076c5
 8007704:	080076c5 	.word	0x080076c5
 8007708:	08007857 	.word	0x08007857
 800770c:	08007779 	.word	0x08007779
 8007710:	08007839 	.word	0x08007839
 8007714:	080076c5 	.word	0x080076c5
 8007718:	080076c5 	.word	0x080076c5
 800771c:	08007879 	.word	0x08007879
 8007720:	080076c5 	.word	0x080076c5
 8007724:	08007779 	.word	0x08007779
 8007728:	080076c5 	.word	0x080076c5
 800772c:	080076c5 	.word	0x080076c5
 8007730:	08007841 	.word	0x08007841
 8007734:	680b      	ldr	r3, [r1, #0]
 8007736:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	600a      	str	r2, [r1, #0]
 8007740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007744:	2301      	movs	r3, #1
 8007746:	e0a4      	b.n	8007892 <_printf_i+0x1f6>
 8007748:	6825      	ldr	r5, [r4, #0]
 800774a:	6808      	ldr	r0, [r1, #0]
 800774c:	062e      	lsls	r6, r5, #24
 800774e:	f100 0304 	add.w	r3, r0, #4
 8007752:	d50a      	bpl.n	800776a <_printf_i+0xce>
 8007754:	6805      	ldr	r5, [r0, #0]
 8007756:	600b      	str	r3, [r1, #0]
 8007758:	2d00      	cmp	r5, #0
 800775a:	da03      	bge.n	8007764 <_printf_i+0xc8>
 800775c:	232d      	movs	r3, #45	; 0x2d
 800775e:	426d      	negs	r5, r5
 8007760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007764:	230a      	movs	r3, #10
 8007766:	485e      	ldr	r0, [pc, #376]	; (80078e0 <_printf_i+0x244>)
 8007768:	e019      	b.n	800779e <_printf_i+0x102>
 800776a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800776e:	6805      	ldr	r5, [r0, #0]
 8007770:	600b      	str	r3, [r1, #0]
 8007772:	bf18      	it	ne
 8007774:	b22d      	sxthne	r5, r5
 8007776:	e7ef      	b.n	8007758 <_printf_i+0xbc>
 8007778:	680b      	ldr	r3, [r1, #0]
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	1d18      	adds	r0, r3, #4
 800777e:	6008      	str	r0, [r1, #0]
 8007780:	0628      	lsls	r0, r5, #24
 8007782:	d501      	bpl.n	8007788 <_printf_i+0xec>
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	e002      	b.n	800778e <_printf_i+0xf2>
 8007788:	0669      	lsls	r1, r5, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0xe8>
 800778c:	881d      	ldrh	r5, [r3, #0]
 800778e:	2f6f      	cmp	r7, #111	; 0x6f
 8007790:	bf0c      	ite	eq
 8007792:	2308      	moveq	r3, #8
 8007794:	230a      	movne	r3, #10
 8007796:	4852      	ldr	r0, [pc, #328]	; (80078e0 <_printf_i+0x244>)
 8007798:	2100      	movs	r1, #0
 800779a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800779e:	6866      	ldr	r6, [r4, #4]
 80077a0:	2e00      	cmp	r6, #0
 80077a2:	bfa8      	it	ge
 80077a4:	6821      	ldrge	r1, [r4, #0]
 80077a6:	60a6      	str	r6, [r4, #8]
 80077a8:	bfa4      	itt	ge
 80077aa:	f021 0104 	bicge.w	r1, r1, #4
 80077ae:	6021      	strge	r1, [r4, #0]
 80077b0:	b90d      	cbnz	r5, 80077b6 <_printf_i+0x11a>
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d04d      	beq.n	8007852 <_printf_i+0x1b6>
 80077b6:	4616      	mov	r6, r2
 80077b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80077bc:	fb03 5711 	mls	r7, r3, r1, r5
 80077c0:	5dc7      	ldrb	r7, [r0, r7]
 80077c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077c6:	462f      	mov	r7, r5
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	460d      	mov	r5, r1
 80077cc:	d9f4      	bls.n	80077b8 <_printf_i+0x11c>
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d10b      	bne.n	80077ea <_printf_i+0x14e>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	07df      	lsls	r7, r3, #31
 80077d6:	d508      	bpl.n	80077ea <_printf_i+0x14e>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	6861      	ldr	r1, [r4, #4]
 80077dc:	4299      	cmp	r1, r3
 80077de:	bfde      	ittt	le
 80077e0:	2330      	movle	r3, #48	; 0x30
 80077e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077e6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80077ea:	1b92      	subs	r2, r2, r6
 80077ec:	6122      	str	r2, [r4, #16]
 80077ee:	464b      	mov	r3, r9
 80077f0:	4621      	mov	r1, r4
 80077f2:	4640      	mov	r0, r8
 80077f4:	f8cd a000 	str.w	sl, [sp]
 80077f8:	aa03      	add	r2, sp, #12
 80077fa:	f7ff fedf 	bl	80075bc <_printf_common>
 80077fe:	3001      	adds	r0, #1
 8007800:	d14c      	bne.n	800789c <_printf_i+0x200>
 8007802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007806:	b004      	add	sp, #16
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	4834      	ldr	r0, [pc, #208]	; (80078e0 <_printf_i+0x244>)
 800780e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007812:	680e      	ldr	r6, [r1, #0]
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	f856 5b04 	ldr.w	r5, [r6], #4
 800781a:	061f      	lsls	r7, r3, #24
 800781c:	600e      	str	r6, [r1, #0]
 800781e:	d514      	bpl.n	800784a <_printf_i+0x1ae>
 8007820:	07d9      	lsls	r1, r3, #31
 8007822:	bf44      	itt	mi
 8007824:	f043 0320 	orrmi.w	r3, r3, #32
 8007828:	6023      	strmi	r3, [r4, #0]
 800782a:	b91d      	cbnz	r5, 8007834 <_printf_i+0x198>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	f023 0320 	bic.w	r3, r3, #32
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	2310      	movs	r3, #16
 8007836:	e7af      	b.n	8007798 <_printf_i+0xfc>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	2378      	movs	r3, #120	; 0x78
 8007842:	4828      	ldr	r0, [pc, #160]	; (80078e4 <_printf_i+0x248>)
 8007844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007848:	e7e3      	b.n	8007812 <_printf_i+0x176>
 800784a:	065e      	lsls	r6, r3, #25
 800784c:	bf48      	it	mi
 800784e:	b2ad      	uxthmi	r5, r5
 8007850:	e7e6      	b.n	8007820 <_printf_i+0x184>
 8007852:	4616      	mov	r6, r2
 8007854:	e7bb      	b.n	80077ce <_printf_i+0x132>
 8007856:	680b      	ldr	r3, [r1, #0]
 8007858:	6826      	ldr	r6, [r4, #0]
 800785a:	1d1d      	adds	r5, r3, #4
 800785c:	6960      	ldr	r0, [r4, #20]
 800785e:	600d      	str	r5, [r1, #0]
 8007860:	0635      	lsls	r5, r6, #24
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	d501      	bpl.n	800786a <_printf_i+0x1ce>
 8007866:	6018      	str	r0, [r3, #0]
 8007868:	e002      	b.n	8007870 <_printf_i+0x1d4>
 800786a:	0671      	lsls	r1, r6, #25
 800786c:	d5fb      	bpl.n	8007866 <_printf_i+0x1ca>
 800786e:	8018      	strh	r0, [r3, #0]
 8007870:	2300      	movs	r3, #0
 8007872:	4616      	mov	r6, r2
 8007874:	6123      	str	r3, [r4, #16]
 8007876:	e7ba      	b.n	80077ee <_printf_i+0x152>
 8007878:	680b      	ldr	r3, [r1, #0]
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	600a      	str	r2, [r1, #0]
 800787e:	681e      	ldr	r6, [r3, #0]
 8007880:	2100      	movs	r1, #0
 8007882:	4630      	mov	r0, r6
 8007884:	6862      	ldr	r2, [r4, #4]
 8007886:	f000 f863 	bl	8007950 <memchr>
 800788a:	b108      	cbz	r0, 8007890 <_printf_i+0x1f4>
 800788c:	1b80      	subs	r0, r0, r6
 800788e:	6060      	str	r0, [r4, #4]
 8007890:	6863      	ldr	r3, [r4, #4]
 8007892:	6123      	str	r3, [r4, #16]
 8007894:	2300      	movs	r3, #0
 8007896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789a:	e7a8      	b.n	80077ee <_printf_i+0x152>
 800789c:	4632      	mov	r2, r6
 800789e:	4649      	mov	r1, r9
 80078a0:	4640      	mov	r0, r8
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	47d0      	blx	sl
 80078a6:	3001      	adds	r0, #1
 80078a8:	d0ab      	beq.n	8007802 <_printf_i+0x166>
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	079b      	lsls	r3, r3, #30
 80078ae:	d413      	bmi.n	80078d8 <_printf_i+0x23c>
 80078b0:	68e0      	ldr	r0, [r4, #12]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	4298      	cmp	r0, r3
 80078b6:	bfb8      	it	lt
 80078b8:	4618      	movlt	r0, r3
 80078ba:	e7a4      	b.n	8007806 <_printf_i+0x16a>
 80078bc:	2301      	movs	r3, #1
 80078be:	4632      	mov	r2, r6
 80078c0:	4649      	mov	r1, r9
 80078c2:	4640      	mov	r0, r8
 80078c4:	47d0      	blx	sl
 80078c6:	3001      	adds	r0, #1
 80078c8:	d09b      	beq.n	8007802 <_printf_i+0x166>
 80078ca:	3501      	adds	r5, #1
 80078cc:	68e3      	ldr	r3, [r4, #12]
 80078ce:	9903      	ldr	r1, [sp, #12]
 80078d0:	1a5b      	subs	r3, r3, r1
 80078d2:	42ab      	cmp	r3, r5
 80078d4:	dcf2      	bgt.n	80078bc <_printf_i+0x220>
 80078d6:	e7eb      	b.n	80078b0 <_printf_i+0x214>
 80078d8:	2500      	movs	r5, #0
 80078da:	f104 0619 	add.w	r6, r4, #25
 80078de:	e7f5      	b.n	80078cc <_printf_i+0x230>
 80078e0:	08007e61 	.word	0x08007e61
 80078e4:	08007e72 	.word	0x08007e72

080078e8 <_read_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	2200      	movs	r2, #0
 80078f2:	4d05      	ldr	r5, [pc, #20]	; (8007908 <_read_r+0x20>)
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7f9 ff38 	bl	800176c <_read>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_read_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_read_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20001638 	.word	0x20001638

0800790c <_fstat_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	2300      	movs	r3, #0
 8007910:	4d06      	ldr	r5, [pc, #24]	; (800792c <_fstat_r+0x20>)
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	f7f9 ff4f 	bl	80017bc <_fstat>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	d102      	bne.n	8007928 <_fstat_r+0x1c>
 8007922:	682b      	ldr	r3, [r5, #0]
 8007924:	b103      	cbz	r3, 8007928 <_fstat_r+0x1c>
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	bd38      	pop	{r3, r4, r5, pc}
 800792a:	bf00      	nop
 800792c:	20001638 	.word	0x20001638

08007930 <_isatty_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	2300      	movs	r3, #0
 8007934:	4d05      	ldr	r5, [pc, #20]	; (800794c <_isatty_r+0x1c>)
 8007936:	4604      	mov	r4, r0
 8007938:	4608      	mov	r0, r1
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	f7f9 ff4d 	bl	80017da <_isatty>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_isatty_r+0x1a>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_isatty_r+0x1a>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	20001638 	.word	0x20001638

08007950 <memchr>:
 8007950:	4603      	mov	r3, r0
 8007952:	b510      	push	{r4, lr}
 8007954:	b2c9      	uxtb	r1, r1
 8007956:	4402      	add	r2, r0
 8007958:	4293      	cmp	r3, r2
 800795a:	4618      	mov	r0, r3
 800795c:	d101      	bne.n	8007962 <memchr+0x12>
 800795e:	2000      	movs	r0, #0
 8007960:	e003      	b.n	800796a <memchr+0x1a>
 8007962:	7804      	ldrb	r4, [r0, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	428c      	cmp	r4, r1
 8007968:	d1f6      	bne.n	8007958 <memchr+0x8>
 800796a:	bd10      	pop	{r4, pc}

0800796c <memmove>:
 800796c:	4288      	cmp	r0, r1
 800796e:	b510      	push	{r4, lr}
 8007970:	eb01 0402 	add.w	r4, r1, r2
 8007974:	d902      	bls.n	800797c <memmove+0x10>
 8007976:	4284      	cmp	r4, r0
 8007978:	4623      	mov	r3, r4
 800797a:	d807      	bhi.n	800798c <memmove+0x20>
 800797c:	1e43      	subs	r3, r0, #1
 800797e:	42a1      	cmp	r1, r4
 8007980:	d008      	beq.n	8007994 <memmove+0x28>
 8007982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800798a:	e7f8      	b.n	800797e <memmove+0x12>
 800798c:	4601      	mov	r1, r0
 800798e:	4402      	add	r2, r0
 8007990:	428a      	cmp	r2, r1
 8007992:	d100      	bne.n	8007996 <memmove+0x2a>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800799a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799e:	e7f7      	b.n	8007990 <memmove+0x24>

080079a0 <_realloc_r>:
 80079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a2:	4607      	mov	r7, r0
 80079a4:	4614      	mov	r4, r2
 80079a6:	460e      	mov	r6, r1
 80079a8:	b921      	cbnz	r1, 80079b4 <_realloc_r+0x14>
 80079aa:	4611      	mov	r1, r2
 80079ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079b0:	f7fe bed6 	b.w	8006760 <_malloc_r>
 80079b4:	b922      	cbnz	r2, 80079c0 <_realloc_r+0x20>
 80079b6:	f7fe fe87 	bl	80066c8 <_free_r>
 80079ba:	4625      	mov	r5, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	f000 f814 	bl	80079ec <_malloc_usable_size_r>
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	d20f      	bcs.n	80079e8 <_realloc_r+0x48>
 80079c8:	4621      	mov	r1, r4
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7fe fec8 	bl	8006760 <_malloc_r>
 80079d0:	4605      	mov	r5, r0
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d0f2      	beq.n	80079bc <_realloc_r+0x1c>
 80079d6:	4631      	mov	r1, r6
 80079d8:	4622      	mov	r2, r4
 80079da:	f7fe fe5f 	bl	800669c <memcpy>
 80079de:	4631      	mov	r1, r6
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7fe fe71 	bl	80066c8 <_free_r>
 80079e6:	e7e9      	b.n	80079bc <_realloc_r+0x1c>
 80079e8:	4635      	mov	r5, r6
 80079ea:	e7e7      	b.n	80079bc <_realloc_r+0x1c>

080079ec <_malloc_usable_size_r>:
 80079ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f0:	1f18      	subs	r0, r3, #4
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bfbc      	itt	lt
 80079f6:	580b      	ldrlt	r3, [r1, r0]
 80079f8:	18c0      	addlt	r0, r0, r3
 80079fa:	4770      	bx	lr

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
