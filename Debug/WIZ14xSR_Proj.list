
WIZ14xSR_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f94  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  080032c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080032c0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b45b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a33  00000000  00000000  0002b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be8  00000000  00000000  0002cf28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002db10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a634  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fec  00000000  00000000  00048c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099526  00000000  00000000  00051c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  000eb1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003160 	.word	0x08003160

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003160 	.word	0x08003160

08000224 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
//	for(i=0; i<len; i++)
//		ITM_SendChar((*ptr++));
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 10);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	b29a      	uxth	r2, r3
 8000234:	230a      	movs	r3, #10
 8000236:	68b9      	ldr	r1, [r7, #8]
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <_write+0x24>)
 800023a:	f001 ff06 	bl	800204a <HAL_UART_Transmit>
	return len;
 800023e:	687b      	ldr	r3, [r7, #4]
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200000e4 	.word	0x200000e4

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 fb42 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f820 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f000 f8dc 	bl	8000414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800025c:	f000 f8b0 	bl	80003c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000260:	f000 f860 	bl	8000324 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000264:	4809      	ldr	r0, [pc, #36]	; (800028c <main+0x40>)
 8000266:	f001 fad1 	bl	800180c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	count++;	// increment count
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <main+0x44>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	3301      	adds	r3, #1
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <main+0x44>)
 8000274:	701a      	strb	r2, [r3, #0]
	printf("count: %d\r\n", count);	// print count
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0x44>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	4619      	mov	r1, r3
 800027c:	4805      	ldr	r0, [pc, #20]	; (8000294 <main+0x48>)
 800027e:	f002 f881 	bl	8002384 <iprintf>
//	HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
	HAL_Delay(1000);	// 1000 ms delay
 8000282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000286:	f000 fb89 	bl	800099c <HAL_Delay>
	count++;	// increment count
 800028a:	e7ee      	b.n	800026a <main+0x1e>
 800028c:	2000009c 	.word	0x2000009c
 8000290:	2000008c 	.word	0x2000008c
 8000294:	08003178 	.word	0x08003178

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	; 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f864 	bl	8002374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fe27 	bl	8000f34 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ec:	f000 f96a 	bl	80005c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f001 f892 	bl	8001434 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 f955 	bl	80005c4 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	f107 0308 	add.w	r3, r7, #8
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000338:	463b      	mov	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_TIM2_Init+0x98>)
 8000342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_TIM2_Init+0x98>)
 800034a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800034e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM2_Init+0x98>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_TIM2_Init+0x98>)
 8000358:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800035c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_TIM2_Init+0x98>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_TIM2_Init+0x98>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <MX_TIM2_Init+0x98>)
 800036c:	f001 f9fe 	bl	800176c <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000376:	f000 f925 	bl	80005c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_TIM2_Init+0x98>)
 8000388:	f001 fba8 	bl	8001adc <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000392:	f000 f917 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000396:	2300      	movs	r3, #0
 8000398:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039e:	463b      	mov	r3, r7
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_TIM2_Init+0x98>)
 80003a4:	f001 fd86 	bl	8001eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003ae:	f000 f909 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	2000009c 	.word	0x2000009c

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_USART2_UART_Init+0x50>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <MX_USART2_UART_Init+0x4c>)
 80003f8:	f001 fdda 	bl	8001fb0 <HAL_UART_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000402:	f000 f8df 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000e4 	.word	0x200000e4
 8000410:	40004400 	.word	0x40004400

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b56      	ldr	r3, [pc, #344]	; (8000584 <MX_GPIO_Init+0x170>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a55      	ldr	r2, [pc, #340]	; (8000584 <MX_GPIO_Init+0x170>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b53      	ldr	r3, [pc, #332]	; (8000584 <MX_GPIO_Init+0x170>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000440:	4b50      	ldr	r3, [pc, #320]	; (8000584 <MX_GPIO_Init+0x170>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a4f      	ldr	r2, [pc, #316]	; (8000584 <MX_GPIO_Init+0x170>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b4d      	ldr	r3, [pc, #308]	; (8000584 <MX_GPIO_Init+0x170>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b4a      	ldr	r3, [pc, #296]	; (8000584 <MX_GPIO_Init+0x170>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a49      	ldr	r2, [pc, #292]	; (8000584 <MX_GPIO_Init+0x170>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b47      	ldr	r3, [pc, #284]	; (8000584 <MX_GPIO_Init+0x170>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b44      	ldr	r3, [pc, #272]	; (8000584 <MX_GPIO_Init+0x170>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a43      	ldr	r2, [pc, #268]	; (8000584 <MX_GPIO_Init+0x170>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b41      	ldr	r3, [pc, #260]	; (8000584 <MX_GPIO_Init+0x170>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	21c0      	movs	r1, #192	; 0xc0
 800048c:	483e      	ldr	r0, [pc, #248]	; (8000588 <MX_GPIO_Init+0x174>)
 800048e:	f000 fd1f 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000498:	483c      	ldr	r0, [pc, #240]	; (800058c <MX_GPIO_Init+0x178>)
 800049a:	f000 fd19 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800049e:	2200      	movs	r2, #0
 80004a0:	f244 11e0 	movw	r1, #16864	; 0x41e0
 80004a4:	483a      	ldr	r0, [pc, #232]	; (8000590 <MX_GPIO_Init+0x17c>)
 80004a6:	f000 fd13 	bl	8000ed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4838      	ldr	r0, [pc, #224]	; (8000594 <MX_GPIO_Init+0x180>)
 80004b2:	f000 fd0d 	bl	8000ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80004b6:	f242 130f 	movw	r3, #8463	; 0x210f
 80004ba:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	4830      	ldr	r0, [pc, #192]	; (800058c <MX_GPIO_Init+0x178>)
 80004cc:	f000 fb96 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004d0:	23c0      	movs	r3, #192	; 0xc0
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4828      	ldr	r0, [pc, #160]	; (8000588 <MX_GPIO_Init+0x174>)
 80004e8:	f000 fb88 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_9;
 80004ec:	f44f 7304 	mov.w	r3, #528	; 0x210
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4821      	ldr	r0, [pc, #132]	; (800058c <MX_GPIO_Init+0x178>)
 8000506:	f000 fb79 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13;
 800050a:	f242 0301 	movw	r3, #8193	; 0x2001
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	481c      	ldr	r0, [pc, #112]	; (8000590 <MX_GPIO_Init+0x17c>)
 8000520:	f000 fb6c 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB5 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000524:	f244 13e0 	movw	r3, #16864	; 0x41e0
 8000528:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4814      	ldr	r0, [pc, #80]	; (8000590 <MX_GPIO_Init+0x17c>)
 800053e:	f000 fb5d 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000542:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	480f      	ldr	r0, [pc, #60]	; (8000594 <MX_GPIO_Init+0x180>)
 8000558:	f000 fb50 	bl	8000bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2302      	movs	r3, #2
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <MX_GPIO_Init+0x180>)
 8000576:	f000 fb41 	bl	8000bfc <HAL_GPIO_Init>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011c00 	.word	0x40011c00
 800058c:	40011000 	.word	0x40011000
 8000590:	40010c00 	.word	0x40010c00
 8000594:	40010800 	.word	0x40010800

08000598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d103      	bne.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		/* Toggle LEDs */
    HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005b0:	f000 fca6 	bl	8000f00 <HAL_GPIO_TogglePin>
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000009c 	.word	0x2000009c
 80005c0:	40011c00 	.word	0x40011c00

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_MspInit+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x5c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x60>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x60>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000644:	d113      	bne.n	800066e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_TIM_Base_MspInit+0x44>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <HAL_TIM_Base_MspInit+0x44>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_TIM_Base_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	201c      	movs	r0, #28
 8000664:	f000 fa93 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000668:	201c      	movs	r0, #28
 800066a:	f000 faac 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1b      	ldr	r2, [pc, #108]	; (8000704 <HAL_UART_MspInit+0x88>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d12f      	bne.n	80006fc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <HAL_UART_MspInit+0x8c>)
 800069e:	69db      	ldr	r3, [r3, #28]
 80006a0:	4a19      	ldr	r2, [pc, #100]	; (8000708 <HAL_UART_MspInit+0x8c>)
 80006a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a6:	61d3      	str	r3, [r2, #28]
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_UART_MspInit+0x8c>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_UART_MspInit+0x8c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a13      	ldr	r2, [pc, #76]	; (8000708 <HAL_UART_MspInit+0x8c>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_UART_MspInit+0x8c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006cc:	2304      	movs	r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0310 	add.w	r3, r7, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <HAL_UART_MspInit+0x90>)
 80006e0:	f000 fa8c 	bl	8000bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e4:	2308      	movs	r3, #8
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_UART_MspInit+0x90>)
 80006f8:	f000 fa80 	bl	8000bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40004400 	.word	0x40004400
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <HardFault_Handler+0x4>

08000722 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <MemManage_Handler+0x4>

08000728 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <BusFault_Handler+0x4>

0800072e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <UsageFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f902 	bl	8000964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <TIM2_IRQHandler+0x10>)
 800076a:	f001 f8af 	bl	80018cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	2000009c 	.word	0x2000009c

08000778 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e00a      	b.n	80007a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800078a:	f3af 8000 	nop.w
 800078e:	4601      	mov	r1, r0
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	1c5a      	adds	r2, r3, #1
 8000794:	60ba      	str	r2, [r7, #8]
 8000796:	b2ca      	uxtb	r2, r1
 8000798:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	3301      	adds	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	dbf0      	blt.n	800078a <_read+0x12>
	}

return len;
 80007a8:	687b      	ldr	r3, [r7, #4]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
	return -1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d8:	605a      	str	r2, [r3, #4]
	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <_isatty>:

int _isatty(int file)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
	return 1;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b085      	sub	sp, #20
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
	return 0;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
	...

08000814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <_sbrk+0x5c>)
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <_sbrk+0x60>)
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d102      	bne.n	8000836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_sbrk+0x64>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <_sbrk+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <_sbrk+0x64>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4413      	add	r3, r2
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	429a      	cmp	r2, r3
 8000842:	d207      	bcs.n	8000854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000844:	f001 fd6c 	bl	8002320 <__errno>
 8000848:	4602      	mov	r2, r0
 800084a:	230c      	movs	r3, #12
 800084c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000852:	e009      	b.n	8000868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20010000 	.word	0x20010000
 8000874:	00000400 	.word	0x00000400
 8000878:	20000090 	.word	0x20000090
 800087c:	20000130 	.word	0x20000130

08000880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800088c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b2:	f7ff ffe5 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 fd39 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ba:	f7ff fcc7 	bl	800024c <main>
  bx lr
 80008be:	4770      	bx	lr
  ldr r3, =_sidata
 80008c0:	08003250 	.word	0x08003250
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c8:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80008cc:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80008d0:	2000012c 	.word	0x2000012c

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <HAL_Init+0x28>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a07      	ldr	r2, [pc, #28]	; (8000900 <HAL_Init+0x28>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f945 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f808 	bl	8000904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f4:	f7ff fe6c 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40022000 	.word	0x40022000

08000904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x54>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x58>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	fbb3 f3f1 	udiv	r3, r3, r1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f95d 	bl	8000be2 <HAL_SYSTICK_Config>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e00e      	b.n	8000950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b0f      	cmp	r3, #15
 8000936:	d80a      	bhi.n	800094e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000938:	2200      	movs	r2, #0
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 f925 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_InitTick+0x5c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	20000008 	.word	0x20000008
 8000960:	20000004 	.word	0x20000004

08000964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x1c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x20>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4413      	add	r3, r2
 8000974:	4a03      	ldr	r2, [pc, #12]	; (8000984 <HAL_IncTick+0x20>)
 8000976:	6013      	str	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000008 	.word	0x20000008
 8000984:	20000124 	.word	0x20000124

08000988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return uwTick;
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <HAL_GetTick+0x10>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000124 	.word	0x20000124

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff fff0 	bl	8000988 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_Delay+0x40>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffe0 	bl	8000988 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000008 	.word	0x20000008

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <__NVIC_EnableIRQ+0x34>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f7ff ff90 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff2d 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff42 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff35 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b08b      	sub	sp, #44	; 0x2c
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0e:	e133      	b.n	8000e78 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c10:	2201      	movs	r2, #1
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	69fa      	ldr	r2, [r7, #28]
 8000c20:	4013      	ands	r3, r2
 8000c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8122 	bne.w	8000e72 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d034      	beq.n	8000ca0 <HAL_GPIO_Init+0xa4>
 8000c36:	2b12      	cmp	r3, #18
 8000c38:	d80d      	bhi.n	8000c56 <HAL_GPIO_Init+0x5a>
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d02b      	beq.n	8000c96 <HAL_GPIO_Init+0x9a>
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d804      	bhi.n	8000c4c <HAL_GPIO_Init+0x50>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d031      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d01c      	beq.n	8000c84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c4a:	e048      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d043      	beq.n	8000cd8 <HAL_GPIO_Init+0xdc>
 8000c50:	2b11      	cmp	r3, #17
 8000c52:	d01b      	beq.n	8000c8c <HAL_GPIO_Init+0x90>
          break;
 8000c54:	e043      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c56:	4a8f      	ldr	r2, [pc, #572]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d026      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c5c:	4a8d      	ldr	r2, [pc, #564]	; (8000e94 <HAL_GPIO_Init+0x298>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d806      	bhi.n	8000c70 <HAL_GPIO_Init+0x74>
 8000c62:	4a8d      	ldr	r2, [pc, #564]	; (8000e98 <HAL_GPIO_Init+0x29c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d020      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c68:	4a8c      	ldr	r2, [pc, #560]	; (8000e9c <HAL_GPIO_Init+0x2a0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d01d      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c6e:	e036      	b.n	8000cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c70:	4a8b      	ldr	r2, [pc, #556]	; (8000ea0 <HAL_GPIO_Init+0x2a4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d019      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c76:	4a8b      	ldr	r2, [pc, #556]	; (8000ea4 <HAL_GPIO_Init+0x2a8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d016      	beq.n	8000caa <HAL_GPIO_Init+0xae>
 8000c7c:	4a8a      	ldr	r2, [pc, #552]	; (8000ea8 <HAL_GPIO_Init+0x2ac>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0xae>
          break;
 8000c82:	e02c      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e028      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	3304      	adds	r3, #4
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e023      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e01e      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e019      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e012      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d105      	bne.n	8000ccc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	611a      	str	r2, [r3, #16]
          break;
 8000cca:	e008      	b.n	8000cde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	615a      	str	r2, [r3, #20]
          break;
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	d801      	bhi.n	8000ce8 <HAL_GPIO_Init+0xec>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	e001      	b.n	8000cec <HAL_GPIO_Init+0xf0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3304      	adds	r3, #4
 8000cec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d802      	bhi.n	8000cfa <HAL_GPIO_Init+0xfe>
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	e002      	b.n	8000d00 <HAL_GPIO_Init+0x104>
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	210f      	movs	r1, #15
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	6a39      	ldr	r1, [r7, #32]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80a2 	beq.w	8000e72 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a5e      	ldr	r2, [pc, #376]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_GPIO_Init+0x2b0>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d46:	4a5a      	ldr	r2, [pc, #360]	; (8000eb0 <HAL_GPIO_Init+0x2b4>)
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a51      	ldr	r2, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x2b8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d01f      	beq.n	8000db2 <HAL_GPIO_Init+0x1b6>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a50      	ldr	r2, [pc, #320]	; (8000eb8 <HAL_GPIO_Init+0x2bc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d019      	beq.n	8000dae <HAL_GPIO_Init+0x1b2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4f      	ldr	r2, [pc, #316]	; (8000ebc <HAL_GPIO_Init+0x2c0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d013      	beq.n	8000daa <HAL_GPIO_Init+0x1ae>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4e      	ldr	r2, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x2c4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d00d      	beq.n	8000da6 <HAL_GPIO_Init+0x1aa>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4d      	ldr	r2, [pc, #308]	; (8000ec4 <HAL_GPIO_Init+0x2c8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d007      	beq.n	8000da2 <HAL_GPIO_Init+0x1a6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x2cc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_GPIO_Init+0x1a2>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e00a      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000d9e:	2306      	movs	r3, #6
 8000da0:	e008      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000da2:	2304      	movs	r3, #4
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000da6:	2303      	movs	r3, #3
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x1b8>
 8000db2:	2300      	movs	r3, #0
 8000db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dc4:	493a      	ldr	r1, [pc, #232]	; (8000eb0 <HAL_GPIO_Init+0x2b4>)
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	493a      	ldr	r1, [pc, #232]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dec:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4935      	ldr	r1, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e06:	4b31      	ldr	r3, [pc, #196]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4930      	ldr	r1, [pc, #192]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
 8000e12:	e006      	b.n	8000e22 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	492b      	ldr	r1, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4926      	ldr	r1, [pc, #152]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	608b      	str	r3, [r1, #8]
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4921      	ldr	r1, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e46:	4013      	ands	r3, r2
 8000e48:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	491c      	ldr	r1, [pc, #112]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60cb      	str	r3, [r1, #12]
 8000e62:	e006      	b.n	8000e72 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4917      	ldr	r1, [pc, #92]	; (8000ecc <HAL_GPIO_Init+0x2d0>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f aec4 	bne.w	8000c10 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	372c      	adds	r7, #44	; 0x2c
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	10210000 	.word	0x10210000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	10120000 	.word	0x10120000
 8000ea0:	10310000 	.word	0x10310000
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10220000 	.word	0x10220000
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	40011000 	.word	0x40011000
 8000ec0:	40011400 	.word	0x40011400
 8000ec4:	40011800 	.word	0x40011800
 8000ec8:	40011c00 	.word	0x40011c00
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee0:	787b      	ldrb	r3, [r7, #1]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee6:	887a      	ldrh	r2, [r7, #2]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eec:	e003      	b.n	8000ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	041a      	lsls	r2, r3, #16
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	611a      	str	r2, [r3, #16]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4013      	ands	r3, r2
 8000f18:	041a      	lsls	r2, r3, #16
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43d9      	mvns	r1, r3
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	400b      	ands	r3, r1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e26c      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8087 	beq.w	8001062 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f54:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d00c      	beq.n	8000f7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f60:	4b8f      	ldr	r3, [pc, #572]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 030c 	and.w	r3, r3, #12
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d112      	bne.n	8000f92 <HAL_RCC_OscConfig+0x5e>
 8000f6c:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f78:	d10b      	bne.n	8000f92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d06c      	beq.n	8001060 <HAL_RCC_OscConfig+0x12c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d168      	bne.n	8001060 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e246      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x76>
 8000f9c:	4b80      	ldr	r3, [pc, #512]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a7f      	ldr	r2, [pc, #508]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e02e      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x98>
 8000fb2:	4b7b      	ldr	r3, [pc, #492]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7a      	ldr	r2, [pc, #488]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b78      	ldr	r3, [pc, #480]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a77      	ldr	r2, [pc, #476]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xbc>
 8000fd6:	4b72      	ldr	r3, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a71      	ldr	r2, [pc, #452]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b6f      	ldr	r3, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6e      	ldr	r2, [pc, #440]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0xd4>
 8000ff0:	4b6b      	ldr	r3, [pc, #428]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a6a      	ldr	r2, [pc, #424]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a67      	ldr	r2, [pc, #412]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fcba 	bl	8000988 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fcb6 	bl	8000988 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1fa      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0xe4>
 8001036:	e014      	b.n	8001062 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fca6 	bl	8000988 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fca2 	bl	8000988 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1e6      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x10c>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106e:	4b4c      	ldr	r3, [pc, #304]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800107a:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x18c>
 8001086:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x176>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1ba      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4939      	ldr	r1, [pc, #228]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	e03a      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x270>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff fc5b 	bl	8000988 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fc57 	bl	8000988 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e19b      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4927      	ldr	r1, [pc, #156]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_RCC_OscConfig+0x270>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fc3a 	bl	8000988 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fc36 	bl	8000988 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e17a      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d03a      	beq.n	80011b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d019      	beq.n	800117e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_RCC_OscConfig+0x274>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff fc1a 	bl	8000988 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fc16 	bl	8000988 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e15a      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fada 	bl	8001730 <RCC_Delay>
 800117c:	e01c      	b.n	80011b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_RCC_OscConfig+0x274>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fc00 	bl	8000988 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118a:	e00f      	b.n	80011ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fbfc 	bl	8000988 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d908      	bls.n	80011ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e140      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	42420000 	.word	0x42420000
 80011a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b9e      	ldr	r3, [pc, #632]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e9      	bne.n	800118c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80a6 	beq.w	8001312 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b97      	ldr	r3, [pc, #604]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10d      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b94      	ldr	r3, [pc, #592]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a93      	ldr	r2, [pc, #588]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b91      	ldr	r3, [pc, #580]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ee:	2301      	movs	r3, #1
 80011f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b8e      	ldr	r3, [pc, #568]	; (800142c <HAL_RCC_OscConfig+0x4f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <HAL_RCC_OscConfig+0x4f8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a8a      	ldr	r2, [pc, #552]	; (800142c <HAL_RCC_OscConfig+0x4f8>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120a:	f7ff fbbd 	bl	8000988 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001212:	f7ff fbb9 	bl	8000988 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b64      	cmp	r3, #100	; 0x64
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0fd      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <HAL_RCC_OscConfig+0x4f8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x312>
 8001238:	4b7b      	ldr	r3, [pc, #492]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4a7a      	ldr	r2, [pc, #488]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6213      	str	r3, [r2, #32]
 8001244:	e02d      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x334>
 800124e:	4b76      	ldr	r3, [pc, #472]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a75      	ldr	r2, [pc, #468]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6213      	str	r3, [r2, #32]
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a72      	ldr	r2, [pc, #456]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	e01c      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0x356>
 8001270:	4b6d      	ldr	r3, [pc, #436]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a6c      	ldr	r2, [pc, #432]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6213      	str	r3, [r2, #32]
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a69      	ldr	r2, [pc, #420]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6213      	str	r3, [r2, #32]
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0x36e>
 800128a:	4b67      	ldr	r3, [pc, #412]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a66      	ldr	r2, [pc, #408]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	4b64      	ldr	r3, [pc, #400]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a63      	ldr	r2, [pc, #396]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d015      	beq.n	80012d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fb6d 	bl	8000988 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fb69 	bl	8000988 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0ab      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ee      	beq.n	80012b2 <HAL_RCC_OscConfig+0x37e>
 80012d4:	e014      	b.n	8001300 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fb57 	bl	8000988 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fb53 	bl	8000988 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e095      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ee      	bne.n	80012de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800130c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8081 	beq.w	800141e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131c:	4b42      	ldr	r3, [pc, #264]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d061      	beq.n	80013ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d146      	bne.n	80013be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0x4fc>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb27 	bl	8000988 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fb23 	bl	8000988 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e067      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d108      	bne.n	8001378 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	492d      	ldr	r1, [pc, #180]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a19      	ldr	r1, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	430b      	orrs	r3, r1
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_RCC_OscConfig+0x4fc>)
 8001392:	2201      	movs	r2, #1
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff faf7 	bl	8000988 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff faf3 	bl	8000988 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e037      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x46a>
 80013bc:	e02f      	b.n	800141e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_RCC_OscConfig+0x4fc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fae0 	bl	8000988 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff fadc 	bl	8000988 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e020      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x498>
 80013ea:	e018      	b.n	800141e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e013      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	429a      	cmp	r2, r3
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	40007000 	.word	0x40007000
 8001430:	42420060 	.word	0x42420060

08001434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0d0      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d910      	bls.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4965      	ldr	r1, [pc, #404]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0b8      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	494d      	ldr	r1, [pc, #308]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d040      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e073      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06b      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4936      	ldr	r1, [pc, #216]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fa30 	bl	8000988 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fa2c 	bl	8000988 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e053      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d210      	bcs.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e032      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4916      	ldr	r1, [pc, #88]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f821 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c6:	4601      	mov	r1, r0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	fa21 f303 	lsr.w	r3, r1, r3
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1cc>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1d0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f98e 	bl	8000904 <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08003198 	.word	0x08003198
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	b490      	push	{r4, r7}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001610:	1d3c      	adds	r4, r7, #4
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d002      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x40>
 8001642:	2b08      	cmp	r3, #8
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x46>
 8001646:	e02d      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800164a:	623b      	str	r3, [r7, #32]
      break;
 800164c:	e02d      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165a:	4413      	add	r3, r2
 800165c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001660:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d013      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	0c5b      	lsrs	r3, r3, #17
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800167a:	4413      	add	r3, r2
 800167c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001680:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001686:	fb02 f203 	mul.w	r2, r2, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
 8001692:	e004      	b.n	800169e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	623b      	str	r3, [r7, #32]
      break;
 80016a2:	e002      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a6:	623b      	str	r3, [r7, #32]
      break;
 80016a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016aa:	6a3b      	ldr	r3, [r7, #32]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc90      	pop	{r4, r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	08003184 	.word	0x08003184
 80016bc:	08003194 	.word	0x08003194
 80016c0:	40021000 	.word	0x40021000
 80016c4:	007a1200 	.word	0x007a1200
 80016c8:	003d0900 	.word	0x003d0900

080016cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <HAL_RCC_GetHCLKFreq+0x10>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016e4:	f7ff fff2 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 80016e8:	4601      	mov	r1, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4a03      	ldr	r2, [pc, #12]	; (8001704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f6:	5cd3      	ldrb	r3, [r2, r3]
 80016f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	080031a8 	.word	0x080031a8

08001708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800170c:	f7ff ffde 	bl	80016cc <HAL_RCC_GetHCLKFreq>
 8001710:	4601      	mov	r1, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	0adb      	lsrs	r3, r3, #11
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4a03      	ldr	r2, [pc, #12]	; (800172c <HAL_RCC_GetPCLK2Freq+0x24>)
 800171e:	5cd3      	ldrb	r3, [r2, r3]
 8001720:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40021000 	.word	0x40021000
 800172c:	080031a8 	.word	0x080031a8

08001730 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <RCC_Delay+0x34>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <RCC_Delay+0x38>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0a5b      	lsrs	r3, r3, #9
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800174c:	bf00      	nop
  }
  while (Delay --);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	60fa      	str	r2, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <RCC_Delay+0x1c>
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000000 	.word	0x20000000
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e041      	b.n	8001802 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe ff4e 	bl	8000634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2202      	movs	r2, #2
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3304      	adds	r3, #4
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f000 fa72 	bl	8001c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d001      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e044      	b.n	80018ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_TIM_Base_Start_IT+0xac>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d018      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x6c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <HAL_TIM_Base_Start_IT+0xb0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d013      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x6c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d00e      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x6c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d009      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x6c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a16      	ldr	r2, [pc, #88]	; (80018c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d004      	beq.n	8001878 <HAL_TIM_Base_Start_IT+0x6c>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b06      	cmp	r3, #6
 8001888:	d010      	beq.n	80018ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800189a:	e007      	b.n	80018ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40013400 	.word	0x40013400
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40000800 	.word	0x40000800
 80018c8:	40000c00 	.word	0x40000c00

080018cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d122      	bne.n	8001928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d11b      	bne.n	8001928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0202 	mvn.w	r2, #2
 80018f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f9a4 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8001914:	e005      	b.n	8001922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f997 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f9a6 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	2b04      	cmp	r3, #4
 8001934:	d122      	bne.n	800197c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b04      	cmp	r3, #4
 8001942:	d11b      	bne.n	800197c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f06f 0204 	mvn.w	r2, #4
 800194c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f97a 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8001968:	e005      	b.n	8001976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f96d 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f97c 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b08      	cmp	r3, #8
 8001988:	d122      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b08      	cmp	r3, #8
 8001996:	d11b      	bne.n	80019d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0208 	mvn.w	r2, #8
 80019a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2204      	movs	r2, #4
 80019a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f950 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 80019bc:	e005      	b.n	80019ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f943 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f952 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d122      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d11b      	bne.n	8001a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0210 	mvn.w	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2208      	movs	r2, #8
 80019fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f926 	bl	8001c5c <HAL_TIM_IC_CaptureCallback>
 8001a10:	e005      	b.n	8001a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f919 	bl	8001c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f928 	bl	8001c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10e      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0201 	mvn.w	r2, #1
 8001a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe fda4 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	2b80      	cmp	r3, #128	; 0x80
 8001a5c:	d10e      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a68:	2b80      	cmp	r3, #128	; 0x80
 8001a6a:	d107      	bne.n	8001a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa91 	bl	8001f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d10e      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	2b40      	cmp	r3, #64	; 0x40
 8001a96:	d107      	bne.n	8001aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8ec 	bl	8001c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b20      	cmp	r3, #32
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d107      	bne.n	8001ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f06f 0220 	mvn.w	r2, #32
 8001acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fa5c 	bl	8001f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_TIM_ConfigClockSource+0x18>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0a6      	b.n	8001c42 <HAL_TIM_ConfigClockSource+0x166>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b40      	cmp	r3, #64	; 0x40
 8001b2a:	d067      	beq.n	8001bfc <HAL_TIM_ConfigClockSource+0x120>
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d80b      	bhi.n	8001b48 <HAL_TIM_ConfigClockSource+0x6c>
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d073      	beq.n	8001c1c <HAL_TIM_ConfigClockSource+0x140>
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d802      	bhi.n	8001b3e <HAL_TIM_ConfigClockSource+0x62>
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d06f      	beq.n	8001c1c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001b3c:	e078      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d06c      	beq.n	8001c1c <HAL_TIM_ConfigClockSource+0x140>
 8001b42:	2b30      	cmp	r3, #48	; 0x30
 8001b44:	d06a      	beq.n	8001c1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b46:	e073      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b48:	2b70      	cmp	r3, #112	; 0x70
 8001b4a:	d00d      	beq.n	8001b68 <HAL_TIM_ConfigClockSource+0x8c>
 8001b4c:	2b70      	cmp	r3, #112	; 0x70
 8001b4e:	d804      	bhi.n	8001b5a <HAL_TIM_ConfigClockSource+0x7e>
 8001b50:	2b50      	cmp	r3, #80	; 0x50
 8001b52:	d033      	beq.n	8001bbc <HAL_TIM_ConfigClockSource+0xe0>
 8001b54:	2b60      	cmp	r3, #96	; 0x60
 8001b56:	d041      	beq.n	8001bdc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001b58:	e06a      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b5e:	d066      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0x152>
 8001b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b64:	d017      	beq.n	8001b96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b66:	e063      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6899      	ldr	r1, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f000 f97d 	bl	8001e76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]
      break;
 8001b94:	e04c      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6899      	ldr	r1, [r3, #8]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f000 f966 	bl	8001e76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb8:	609a      	str	r2, [r3, #8]
      break;
 8001bba:	e039      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f000 f8dd 	bl	8001d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2150      	movs	r1, #80	; 0x50
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f934 	bl	8001e42 <TIM_ITRx_SetConfig>
      break;
 8001bda:	e029      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	461a      	mov	r2, r3
 8001bea:	f000 f8fb 	bl	8001de4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2160      	movs	r1, #96	; 0x60
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f924 	bl	8001e42 <TIM_ITRx_SetConfig>
      break;
 8001bfa:	e019      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	f000 f8bd 	bl	8001d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f914 	bl	8001e42 <TIM_ITRx_SetConfig>
      break;
 8001c1a:	e009      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f90b 	bl	8001e42 <TIM_ITRx_SetConfig>
        break;
 8001c2c:	e000      	b.n	8001c30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
	...

08001c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <TIM_Base_SetConfig+0xe0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <TIM_Base_SetConfig+0x40>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00f      	beq.n	8001cd4 <TIM_Base_SetConfig+0x40>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cba:	d00b      	beq.n	8001cd4 <TIM_Base_SetConfig+0x40>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <TIM_Base_SetConfig+0xe8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <TIM_Base_SetConfig+0x40>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a2e      	ldr	r2, [pc, #184]	; (8001d80 <TIM_Base_SetConfig+0xec>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <TIM_Base_SetConfig+0x40>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <TIM_Base_SetConfig+0xf0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d108      	bne.n	8001ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <TIM_Base_SetConfig+0xe0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <TIM_Base_SetConfig+0x82>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00f      	beq.n	8001d16 <TIM_Base_SetConfig+0x82>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfc:	d00b      	beq.n	8001d16 <TIM_Base_SetConfig+0x82>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <TIM_Base_SetConfig+0xe8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d007      	beq.n	8001d16 <TIM_Base_SetConfig+0x82>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <TIM_Base_SetConfig+0xec>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <TIM_Base_SetConfig+0x82>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <TIM_Base_SetConfig+0xf0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d108      	bne.n	8001d28 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <TIM_Base_SetConfig+0xe0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d003      	beq.n	8001d5c <TIM_Base_SetConfig+0xc8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <TIM_Base_SetConfig+0xe4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d103      	bne.n	8001d64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40013400 	.word	0x40013400
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00

08001d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	f023 0201 	bic.w	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f023 030a 	bic.w	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	621a      	str	r2, [r3, #32]
}
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f023 0210 	bic.w	r2, r3, #16
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	031b      	lsls	r3, r3, #12
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	621a      	str	r2, [r3, #32]
}
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f043 0307 	orr.w	r3, r3, #7
 8001e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	609a      	str	r2, [r3, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b087      	sub	sp, #28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	021a      	lsls	r2, r3, #8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	609a      	str	r2, [r3, #8]
}
 8001eaa:	bf00      	nop
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e050      	b.n	8001f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d018      	beq.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f22:	d00e      	beq.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d004      	beq.n	8001f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10c      	bne.n	8001f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40013400 	.word	0x40013400
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00

08001f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e03f      	b.n	8002042 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fb50 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f905 	bl	8002204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695a      	ldr	r2, [r3, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b08a      	sub	sp, #40	; 0x28
 800204e:	af02      	add	r7, sp, #8
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d17c      	bne.n	8002164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_UART_Transmit+0x2c>
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e075      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit+0x3e>
 8002084:	2302      	movs	r3, #2
 8002086:	e06e      	b.n	8002166 <HAL_UART_Transmit+0x11c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800209e:	f7fe fc73 	bl	8000988 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	88fa      	ldrh	r2, [r7, #6]
 80020a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b8:	d108      	bne.n	80020cc <HAL_UART_Transmit+0x82>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e003      	b.n	80020d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020dc:	e02a      	b.n	8002134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 f840 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e036      	b.n	8002166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800210c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	3302      	adds	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e007      	b.n	8002126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	781a      	ldrb	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1cf      	bne.n	80020de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f810 	bl	800216e <UART_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e006      	b.n	8002166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4613      	mov	r3, r2
 800217c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800217e:	e02c      	b.n	80021da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002186:	d028      	beq.n	80021da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <UART_WaitOnFlagUntilTimeout+0x30>
 800218e:	f7fe fbfb 	bl	8000988 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	429a      	cmp	r2, r3
 800219c:	d21d      	bcs.n	80021da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e00f      	b.n	80021fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4013      	ands	r3, r2
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d0c3      	beq.n	8002180 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800223e:	f023 030c 	bic.w	r3, r3, #12
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	430b      	orrs	r3, r1
 800224a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <UART_SetConfig+0x114>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800226c:	f7ff fa4c 	bl	8001708 <HAL_RCC_GetPCLK2Freq>
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	e002      	b.n	800227a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002274:	f7ff fa34 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8002278:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <UART_SetConfig+0x118>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	0119      	lsls	r1, r3, #4
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	009a      	lsls	r2, r3, #2
 80022a4:	441a      	add	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <UART_SetConfig+0x118>)
 80022b2:	fba3 0302 	umull	r0, r3, r3, r2
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	fb00 f303 	mul.w	r3, r0, r3
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	3332      	adds	r3, #50	; 0x32
 80022c4:	4a15      	ldr	r2, [pc, #84]	; (800231c <UART_SetConfig+0x118>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d0:	4419      	add	r1, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <UART_SetConfig+0x118>)
 80022ea:	fba3 0302 	umull	r0, r3, r3, r2
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2064      	movs	r0, #100	; 0x64
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	3332      	adds	r3, #50	; 0x32
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <UART_SetConfig+0x118>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	440a      	add	r2, r1
 800230e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40013800 	.word	0x40013800
 800231c:	51eb851f 	.word	0x51eb851f

08002320 <__errno>:
 8002320:	4b01      	ldr	r3, [pc, #4]	; (8002328 <__errno+0x8>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	2500      	movs	r5, #0
 8002330:	4e0c      	ldr	r6, [pc, #48]	; (8002364 <__libc_init_array+0x38>)
 8002332:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002334:	1ba4      	subs	r4, r4, r6
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	42a5      	cmp	r5, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	f000 ff10 	bl	8003160 <_init>
 8002340:	2500      	movs	r5, #0
 8002342:	4e0a      	ldr	r6, [pc, #40]	; (800236c <__libc_init_array+0x40>)
 8002344:	4c0a      	ldr	r4, [pc, #40]	; (8002370 <__libc_init_array+0x44>)
 8002346:	1ba4      	subs	r4, r4, r6
 8002348:	10a4      	asrs	r4, r4, #2
 800234a:	42a5      	cmp	r5, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002354:	4798      	blx	r3
 8002356:	3501      	adds	r5, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800235e:	4798      	blx	r3
 8002360:	3501      	adds	r5, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	08003248 	.word	0x08003248
 8002368:	08003248 	.word	0x08003248
 800236c:	08003248 	.word	0x08003248
 8002370:	0800324c 	.word	0x0800324c

08002374 <memset>:
 8002374:	4603      	mov	r3, r0
 8002376:	4402      	add	r2, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	f803 1b01 	strb.w	r1, [r3], #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <iprintf>:
 8002384:	b40f      	push	{r0, r1, r2, r3}
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <iprintf+0x2c>)
 8002388:	b513      	push	{r0, r1, r4, lr}
 800238a:	681c      	ldr	r4, [r3, #0]
 800238c:	b124      	cbz	r4, 8002398 <iprintf+0x14>
 800238e:	69a3      	ldr	r3, [r4, #24]
 8002390:	b913      	cbnz	r3, 8002398 <iprintf+0x14>
 8002392:	4620      	mov	r0, r4
 8002394:	f000 f84e 	bl	8002434 <__sinit>
 8002398:	ab05      	add	r3, sp, #20
 800239a:	9a04      	ldr	r2, [sp, #16]
 800239c:	68a1      	ldr	r1, [r4, #8]
 800239e:	4620      	mov	r0, r4
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	f000 f953 	bl	800264c <_vfiprintf_r>
 80023a6:	b002      	add	sp, #8
 80023a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ac:	b004      	add	sp, #16
 80023ae:	4770      	bx	lr
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <std>:
 80023b4:	2300      	movs	r3, #0
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
 80023ba:	e9c0 3300 	strd	r3, r3, [r0]
 80023be:	6083      	str	r3, [r0, #8]
 80023c0:	8181      	strh	r1, [r0, #12]
 80023c2:	6643      	str	r3, [r0, #100]	; 0x64
 80023c4:	81c2      	strh	r2, [r0, #14]
 80023c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ca:	6183      	str	r3, [r0, #24]
 80023cc:	4619      	mov	r1, r3
 80023ce:	2208      	movs	r2, #8
 80023d0:	305c      	adds	r0, #92	; 0x5c
 80023d2:	f7ff ffcf 	bl	8002374 <memset>
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <std+0x38>)
 80023d8:	6224      	str	r4, [r4, #32]
 80023da:	6263      	str	r3, [r4, #36]	; 0x24
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <std+0x3c>)
 80023de:	62a3      	str	r3, [r4, #40]	; 0x28
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <std+0x40>)
 80023e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80023e4:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <std+0x44>)
 80023e6:	6323      	str	r3, [r4, #48]	; 0x30
 80023e8:	bd10      	pop	{r4, pc}
 80023ea:	bf00      	nop
 80023ec:	08002ba9 	.word	0x08002ba9
 80023f0:	08002bcb 	.word	0x08002bcb
 80023f4:	08002c03 	.word	0x08002c03
 80023f8:	08002c27 	.word	0x08002c27

080023fc <_cleanup_r>:
 80023fc:	4901      	ldr	r1, [pc, #4]	; (8002404 <_cleanup_r+0x8>)
 80023fe:	f000 b885 	b.w	800250c <_fwalk_reent>
 8002402:	bf00      	nop
 8002404:	08002f01 	.word	0x08002f01

08002408 <__sfmoreglue>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	2568      	movs	r5, #104	; 0x68
 800240c:	1e4a      	subs	r2, r1, #1
 800240e:	4355      	muls	r5, r2
 8002410:	460e      	mov	r6, r1
 8002412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002416:	f000 f897 	bl	8002548 <_malloc_r>
 800241a:	4604      	mov	r4, r0
 800241c:	b140      	cbz	r0, 8002430 <__sfmoreglue+0x28>
 800241e:	2100      	movs	r1, #0
 8002420:	e9c0 1600 	strd	r1, r6, [r0]
 8002424:	300c      	adds	r0, #12
 8002426:	60a0      	str	r0, [r4, #8]
 8002428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800242c:	f7ff ffa2 	bl	8002374 <memset>
 8002430:	4620      	mov	r0, r4
 8002432:	bd70      	pop	{r4, r5, r6, pc}

08002434 <__sinit>:
 8002434:	6983      	ldr	r3, [r0, #24]
 8002436:	b510      	push	{r4, lr}
 8002438:	4604      	mov	r4, r0
 800243a:	bb33      	cbnz	r3, 800248a <__sinit+0x56>
 800243c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002440:	6503      	str	r3, [r0, #80]	; 0x50
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <__sinit+0x58>)
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <__sinit+0x5c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6282      	str	r2, [r0, #40]	; 0x28
 800244a:	4298      	cmp	r0, r3
 800244c:	bf04      	itt	eq
 800244e:	2301      	moveq	r3, #1
 8002450:	6183      	streq	r3, [r0, #24]
 8002452:	f000 f81f 	bl	8002494 <__sfp>
 8002456:	6060      	str	r0, [r4, #4]
 8002458:	4620      	mov	r0, r4
 800245a:	f000 f81b 	bl	8002494 <__sfp>
 800245e:	60a0      	str	r0, [r4, #8]
 8002460:	4620      	mov	r0, r4
 8002462:	f000 f817 	bl	8002494 <__sfp>
 8002466:	2200      	movs	r2, #0
 8002468:	60e0      	str	r0, [r4, #12]
 800246a:	2104      	movs	r1, #4
 800246c:	6860      	ldr	r0, [r4, #4]
 800246e:	f7ff ffa1 	bl	80023b4 <std>
 8002472:	2201      	movs	r2, #1
 8002474:	2109      	movs	r1, #9
 8002476:	68a0      	ldr	r0, [r4, #8]
 8002478:	f7ff ff9c 	bl	80023b4 <std>
 800247c:	2202      	movs	r2, #2
 800247e:	2112      	movs	r1, #18
 8002480:	68e0      	ldr	r0, [r4, #12]
 8002482:	f7ff ff97 	bl	80023b4 <std>
 8002486:	2301      	movs	r3, #1
 8002488:	61a3      	str	r3, [r4, #24]
 800248a:	bd10      	pop	{r4, pc}
 800248c:	080031b0 	.word	0x080031b0
 8002490:	080023fd 	.word	0x080023fd

08002494 <__sfp>:
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <__sfp+0x70>)
 8002498:	4607      	mov	r7, r0
 800249a:	681e      	ldr	r6, [r3, #0]
 800249c:	69b3      	ldr	r3, [r6, #24]
 800249e:	b913      	cbnz	r3, 80024a6 <__sfp+0x12>
 80024a0:	4630      	mov	r0, r6
 80024a2:	f7ff ffc7 	bl	8002434 <__sinit>
 80024a6:	3648      	adds	r6, #72	; 0x48
 80024a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	d503      	bpl.n	80024b8 <__sfp+0x24>
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	b133      	cbz	r3, 80024c2 <__sfp+0x2e>
 80024b4:	6836      	ldr	r6, [r6, #0]
 80024b6:	e7f7      	b.n	80024a8 <__sfp+0x14>
 80024b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024bc:	b16d      	cbz	r5, 80024da <__sfp+0x46>
 80024be:	3468      	adds	r4, #104	; 0x68
 80024c0:	e7f4      	b.n	80024ac <__sfp+0x18>
 80024c2:	2104      	movs	r1, #4
 80024c4:	4638      	mov	r0, r7
 80024c6:	f7ff ff9f 	bl	8002408 <__sfmoreglue>
 80024ca:	6030      	str	r0, [r6, #0]
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1f1      	bne.n	80024b4 <__sfp+0x20>
 80024d0:	230c      	movs	r3, #12
 80024d2:	4604      	mov	r4, r0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4620      	mov	r0, r4
 80024d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <__sfp+0x74>)
 80024dc:	6665      	str	r5, [r4, #100]	; 0x64
 80024de:	e9c4 5500 	strd	r5, r5, [r4]
 80024e2:	60a5      	str	r5, [r4, #8]
 80024e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80024e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80024ec:	2208      	movs	r2, #8
 80024ee:	4629      	mov	r1, r5
 80024f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024f4:	f7ff ff3e 	bl	8002374 <memset>
 80024f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002500:	e7e9      	b.n	80024d6 <__sfp+0x42>
 8002502:	bf00      	nop
 8002504:	080031b0 	.word	0x080031b0
 8002508:	ffff0001 	.word	0xffff0001

0800250c <_fwalk_reent>:
 800250c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002510:	4680      	mov	r8, r0
 8002512:	4689      	mov	r9, r1
 8002514:	2600      	movs	r6, #0
 8002516:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800251a:	b914      	cbnz	r4, 8002522 <_fwalk_reent+0x16>
 800251c:	4630      	mov	r0, r6
 800251e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002522:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002526:	3f01      	subs	r7, #1
 8002528:	d501      	bpl.n	800252e <_fwalk_reent+0x22>
 800252a:	6824      	ldr	r4, [r4, #0]
 800252c:	e7f5      	b.n	800251a <_fwalk_reent+0xe>
 800252e:	89ab      	ldrh	r3, [r5, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d907      	bls.n	8002544 <_fwalk_reent+0x38>
 8002534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002538:	3301      	adds	r3, #1
 800253a:	d003      	beq.n	8002544 <_fwalk_reent+0x38>
 800253c:	4629      	mov	r1, r5
 800253e:	4640      	mov	r0, r8
 8002540:	47c8      	blx	r9
 8002542:	4306      	orrs	r6, r0
 8002544:	3568      	adds	r5, #104	; 0x68
 8002546:	e7ee      	b.n	8002526 <_fwalk_reent+0x1a>

08002548 <_malloc_r>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	1ccd      	adds	r5, r1, #3
 800254c:	f025 0503 	bic.w	r5, r5, #3
 8002550:	3508      	adds	r5, #8
 8002552:	2d0c      	cmp	r5, #12
 8002554:	bf38      	it	cc
 8002556:	250c      	movcc	r5, #12
 8002558:	2d00      	cmp	r5, #0
 800255a:	4606      	mov	r6, r0
 800255c:	db01      	blt.n	8002562 <_malloc_r+0x1a>
 800255e:	42a9      	cmp	r1, r5
 8002560:	d903      	bls.n	800256a <_malloc_r+0x22>
 8002562:	230c      	movs	r3, #12
 8002564:	6033      	str	r3, [r6, #0]
 8002566:	2000      	movs	r0, #0
 8002568:	bd70      	pop	{r4, r5, r6, pc}
 800256a:	f000 fd77 	bl	800305c <__malloc_lock>
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <_malloc_r+0xac>)
 8002570:	6814      	ldr	r4, [r2, #0]
 8002572:	4621      	mov	r1, r4
 8002574:	b991      	cbnz	r1, 800259c <_malloc_r+0x54>
 8002576:	4c20      	ldr	r4, [pc, #128]	; (80025f8 <_malloc_r+0xb0>)
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	b91b      	cbnz	r3, 8002584 <_malloc_r+0x3c>
 800257c:	4630      	mov	r0, r6
 800257e:	f000 fb03 	bl	8002b88 <_sbrk_r>
 8002582:	6020      	str	r0, [r4, #0]
 8002584:	4629      	mov	r1, r5
 8002586:	4630      	mov	r0, r6
 8002588:	f000 fafe 	bl	8002b88 <_sbrk_r>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d124      	bne.n	80025da <_malloc_r+0x92>
 8002590:	230c      	movs	r3, #12
 8002592:	4630      	mov	r0, r6
 8002594:	6033      	str	r3, [r6, #0]
 8002596:	f000 fd62 	bl	800305e <__malloc_unlock>
 800259a:	e7e4      	b.n	8002566 <_malloc_r+0x1e>
 800259c:	680b      	ldr	r3, [r1, #0]
 800259e:	1b5b      	subs	r3, r3, r5
 80025a0:	d418      	bmi.n	80025d4 <_malloc_r+0x8c>
 80025a2:	2b0b      	cmp	r3, #11
 80025a4:	d90f      	bls.n	80025c6 <_malloc_r+0x7e>
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	18cc      	adds	r4, r1, r3
 80025aa:	50cd      	str	r5, [r1, r3]
 80025ac:	4630      	mov	r0, r6
 80025ae:	f000 fd56 	bl	800305e <__malloc_unlock>
 80025b2:	f104 000b 	add.w	r0, r4, #11
 80025b6:	1d23      	adds	r3, r4, #4
 80025b8:	f020 0007 	bic.w	r0, r0, #7
 80025bc:	1ac3      	subs	r3, r0, r3
 80025be:	d0d3      	beq.n	8002568 <_malloc_r+0x20>
 80025c0:	425a      	negs	r2, r3
 80025c2:	50e2      	str	r2, [r4, r3]
 80025c4:	e7d0      	b.n	8002568 <_malloc_r+0x20>
 80025c6:	684b      	ldr	r3, [r1, #4]
 80025c8:	428c      	cmp	r4, r1
 80025ca:	bf16      	itet	ne
 80025cc:	6063      	strne	r3, [r4, #4]
 80025ce:	6013      	streq	r3, [r2, #0]
 80025d0:	460c      	movne	r4, r1
 80025d2:	e7eb      	b.n	80025ac <_malloc_r+0x64>
 80025d4:	460c      	mov	r4, r1
 80025d6:	6849      	ldr	r1, [r1, #4]
 80025d8:	e7cc      	b.n	8002574 <_malloc_r+0x2c>
 80025da:	1cc4      	adds	r4, r0, #3
 80025dc:	f024 0403 	bic.w	r4, r4, #3
 80025e0:	42a0      	cmp	r0, r4
 80025e2:	d005      	beq.n	80025f0 <_malloc_r+0xa8>
 80025e4:	1a21      	subs	r1, r4, r0
 80025e6:	4630      	mov	r0, r6
 80025e8:	f000 face 	bl	8002b88 <_sbrk_r>
 80025ec:	3001      	adds	r0, #1
 80025ee:	d0cf      	beq.n	8002590 <_malloc_r+0x48>
 80025f0:	6025      	str	r5, [r4, #0]
 80025f2:	e7db      	b.n	80025ac <_malloc_r+0x64>
 80025f4:	20000094 	.word	0x20000094
 80025f8:	20000098 	.word	0x20000098

080025fc <__sfputc_r>:
 80025fc:	6893      	ldr	r3, [r2, #8]
 80025fe:	b410      	push	{r4}
 8002600:	3b01      	subs	r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	6093      	str	r3, [r2, #8]
 8002606:	da07      	bge.n	8002618 <__sfputc_r+0x1c>
 8002608:	6994      	ldr	r4, [r2, #24]
 800260a:	42a3      	cmp	r3, r4
 800260c:	db01      	blt.n	8002612 <__sfputc_r+0x16>
 800260e:	290a      	cmp	r1, #10
 8002610:	d102      	bne.n	8002618 <__sfputc_r+0x1c>
 8002612:	bc10      	pop	{r4}
 8002614:	f000 bb0c 	b.w	8002c30 <__swbuf_r>
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	1c58      	adds	r0, r3, #1
 800261c:	6010      	str	r0, [r2, #0]
 800261e:	7019      	strb	r1, [r3, #0]
 8002620:	4608      	mov	r0, r1
 8002622:	bc10      	pop	{r4}
 8002624:	4770      	bx	lr

08002626 <__sfputs_r>:
 8002626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002628:	4606      	mov	r6, r0
 800262a:	460f      	mov	r7, r1
 800262c:	4614      	mov	r4, r2
 800262e:	18d5      	adds	r5, r2, r3
 8002630:	42ac      	cmp	r4, r5
 8002632:	d101      	bne.n	8002638 <__sfputs_r+0x12>
 8002634:	2000      	movs	r0, #0
 8002636:	e007      	b.n	8002648 <__sfputs_r+0x22>
 8002638:	463a      	mov	r2, r7
 800263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800263e:	4630      	mov	r0, r6
 8002640:	f7ff ffdc 	bl	80025fc <__sfputc_r>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d1f3      	bne.n	8002630 <__sfputs_r+0xa>
 8002648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800264c <_vfiprintf_r>:
 800264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002650:	460c      	mov	r4, r1
 8002652:	b09d      	sub	sp, #116	; 0x74
 8002654:	4617      	mov	r7, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4606      	mov	r6, r0
 800265a:	b118      	cbz	r0, 8002664 <_vfiprintf_r+0x18>
 800265c:	6983      	ldr	r3, [r0, #24]
 800265e:	b90b      	cbnz	r3, 8002664 <_vfiprintf_r+0x18>
 8002660:	f7ff fee8 	bl	8002434 <__sinit>
 8002664:	4b7c      	ldr	r3, [pc, #496]	; (8002858 <_vfiprintf_r+0x20c>)
 8002666:	429c      	cmp	r4, r3
 8002668:	d158      	bne.n	800271c <_vfiprintf_r+0xd0>
 800266a:	6874      	ldr	r4, [r6, #4]
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	0718      	lsls	r0, r3, #28
 8002670:	d55e      	bpl.n	8002730 <_vfiprintf_r+0xe4>
 8002672:	6923      	ldr	r3, [r4, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <_vfiprintf_r+0xe4>
 8002678:	2300      	movs	r3, #0
 800267a:	9309      	str	r3, [sp, #36]	; 0x24
 800267c:	2320      	movs	r3, #32
 800267e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002682:	2330      	movs	r3, #48	; 0x30
 8002684:	f04f 0b01 	mov.w	fp, #1
 8002688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800268c:	9503      	str	r5, [sp, #12]
 800268e:	46b8      	mov	r8, r7
 8002690:	4645      	mov	r5, r8
 8002692:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002696:	b10b      	cbz	r3, 800269c <_vfiprintf_r+0x50>
 8002698:	2b25      	cmp	r3, #37	; 0x25
 800269a:	d154      	bne.n	8002746 <_vfiprintf_r+0xfa>
 800269c:	ebb8 0a07 	subs.w	sl, r8, r7
 80026a0:	d00b      	beq.n	80026ba <_vfiprintf_r+0x6e>
 80026a2:	4653      	mov	r3, sl
 80026a4:	463a      	mov	r2, r7
 80026a6:	4621      	mov	r1, r4
 80026a8:	4630      	mov	r0, r6
 80026aa:	f7ff ffbc 	bl	8002626 <__sfputs_r>
 80026ae:	3001      	adds	r0, #1
 80026b0:	f000 80c2 	beq.w	8002838 <_vfiprintf_r+0x1ec>
 80026b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026b6:	4453      	add	r3, sl
 80026b8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ba:	f898 3000 	ldrb.w	r3, [r8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80ba 	beq.w	8002838 <_vfiprintf_r+0x1ec>
 80026c4:	2300      	movs	r3, #0
 80026c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	9307      	str	r3, [sp, #28]
 80026d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026d6:	931a      	str	r3, [sp, #104]	; 0x68
 80026d8:	46a8      	mov	r8, r5
 80026da:	2205      	movs	r2, #5
 80026dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80026e0:	485e      	ldr	r0, [pc, #376]	; (800285c <_vfiprintf_r+0x210>)
 80026e2:	f000 fcad 	bl	8003040 <memchr>
 80026e6:	9b04      	ldr	r3, [sp, #16]
 80026e8:	bb78      	cbnz	r0, 800274a <_vfiprintf_r+0xfe>
 80026ea:	06d9      	lsls	r1, r3, #27
 80026ec:	bf44      	itt	mi
 80026ee:	2220      	movmi	r2, #32
 80026f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026f4:	071a      	lsls	r2, r3, #28
 80026f6:	bf44      	itt	mi
 80026f8:	222b      	movmi	r2, #43	; 0x2b
 80026fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026fe:	782a      	ldrb	r2, [r5, #0]
 8002700:	2a2a      	cmp	r2, #42	; 0x2a
 8002702:	d02a      	beq.n	800275a <_vfiprintf_r+0x10e>
 8002704:	46a8      	mov	r8, r5
 8002706:	2000      	movs	r0, #0
 8002708:	250a      	movs	r5, #10
 800270a:	9a07      	ldr	r2, [sp, #28]
 800270c:	4641      	mov	r1, r8
 800270e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002712:	3b30      	subs	r3, #48	; 0x30
 8002714:	2b09      	cmp	r3, #9
 8002716:	d969      	bls.n	80027ec <_vfiprintf_r+0x1a0>
 8002718:	b360      	cbz	r0, 8002774 <_vfiprintf_r+0x128>
 800271a:	e024      	b.n	8002766 <_vfiprintf_r+0x11a>
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <_vfiprintf_r+0x214>)
 800271e:	429c      	cmp	r4, r3
 8002720:	d101      	bne.n	8002726 <_vfiprintf_r+0xda>
 8002722:	68b4      	ldr	r4, [r6, #8]
 8002724:	e7a2      	b.n	800266c <_vfiprintf_r+0x20>
 8002726:	4b4f      	ldr	r3, [pc, #316]	; (8002864 <_vfiprintf_r+0x218>)
 8002728:	429c      	cmp	r4, r3
 800272a:	bf08      	it	eq
 800272c:	68f4      	ldreq	r4, [r6, #12]
 800272e:	e79d      	b.n	800266c <_vfiprintf_r+0x20>
 8002730:	4621      	mov	r1, r4
 8002732:	4630      	mov	r0, r6
 8002734:	f000 fae0 	bl	8002cf8 <__swsetup_r>
 8002738:	2800      	cmp	r0, #0
 800273a:	d09d      	beq.n	8002678 <_vfiprintf_r+0x2c>
 800273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002740:	b01d      	add	sp, #116	; 0x74
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	46a8      	mov	r8, r5
 8002748:	e7a2      	b.n	8002690 <_vfiprintf_r+0x44>
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <_vfiprintf_r+0x210>)
 800274c:	4645      	mov	r5, r8
 800274e:	1a80      	subs	r0, r0, r2
 8002750:	fa0b f000 	lsl.w	r0, fp, r0
 8002754:	4318      	orrs	r0, r3
 8002756:	9004      	str	r0, [sp, #16]
 8002758:	e7be      	b.n	80026d8 <_vfiprintf_r+0x8c>
 800275a:	9a03      	ldr	r2, [sp, #12]
 800275c:	1d11      	adds	r1, r2, #4
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	9103      	str	r1, [sp, #12]
 8002762:	2a00      	cmp	r2, #0
 8002764:	db01      	blt.n	800276a <_vfiprintf_r+0x11e>
 8002766:	9207      	str	r2, [sp, #28]
 8002768:	e004      	b.n	8002774 <_vfiprintf_r+0x128>
 800276a:	4252      	negs	r2, r2
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	9207      	str	r2, [sp, #28]
 8002772:	9304      	str	r3, [sp, #16]
 8002774:	f898 3000 	ldrb.w	r3, [r8]
 8002778:	2b2e      	cmp	r3, #46	; 0x2e
 800277a:	d10e      	bne.n	800279a <_vfiprintf_r+0x14e>
 800277c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002780:	2b2a      	cmp	r3, #42	; 0x2a
 8002782:	d138      	bne.n	80027f6 <_vfiprintf_r+0x1aa>
 8002784:	9b03      	ldr	r3, [sp, #12]
 8002786:	f108 0802 	add.w	r8, r8, #2
 800278a:	1d1a      	adds	r2, r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	9203      	str	r2, [sp, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	bfb8      	it	lt
 8002794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002798:	9305      	str	r3, [sp, #20]
 800279a:	4d33      	ldr	r5, [pc, #204]	; (8002868 <_vfiprintf_r+0x21c>)
 800279c:	2203      	movs	r2, #3
 800279e:	f898 1000 	ldrb.w	r1, [r8]
 80027a2:	4628      	mov	r0, r5
 80027a4:	f000 fc4c 	bl	8003040 <memchr>
 80027a8:	b140      	cbz	r0, 80027bc <_vfiprintf_r+0x170>
 80027aa:	2340      	movs	r3, #64	; 0x40
 80027ac:	1b40      	subs	r0, r0, r5
 80027ae:	fa03 f000 	lsl.w	r0, r3, r0
 80027b2:	9b04      	ldr	r3, [sp, #16]
 80027b4:	f108 0801 	add.w	r8, r8, #1
 80027b8:	4303      	orrs	r3, r0
 80027ba:	9304      	str	r3, [sp, #16]
 80027bc:	f898 1000 	ldrb.w	r1, [r8]
 80027c0:	2206      	movs	r2, #6
 80027c2:	482a      	ldr	r0, [pc, #168]	; (800286c <_vfiprintf_r+0x220>)
 80027c4:	f108 0701 	add.w	r7, r8, #1
 80027c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027cc:	f000 fc38 	bl	8003040 <memchr>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d037      	beq.n	8002844 <_vfiprintf_r+0x1f8>
 80027d4:	4b26      	ldr	r3, [pc, #152]	; (8002870 <_vfiprintf_r+0x224>)
 80027d6:	bb1b      	cbnz	r3, 8002820 <_vfiprintf_r+0x1d4>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	3307      	adds	r3, #7
 80027dc:	f023 0307 	bic.w	r3, r3, #7
 80027e0:	3308      	adds	r3, #8
 80027e2:	9303      	str	r3, [sp, #12]
 80027e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027e6:	444b      	add	r3, r9
 80027e8:	9309      	str	r3, [sp, #36]	; 0x24
 80027ea:	e750      	b.n	800268e <_vfiprintf_r+0x42>
 80027ec:	fb05 3202 	mla	r2, r5, r2, r3
 80027f0:	2001      	movs	r0, #1
 80027f2:	4688      	mov	r8, r1
 80027f4:	e78a      	b.n	800270c <_vfiprintf_r+0xc0>
 80027f6:	2300      	movs	r3, #0
 80027f8:	250a      	movs	r5, #10
 80027fa:	4619      	mov	r1, r3
 80027fc:	f108 0801 	add.w	r8, r8, #1
 8002800:	9305      	str	r3, [sp, #20]
 8002802:	4640      	mov	r0, r8
 8002804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002808:	3a30      	subs	r2, #48	; 0x30
 800280a:	2a09      	cmp	r2, #9
 800280c:	d903      	bls.n	8002816 <_vfiprintf_r+0x1ca>
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0c3      	beq.n	800279a <_vfiprintf_r+0x14e>
 8002812:	9105      	str	r1, [sp, #20]
 8002814:	e7c1      	b.n	800279a <_vfiprintf_r+0x14e>
 8002816:	fb05 2101 	mla	r1, r5, r1, r2
 800281a:	2301      	movs	r3, #1
 800281c:	4680      	mov	r8, r0
 800281e:	e7f0      	b.n	8002802 <_vfiprintf_r+0x1b6>
 8002820:	ab03      	add	r3, sp, #12
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	4622      	mov	r2, r4
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <_vfiprintf_r+0x228>)
 8002828:	a904      	add	r1, sp, #16
 800282a:	4630      	mov	r0, r6
 800282c:	f3af 8000 	nop.w
 8002830:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002834:	4681      	mov	r9, r0
 8002836:	d1d5      	bne.n	80027e4 <_vfiprintf_r+0x198>
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	065b      	lsls	r3, r3, #25
 800283c:	f53f af7e 	bmi.w	800273c <_vfiprintf_r+0xf0>
 8002840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002842:	e77d      	b.n	8002740 <_vfiprintf_r+0xf4>
 8002844:	ab03      	add	r3, sp, #12
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4622      	mov	r2, r4
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <_vfiprintf_r+0x228>)
 800284c:	a904      	add	r1, sp, #16
 800284e:	4630      	mov	r0, r6
 8002850:	f000 f888 	bl	8002964 <_printf_i>
 8002854:	e7ec      	b.n	8002830 <_vfiprintf_r+0x1e4>
 8002856:	bf00      	nop
 8002858:	080031d4 	.word	0x080031d4
 800285c:	08003214 	.word	0x08003214
 8002860:	080031f4 	.word	0x080031f4
 8002864:	080031b4 	.word	0x080031b4
 8002868:	0800321a 	.word	0x0800321a
 800286c:	0800321e 	.word	0x0800321e
 8002870:	00000000 	.word	0x00000000
 8002874:	08002627 	.word	0x08002627

08002878 <_printf_common>:
 8002878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287c:	4691      	mov	r9, r2
 800287e:	461f      	mov	r7, r3
 8002880:	688a      	ldr	r2, [r1, #8]
 8002882:	690b      	ldr	r3, [r1, #16]
 8002884:	4606      	mov	r6, r0
 8002886:	4293      	cmp	r3, r2
 8002888:	bfb8      	it	lt
 800288a:	4613      	movlt	r3, r2
 800288c:	f8c9 3000 	str.w	r3, [r9]
 8002890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002894:	460c      	mov	r4, r1
 8002896:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800289a:	b112      	cbz	r2, 80028a2 <_printf_common+0x2a>
 800289c:	3301      	adds	r3, #1
 800289e:	f8c9 3000 	str.w	r3, [r9]
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	0699      	lsls	r1, r3, #26
 80028a6:	bf42      	ittt	mi
 80028a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028ac:	3302      	addmi	r3, #2
 80028ae:	f8c9 3000 	strmi.w	r3, [r9]
 80028b2:	6825      	ldr	r5, [r4, #0]
 80028b4:	f015 0506 	ands.w	r5, r5, #6
 80028b8:	d107      	bne.n	80028ca <_printf_common+0x52>
 80028ba:	f104 0a19 	add.w	sl, r4, #25
 80028be:	68e3      	ldr	r3, [r4, #12]
 80028c0:	f8d9 2000 	ldr.w	r2, [r9]
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	42ab      	cmp	r3, r5
 80028c8:	dc29      	bgt.n	800291e <_printf_common+0xa6>
 80028ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	3300      	adds	r3, #0
 80028d2:	bf18      	it	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	0692      	lsls	r2, r2, #26
 80028d8:	d42e      	bmi.n	8002938 <_printf_common+0xc0>
 80028da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028de:	4639      	mov	r1, r7
 80028e0:	4630      	mov	r0, r6
 80028e2:	47c0      	blx	r8
 80028e4:	3001      	adds	r0, #1
 80028e6:	d021      	beq.n	800292c <_printf_common+0xb4>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	68e5      	ldr	r5, [r4, #12]
 80028ec:	f003 0306 	and.w	r3, r3, #6
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	bf18      	it	ne
 80028f4:	2500      	movne	r5, #0
 80028f6:	f8d9 2000 	ldr.w	r2, [r9]
 80028fa:	f04f 0900 	mov.w	r9, #0
 80028fe:	bf08      	it	eq
 8002900:	1aad      	subeq	r5, r5, r2
 8002902:	68a3      	ldr	r3, [r4, #8]
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	bf08      	it	eq
 8002908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800290c:	4293      	cmp	r3, r2
 800290e:	bfc4      	itt	gt
 8002910:	1a9b      	subgt	r3, r3, r2
 8002912:	18ed      	addgt	r5, r5, r3
 8002914:	341a      	adds	r4, #26
 8002916:	454d      	cmp	r5, r9
 8002918:	d11a      	bne.n	8002950 <_printf_common+0xd8>
 800291a:	2000      	movs	r0, #0
 800291c:	e008      	b.n	8002930 <_printf_common+0xb8>
 800291e:	2301      	movs	r3, #1
 8002920:	4652      	mov	r2, sl
 8002922:	4639      	mov	r1, r7
 8002924:	4630      	mov	r0, r6
 8002926:	47c0      	blx	r8
 8002928:	3001      	adds	r0, #1
 800292a:	d103      	bne.n	8002934 <_printf_common+0xbc>
 800292c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002934:	3501      	adds	r5, #1
 8002936:	e7c2      	b.n	80028be <_printf_common+0x46>
 8002938:	2030      	movs	r0, #48	; 0x30
 800293a:	18e1      	adds	r1, r4, r3
 800293c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002946:	4422      	add	r2, r4
 8002948:	3302      	adds	r3, #2
 800294a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800294e:	e7c4      	b.n	80028da <_printf_common+0x62>
 8002950:	2301      	movs	r3, #1
 8002952:	4622      	mov	r2, r4
 8002954:	4639      	mov	r1, r7
 8002956:	4630      	mov	r0, r6
 8002958:	47c0      	blx	r8
 800295a:	3001      	adds	r0, #1
 800295c:	d0e6      	beq.n	800292c <_printf_common+0xb4>
 800295e:	f109 0901 	add.w	r9, r9, #1
 8002962:	e7d8      	b.n	8002916 <_printf_common+0x9e>

08002964 <_printf_i>:
 8002964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002968:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800296c:	460c      	mov	r4, r1
 800296e:	7e09      	ldrb	r1, [r1, #24]
 8002970:	b085      	sub	sp, #20
 8002972:	296e      	cmp	r1, #110	; 0x6e
 8002974:	4617      	mov	r7, r2
 8002976:	4606      	mov	r6, r0
 8002978:	4698      	mov	r8, r3
 800297a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800297c:	f000 80b3 	beq.w	8002ae6 <_printf_i+0x182>
 8002980:	d822      	bhi.n	80029c8 <_printf_i+0x64>
 8002982:	2963      	cmp	r1, #99	; 0x63
 8002984:	d036      	beq.n	80029f4 <_printf_i+0x90>
 8002986:	d80a      	bhi.n	800299e <_printf_i+0x3a>
 8002988:	2900      	cmp	r1, #0
 800298a:	f000 80b9 	beq.w	8002b00 <_printf_i+0x19c>
 800298e:	2958      	cmp	r1, #88	; 0x58
 8002990:	f000 8083 	beq.w	8002a9a <_printf_i+0x136>
 8002994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002998:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800299c:	e032      	b.n	8002a04 <_printf_i+0xa0>
 800299e:	2964      	cmp	r1, #100	; 0x64
 80029a0:	d001      	beq.n	80029a6 <_printf_i+0x42>
 80029a2:	2969      	cmp	r1, #105	; 0x69
 80029a4:	d1f6      	bne.n	8002994 <_printf_i+0x30>
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	0605      	lsls	r5, r0, #24
 80029ac:	f103 0104 	add.w	r1, r3, #4
 80029b0:	d52a      	bpl.n	8002a08 <_printf_i+0xa4>
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6011      	str	r1, [r2, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da03      	bge.n	80029c2 <_printf_i+0x5e>
 80029ba:	222d      	movs	r2, #45	; 0x2d
 80029bc:	425b      	negs	r3, r3
 80029be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80029c2:	486f      	ldr	r0, [pc, #444]	; (8002b80 <_printf_i+0x21c>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	e039      	b.n	8002a3c <_printf_i+0xd8>
 80029c8:	2973      	cmp	r1, #115	; 0x73
 80029ca:	f000 809d 	beq.w	8002b08 <_printf_i+0x1a4>
 80029ce:	d808      	bhi.n	80029e2 <_printf_i+0x7e>
 80029d0:	296f      	cmp	r1, #111	; 0x6f
 80029d2:	d020      	beq.n	8002a16 <_printf_i+0xb2>
 80029d4:	2970      	cmp	r1, #112	; 0x70
 80029d6:	d1dd      	bne.n	8002994 <_printf_i+0x30>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f043 0320 	orr.w	r3, r3, #32
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	e003      	b.n	80029ea <_printf_i+0x86>
 80029e2:	2975      	cmp	r1, #117	; 0x75
 80029e4:	d017      	beq.n	8002a16 <_printf_i+0xb2>
 80029e6:	2978      	cmp	r1, #120	; 0x78
 80029e8:	d1d4      	bne.n	8002994 <_printf_i+0x30>
 80029ea:	2378      	movs	r3, #120	; 0x78
 80029ec:	4865      	ldr	r0, [pc, #404]	; (8002b84 <_printf_i+0x220>)
 80029ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029f2:	e055      	b.n	8002aa0 <_printf_i+0x13c>
 80029f4:	6813      	ldr	r3, [r2, #0]
 80029f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029fa:	1d19      	adds	r1, r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6011      	str	r1, [r2, #0]
 8002a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a04:	2301      	movs	r3, #1
 8002a06:	e08c      	b.n	8002b22 <_printf_i+0x1be>
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a0e:	6011      	str	r1, [r2, #0]
 8002a10:	bf18      	it	ne
 8002a12:	b21b      	sxthne	r3, r3
 8002a14:	e7cf      	b.n	80029b6 <_printf_i+0x52>
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	6825      	ldr	r5, [r4, #0]
 8002a1a:	1d18      	adds	r0, r3, #4
 8002a1c:	6010      	str	r0, [r2, #0]
 8002a1e:	0628      	lsls	r0, r5, #24
 8002a20:	d501      	bpl.n	8002a26 <_printf_i+0xc2>
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	e002      	b.n	8002a2c <_printf_i+0xc8>
 8002a26:	0668      	lsls	r0, r5, #25
 8002a28:	d5fb      	bpl.n	8002a22 <_printf_i+0xbe>
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	296f      	cmp	r1, #111	; 0x6f
 8002a2e:	bf14      	ite	ne
 8002a30:	220a      	movne	r2, #10
 8002a32:	2208      	moveq	r2, #8
 8002a34:	4852      	ldr	r0, [pc, #328]	; (8002b80 <_printf_i+0x21c>)
 8002a36:	2100      	movs	r1, #0
 8002a38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a3c:	6865      	ldr	r5, [r4, #4]
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	60a5      	str	r5, [r4, #8]
 8002a42:	f2c0 8095 	blt.w	8002b70 <_printf_i+0x20c>
 8002a46:	6821      	ldr	r1, [r4, #0]
 8002a48:	f021 0104 	bic.w	r1, r1, #4
 8002a4c:	6021      	str	r1, [r4, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d13d      	bne.n	8002ace <_printf_i+0x16a>
 8002a52:	2d00      	cmp	r5, #0
 8002a54:	f040 808e 	bne.w	8002b74 <_printf_i+0x210>
 8002a58:	4665      	mov	r5, ip
 8002a5a:	2a08      	cmp	r2, #8
 8002a5c:	d10b      	bne.n	8002a76 <_printf_i+0x112>
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	07db      	lsls	r3, r3, #31
 8002a62:	d508      	bpl.n	8002a76 <_printf_i+0x112>
 8002a64:	6923      	ldr	r3, [r4, #16]
 8002a66:	6862      	ldr	r2, [r4, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	bfde      	ittt	le
 8002a6c:	2330      	movle	r3, #48	; 0x30
 8002a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a72:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a76:	ebac 0305 	sub.w	r3, ip, r5
 8002a7a:	6123      	str	r3, [r4, #16]
 8002a7c:	f8cd 8000 	str.w	r8, [sp]
 8002a80:	463b      	mov	r3, r7
 8002a82:	aa03      	add	r2, sp, #12
 8002a84:	4621      	mov	r1, r4
 8002a86:	4630      	mov	r0, r6
 8002a88:	f7ff fef6 	bl	8002878 <_printf_common>
 8002a8c:	3001      	adds	r0, #1
 8002a8e:	d14d      	bne.n	8002b2c <_printf_i+0x1c8>
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a94:	b005      	add	sp, #20
 8002a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a9a:	4839      	ldr	r0, [pc, #228]	; (8002b80 <_printf_i+0x21c>)
 8002a9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	6821      	ldr	r1, [r4, #0]
 8002aa4:	1d1d      	adds	r5, r3, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6015      	str	r5, [r2, #0]
 8002aaa:	060a      	lsls	r2, r1, #24
 8002aac:	d50b      	bpl.n	8002ac6 <_printf_i+0x162>
 8002aae:	07ca      	lsls	r2, r1, #31
 8002ab0:	bf44      	itt	mi
 8002ab2:	f041 0120 	orrmi.w	r1, r1, #32
 8002ab6:	6021      	strmi	r1, [r4, #0]
 8002ab8:	b91b      	cbnz	r3, 8002ac2 <_printf_i+0x15e>
 8002aba:	6822      	ldr	r2, [r4, #0]
 8002abc:	f022 0220 	bic.w	r2, r2, #32
 8002ac0:	6022      	str	r2, [r4, #0]
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	e7b7      	b.n	8002a36 <_printf_i+0xd2>
 8002ac6:	064d      	lsls	r5, r1, #25
 8002ac8:	bf48      	it	mi
 8002aca:	b29b      	uxthmi	r3, r3
 8002acc:	e7ef      	b.n	8002aae <_printf_i+0x14a>
 8002ace:	4665      	mov	r5, ip
 8002ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ad4:	fb02 3311 	mls	r3, r2, r1, r3
 8002ad8:	5cc3      	ldrb	r3, [r0, r3]
 8002ada:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002ade:	460b      	mov	r3, r1
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d1f5      	bne.n	8002ad0 <_printf_i+0x16c>
 8002ae4:	e7b9      	b.n	8002a5a <_printf_i+0xf6>
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	6825      	ldr	r5, [r4, #0]
 8002aea:	1d18      	adds	r0, r3, #4
 8002aec:	6961      	ldr	r1, [r4, #20]
 8002aee:	6010      	str	r0, [r2, #0]
 8002af0:	0628      	lsls	r0, r5, #24
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	d501      	bpl.n	8002afa <_printf_i+0x196>
 8002af6:	6019      	str	r1, [r3, #0]
 8002af8:	e002      	b.n	8002b00 <_printf_i+0x19c>
 8002afa:	066a      	lsls	r2, r5, #25
 8002afc:	d5fb      	bpl.n	8002af6 <_printf_i+0x192>
 8002afe:	8019      	strh	r1, [r3, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	4665      	mov	r5, ip
 8002b04:	6123      	str	r3, [r4, #16]
 8002b06:	e7b9      	b.n	8002a7c <_printf_i+0x118>
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	1d19      	adds	r1, r3, #4
 8002b0c:	6011      	str	r1, [r2, #0]
 8002b0e:	681d      	ldr	r5, [r3, #0]
 8002b10:	6862      	ldr	r2, [r4, #4]
 8002b12:	2100      	movs	r1, #0
 8002b14:	4628      	mov	r0, r5
 8002b16:	f000 fa93 	bl	8003040 <memchr>
 8002b1a:	b108      	cbz	r0, 8002b20 <_printf_i+0x1bc>
 8002b1c:	1b40      	subs	r0, r0, r5
 8002b1e:	6060      	str	r0, [r4, #4]
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	6123      	str	r3, [r4, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b2a:	e7a7      	b.n	8002a7c <_printf_i+0x118>
 8002b2c:	6923      	ldr	r3, [r4, #16]
 8002b2e:	462a      	mov	r2, r5
 8002b30:	4639      	mov	r1, r7
 8002b32:	4630      	mov	r0, r6
 8002b34:	47c0      	blx	r8
 8002b36:	3001      	adds	r0, #1
 8002b38:	d0aa      	beq.n	8002a90 <_printf_i+0x12c>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	079b      	lsls	r3, r3, #30
 8002b3e:	d413      	bmi.n	8002b68 <_printf_i+0x204>
 8002b40:	68e0      	ldr	r0, [r4, #12]
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	4298      	cmp	r0, r3
 8002b46:	bfb8      	it	lt
 8002b48:	4618      	movlt	r0, r3
 8002b4a:	e7a3      	b.n	8002a94 <_printf_i+0x130>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	464a      	mov	r2, r9
 8002b50:	4639      	mov	r1, r7
 8002b52:	4630      	mov	r0, r6
 8002b54:	47c0      	blx	r8
 8002b56:	3001      	adds	r0, #1
 8002b58:	d09a      	beq.n	8002a90 <_printf_i+0x12c>
 8002b5a:	3501      	adds	r5, #1
 8002b5c:	68e3      	ldr	r3, [r4, #12]
 8002b5e:	9a03      	ldr	r2, [sp, #12]
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	42ab      	cmp	r3, r5
 8002b64:	dcf2      	bgt.n	8002b4c <_printf_i+0x1e8>
 8002b66:	e7eb      	b.n	8002b40 <_printf_i+0x1dc>
 8002b68:	2500      	movs	r5, #0
 8002b6a:	f104 0919 	add.w	r9, r4, #25
 8002b6e:	e7f5      	b.n	8002b5c <_printf_i+0x1f8>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ac      	bne.n	8002ace <_printf_i+0x16a>
 8002b74:	7803      	ldrb	r3, [r0, #0]
 8002b76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b7e:	e76c      	b.n	8002a5a <_printf_i+0xf6>
 8002b80:	08003225 	.word	0x08003225
 8002b84:	08003236 	.word	0x08003236

08002b88 <_sbrk_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	4c05      	ldr	r4, [pc, #20]	; (8002ba4 <_sbrk_r+0x1c>)
 8002b8e:	4605      	mov	r5, r0
 8002b90:	4608      	mov	r0, r1
 8002b92:	6023      	str	r3, [r4, #0]
 8002b94:	f7fd fe3e 	bl	8000814 <_sbrk>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk_r+0x1a>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_sbrk_r+0x1a>
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	20000128 	.word	0x20000128

08002ba8 <__sread>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	460c      	mov	r4, r1
 8002bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb0:	f000 faa2 	bl	80030f8 <_read_r>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	bfab      	itete	ge
 8002bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bba:	89a3      	ldrhlt	r3, [r4, #12]
 8002bbc:	181b      	addge	r3, r3, r0
 8002bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bc2:	bfac      	ite	ge
 8002bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bc6:	81a3      	strhlt	r3, [r4, #12]
 8002bc8:	bd10      	pop	{r4, pc}

08002bca <__swrite>:
 8002bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bce:	461f      	mov	r7, r3
 8002bd0:	898b      	ldrh	r3, [r1, #12]
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	05db      	lsls	r3, r3, #23
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	4616      	mov	r6, r2
 8002bda:	d505      	bpl.n	8002be8 <__swrite+0x1e>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be4:	f000 f9b6 	bl	8002f54 <_lseek_r>
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	4632      	mov	r2, r6
 8002bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bf0:	81a3      	strh	r3, [r4, #12]
 8002bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfe:	f000 b869 	b.w	8002cd4 <_write_r>

08002c02 <__sseek>:
 8002c02:	b510      	push	{r4, lr}
 8002c04:	460c      	mov	r4, r1
 8002c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0a:	f000 f9a3 	bl	8002f54 <_lseek_r>
 8002c0e:	1c43      	adds	r3, r0, #1
 8002c10:	89a3      	ldrh	r3, [r4, #12]
 8002c12:	bf15      	itete	ne
 8002c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c1e:	81a3      	strheq	r3, [r4, #12]
 8002c20:	bf18      	it	ne
 8002c22:	81a3      	strhne	r3, [r4, #12]
 8002c24:	bd10      	pop	{r4, pc}

08002c26 <__sclose>:
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 b8d3 	b.w	8002dd4 <_close_r>
	...

08002c30 <__swbuf_r>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	460e      	mov	r6, r1
 8002c34:	4614      	mov	r4, r2
 8002c36:	4605      	mov	r5, r0
 8002c38:	b118      	cbz	r0, 8002c42 <__swbuf_r+0x12>
 8002c3a:	6983      	ldr	r3, [r0, #24]
 8002c3c:	b90b      	cbnz	r3, 8002c42 <__swbuf_r+0x12>
 8002c3e:	f7ff fbf9 	bl	8002434 <__sinit>
 8002c42:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <__swbuf_r+0x98>)
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d12a      	bne.n	8002c9e <__swbuf_r+0x6e>
 8002c48:	686c      	ldr	r4, [r5, #4]
 8002c4a:	69a3      	ldr	r3, [r4, #24]
 8002c4c:	60a3      	str	r3, [r4, #8]
 8002c4e:	89a3      	ldrh	r3, [r4, #12]
 8002c50:	071a      	lsls	r2, r3, #28
 8002c52:	d52e      	bpl.n	8002cb2 <__swbuf_r+0x82>
 8002c54:	6923      	ldr	r3, [r4, #16]
 8002c56:	b363      	cbz	r3, 8002cb2 <__swbuf_r+0x82>
 8002c58:	6923      	ldr	r3, [r4, #16]
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	b2f6      	uxtb	r6, r6
 8002c5e:	1ac0      	subs	r0, r0, r3
 8002c60:	6963      	ldr	r3, [r4, #20]
 8002c62:	4637      	mov	r7, r6
 8002c64:	4283      	cmp	r3, r0
 8002c66:	dc04      	bgt.n	8002c72 <__swbuf_r+0x42>
 8002c68:	4621      	mov	r1, r4
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f000 f948 	bl	8002f00 <_fflush_r>
 8002c70:	bb28      	cbnz	r0, 8002cbe <__swbuf_r+0x8e>
 8002c72:	68a3      	ldr	r3, [r4, #8]
 8002c74:	3001      	adds	r0, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60a3      	str	r3, [r4, #8]
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	6022      	str	r2, [r4, #0]
 8002c80:	701e      	strb	r6, [r3, #0]
 8002c82:	6963      	ldr	r3, [r4, #20]
 8002c84:	4283      	cmp	r3, r0
 8002c86:	d004      	beq.n	8002c92 <__swbuf_r+0x62>
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	07db      	lsls	r3, r3, #31
 8002c8c:	d519      	bpl.n	8002cc2 <__swbuf_r+0x92>
 8002c8e:	2e0a      	cmp	r6, #10
 8002c90:	d117      	bne.n	8002cc2 <__swbuf_r+0x92>
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 f933 	bl	8002f00 <_fflush_r>
 8002c9a:	b190      	cbz	r0, 8002cc2 <__swbuf_r+0x92>
 8002c9c:	e00f      	b.n	8002cbe <__swbuf_r+0x8e>
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <__swbuf_r+0x9c>)
 8002ca0:	429c      	cmp	r4, r3
 8002ca2:	d101      	bne.n	8002ca8 <__swbuf_r+0x78>
 8002ca4:	68ac      	ldr	r4, [r5, #8]
 8002ca6:	e7d0      	b.n	8002c4a <__swbuf_r+0x1a>
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <__swbuf_r+0xa0>)
 8002caa:	429c      	cmp	r4, r3
 8002cac:	bf08      	it	eq
 8002cae:	68ec      	ldreq	r4, [r5, #12]
 8002cb0:	e7cb      	b.n	8002c4a <__swbuf_r+0x1a>
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f000 f81f 	bl	8002cf8 <__swsetup_r>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d0cc      	beq.n	8002c58 <__swbuf_r+0x28>
 8002cbe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	080031d4 	.word	0x080031d4
 8002ccc:	080031f4 	.word	0x080031f4
 8002cd0:	080031b4 	.word	0x080031b4

08002cd4 <_write_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4c05      	ldr	r4, [pc, #20]	; (8002cf4 <_write_r+0x20>)
 8002ce0:	6022      	str	r2, [r4, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f7fd fa9e 	bl	8000224 <_write>
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d102      	bne.n	8002cf2 <_write_r+0x1e>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	b103      	cbz	r3, 8002cf2 <_write_r+0x1e>
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	bd38      	pop	{r3, r4, r5, pc}
 8002cf4:	20000128 	.word	0x20000128

08002cf8 <__swsetup_r>:
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <__swsetup_r+0xcc>)
 8002cfa:	b570      	push	{r4, r5, r6, lr}
 8002cfc:	681d      	ldr	r5, [r3, #0]
 8002cfe:	4606      	mov	r6, r0
 8002d00:	460c      	mov	r4, r1
 8002d02:	b125      	cbz	r5, 8002d0e <__swsetup_r+0x16>
 8002d04:	69ab      	ldr	r3, [r5, #24]
 8002d06:	b913      	cbnz	r3, 8002d0e <__swsetup_r+0x16>
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7ff fb93 	bl	8002434 <__sinit>
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <__swsetup_r+0xd0>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d10f      	bne.n	8002d34 <__swsetup_r+0x3c>
 8002d14:	686c      	ldr	r4, [r5, #4]
 8002d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	0715      	lsls	r5, r2, #28
 8002d1e:	d42c      	bmi.n	8002d7a <__swsetup_r+0x82>
 8002d20:	06d0      	lsls	r0, r2, #27
 8002d22:	d411      	bmi.n	8002d48 <__swsetup_r+0x50>
 8002d24:	2209      	movs	r2, #9
 8002d26:	6032      	str	r2, [r6, #0]
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d32:	e03e      	b.n	8002db2 <__swsetup_r+0xba>
 8002d34:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <__swsetup_r+0xd4>)
 8002d36:	429c      	cmp	r4, r3
 8002d38:	d101      	bne.n	8002d3e <__swsetup_r+0x46>
 8002d3a:	68ac      	ldr	r4, [r5, #8]
 8002d3c:	e7eb      	b.n	8002d16 <__swsetup_r+0x1e>
 8002d3e:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <__swsetup_r+0xd8>)
 8002d40:	429c      	cmp	r4, r3
 8002d42:	bf08      	it	eq
 8002d44:	68ec      	ldreq	r4, [r5, #12]
 8002d46:	e7e6      	b.n	8002d16 <__swsetup_r+0x1e>
 8002d48:	0751      	lsls	r1, r2, #29
 8002d4a:	d512      	bpl.n	8002d72 <__swsetup_r+0x7a>
 8002d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d4e:	b141      	cbz	r1, 8002d62 <__swsetup_r+0x6a>
 8002d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d54:	4299      	cmp	r1, r3
 8002d56:	d002      	beq.n	8002d5e <__swsetup_r+0x66>
 8002d58:	4630      	mov	r0, r6
 8002d5a:	f000 f981 	bl	8003060 <_free_r>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	6363      	str	r3, [r4, #52]	; 0x34
 8002d62:	89a3      	ldrh	r3, [r4, #12]
 8002d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	6063      	str	r3, [r4, #4]
 8002d6e:	6923      	ldr	r3, [r4, #16]
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	6923      	ldr	r3, [r4, #16]
 8002d7c:	b94b      	cbnz	r3, 8002d92 <__swsetup_r+0x9a>
 8002d7e:	89a3      	ldrh	r3, [r4, #12]
 8002d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d88:	d003      	beq.n	8002d92 <__swsetup_r+0x9a>
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	4630      	mov	r0, r6
 8002d8e:	f000 f917 	bl	8002fc0 <__smakebuf_r>
 8002d92:	89a2      	ldrh	r2, [r4, #12]
 8002d94:	f012 0301 	ands.w	r3, r2, #1
 8002d98:	d00c      	beq.n	8002db4 <__swsetup_r+0xbc>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60a3      	str	r3, [r4, #8]
 8002d9e:	6963      	ldr	r3, [r4, #20]
 8002da0:	425b      	negs	r3, r3
 8002da2:	61a3      	str	r3, [r4, #24]
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	b953      	cbnz	r3, 8002dbe <__swsetup_r+0xc6>
 8002da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002db0:	d1ba      	bne.n	8002d28 <__swsetup_r+0x30>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	0792      	lsls	r2, r2, #30
 8002db6:	bf58      	it	pl
 8002db8:	6963      	ldrpl	r3, [r4, #20]
 8002dba:	60a3      	str	r3, [r4, #8]
 8002dbc:	e7f2      	b.n	8002da4 <__swsetup_r+0xac>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7f7      	b.n	8002db2 <__swsetup_r+0xba>
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	080031d4 	.word	0x080031d4
 8002dcc:	080031f4 	.word	0x080031f4
 8002dd0:	080031b4 	.word	0x080031b4

08002dd4 <_close_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4c05      	ldr	r4, [pc, #20]	; (8002df0 <_close_r+0x1c>)
 8002dda:	4605      	mov	r5, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	6023      	str	r3, [r4, #0]
 8002de0:	f7fd fce7 	bl	80007b2 <_close>
 8002de4:	1c43      	adds	r3, r0, #1
 8002de6:	d102      	bne.n	8002dee <_close_r+0x1a>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	b103      	cbz	r3, 8002dee <_close_r+0x1a>
 8002dec:	602b      	str	r3, [r5, #0]
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	20000128 	.word	0x20000128

08002df4 <__sflush_r>:
 8002df4:	898a      	ldrh	r2, [r1, #12]
 8002df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	0710      	lsls	r0, r2, #28
 8002dfe:	460c      	mov	r4, r1
 8002e00:	d458      	bmi.n	8002eb4 <__sflush_r+0xc0>
 8002e02:	684b      	ldr	r3, [r1, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dc05      	bgt.n	8002e14 <__sflush_r+0x20>
 8002e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dc02      	bgt.n	8002e14 <__sflush_r+0x20>
 8002e0e:	2000      	movs	r0, #0
 8002e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e16:	2e00      	cmp	r6, #0
 8002e18:	d0f9      	beq.n	8002e0e <__sflush_r+0x1a>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e20:	682f      	ldr	r7, [r5, #0]
 8002e22:	6a21      	ldr	r1, [r4, #32]
 8002e24:	602b      	str	r3, [r5, #0]
 8002e26:	d032      	beq.n	8002e8e <__sflush_r+0x9a>
 8002e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	075a      	lsls	r2, r3, #29
 8002e2e:	d505      	bpl.n	8002e3c <__sflush_r+0x48>
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	1ac0      	subs	r0, r0, r3
 8002e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e36:	b10b      	cbz	r3, 8002e3c <__sflush_r+0x48>
 8002e38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e3a:	1ac0      	subs	r0, r0, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002e42:	6a21      	ldr	r1, [r4, #32]
 8002e44:	4628      	mov	r0, r5
 8002e46:	47b0      	blx	r6
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	d106      	bne.n	8002e5c <__sflush_r+0x68>
 8002e4e:	6829      	ldr	r1, [r5, #0]
 8002e50:	291d      	cmp	r1, #29
 8002e52:	d848      	bhi.n	8002ee6 <__sflush_r+0xf2>
 8002e54:	4a29      	ldr	r2, [pc, #164]	; (8002efc <__sflush_r+0x108>)
 8002e56:	40ca      	lsrs	r2, r1
 8002e58:	07d6      	lsls	r6, r2, #31
 8002e5a:	d544      	bpl.n	8002ee6 <__sflush_r+0xf2>
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	6062      	str	r2, [r4, #4]
 8002e60:	6922      	ldr	r2, [r4, #16]
 8002e62:	04d9      	lsls	r1, r3, #19
 8002e64:	6022      	str	r2, [r4, #0]
 8002e66:	d504      	bpl.n	8002e72 <__sflush_r+0x7e>
 8002e68:	1c42      	adds	r2, r0, #1
 8002e6a:	d101      	bne.n	8002e70 <__sflush_r+0x7c>
 8002e6c:	682b      	ldr	r3, [r5, #0]
 8002e6e:	b903      	cbnz	r3, 8002e72 <__sflush_r+0x7e>
 8002e70:	6560      	str	r0, [r4, #84]	; 0x54
 8002e72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e74:	602f      	str	r7, [r5, #0]
 8002e76:	2900      	cmp	r1, #0
 8002e78:	d0c9      	beq.n	8002e0e <__sflush_r+0x1a>
 8002e7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e7e:	4299      	cmp	r1, r3
 8002e80:	d002      	beq.n	8002e88 <__sflush_r+0x94>
 8002e82:	4628      	mov	r0, r5
 8002e84:	f000 f8ec 	bl	8003060 <_free_r>
 8002e88:	2000      	movs	r0, #0
 8002e8a:	6360      	str	r0, [r4, #52]	; 0x34
 8002e8c:	e7c0      	b.n	8002e10 <__sflush_r+0x1c>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4628      	mov	r0, r5
 8002e92:	47b0      	blx	r6
 8002e94:	1c41      	adds	r1, r0, #1
 8002e96:	d1c8      	bne.n	8002e2a <__sflush_r+0x36>
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0c5      	beq.n	8002e2a <__sflush_r+0x36>
 8002e9e:	2b1d      	cmp	r3, #29
 8002ea0:	d001      	beq.n	8002ea6 <__sflush_r+0xb2>
 8002ea2:	2b16      	cmp	r3, #22
 8002ea4:	d101      	bne.n	8002eaa <__sflush_r+0xb6>
 8002ea6:	602f      	str	r7, [r5, #0]
 8002ea8:	e7b1      	b.n	8002e0e <__sflush_r+0x1a>
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb0:	81a3      	strh	r3, [r4, #12]
 8002eb2:	e7ad      	b.n	8002e10 <__sflush_r+0x1c>
 8002eb4:	690f      	ldr	r7, [r1, #16]
 8002eb6:	2f00      	cmp	r7, #0
 8002eb8:	d0a9      	beq.n	8002e0e <__sflush_r+0x1a>
 8002eba:	0793      	lsls	r3, r2, #30
 8002ebc:	bf18      	it	ne
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	680e      	ldr	r6, [r1, #0]
 8002ec2:	bf08      	it	eq
 8002ec4:	694b      	ldreq	r3, [r1, #20]
 8002ec6:	eba6 0807 	sub.w	r8, r6, r7
 8002eca:	600f      	str	r7, [r1, #0]
 8002ecc:	608b      	str	r3, [r1, #8]
 8002ece:	f1b8 0f00 	cmp.w	r8, #0
 8002ed2:	dd9c      	ble.n	8002e0e <__sflush_r+0x1a>
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	463a      	mov	r2, r7
 8002ed8:	6a21      	ldr	r1, [r4, #32]
 8002eda:	4628      	mov	r0, r5
 8002edc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ede:	47b0      	blx	r6
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	dc06      	bgt.n	8002ef2 <__sflush_r+0xfe>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eea:	81a3      	strh	r3, [r4, #12]
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef0:	e78e      	b.n	8002e10 <__sflush_r+0x1c>
 8002ef2:	4407      	add	r7, r0
 8002ef4:	eba8 0800 	sub.w	r8, r8, r0
 8002ef8:	e7e9      	b.n	8002ece <__sflush_r+0xda>
 8002efa:	bf00      	nop
 8002efc:	20400001 	.word	0x20400001

08002f00 <_fflush_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	690b      	ldr	r3, [r1, #16]
 8002f04:	4605      	mov	r5, r0
 8002f06:	460c      	mov	r4, r1
 8002f08:	b1db      	cbz	r3, 8002f42 <_fflush_r+0x42>
 8002f0a:	b118      	cbz	r0, 8002f14 <_fflush_r+0x14>
 8002f0c:	6983      	ldr	r3, [r0, #24]
 8002f0e:	b90b      	cbnz	r3, 8002f14 <_fflush_r+0x14>
 8002f10:	f7ff fa90 	bl	8002434 <__sinit>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <_fflush_r+0x48>)
 8002f16:	429c      	cmp	r4, r3
 8002f18:	d109      	bne.n	8002f2e <_fflush_r+0x2e>
 8002f1a:	686c      	ldr	r4, [r5, #4]
 8002f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f20:	b17b      	cbz	r3, 8002f42 <_fflush_r+0x42>
 8002f22:	4621      	mov	r1, r4
 8002f24:	4628      	mov	r0, r5
 8002f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f2a:	f7ff bf63 	b.w	8002df4 <__sflush_r>
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <_fflush_r+0x4c>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	d101      	bne.n	8002f38 <_fflush_r+0x38>
 8002f34:	68ac      	ldr	r4, [r5, #8]
 8002f36:	e7f1      	b.n	8002f1c <_fflush_r+0x1c>
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <_fflush_r+0x50>)
 8002f3a:	429c      	cmp	r4, r3
 8002f3c:	bf08      	it	eq
 8002f3e:	68ec      	ldreq	r4, [r5, #12]
 8002f40:	e7ec      	b.n	8002f1c <_fflush_r+0x1c>
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
 8002f46:	bf00      	nop
 8002f48:	080031d4 	.word	0x080031d4
 8002f4c:	080031f4 	.word	0x080031f4
 8002f50:	080031b4 	.word	0x080031b4

08002f54 <_lseek_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4605      	mov	r5, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4c05      	ldr	r4, [pc, #20]	; (8002f74 <_lseek_r+0x20>)
 8002f60:	6022      	str	r2, [r4, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fd fc49 	bl	80007fa <_lseek>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_lseek_r+0x1e>
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_lseek_r+0x1e>
 8002f70:	602b      	str	r3, [r5, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	20000128 	.word	0x20000128

08002f78 <__swhatbuf_r>:
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	460e      	mov	r6, r1
 8002f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f80:	b096      	sub	sp, #88	; 0x58
 8002f82:	2900      	cmp	r1, #0
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	da07      	bge.n	8002f9a <__swhatbuf_r+0x22>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	602b      	str	r3, [r5, #0]
 8002f8e:	89b3      	ldrh	r3, [r6, #12]
 8002f90:	061a      	lsls	r2, r3, #24
 8002f92:	d410      	bmi.n	8002fb6 <__swhatbuf_r+0x3e>
 8002f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f98:	e00e      	b.n	8002fb8 <__swhatbuf_r+0x40>
 8002f9a:	466a      	mov	r2, sp
 8002f9c:	f000 f8be 	bl	800311c <_fstat_r>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	dbf2      	blt.n	8002f8a <__swhatbuf_r+0x12>
 8002fa4:	9a01      	ldr	r2, [sp, #4]
 8002fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002fae:	425a      	negs	r2, r3
 8002fb0:	415a      	adcs	r2, r3
 8002fb2:	602a      	str	r2, [r5, #0]
 8002fb4:	e7ee      	b.n	8002f94 <__swhatbuf_r+0x1c>
 8002fb6:	2340      	movs	r3, #64	; 0x40
 8002fb8:	2000      	movs	r0, #0
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	b016      	add	sp, #88	; 0x58
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}

08002fc0 <__smakebuf_r>:
 8002fc0:	898b      	ldrh	r3, [r1, #12]
 8002fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fc4:	079d      	lsls	r5, r3, #30
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	d507      	bpl.n	8002fdc <__smakebuf_r+0x1c>
 8002fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	6123      	str	r3, [r4, #16]
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	6163      	str	r3, [r4, #20]
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	ab01      	add	r3, sp, #4
 8002fde:	466a      	mov	r2, sp
 8002fe0:	f7ff ffca 	bl	8002f78 <__swhatbuf_r>
 8002fe4:	9900      	ldr	r1, [sp, #0]
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f7ff faad 	bl	8002548 <_malloc_r>
 8002fee:	b948      	cbnz	r0, 8003004 <__smakebuf_r+0x44>
 8002ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff4:	059a      	lsls	r2, r3, #22
 8002ff6:	d4ef      	bmi.n	8002fd8 <__smakebuf_r+0x18>
 8002ff8:	f023 0303 	bic.w	r3, r3, #3
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	81a3      	strh	r3, [r4, #12]
 8003002:	e7e3      	b.n	8002fcc <__smakebuf_r+0xc>
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <__smakebuf_r+0x7c>)
 8003006:	62b3      	str	r3, [r6, #40]	; 0x28
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	6020      	str	r0, [r4, #0]
 800300c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003010:	81a3      	strh	r3, [r4, #12]
 8003012:	9b00      	ldr	r3, [sp, #0]
 8003014:	6120      	str	r0, [r4, #16]
 8003016:	6163      	str	r3, [r4, #20]
 8003018:	9b01      	ldr	r3, [sp, #4]
 800301a:	b15b      	cbz	r3, 8003034 <__smakebuf_r+0x74>
 800301c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003020:	4630      	mov	r0, r6
 8003022:	f000 f88d 	bl	8003140 <_isatty_r>
 8003026:	b128      	cbz	r0, 8003034 <__smakebuf_r+0x74>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f023 0303 	bic.w	r3, r3, #3
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	81a3      	strh	r3, [r4, #12]
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	431d      	orrs	r5, r3
 8003038:	81a5      	strh	r5, [r4, #12]
 800303a:	e7cd      	b.n	8002fd8 <__smakebuf_r+0x18>
 800303c:	080023fd 	.word	0x080023fd

08003040 <memchr>:
 8003040:	b510      	push	{r4, lr}
 8003042:	b2c9      	uxtb	r1, r1
 8003044:	4402      	add	r2, r0
 8003046:	4290      	cmp	r0, r2
 8003048:	4603      	mov	r3, r0
 800304a:	d101      	bne.n	8003050 <memchr+0x10>
 800304c:	2300      	movs	r3, #0
 800304e:	e003      	b.n	8003058 <memchr+0x18>
 8003050:	781c      	ldrb	r4, [r3, #0]
 8003052:	3001      	adds	r0, #1
 8003054:	428c      	cmp	r4, r1
 8003056:	d1f6      	bne.n	8003046 <memchr+0x6>
 8003058:	4618      	mov	r0, r3
 800305a:	bd10      	pop	{r4, pc}

0800305c <__malloc_lock>:
 800305c:	4770      	bx	lr

0800305e <__malloc_unlock>:
 800305e:	4770      	bx	lr

08003060 <_free_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4605      	mov	r5, r0
 8003064:	2900      	cmp	r1, #0
 8003066:	d043      	beq.n	80030f0 <_free_r+0x90>
 8003068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800306c:	1f0c      	subs	r4, r1, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	bfb8      	it	lt
 8003072:	18e4      	addlt	r4, r4, r3
 8003074:	f7ff fff2 	bl	800305c <__malloc_lock>
 8003078:	4a1e      	ldr	r2, [pc, #120]	; (80030f4 <_free_r+0x94>)
 800307a:	6813      	ldr	r3, [r2, #0]
 800307c:	4610      	mov	r0, r2
 800307e:	b933      	cbnz	r3, 800308e <_free_r+0x2e>
 8003080:	6063      	str	r3, [r4, #4]
 8003082:	6014      	str	r4, [r2, #0]
 8003084:	4628      	mov	r0, r5
 8003086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800308a:	f7ff bfe8 	b.w	800305e <__malloc_unlock>
 800308e:	42a3      	cmp	r3, r4
 8003090:	d90b      	bls.n	80030aa <_free_r+0x4a>
 8003092:	6821      	ldr	r1, [r4, #0]
 8003094:	1862      	adds	r2, r4, r1
 8003096:	4293      	cmp	r3, r2
 8003098:	bf01      	itttt	eq
 800309a:	681a      	ldreq	r2, [r3, #0]
 800309c:	685b      	ldreq	r3, [r3, #4]
 800309e:	1852      	addeq	r2, r2, r1
 80030a0:	6022      	streq	r2, [r4, #0]
 80030a2:	6063      	str	r3, [r4, #4]
 80030a4:	6004      	str	r4, [r0, #0]
 80030a6:	e7ed      	b.n	8003084 <_free_r+0x24>
 80030a8:	4613      	mov	r3, r2
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	b10a      	cbz	r2, 80030b2 <_free_r+0x52>
 80030ae:	42a2      	cmp	r2, r4
 80030b0:	d9fa      	bls.n	80030a8 <_free_r+0x48>
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	1858      	adds	r0, r3, r1
 80030b6:	42a0      	cmp	r0, r4
 80030b8:	d10b      	bne.n	80030d2 <_free_r+0x72>
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	4401      	add	r1, r0
 80030be:	1858      	adds	r0, r3, r1
 80030c0:	4282      	cmp	r2, r0
 80030c2:	6019      	str	r1, [r3, #0]
 80030c4:	d1de      	bne.n	8003084 <_free_r+0x24>
 80030c6:	6810      	ldr	r0, [r2, #0]
 80030c8:	6852      	ldr	r2, [r2, #4]
 80030ca:	4401      	add	r1, r0
 80030cc:	6019      	str	r1, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	e7d8      	b.n	8003084 <_free_r+0x24>
 80030d2:	d902      	bls.n	80030da <_free_r+0x7a>
 80030d4:	230c      	movs	r3, #12
 80030d6:	602b      	str	r3, [r5, #0]
 80030d8:	e7d4      	b.n	8003084 <_free_r+0x24>
 80030da:	6820      	ldr	r0, [r4, #0]
 80030dc:	1821      	adds	r1, r4, r0
 80030de:	428a      	cmp	r2, r1
 80030e0:	bf01      	itttt	eq
 80030e2:	6811      	ldreq	r1, [r2, #0]
 80030e4:	6852      	ldreq	r2, [r2, #4]
 80030e6:	1809      	addeq	r1, r1, r0
 80030e8:	6021      	streq	r1, [r4, #0]
 80030ea:	6062      	str	r2, [r4, #4]
 80030ec:	605c      	str	r4, [r3, #4]
 80030ee:	e7c9      	b.n	8003084 <_free_r+0x24>
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
 80030f2:	bf00      	nop
 80030f4:	20000094 	.word	0x20000094

080030f8 <_read_r>:
 80030f8:	b538      	push	{r3, r4, r5, lr}
 80030fa:	4605      	mov	r5, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	2200      	movs	r2, #0
 8003102:	4c05      	ldr	r4, [pc, #20]	; (8003118 <_read_r+0x20>)
 8003104:	6022      	str	r2, [r4, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	f7fd fb36 	bl	8000778 <_read>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d102      	bne.n	8003116 <_read_r+0x1e>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	b103      	cbz	r3, 8003116 <_read_r+0x1e>
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	20000128 	.word	0x20000128

0800311c <_fstat_r>:
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	2300      	movs	r3, #0
 8003120:	4c06      	ldr	r4, [pc, #24]	; (800313c <_fstat_r+0x20>)
 8003122:	4605      	mov	r5, r0
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	f7fd fb4d 	bl	80007c8 <_fstat>
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	d102      	bne.n	8003138 <_fstat_r+0x1c>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	b103      	cbz	r3, 8003138 <_fstat_r+0x1c>
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	bd38      	pop	{r3, r4, r5, pc}
 800313a:	bf00      	nop
 800313c:	20000128 	.word	0x20000128

08003140 <_isatty_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	2300      	movs	r3, #0
 8003144:	4c05      	ldr	r4, [pc, #20]	; (800315c <_isatty_r+0x1c>)
 8003146:	4605      	mov	r5, r0
 8003148:	4608      	mov	r0, r1
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	f7fd fb4b 	bl	80007e6 <_isatty>
 8003150:	1c43      	adds	r3, r0, #1
 8003152:	d102      	bne.n	800315a <_isatty_r+0x1a>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	b103      	cbz	r3, 800315a <_isatty_r+0x1a>
 8003158:	602b      	str	r3, [r5, #0]
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	20000128 	.word	0x20000128

08003160 <_init>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	bf00      	nop
 8003164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003166:	bc08      	pop	{r3}
 8003168:	469e      	mov	lr, r3
 800316a:	4770      	bx	lr

0800316c <_fini>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr
